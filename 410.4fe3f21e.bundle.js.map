{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicHead.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepTopicName.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepPartitions.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepMessageRetention.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepReplicas.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicWizard.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/CreateTopicPage.tsx"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","Divider","StepTopicName","topicNameInput","setTopicNameInput","Stack","hasGutter","TextContent","Text","component","TextVariants","Form","onSubmit","event","preventDefault","FormGroup","fieldId","helperText","isRequired","TextInput","type","name","value","placeholder","StepPartitions","partitionTouchspinValue","setPartitionTouchspinValue","NumberInput","onPlus","onMinus","inputName","Number","target","widthChars","StepMessageRetention","RetentionOption","setMsgRetentionValue","currentPeriod","setCurrentPeriod","useState","msgTouchspinValue","setMsgTouchspinValue","isMsgSelectOpen","setIsMsgSelectOpen","selected","setSelected","retentionFactor","setRetentionFactor","useEffect","DAY","WEEK","MONTH","CUSTOM","handleMessageRetention","checked","Radio","Flex","FlexItem","Select","SelectVariant","onToggle","onSelect","selection","selections","isOpen","SelectOption","key","isPlaceholder","StepReplicas","ReplicationOption","setReplicationFactorTouchspinValue","setMinInSyncReplicaTouchspinValue","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","ONE","currentReplicationFactor","setCurrentReplicationFactor","handleChangeReplicationFactor","TWO","Alert","isInline","title","description","setIsCreateTopic","config","useContext","history","addAlert","msgRetentionValue","store","closeWizard","saveTopic","topic","settings","numPartitions","toString","basePath","accessToken","getToken","createTopic","then","res","status","AlertVariant","catch","err","response","data","steps","enableNext","trim","canJumpTo","nextButtonText","TopicAdvanceConfig","isCreate","handleCancel","push","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","CreateTopicPage"],"mappings":"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","file":"410.4fe3f21e.bundle.js","sourcesContent":["import {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Divider,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nexport interface ICreateTopicProps {\n  isSwitchChecked: boolean;\n  setIsSwitchChecked: (value: boolean) => void;\n}\n\nexport const CreateTopichead: React.FC<ICreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n}) => {\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='/openshiftstreams'>\n        Red Hat OpenShift Streams for Apache Kafka\n      </BreadcrumbItem>\n      <BreadcrumbItem to='/openshiftstreams'>\n        MK Cluster Instance\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        Create topic\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          Create topic\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label='Show all available options'\n          labelOff='Show all available options'\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n      <Divider />\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Form,\n  FormGroup,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepTopicName {\n  topicNameInput: string;\n  setTopicNameInput: (value: string) => void;\n}\n\nexport const StepTopicName: React.FC<IStepTopicName> = ({\n  topicNameInput,\n  setTopicNameInput,\n}) => {\n  const handleTopicNameChange = (topicNameInput) => {\n    setTopicNameInput(topicNameInput);\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Topic name</Text>\n        <Text component={TextVariants.p}>\n          Unique name used to recognize your topic\n        </Text>\n        <Text component={TextVariants.small}>\n          The topic name is also used by your producers and consumers as part of\n          the connection information, so make it something easy to recognize.\n        </Text>\n      </TextContent>\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          label='Topic name'\n          fieldId='step-topic-name-form'\n          helperText='Must be letters (Aa-Zz), numbers, underscores( _ ), or hyphens ( - ).'\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            aria-describedby='step-topic-name-helper'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder='Enter topic name'\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepPartitions {\n  setPartitionTouchspinValue: (value: number) => void;\n  partitionTouchspinValue: number;\n}\n\nexport const StepPartitions: React.FC<IStepPartitions> = ({\n  partitionTouchspinValue,\n  setPartitionTouchspinValue,\n}) => {\n  const handleOnPlus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue + 1);\n  };\n  const handleOnMinus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue - 1);\n  };\n  const handlePartitionTouchspinChange = (event) => {\n    setPartitionTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Partitions</Text>\n        <Text component={TextVariants.p}>An ordered list of messages</Text>\n        <Text component={TextVariants.small}>\n          One or more partitions make up a topic. Partitions are distributed\n          across the brokers to increase the salability of your topic. You can\n          also use them to distribute messages across the members of the\n          consumer group.\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText='One partition is sufficient for getting started, but production systems often have more.'\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={partitionTouchspinValue}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepMessageRetention {\n  setMsgRetentionValue: (value: number) => void;\n  currentPeriod: string | number;\n  setCurrentPeriod: (value: string | number) => void;\n}\n\nexport const StepMessageRetention: React.FC<IStepMessageRetention> = ({\n  setMsgRetentionValue,\n  currentPeriod,\n  setCurrentPeriod,\n}) => {\n  enum RetentionOption {\n    DAY = 1,\n    WEEK = 7,\n    MONTH = 30,\n    CUSTOM = 'custom',\n  }\n  const [msgTouchspinValue, setMsgTouchspinValue] = useState(7);\n  const [isMsgSelectOpen, setIsMsgSelectOpen] = useState(false);\n  const [selected, setSelected] = useState(false);\n  const [retentionFactor, setRetentionFactor] = useState(1);\n\n  useEffect(() => {\n    if (currentPeriod === RetentionOption.DAY) {\n      setMsgRetentionValue(RetentionOption.DAY * 86400000);\n    } else if (currentPeriod === RetentionOption.WEEK) {\n      setMsgRetentionValue(RetentionOption.WEEK * 86400000);\n    } else if (currentPeriod === RetentionOption.MONTH) {\n      setMsgRetentionValue(RetentionOption.MONTH * 86400000);\n    } else if (currentPeriod === RetentionOption.CUSTOM) {\n      setMsgRetentionValue(retentionFactor * msgTouchspinValue * 86400000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPeriod, msgTouchspinValue, retentionFactor]);\n\n  const handleMessageRetention = (checked, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radio1') {\n      setCurrentPeriod(RetentionOption.DAY);\n    } else if (name === 'radio2') {\n      setCurrentPeriod(RetentionOption.WEEK);\n    } else if (name === 'radio3') {\n      setCurrentPeriod(RetentionOption.MONTH);\n    } else if (name === 'radio4') {\n      setCurrentPeriod(RetentionOption.CUSTOM);\n    }\n  };\n\n  const onMsgToggle = (isMsgSelectOpen) => {\n    setIsMsgSelectOpen(isMsgSelectOpen);\n  };\n\n  const onMsgSelect = (event, selection) => {\n    if (selection === 'days') {\n      setRetentionFactor(RetentionOption.DAY);\n    } else if (selection === 'weeks') {\n      setRetentionFactor(RetentionOption.WEEK);\n    } else if (selection === 'months') {\n      setRetentionFactor(RetentionOption.MONTH);\n    }\n    setSelected(selection);\n    setIsMsgSelectOpen(false);\n  };\n\n  const handlePlusClick = () => {\n    setMsgTouchspinValue(msgTouchspinValue + 1);\n  };\n\n  const handleMinusClick = () => {\n    setMsgTouchspinValue(msgTouchspinValue - 1);\n  };\n\n  const handleMsgTouchSpinChange = (event) => {\n    setMsgTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n        <TextContent>\n          <Text component={TextVariants.h2}>Message retention</Text>\n          <Text component={TextVariants.p}>\n            How long messages are retained and the maximum total size of all log\n            segments in a partition before they are deleted to free up space\n          </Text>\n          <Text component={TextVariants.small}>\n            Messages that aren't read by a consumer within this time will be\n            missed. By default, a limit is only applied to retention time.\n          </Text>\n        </TextContent>\n\n        <Form onSubmit={preventFormSubmit}>\n          <FormGroup\n            fieldId='form-group-in-wizard'\n            label='Retention time'\n            // className='form-group-radio'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentPeriod === RetentionOption.DAY}\n                name='radio1'\n                onChange={handleMessageRetention}\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value='day'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionOption.WEEK}\n                name='radio2'\n                onChange={handleMessageRetention}\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value='week'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionOption.MONTH}\n                name='radio3'\n                onChange={handleMessageRetention}\n                label='A month'\n                aria-label='A month'\n                id='radio-controlled-3'\n                value='month'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionOption.CUSTOM}\n                name='radio4'\n                onChange={handleMessageRetention}\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleMinusClick}\n                      onPlus={handlePlusClick}\n                      value={msgTouchspinValue}\n                      onChange={handleMsgTouchSpinChange}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onMsgToggle}\n                      onSelect={onMsgSelect}\n                      selections={selected}\n                      isOpen={isMsgSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={0} value='days' isPlaceholder />\n                      <SelectOption key={1} value='weeks' />\n                      <SelectOption key={2} value='months' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n            </Stack>\n          </FormGroup>\n        </Form>\n      </Stack>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Alert,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepReplicas {\n  setReplicationFactorTouchspinValue: (value: number) => void;\n  setMinInSyncReplicaTouchspinValue: (value: number) => void;\n  replicationFactorTouchspinValue: number;\n  minInSyncReplicaTouchspinValue: number;\n}\n\nexport const StepReplicas: React.FC<IStepReplicas> = ({\n  setReplicationFactorTouchspinValue,\n  setMinInSyncReplicaTouchspinValue,\n  replicationFactorTouchspinValue,\n  minInSyncReplicaTouchspinValue,\n}) => {\n  enum ReplicationOption {\n    ONE = 1,\n    TWO = 2,\n    CUSTOM = 'custom',\n  }\n\n  const [\n    currentReplicationFactor,\n    setCurrentReplicationFactor,\n  ] = React.useState<string | number>(ReplicationOption.ONE);\n  const handleChangeReplicationFactor = (checked, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radio4') {\n      setCurrentReplicationFactor(ReplicationOption.ONE);\n      setMinInSyncReplicaTouchspinValue(ReplicationOption.ONE);\n      setReplicationFactorTouchspinValue(ReplicationOption.ONE);\n    } else if (name === 'radio5') {\n      setCurrentReplicationFactor(ReplicationOption.TWO);\n      setMinInSyncReplicaTouchspinValue(ReplicationOption.TWO);\n      setReplicationFactorTouchspinValue(ReplicationOption.TWO);\n    } else if (name === 'radio6') {\n      setCurrentReplicationFactor(ReplicationOption.CUSTOM);\n      setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue);\n      setReplicationFactorTouchspinValue(replicationFactorTouchspinValue);\n    }\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  const handleOnPlusReplicationFactor = () => {\n    setReplicationFactorTouchspinValue(replicationFactorTouchspinValue + 1);\n  };\n  const handleOnMinusReplicationFactor = () => {\n    setReplicationFactorTouchspinValue(replicationFactorTouchspinValue - 1);\n  };\n  const handleReplicationFactorChange = (event) => {\n    setReplicationFactorTouchspinValue(Number(event.target.value));\n  };\n\n  const handleOnPlusMinInSyncReplicaFactor = () => {\n    setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue + 1);\n  };\n  const handleOnMinusMinInSyncReplicaFactor = () => {\n    setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue - 1);\n  };\n  const handleMinInSyncReplicaChange = (event) => {\n    setMinInSyncReplicaTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Replicas</Text>\n        <Text component={TextVariants.p}>\n          How many copies of a topic will be made for high availability.\n        </Text>\n        <Text component={TextVariants.small}>\n          The partitions of each topic can be replicated across a configurable\n          number of brokers.\n        </Text>\n      </TextContent>\n      <Alert\n        variant='info'\n        isInline\n        title='Streams for Apache Kafka only supports 3 replicas and a minimum in-sync replica factor of 2.'\n      />\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          fieldId='create-wizard-replica-form-group'\n          label='Replicas'\n          className='form-group-radio'\n        >\n          <Stack hasGutter>\n            <Radio\n              isChecked={currentReplicationFactor === ReplicationOption.ONE}\n              name='radio4'\n              onChange={handleChangeReplicationFactor}\n              label='Replication factor: 1'\n              id='radio-controlled-4'\n              value='radio4'\n              description='Minimum in-sync replicas: 1'\n            />\n            <Radio\n              isChecked={currentReplicationFactor === ReplicationOption.TWO}\n              name='radio5'\n              onChange={handleChangeReplicationFactor}\n              label='Replication factor: 2'\n              id='radio-controlled-5'\n              value='radio5'\n              description='Minimum in-sync replicas: 2'\n            />\n            <Radio\n              isChecked={currentReplicationFactor === ReplicationOption.CUSTOM}\n              name='radio6'\n              onChange={handleChangeReplicationFactor}\n              label='Replication factor'\n              id='radio-controlled-6'\n              value='radio6'\n            />\n            <div className='kafka-ui--radio__parameters'>\n              <NumberInput\n                value={replicationFactorTouchspinValue}\n                onMinus={handleOnMinusReplicationFactor}\n                onPlus={handleOnPlusReplicationFactor}\n                onChange={handleReplicationFactorChange}\n              />\n              <Text\n                component={TextVariants.small}\n                className='minimum-in-sync-replicas'\n              >\n                Minimum in-sync replicas\n              </Text>\n              <NumberInput\n                value={minInSyncReplicaTouchspinValue}\n                onMinus={handleOnMinusMinInSyncReplicaFactor}\n                onPlus={handleOnPlusMinInSyncReplicaFactor}\n                onChange={handleMinInSyncReplicaChange}\n              />\n            </div>\n          </Stack>\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { StepTopicName } from './StepTopicName';\nimport { StepPartitions } from './StepPartitions';\nimport { StepMessageRetention } from './StepMessageRetention';\nimport { StepReplicas } from './StepReplicas';\nimport './CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from './TopicAdvanceConfig';\nimport { DefaultApi, NewTopicInput } from '../../../../OpenApi/api';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { convertUnits, formatTopicRequest } from '../utils';\nimport { ConfigContext } from '../../../../Contexts';\nimport { Configuration } from '../../../../OpenApi';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nimport { useHistory } from 'react-router';\n\ninterface ICreateTopicWizard {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n}\n\nexport const CreateTopicWizard: React.FC<ICreateTopicWizard> = ({\n  setIsCreateTopic,\n  isSwitchChecked,\n}) => {\n  const config = useContext(ConfigContext);\n  const history = useHistory();\n  const { addAlert } = useContext(AlertContext);\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [topicNameInput, setTopicNameInput] = useState('');\n  const [partitionTouchspinValue, setPartitionTouchspinValue] = useState(1);\n  const [\n    replicationFactorTouchspinValue,\n    setReplicationFactorTouchspinValue,\n  ] = useState(1);\n  const [\n    minInSyncReplicaTouchspinValue,\n    setMinInSyncReplicaTouchspinValue,\n  ] = useState(1);\n\n  const [currentPeriod, setCurrentPeriod] = React.useState<string | number>(1);\n  const { store } = React.useContext(TopicContext);\n\n  const closeWizard = () => {\n    if (setIsCreateTopic) {\n      setIsCreateTopic(false);\n    }\n  };\n\n  const saveTopic = () => {\n    //Object may change based on schema\n\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(store))\n      : {\n          name: topicNameInput,\n          settings: {\n            numPartitions: partitionTouchspinValue,\n            config: [\n              {\n                key: 'retention.ms',\n                value: msgRetentionValue.toString(),\n              },\n            ],\n          },\n        };\n\n    new DefaultApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then((res) => {\n        if (res.status === 200) {\n          addAlert(\n            'The topic was successfully created in the Kafka instance',\n            AlertVariant.success\n          );\n        }\n        closeWizard();\n      })\n      .catch((err) => {\n        addAlert(err.response.data.err, AlertVariant.danger);\n        closeWizard();\n      });\n  };\n\n  const handleCancel = () => {\n    history.push('/topics');\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: 'Topic name',\n      enableNext: topicNameInput.trim() !== '',\n      component: (\n        <StepTopicName\n          topicNameInput={topicNameInput}\n          setTopicNameInput={setTopicNameInput}\n        />\n      ),\n    },\n    {\n      name: 'Partitions',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepPartitions\n          partitionTouchspinValue={partitionTouchspinValue}\n          setPartitionTouchspinValue={setPartitionTouchspinValue}\n        />\n      ),\n    },\n    {\n      name: 'Message retention',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepMessageRetention\n          setMsgRetentionValue={setMsgRetentionValue}\n          currentPeriod={currentPeriod}\n          setCurrentPeriod={setCurrentPeriod}\n        />\n      ),\n    },\n    {\n      name: 'Replicas',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepReplicas\n          setReplicationFactorTouchspinValue={\n            setReplicationFactorTouchspinValue\n          }\n          setMinInSyncReplicaTouchspinValue={setMinInSyncReplicaTouchspinValue}\n          replicationFactorTouchspinValue={replicationFactorTouchspinValue}\n          minInSyncReplicaTouchspinValue={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: 'Finish',\n    },\n  ];\n\n  const title = 'Create topics wizard';\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={handleCancel}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { CreateTopichead } from './Components/CreateTopicHead';\nimport { CreateTopicWizard } from './Components/CreateTopicWizard';\n\ninterface ICreateTopicPageProps {\n  setIsCreateTopic?: (value: boolean) => void;\n}\n\nexport const CreateTopicPage: React.FC<ICreateTopicPageProps> = ({\n  setIsCreateTopic,\n}) => {\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        setIsCreateTopic={setIsCreateTopic}\n      />\n    </>\n  );\n};\n"],"sourceRoot":""}