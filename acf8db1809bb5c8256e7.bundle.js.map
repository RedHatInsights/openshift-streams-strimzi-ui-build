{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedCreateView.tsx"],"names":["TopicContext","createContext","FederatedCreateTopic","getToken","apiBasePath","onCloseCreateTopic","value","basePath","PageSection","variant","PageSectionVariants","setIsCreateTopic","b"],"mappings":"wHAkDaA,GAAe,E,QAAAC,eAAc,K,0ICtCpCC,EAAqE,SAAC,G,IAC1EC,EAAQ,WACRC,EAAW,cACXC,EAAkB,qBAQlB,OACE,kBAAC,aAAsB,CACrBC,MAAO,CAAEC,SAAUH,EAAaD,SAAQ,IAExC,kBAAC,EAAAK,YAAW,CAACC,QAAS,EAAAC,oBAAA,OACpB,kBAAC,IAAiB,CAACC,iBAXA,SAACC,GACnBA,GACHP,UAiBN","file":"acf8db1809bb5c8256e7.bundle.js","sourcesContent":["import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nconst initialState: AdvancedTopic = {\n  name: 'SampleTopic2345',\n  numPartitions: '52',\n  replicationFactor: '35',\n  'min.insync.replicas': '78',\n  'retention.ms': '78',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '50',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '4',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': 'Producer',\n  'log.cleanup.policy': 'Delete',\n  'log.retention.bytes': '-1',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '78',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': 'false',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '789',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '4',\n  'min.compaction.lag.ms': '58',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '6048000',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '0',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '6000',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: 'true',\n  'index.interval.bytes': '4096',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '10847560',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '783945',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '3894949',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { ConfigContext, IConfiguration } from '../../Contexts';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { CreateTopicWizard } from '../../Modules/Topics/CreateTopic/Components/CreateTopicWizard';\n\nexport type FederatedCreateTopicProps = {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  onCloseCreateTopic: () => void;\n};\n\nconst FederatedCreateTopic: FunctionComponent<FederatedCreateTopicProps> = ({\n  getToken,\n  apiBasePath,\n  onCloseCreateTopic,\n}) => {\n  const setIsCreateTopic = (b: boolean) => {\n    if (!b) {\n      onCloseCreateTopic();\n    }\n  };\n\n  return (\n    <ConfigContext.Provider\n      value={{ basePath: apiBasePath, getToken } as IConfiguration}\n    >\n      <PageSection variant={PageSectionVariants.light}>\n        <CreateTopicWizard setIsCreateTopic={setIsCreateTopic} />\n      </PageSection>\n    </ConfigContext.Provider>\n  );\n};\n\nexport { FederatedCreateTopic };\n\nexport default FederatedCreateTopic;\n"],"sourceRoot":""}