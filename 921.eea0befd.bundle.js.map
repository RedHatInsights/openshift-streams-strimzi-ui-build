{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack://kafka-ui/./src/Components/TextWithLabelPopover/TextWithLabelPopover.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/PartitionsChangeModal.tsx","webpack://kafka-ui/./src/Components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/Components/DropdownWithToggle.tsx","webpack://kafka-ui/./src/Components/SizeTimeFormGroup/SizeTimeFormGroup.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/TopicAdvanceConfig.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/utils.ts"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TextWithLabelPopover","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","unit","displayText","undefined","parseInt","Number","unitSeparator","TextContent","className","Text","style","fontWeight","display","Popover","headerContent","bodyContent","onClick","event","preventDefault","position","left","top","noVerticalAlign","PartitionsChangeModal","onSaveClick","isWarningOpen","setIsWarningOpen","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","onClose","actions","Button","key","FormGroupWithPopover","children","labelHead","fieldId","labelBody","buttonAriaLabel","validated","helperText","helperTextInvalid","FormGroup","label","labelIcon","DropdownWithToggle","options","id","toggleId","items","value","ariaLabel","onSelectOption","useState","setIsOpen","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","Dropdown","onSelect","e","currentTarget","textContent","target","toggle","dropdownItems","map","option","DropdownItem","SizeTimeFormGroup","dropdownValue","inputName","onChange","onPlus","onMinus","plusBtnProps","minusBtnProps","type","min","timeUnits","isDisabled","memoryUnits","Flex","FlexItem","grow","default","NumberInput","getItemsForType","TopicAdvanceConfig","isCreate","saveTopic","handleCancel","topicData","setTopicData","partitionsValidated","setPartitionsValidated","warning","setWarning","initialPartition","setInitialPartition","topicValidated","setTopicValidated","invalidText","setInvalidText","t","useTranslation","isCustomRetentionTimeSelected","setIsCustomRetentionTimeSelected","isCustomRetentionSizeSelected","setIsCustomRetentionSizeSelected","customRetentionTime","setCustomRetentionTime","customRetentionTimeUnit","setCustomRetentionTimeUnit","customRetentionSize","setCustomRetentionSize","customRetentionSizeUnit","setCustomRetentionSizeUnit","actionText","config","useContext","useEffect","topicName","topicRes","configEntries","forEach","configItem","partitions","length","onDropdownChange","handleTouchSpinInputChange","handleTouchSpinPlus","updatedRetentionTime","toString","updatedRetentionSize","handleTouchSpinMinus","handleRadioChange","_","retentionTimeInput","retentionSizeInput","Sidebar","hasGutter","SidebarPanel","JumpLinks","isVertical","scrollableSelector","offset","expandable","md","isExpanded","JumpLinksItem","href","SidebarContent","Stack","StackItem","component","TextVariants","tabIndex","Form","TextInput","isRequired","regexpInvalid","RegExp","test","validationCheck","fieldName","placeholder","numPartitions","Radio","isChecked","ActionGroup","kebabToCamel","kebabCase","split","word","index","text","charAt","toUpperCase","slice","join","kebabToDotSeparated","val","replaceAll","unitsToBytes","bytes","kilobytes","megabytes","gigabytes","terabytes","unitsToMilliSecond","milliseconds","seconds","days","months","years","convertUnits","topic","pop","String","formatTopicRequest","push","settings"],"mappings":"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","file":"921.eea0befd.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","import { Popover, TextContent, Text } from '@patternfly/react-core';\nimport React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport bytes from 'bytes';\nimport humanizeDuration from 'humanize-duration';\n\nimport './TextWithLabelPopover.css';\n\nexport interface TextWithLabelPopoverProps {\n  /** Field label */\n  fieldLabel: string;\n  /** Field value */\n  fieldValue?: string;\n  /** Header text for popover label */\n  popoverHeader: string;\n  /** Body text for popover label */\n  popoverBody: string;\n  /** Aria label for popover button */\n  btnAriaLabel: string;\n  /** Unit (if exists) for the field */\n  unit?: string;\n  /** Indicates if unlimited should be shown for negative numbers */\n  showUnlimited?: boolean;\n}\n\nexport const TextWithLabelPopover: React.FC<TextWithLabelPopoverProps> = ({\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  unit,\n  showUnlimited,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  let displayText = '-';\n\n  if (\n    showUnlimited === true &&\n    fieldValue !== undefined &&\n    parseInt(fieldValue) < 0\n  ) {\n    displayText = 'Unlimited';\n  } else if (fieldValue) {\n    if (unit) {\n      if (unit === 'ms') {\n        displayText = humanizeDuration(Number(fieldValue));\n      }\n      if (unit === 'bytes') {\n        displayText = bytes(Number(fieldValue), { unitSeparator: ' ' });\n      }\n    } else {\n      displayText = fieldValue;\n    }\n  }\n\n  return (\n    <TextContent className='text-content-padding'>\n      <Text style={{ fontWeight: 700, display: 'inline' }}>{fieldLabel}</Text>\n      <Popover\n        headerContent={<div>{popoverHeader}</div>}\n        bodyContent={<div>{popoverBody}</div>}\n      >\n        <button\n          aria-label={btnAriaLabel}\n          onClick={preventButtonSubmit}\n          className='pf-c-form__group-label-help'\n          style={{ position: 'relative', left: '5px', top: '2px' }}\n        >\n          <HelpIcon noVerticalAlign />\n        </button>\n      </Popover>\n      <Text>{displayText}</Text>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport { Modal, ModalVariant, Button } from '@patternfly/react-core';\n\nexport interface IPartitionsChangeModal {\n  onSaveClick: () => void;\n  isWarningOpen: boolean;\n  setIsWarningOpen: (value: boolean) => void;\n}\nexport const PartitionsChangeModal: React.FunctionComponent<IPartitionsChangeModal> = ({\n  onSaveClick,\n  isWarningOpen,\n  setIsWarningOpen,\n}) => {\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={isWarningOpen}\n      aria-label='Confirm change of partitions'\n      title='Increase the number of partitions?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={() => setIsWarningOpen(false)}\n      actions={[\n        <Button variant='primary' onClick={onSaveClick} key={1}>\n          Yes\n        </Button>,\n        <Button variant='link' onClick={() => setIsWarningOpen(false)} key={2}>\n          No, return to form\n        </Button>,\n      ]}\n    >\n      Messages might have the same key from two different partitions, which can\n      potentially break the message ordering guarantees that apply to a single\n      partition.\n    </Modal>\n  );\n};\n","import { FormGroup, Popover } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\ninterface IFormGroupWithPopoverProps {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n  validated?: 'default' | 'error' | 'success' | 'warning' | undefined;\n  helperText?: string;\n  helperTextInvalid?: string;\n}\n\nexport const FormGroupWithPopover: React.FC<IFormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n  validated,\n  helperText,\n  helperTextInvalid,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      validated={validated}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value = e.currentTarget.textContent;\n    if (onSelectOption) {\n      e.target.name = name;\n      onSelectOption(value, e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {value}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n    />\n  );\n};\n","import {\n  Flex,\n  FlexItem,\n  NumberInput,\n  NumberInputProps,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { DropdownWithToggle, IDropdownOption } from '../DropdownWithToggle';\n\nexport interface SizeTimeFormGroup extends NumberInputProps {\n  /** id of dropdown element */\n  id: string;\n  /** id of dropdown toggle button */\n  toggleId: string;\n  /** id of dropdown element */\n  dropdownValue?: string;\n  /** name attribute of dropdown element */\n  name: string;\n  /** handler method of dropdown */\n  onSelectOption?: (value: string, event) => void;\n  /** aria label for dropdown element */\n  ariaLabel?: string;\n  /** determines whether to display memory units or time units */\n  type: string;\n}\n\nexport const SizeTimeFormGroup: React.FC<SizeTimeFormGroup> = ({\n  id,\n  toggleId,\n  dropdownValue,\n  ariaLabel,\n  onSelectOption,\n  name,\n  inputName,\n  onChange,\n  onPlus,\n  onMinus,\n  value,\n  plusBtnProps,\n  minusBtnProps,\n  type,\n  min,\n}) => {\n  const timeUnits: IDropdownOption[] = [\n    { key: 'milliseconds', value: 'milliseconds', isDisabled: false },\n    { key: 'seconds', value: 'seconds', isDisabled: false },\n    { key: 'days', value: 'days', isDisabled: false },\n    { key: 'months', value: 'months', isDisabled: false },\n    { key: 'years', value: 'years', isDisabled: false },\n  ];\n\n  const memoryUnits: IDropdownOption[] = [\n    { key: 'bytes', value: 'bytes', isDisabled: false },\n    { key: 'kilobytes', value: 'kilobytes', isDisabled: false },\n    { key: 'megabytes', value: 'megabytes', isDisabled: false },\n    { key: 'gigabytes', value: 'gigabytes', isDisabled: false },\n    { key: 'terabytes', value: 'terabytes', isDisabled: false },\n  ];\n\n  const getItemsForType = (type: string) => {\n    switch (type) {\n    case 'time':\n      return timeUnits;\n    case 'memory':\n      return memoryUnits;\n    default:\n      return [];\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem grow={{ default: 'grow' }}>\n        <NumberInput\n          inputName={inputName}\n          onChange={onChange}\n          onPlus={onPlus}\n          onMinus={onMinus}\n          value={value}\n          plusBtnProps={plusBtnProps}\n          minusBtnProps={minusBtnProps}\n          min={min}\n        />\n      </FlexItem>\n      <FlexItem>\n        <DropdownWithToggle\n          id={id}\n          toggleId={toggleId}\n          ariaLabel={ariaLabel}\n          onSelectOption={onSelectOption}\n          items={getItemsForType(type)}\n          name={name}\n          value={dropdownValue || ''}\n        />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  JumpLinks,\n  JumpLinksItem,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  Stack,\n  StackItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  NumberInput,\n  Form,\n  Radio,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nimport { useTranslation } from 'react-i18next';\nimport { PartitionsChangeModal } from './PartitionsChangeModal';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { kebabToCamel, kebabToDotSeparated } from '../utils';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { IAdvancedTopic } from './CreateTopicWizard';\n\nimport { getTopic } from '../../../../Services/index';\nimport { ConfigContext } from '../../../../Contexts';\n\ninterface ITopicAdvanceConfig {\n  isCreate: boolean;\n  saveTopic: () => void;\n  handleCancel: () => void;\n  topicData: IAdvancedTopic;\n  setTopicData: (val: IAdvancedTopic) => void;\n}\n\nexport const TopicAdvanceConfig: React.FunctionComponent<ITopicAdvanceConfig> = ({\n  isCreate,\n  saveTopic,\n  handleCancel,\n  topicData,\n  setTopicData,\n}) => {\n  const [partitionsValidated, setPartitionsValidated] = useState<\n    'warning' | 'default'\n  >('default');\n  const [warning, setWarning] = useState<boolean>(false);\n  const [initialPartition, setInitialPartition] = useState<number | undefined>(\n    0\n  );\n  const [topicValidated, setTopicValidated] = useState<'error' | 'default'>(\n    'default'\n  );\n  const [invalidText, setInvalidText] = useState('This is a required field');\n  const [isWarningOpen, setIsWarningOpen] = useState<boolean>(false);\n\n  const { t } = useTranslation();\n\n  const [\n    isCustomRetentionTimeSelected,\n    setIsCustomRetentionTimeSelected,\n  ] = useState<boolean>(true);\n  const [\n    isCustomRetentionSizeSelected,\n    setIsCustomRetentionSizeSelected,\n  ] = useState<boolean>(false);\n\n  const [customRetentionTime, setCustomRetentionTime] = useState<number>(7);\n  const [\n    customRetentionTimeUnit,\n    setCustomRetentionTimeUnit,\n  ] = useState<string>('days');\n  const [customRetentionSize, setCustomRetentionSize] = useState<number>(1);\n  const [\n    customRetentionSizeUnit,\n    setCustomRetentionSizeUnit,\n  ] = useState<string>('bytes');\n\n  const actionText = isCreate === true ? 'Create Topic' : 'Save';\n\n  const clearOptions: IDropdownOption[] = [\n    { key: 'compact', value: 'compact', label: 'Compact', isDisabled: false },\n    { key: 'delete', value: 'delete', label: 'Delete', isDisabled: false },\n    {\n      key: 'compact-delete',\n      value: 'compact, delete',\n      label: 'Compact, Delete',\n      isDisabled: false,\n    },\n    {\n      key: 'delete-compact',\n      value: 'delete, compact',\n      label: 'Delete, Compact',\n      isDisabled: false,\n    },\n  ];\n\n  const config = useContext(ConfigContext);\n  const fetchTopic = async (topicName) => {\n    const topicRes = await getTopic(topicName, config);\n\n    const configEntries: any = {};\n    topicRes.config?.forEach((configItem) => {\n      configEntries[configItem.key || ''] = configItem.value || '';\n    });\n\n    setInitialPartition(topicRes?.partitions?.length);\n  };\n\n  useEffect(() => {\n    (async function () {\n      fetchTopic(topicData.name);\n    })();\n    if(!isCreate) {\n      setCustomRetentionTimeUnit('milliseconds');\n    }\n  }, []);\n\n  useEffect(() => {\n    if(!isCreate) {\n      if(topicData['retention.bytes'] === '-1') {\n        setIsCustomRetentionSizeSelected(false);\n      } else {\n        setIsCustomRetentionSizeSelected(true);\n        setCustomRetentionSize(Number(topicData['retention.bytes']));\n      }\n      if(topicData['retention.ms'] === '-1') {\n        setIsCustomRetentionTimeSelected(false);\n      } else {\n        setIsCustomRetentionTimeSelected(true);\n        setCustomRetentionTime(Number(topicData['retention.ms']));\n      }\n    }\n  }, [topicData['retention.bytes'], topicData['retention.ms']]);\n\n  const validationCheck = (value: string) => {\n    const regexpInvalid = new RegExp('^[0-9A-Za-z_-]+$');\n\n    if (value.length && !regexpInvalid.test(value)) {\n      setInvalidText(\n        'Invalid input. Only letters (Aa-Zz) , numbers \" _ \" and \" - \" are accepted'\n      );\n      setTopicValidated('error');\n    } else if (value.length < 1) {\n      setInvalidText('This is a required field');\n      setTopicValidated('error');\n    } else if (value.length > 249) {\n      setTopicValidated('error');\n      setInvalidText('Topic name cannot exceed 249 characters');\n    } else setTopicValidated('default');\n  };\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    validationCheck(value);\n    const { name: fieldName } = event.currentTarget;\n    setTopicData({ ...topicData, [kebabToCamel(fieldName)]: value });\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name } = event.target;\n\n    if (name === 'custom-retention-time-unit') {\n      setCustomRetentionTimeUnit(value);\n      isCustomRetentionTimeSelected &&\n        setTopicData({\n          ...topicData,\n          'retention.ms.unit': value,\n        });\n    }\n    if (name === 'custom-retention-size-unit') {\n      setCustomRetentionSizeUnit(value);\n      isCustomRetentionSizeSelected &&\n      setTopicData({\n        ...topicData,\n        'retention.bytes.unit': value,\n      });\n    }\n  };\n\n  const onPartitionsChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { name: fieldName, value } = event.currentTarget;\n    setTopicData({ ...topicData, [kebabToCamel(fieldName)]: Number(value) });\n  };\n\n  const partitionsWarnigCheckPlus = () => {\n    if (\n      initialPartition &&\n      Number(topicData.numPartitions + 1) > initialPartition\n    ) {\n      setPartitionsValidated('warning');\n      setWarning(true);\n    } else {\n      setPartitionsValidated('default');\n      setWarning(false);\n    }\n  };\n  const handleTouchSpinPlusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    setTopicData({\n      ...topicData,\n      [fieldName]: Number(topicData[fieldName]) + 1,\n    });\n    if (!isCreate) {\n      partitionsWarnigCheckPlus();\n    }\n  };\n  const partitionsWarningCheckMinus = () => {\n    if (\n      initialPartition &&\n      Number(topicData.numPartitions + -1) > initialPartition\n    ) {\n      setPartitionsValidated('warning');\n      setWarning(true);\n    } else {\n      setPartitionsValidated('default');\n      setWarning(false);\n    }\n  };\n\n  const handleTouchSpinMinusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    setTopicData({\n      ...topicData,\n      [fieldName]: Number(topicData[fieldName]) - 1,\n    });\n    if (!isCreate) {\n      partitionsWarningCheckMinus();\n    }\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name, value } = event.currentTarget;\n\n    if (name === 'custom-retention-time') {\n      setCustomRetentionTime(Number(value));\n      isCustomRetentionTimeSelected &&\n        setTopicData({\n          ...topicData,\n          'retention.ms': value,\n        });\n    } else if (name === 'custom-retention-size') {\n      setCustomRetentionSize(Number(value));\n      isCustomRetentionSizeSelected &&\n        setTopicData({\n          ...topicData,\n          'retention.bytes': value,\n        });\n    }\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    if (name === 'custom-retention-time') {\n      const updatedRetentionTime = customRetentionTime + 1;\n      setCustomRetentionTime(updatedRetentionTime);\n      isCustomRetentionTimeSelected &&\n        setTopicData({\n          ...topicData,\n          'retention.ms': updatedRetentionTime.toString(),\n        });\n    } else if (name === 'custom-retention-size') {\n      const updatedRetentionSize = customRetentionSize + 1;\n      setCustomRetentionSize(updatedRetentionSize);\n      isCustomRetentionSizeSelected &&\n        setTopicData({\n          ...topicData,\n          'retention.bytes': updatedRetentionSize.toString(),\n        });\n    }\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    if (name === 'custom-retention-time') {\n      const updatedRetentionTime = customRetentionTime - 1;\n      setCustomRetentionTime(updatedRetentionTime);\n      isCustomRetentionTimeSelected &&\n        setTopicData({\n          ...topicData,\n          'retention.ms': updatedRetentionTime.toString(),\n        });\n    } else if (name === 'custom-retention-size') {\n      const updatedRetentionSize = customRetentionSize - 1;\n      setCustomRetentionSize(updatedRetentionSize);\n      isCustomRetentionSizeSelected &&\n        setTopicData({\n          ...topicData,\n          'retention.bytes': updatedRetentionSize.toString(),\n        });\n    }\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    setTopicData({ ...topicData, [kebabToDotSeparated(fieldName)]: value });\n  };\n  const onConfirm = () => {\n    if (warning) setIsWarningOpen(true);\n    else saveTopic();\n  };\n  const onSaveClick = () => {\n    setIsWarningOpen(false);\n    saveTopic();\n  };\n\n  const handleRadioChange = (_, event) => {\n    const { name } = event.target;\n\n    switch (name) {\n    case 'custom-retention-time':\n      setIsCustomRetentionTimeSelected(true);\n      setTopicData({\n        ...topicData,\n        'retention.ms': customRetentionTime.toString(),\n        'retention.ms.unit': customRetentionTimeUnit,\n      });\n      break;\n    case 'unlimited-retention-time':\n      setIsCustomRetentionTimeSelected(false);\n      setTopicData({\n        ...topicData,\n        'retention.ms': '-1',\n        'retention.ms.unit': 'milliseconds',\n      });\n      break;\n    case 'custom-retention-size':\n      setIsCustomRetentionSizeSelected(true);\n      setTopicData({\n        ...topicData,\n        'retention.bytes': customRetentionSize.toString(),\n        'retention.bytes.unit': customRetentionSizeUnit,\n      });\n      break;\n    case 'unlimited-retention-size':\n      setIsCustomRetentionSizeSelected(false);\n      setTopicData({\n        ...topicData,\n        'retention.bytes': '-1',\n        'retention.bytes.unit': 'bytes',\n      });\n      break;\n    }\n  };\n\n  const retentionTimeInput = (\n    <SizeTimeFormGroup\n      inputName='custom-retention-time'\n      onChange={handleTouchSpinInputChange}\n      onPlus={handleTouchSpinPlus}\n      onMinus={handleTouchSpinMinus}\n      value={customRetentionTime}\n      plusBtnProps={{ name: 'custom-retention-time' }}\n      minusBtnProps={{ name: 'custom-retention-time' }}\n      id='core-config-retention-time-unit'\n      toggleId='core-config-retention-dropdowntoggle'\n      name='custom-retention-time-unit'\n      dropdownValue={customRetentionTimeUnit}\n      ariaLabel='select unit from dropdown'\n      onSelectOption={onDropdownChange}\n      min={0}\n      type='time'\n    />\n  );\n\n  const retentionSizeInput = (\n    <SizeTimeFormGroup\n      inputName='custom-retention-size'\n      onChange={handleTouchSpinInputChange}\n      onPlus={handleTouchSpinPlus}\n      onMinus={handleTouchSpinMinus}\n      value={customRetentionSize}\n      plusBtnProps={{ name: 'custom-retention-size' }}\n      minusBtnProps={{ name: 'custom-retention-size' }}\n      id='core-config-retention-size-unit'\n      toggleId='core-config-retention-size-dropdowntoggle'\n      name='custom-retention-size-unit'\n      dropdownValue={customRetentionSizeUnit}\n      ariaLabel='select unit from dropdown'\n      onSelectOption={onDropdownChange}\n      min={0}\n      type='memory'\n    />\n  );\n\n  return (\n    <>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='#scrollablePageMain'\n            style={{ position: 'sticky' }}\n            offset={-164} // for header\n            expandable={{ default: 'expandable', md: 'nonExpandable' }}\n            isExpanded={false}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <Stack hasGutter>\n            <StackItem>\n              <TextContent>\n                <Text\n                  component={TextVariants.h2}\n                  tabIndex={-1}\n                  id='core-configuration'\n                >\n                    Core configuration\n                </Text>\n                <Text component={TextVariants.p} className='section-info'>\n                  {t('createTopic.coreConfigInfo')}\n                </Text>\n              </TextContent>\n              <Form>\n                {isCreate ? (\n                  <FormGroupWithPopover\n                    labelHead={t('createTopic.topicNameLabelHead')}\n                    fieldId='create-topic-name'\n                    fieldLabel='Topic name'\n                    labelBody={t('createTopic.topicNameLabelBody')}\n                    buttonAriaLabel='More info for topic name field'\n                    helperTextInvalid={invalidText}\n                    validated={topicValidated}\n                  >\n                    <TextInput\n                      isRequired\n                      type='text'\n                      id='create-topic-name'\n                      name='name'\n                      value={topicData.name}\n                      onChange={handleTextInputChange}\n                      label='Topic name'\n                      placeholder='Enter topic name'\n                      validated={topicValidated}\n                    />\n                  </FormGroupWithPopover>\n                ) : (\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail name'\n                    fieldLabel='Name'\n                    fieldValue={topicData.name}\n                    popoverBody={t('createTopic.topicNameLabelBody')}\n                    popoverHeader={t('createTopic.topicNameLabelHead')}\n                  />\n                )}\n                { isCreate ? (<FormGroupWithPopover\n                  fieldId='create-topic-partitions'\n                  fieldLabel='Partitions'\n                  labelHead={t('createTopic.partitionsLabelHead')}\n                  labelBody={t('createTopic.partitionsLabelBody')}\n                  buttonAriaLabel='More info for partitions field'\n                  validated={partitionsValidated}\n                  helperText={\n                    warning\n                      ? `Increasing a topic's partitions might result in messages having the same key from two different partitions, which can potentially break the message ordering guarantees that apply to a single partition`\n                      : undefined\n                  }\n                >\n                  <NumberInput\n                    id='create-topic-partitions'\n                    inputName='num-partitions'\n                    onChange={onPartitionsChange}\n                    onPlus={handleTouchSpinPlusCamelCase}\n                    onMinus={handleTouchSpinMinusCamelCase}\n                    value={Number(topicData.numPartitions)}\n                    plusBtnProps={{ name: 'num-partitions' }}\n                    minusBtnProps={{ name: 'num-partitions' }}\n                    min={1}\n\n                  />\n                </FormGroupWithPopover>) : (<TextWithLabelPopover\n                  btnAriaLabel='More info for partitions field'\n                  fieldLabel='Partitions'\n                  fieldValue={topicData.numPartitions}\n                  popoverBody={t('createTopic.partitionsLabelBody')}\n                  popoverHeader={t('createTopic.partitionsLabelHead')}\n                />) }\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail replicas'\n                  fieldLabel='Replicas'\n                  fieldValue={'3'}\n                  popoverBody={t('createTopic.replicasLabelBody')}\n                  popoverHeader={t('createTopic.replicasLabelHead')}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail min-in-sync replica'\n                  fieldLabel='Minimum in-sync replicas'\n                  fieldValue={'2'}\n                  popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n                  popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n                />\n                <FormGroupWithPopover\n                  fieldId='retention'\n                  fieldLabel='Retention time'\n                  labelHead={t('createTopic.retentionTimeLabelHead')}\n                  labelBody={t('createTopic.retentionTimeLabelBody')}\n                  buttonAriaLabel='More info for retention time field'\n                >\n                  <Stack hasGutter>\n                    <Radio\n                      isChecked={isCustomRetentionTimeSelected}\n                      name='custom-retention-time'\n                      onChange={handleRadioChange}\n                      label={retentionTimeInput}\n                      className='kafka-ui--radio-label__number-input'\n                      aria-label='custom duration'\n                      id='custom-retention-time'\n                      value='custom'\n                    />\n                    <Radio\n                      isChecked={!isCustomRetentionTimeSelected}\n                      name='unlimited-retention-time'\n                      onChange={handleRadioChange}\n                      label='Unlimited'\n                      aria-label='Unlimited'\n                      id='unlimited-retention-time'\n                      value='unlimited'\n                    />\n                  </Stack>\n                </FormGroupWithPopover>\n                <FormGroupWithPopover\n                  fieldId='retention-size'\n                  fieldLabel='Retention size'\n                  labelHead={t('createTopic.retentionBytesLabelHead')}\n                  labelBody={t('createTopic.retentionBytesLabelBody')}\n                  buttonAriaLabel='More info for retention size field'\n                >\n                  <Stack hasGutter>\n                    <Radio\n                      isChecked={isCustomRetentionSizeSelected}\n                      name='custom-retention-size'\n                      onChange={handleRadioChange}\n                      label={retentionSizeInput}\n                      className='kafka-ui--radio-label__number-input'\n                      aria-label='custom size'\n                      id='custom-retention-size'\n                      value='custom'\n                    />\n                    <Radio\n                      isChecked={!isCustomRetentionSizeSelected}\n                      name='unlimited-retention-size'\n                      onChange={handleRadioChange}\n                      label='Unlimited'\n                      aria-label='Unlimited'\n                      id='unlimited-retention-size'\n                      value='unlimited'\n                    />\n                  </Stack>\n                </FormGroupWithPopover>\n              </Form>\n            </StackItem>\n            <StackItem>\n              <TextContent className='section-margin'>\n                <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n                    Messages\n                </Text>\n                <Text component={TextVariants.p} className='section-info'>\n                  {t('createTopic.messageSectionInfo')}\n                </Text>\n              </TextContent>\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail max message bytes'\n                fieldLabel='Maximum message bytes'\n                fieldValue={'1048588'}\n                popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n                popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n                unit={'bytes'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail message timestamp type'\n                fieldLabel='Message timestamp type'\n                fieldValue={'CreateTime'}\n                popoverBody={t('createTopic.messageTimestampLabelBody')}\n                popoverHeader={t('createTopic.messageTimestampLabelHead')}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail message timestamp difference'\n                fieldLabel='Maximum message timestamp difference'\n                fieldValue={'9223372036854775807'}\n                popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n                popoverHeader={t('createTopic.messageTimestampDiffLabelHead')}\n                unit={'ms'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail compression type'\n                fieldLabel='Compression type'\n                fieldValue={'Producer'}\n                popoverBody={t('createTopic.compressionTypeLabelBody')}\n                popoverHeader={t('createTopic.compressionTypeLabelHead')}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail message format version'\n                fieldLabel='Message format version'\n                fieldValue={'2.7-IV2'}\n                popoverBody={t('createTopic.messageFormatLabelBody')}\n                popoverHeader={t('createTopic.messageFormatLabelHead')}\n              />\n            </StackItem>\n\n            <StackItem>\n              <TextContent className='section-margin'>\n                <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                    Log\n                </Text>\n                <Text\n                  component={TextVariants.p}\n                  className='section-info-head'\n                >\n                  {t('createTopic.logSectionInfo')}\n                </Text>\n                <Text\n                  component={TextVariants.small}\n                  className='section-info-note'\n                >\n                  {t('createTopic.logSectionInfoNote')}\n                </Text>\n              </TextContent>\n\n              <FormGroupWithPopover\n                fieldId='cleanup-policy'\n                fieldLabel='Cleanup policy'\n                labelHead={t('createTopic.cleanupPolicyLabelHead')}\n                labelBody={t('createTopic.cleanupPolicyLabelBody')}\n                buttonAriaLabel='More info for cleanup policy field'\n              >\n                <DropdownWithToggle\n                  id='log-section-policy-type-dropdown'\n                  toggleId='log-section-policy-type-dropdowntoggle'\n                  ariaLabel='select policy type from dropdown'\n                  onSelectOption={onDropdownChangeDotSeparated}\n                  items={clearOptions}\n                  name='cleanup-policy'\n                  value={topicData['cleanup.policy'] || ''}\n                />\n              </FormGroupWithPopover>\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail retention bytes'\n                fieldLabel='Delete retention time'\n                fieldValue={'86400000'}\n                popoverBody={t('createTopic.deleteRetentionLabelBody')}\n                popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n                unit={'ms'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail min cleanable dirty ratio'\n                fieldLabel='Minimum cleanable dirty ratio'\n                fieldValue={'0.5'}\n                popoverBody={t('createTopic.minRatioLabelBody')}\n                popoverHeader={t('createTopic.minRatioLabelHead')}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail min compaction lag time'\n                fieldLabel='Minimum compaction lag time'\n                fieldValue={'0'}\n                popoverBody={t('createTopic.minLagLabelBody')}\n                popoverHeader={t('createTopic.minLagLabelHead')}\n                unit={'ms'}\n              />\n            </StackItem>\n\n            <StackItem>\n              <TextContent className='section-margin'>\n                <Text\n                  component={TextVariants.h2}\n                  tabIndex={-1}\n                  id='replication'\n                >\n                    Replication\n                </Text>\n                <Text\n                  component={TextVariants.p}\n                  className='section-info-head'\n                >\n                  {t('createTopic.replicationSectionInfo')}\n                </Text>\n                <Text\n                  component={TextVariants.small}\n                  className='section-info-note'\n                >\n                  {t('createTopic.replicationSectionInfoNote')}\n                </Text>\n              </TextContent>\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail unclean leader election'\n                fieldLabel='Unclean leader election'\n                fieldValue={'Disabled'}\n                popoverBody={t('createTopic.leaderElectionLabelBody')}\n                popoverHeader={t('createTopic.leaderElectionLabelHead')}\n              />\n            </StackItem>\n\n            <StackItem>\n              <TextContent className='section-margin'>\n                <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n                    Cleanup\n                </Text>\n                <Text component={TextVariants.p} className='section-info'>\n                  {t('createTopic.cleanupSectionInfo')}\n                </Text>\n              </TextContent>\n\n              <TextWithLabelPopover\n                btnAriaLabel='topic detail log segment bytes'\n                fieldLabel='Log segment size'\n                fieldValue={'1073741824'}\n                popoverBody={t('createTopic.logSegmentLabelHead')}\n                popoverHeader={t('createTopic.logSegmentLabelBody')}\n                unit={'bytes'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='segment time'\n                fieldLabel='Segment time'\n                fieldValue={'604800000'}\n                popoverBody={t('createTopic.segementTimeLabelBody')}\n                popoverHeader={t('createTopic.segementTimeLabelHead')}\n                unit={'ms'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='segment jitter time'\n                fieldLabel='Segment jitter time'\n                fieldValue={'0'}\n                popoverBody={t('createTopic.jitterTimeLabelBody')}\n                popoverHeader={t('createTopic.jitterTimeLabelHead')}\n                unit={'ms'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='file delete delay'\n                fieldLabel='File delete delay'\n                fieldValue={'60000'}\n                popoverBody={t('createTopic.deleteDelayLabelBody')}\n                popoverHeader={t('createTopic.deleteDelayLabelHead')}\n                unit={'ms'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='preallocation log segment files'\n                fieldLabel='Preallocation log segment files'\n                fieldValue={'Disabled'}\n                popoverBody={t('createTopic.preallocateLabelBody')}\n                popoverHeader={t('createTopic.preallocateLabelHead')}\n              />\n            </StackItem>\n\n            <StackItem>\n              <TextContent className='section-margin'>\n                <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                    Index\n                </Text>\n                <Text component={TextVariants.p} className='section-info'>\n                  {t('createTopic.indexSectionInfo')}\n                </Text>\n              </TextContent>\n\n              <TextWithLabelPopover\n                btnAriaLabel='index interval size'\n                fieldLabel='Index interval size'\n                fieldValue={'4096'}\n                popoverBody={t('createTopic.indexIntervalLabelBody')}\n                popoverHeader={t('createTopic.indexIntervalLabelHead')}\n                unit={'bytes'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='segment index size'\n                fieldLabel='Segment index size'\n                fieldValue={'10485760'}\n                popoverBody={t('createTopic.segementIntervalLabelBody')}\n                popoverHeader={t('createTopic.segementIntervalLabelHead')}\n                unit={'bytes'}\n              />\n            </StackItem>\n\n            <StackItem>\n              <TextContent className='section-margin'>\n                <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                    Flush\n                </Text>\n                <Text component={TextVariants.p} className='section-info'>\n                  {t('createTopic.flushSectionInfo')}\n                </Text>\n              </TextContent>\n\n              <TextWithLabelPopover\n                btnAriaLabel='flush interval messages'\n                fieldLabel='Flush interval messages'\n                fieldValue={'9223372036854775807'}\n                popoverBody={t('createTopic.intervalMessagesLabelBody')}\n                popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n                unit={'ms'}\n              />\n\n              <TextWithLabelPopover\n                btnAriaLabel='flush interval time'\n                fieldLabel='Flush interval time'\n                fieldValue={'9223372036854775807'}\n                popoverBody={t('createTopic.intervalTimeLabelBody')}\n                popoverHeader={t('createTopic.intervalTimeLabelHead')}\n                unit={'ms'}\n              />\n            </StackItem>\n          </Stack>\n          <ActionGroup className='kafka-ui--sticky-footer'>\n            <Button\n              onClick={onConfirm}\n              variant='primary'\n              data-testid={\n                isCreate\n                  ? 'topicAdvanceCreate-actionCreate'\n                  : 'tabProperties-actionSave'\n              }\n              isDisabled={\n                topicData.name.length > 0 && topicValidated == 'default'\n                  ? false\n                  : true\n              }\n            >\n              {actionText}\n            </Button>\n            <Button\n              onClick={handleCancel}\n              variant='link'\n              data-testid={\n                isCreate\n                  ? 'topicAdvanceCreate-actionCancel'\n                  : 'tabProperties-actionCancel'\n              }\n            >\n              Cancel\n            </Button>\n          </ActionGroup>\n          {isWarningOpen && (\n            <PartitionsChangeModal\n              isWarningOpen={isWarningOpen}\n              onSaveClick={onSaveClick}\n              setIsWarningOpen={setIsWarningOpen}\n            />\n          )}\n        </SidebarContent>\n      </Sidebar>\n    </>\n  );\n};\n","import { ConfigEntry, NewTopicInput } from '../../../OpenApi';\nimport { IAdvancedTopic } from './Components/CreateTopicWizard';\n\nconst capitalizeText = (text: string) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nexport const kebabToCamel = function (kebabCase: string): string {\n  const words: string[] = kebabCase.split('-');\n\n  const camelCased: string[] = words.map((word: string, index: number) => {\n    return index > 0 ? capitalizeText(word) : word;\n  });\n\n  return camelCased.join('');\n};\n\nexport const kebabToDotSeparated = (val: string): string => {\n  return val.replaceAll('-', '.');\n};\n\nconst unitsToBytes = {\n  bytes: 1,\n  kilobytes: 1000,\n  megabytes: 1000000,\n  gigabytes: 1000000000,\n  terabytes: 1000000000000,\n};\n\nconst unitsToMilliSecond = {\n  milliseconds: 1,\n  seconds: 1000,\n  days: 86400000,\n  months: 2592000000,\n  years: 31536000000,\n};\n\nexport const convertUnits = (topicData: IAdvancedTopic): IAdvancedTopic => {\n  const topic = { ...topicData };\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'ms') {\n      topic[key] = String(\n        Number(topic[key]) *\n          unitsToMilliSecond[topic[`${key}.unit`] || 'milliseconds']\n      );\n    }\n    if (key.split('.').pop() === 'bytes') {\n      topic[key] = String(\n        Number(topic[key]) * unitsToBytes[topic[`${key}.unit`] || 'bytes']\n      );\n    }\n  }\n\n  if (topic['flush.messages']) {\n    topic['flush.messages'] = String(\n      Number(topic['flush.messages']) *\n        unitsToMilliSecond[topic['flush.messages.unit'] || 'milliseconds']\n    );\n  }\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'unit') {\n      delete topic[key];\n    }\n  }\n\n  return topic;\n};\n\nexport const formatTopicRequest = (topic: IAdvancedTopic): NewTopicInput => {\n  const { name, numPartitions, ...configEntries } = topic;\n\n  const config: ConfigEntry[] = [];\n\n  for (const key in configEntries) {\n    if (key) {\n      config.push({\n        key,\n        value: configEntries[key].toString(),\n      });\n    }\n  }\n\n  return {\n    name,\n    settings: {\n      numPartitions: Number(numPartitions),\n      config,\n    },\n  };\n};\n"],"sourceRoot":""}