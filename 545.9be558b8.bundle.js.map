{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/cubes-icon.js","webpack://kafka-ui/./src/Components/Loading/Loading.tsx","webpack://kafka-ui/./src/Hooks/useTimeOut.ts","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/EmptyConsumers.tsx","webpack://kafka-ui/./src/Services/ConsumerGroupsServices.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/SearchConsumers.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/DeleteConsumerGroup.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupDetail.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Utils/axios.ts","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/DeleteTopicsModal.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","Loading","Bullseye","Spinner","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","EmptyConsumers","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","getConsumerGroups","config","limit","offset","topic","getToken","accessToken","basePath","getConsumerGroupList","data","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","getConsumerGroupDetail","getConsumerGroupById","getConsumerGroupsByTopic","SearchConsumers","search","setSearch","InputGroup","SearchInput","id","type","placeholder","value","onChange","onClear","DeleteConsumerGroup","setDeleteModal","deleteModal","consumerName","onDeleteConsumer","useState","verificationText","setVerificationText","addAlert","useContext","onClose","Modal","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","AlertVariant","response","err","key","isDisabled","toUpperCase","Text","htmlFor","TextInput","autoFocus","ConsumerGroupDetail","setIsExpanded","consumerDetail","rows","consumers","map","consumergroup","partition","groupId","memberId","logEndOffset","lag","DrawerPanelContent","widths","default","DrawerHead","TextContent","component","TextVariants","DrawerActions","DrawerCloseButton","DrawerPanelBody","Flex","FlexItem","length","reduce","prev","cur","Table","TableVariant","cells","dataLabel","TableHeader","TableBody","ConsumerGroupsList","onDeleteConsumerGroup","consumerGroupByTopic","page","setPage","perPage","setPerPage","setOffset","consumerGroups","setConsumerGroups","loading","setLoading","isExpanded","consumerGroupDetail","setConsumerGroupDetail","consumerGroupName","setConsumerGroupName","fetchConsumerGroups","consumerGroupsData","error","onSetPage","_event","pageNumber","onPerPageSelect","tableColumns","_","rowId","items","onDelete","panelContent","rowData","consumer","isInline","consumerData","fetchConsumerGroupDetail","Card","Drawer","DrawerContent","Toolbar","ToolbarContent","ToolbarItem","Pagination","itemCount","widgetId","Divider","slice","TopicDetailHead","topicName","getTopicListPath","onClickTopicList","className","Breadcrumb","BreadcrumbItem","e","preventDefault","to","PageSection","PageSectionVariants","deleteTopic","updateTopic","t","useTranslation","Grid","hasGutter","GridItem","span","JumpLinks","isVertical","label","scrollableSelector","style","position","JumpLinksItem","href","PageGroup","hasOverflowScroll","tabIndex","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","popoverBody","popoverHeader","numPartitions","replicationFactor","unit","preallocate","TopicDetailGroup","onUpdateTopic","onDeleteTopic","onError","eventKey","topicDetail","setTopicDetail","activeTabKey","setActiveTabKey","history","undefined","code","status","fetchTopicDetail","Tabs","activeKey","onSelect","event","isBox","Tab","TabTitleText","push","DeleteTopics","getTopics","getTopicsList","getTopicDetail","getTopic","convertTopicResponse","topicObj","forEach","partitions","p","replicas","previousValue","currentValue","updateTopicModel","topicSettings","answer","toString"],"mappings":"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","file":"545.9be558b8.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CubesIconConfig = {\n  name: 'CubesIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M488.6 250.2L392 214V105.5c0-15-9.3-28.4-23.4-33.7l-100-37.5c-8.1-3.1-17.1-3.1-25.3 0l-100 37.5c-14.1 5.3-23.4 18.7-23.4 33.7V214l-96.6 36.2C9.3 255.5 0 268.9 0 283.9V394c0 13.6 7.7 26.1 19.9 32.2l100 50c10.1 5.1 22.1 5.1 32.2 0l103.9-52 103.9 52c10.1 5.1 22.1 5.1 32.2 0l100-50c12.2-6.1 19.9-18.6 19.9-32.2V283.9c0-15-9.3-28.4-23.4-33.7zM358 214.8l-85 31.9v-68.2l85-37v73.3zM154 104.1l102-38.2 102 38.2v.6l-102 41.4-102-41.4v-.6zm84 291.1l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6zm240 112l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CubesIcon = require('../createIcon').createIcon(exports.CubesIconConfig);\nexports[\"default\"] = exports.CubesIcon;","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import { useEffect, useRef } from 'react';\n\nexport const useTimeout: any = (callback: any, delay: number) => {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n};\n","import React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\n\nexport const EmptyConsumers: React.FunctionComponent = () => {\n  return (\n    <EmptyState variant={EmptyStateVariant.xl}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel='h5' size='4xl'>\n        No Consumer Groups Found\n      </Title>\n      <EmptyStateBody>You have No Consumer Groups</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { AxiosResponse } from 'axios';\n\nimport { DefaultApi, ConsumerGroupList, ConsumerGroup } from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  limit?: number,\n  offset?: number,\n  topic?: string\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> = await api.getConsumerGroupList(\n    limit,\n    offset,\n    topic\n  );\n  return response.data;\n};\n\nexport const deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\nexport const getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\nexport const getConsumerGroupsByTopic = async (\n  config: IConfiguration | undefined,\n  limit: number,\n  offset: number,\n  topic: string\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> = await api.getConsumerGroupList(\n    limit,\n    offset,\n    topic\n  );\n  return response.data;\n};\n","import React from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\n\nexport interface IConsumerGroupData {\n  id: string;\n  members: number;\n  partitions: number;\n  state: number;\n}\n\nexport interface ISearchConsumerGroupProps {\n  setSearch: (value: string) => void;\n  search: string;\n}\n\nconst SearchConsumers: React.FunctionComponent<ISearchConsumerGroupProps> = ({\n  search,\n  setSearch,\n}) => {\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n  };\n  const onClear = () => {\n    setSearch('');\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-consumers-input'\n        type='search'\n        aria-label='search input '\n        placeholder='Search'\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchConsumers };\n","import React, { useContext, useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteConsumerGroup } from '../../../../Services/ConsumerGroupsServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteConsumer {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  consumerName?: string;\n  onDeleteConsumer: () => void;\n}\nexport const DeleteConsumerGroup: React.FunctionComponent<IDeleteConsumer> = ({\n  setDeleteModal,\n  deleteModal,\n  consumerName,\n  onDeleteConsumer,\n}) => {\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useContext(AlertContext);\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      consumerName && (await deleteConsumerGroup(consumerName, config));\n      addAlert(\n        `Successfully deleted consumer group ${consumerName}`,\n        AlertVariant.success\n      );\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    onDeleteConsumer();\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Delete consumer group?'\n      title='Delete Consumer Group?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n        >\n          Delete\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        <b>{consumerName}</b> will be deleted.{' '}\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>Type DELETE to confirm:</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { ConsumerGroup } from '../../../../OpenApi';\n\nexport interface IConsumerGroupDetailProps {\n  setIsExpanded: (value: boolean) => void;\n  consumerDetail: ConsumerGroup | undefined;\n}\n\nexport const ConsumerGroupDetail: React.FunctionComponent<IConsumerGroupDetailProps> = ({\n  setIsExpanded,\n  consumerDetail,\n}) => {\n  const columns = [\n    'Partition',\n    'Client ID + Customer ID',\n    'Current offset',\n    'Log end offset',\n    'Offset lag',\n    {\n      title: '',\n      dataLabel: 'Action',\n    },\n  ];\n\n  const rows =\n    consumerDetail &&\n    consumerDetail.consumers.map((consumergroup) => [\n      consumergroup.partition,\n      consumergroup.groupId + consumergroup.memberId,\n      consumergroup.offset,\n      consumergroup.logEndOffset,\n      consumergroup.lag,\n    ]);\n\n  const onCloseClick = () => {\n    setIsExpanded(false);\n  };\n\n  return (\n    <DrawerPanelContent widths={{ default: 'width_66' }}>\n      <DrawerHead>\n        <span>\n          <TextContent>\n            <Text>Consumer group ID</Text>\n            <Text component={TextVariants.h1}>\n              {consumerDetail && consumerDetail.id}\n            </Text>\n          </TextContent>\n        </span>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onCloseClick} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <TextContent>\n          <Flex>\n            <FlexItem>\n              <Text component={TextVariants.h4} size={50}>\n                Active members\n              </Text>\n              <Text component={TextVariants.h2}>\n                {consumerDetail && consumerDetail.consumers.length}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>Partitions with lag</Text>\n              <Text component={TextVariants.h2}>\n                {consumerDetail &&\n                  consumerDetail.consumers.reduce(function (prev, cur) {\n                    return prev + cur.lag > 0 ? prev + 1 : 0;\n                  }, 0)}\n              </Text>\n            </FlexItem>\n          </Flex>\n        </TextContent>\n      </DrawerPanelBody>\n\n      <Table\n        aria-label='Compact Table'\n        variant={TableVariant.compact}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </DrawerPanelContent>\n  );\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport {\n  Card,\n  Divider,\n  Pagination,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  AlertVariant,\n  Button,\n  Drawer,\n  DrawerContent,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\n\nimport { EmptyConsumers } from './EmptyConsumers';\nimport {\n  getConsumerGroups,\n  getConsumerGroupDetail,\n  getConsumerGroupsByTopic,\n} from '../../../../Services/ConsumerGroupsServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { ConsumerGroupList, ConsumerGroup } from '../../../../OpenApi';\nimport { Loading } from '../../../../Components/Loading/Loading';\nimport { AlertContext } from '../../../../Contexts/Alert';\nimport { useTimeout } from '../../../../Hooks/useTimeOut';\nimport { SearchConsumers } from './SearchConsumers';\nimport { DeleteConsumerGroup } from './DeleteConsumerGroup';\nimport { ConsumerGroupDetail } from './ConsumerGroupDetail';\nexport interface IConsumerGroupsList {\n  onDeleteConsumerGroup: () => void;\n  consumerGroupByTopic: boolean;\n  topic?: string;\n}\n\nexport const ConsumerGroupsList: React.FunctionComponent<IConsumerGroupsList> = ({\n  onDeleteConsumerGroup,\n  consumerGroupByTopic,\n  topic,\n}) => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState<number>(0);\n  const [consumerGroups, setConsumerGroups] = useState<ConsumerGroupList>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>('');\n  const [\n    consumerGroupDetail,\n    setConsumerGroupDetail,\n  ] = useState<ConsumerGroup>();\n  const [consumerGroupName, setConsumerGroupName] = useState<\n    string | undefined\n  >();\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n\n  const fetchConsumerGroups = async () => {\n    if (consumerGroupByTopic && topic) {\n      try {\n        const consumerGroupsData = await getConsumerGroupsByTopic(\n          config,\n          100,\n          offset,\n          topic\n        );\n        if (consumerGroupsData) {\n          setConsumerGroups(consumerGroupsData);\n        }\n      } catch (err) {\n        addAlert(err.response.data.error, AlertVariant.danger);\n      }\n      setLoading(false);\n    } else {\n      try {\n        const consumerGroupsData = await getConsumerGroups(config);\n        if (consumerGroupsData) {\n          setConsumerGroups(consumerGroupsData);\n        }\n      } catch (err) {\n        addAlert(err.response.data.error, AlertVariant.danger);\n      }\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    fetchConsumerGroups();\n  }, [search, deleteModal]);\n\n  useTimeout(() => fetchConsumerGroups(), 5000);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const tableColumns = [\n    { title: 'Consumer Group ID' },\n    { title: 'Active Members' },\n    { title: 'Partitions with lag' },\n  ];\n  const onDelete = (rowId: any) => {\n    if (consumerGroups?.items) {\n      setConsumerGroupName(consumerGroups.items[rowId].id);\n    }\n    setDeleteModal(true);\n  };\n\n  const actions = [{ title: 'Delete', onClick: (_, rowId) => onDelete(rowId) }];\n\n  const fetchConsumerGroupDetail = async (consumerGroupName) => {\n    try {\n      const consumerData = await getConsumerGroupDetail(\n        consumerGroupName,\n        config\n      );\n      if (consumerData) {\n        setConsumerGroupDetail(consumerData);\n      }\n    } catch (err) {\n      addAlert(err.response.data.error, AlertVariant.danger);\n    }\n    setIsExpanded(true);\n  };\n\n  const panelContent = (\n    <ConsumerGroupDetail\n      setIsExpanded={setIsExpanded}\n      consumerDetail={consumerGroupDetail}\n    />\n  );\n  const rowData =\n    consumerGroups?.items.map((consumer) => [\n      {\n        title: (\n          <Button\n            variant='link'\n            isInline\n            onClick={() => fetchConsumerGroupDetail(consumer.id)}\n          >\n            {consumer.id}\n          </Button>\n        ),\n      },\n\n      consumer.consumers?.length,\n      consumer.consumers.reduce(function (prev, cur) {\n        return prev + cur.lag > 0 ? prev + 1 : 0;\n      }, 0),\n    ]) || [];\n\n  return (\n    <>\n      <Card>\n        {deleteModal && (\n          <DeleteConsumerGroup\n            consumerName={consumerGroupName}\n            setDeleteModal={setDeleteModal}\n            deleteModal={deleteModal}\n            onDeleteConsumer={onDeleteConsumerGroup}\n          />\n        )}\n        <Drawer isExpanded={isExpanded}>\n          <DrawerContent panelContent={panelContent}>\n            <Toolbar>\n              <ToolbarContent>\n                <ToolbarItem>\n                  <SearchConsumers search={search} setSearch={setSearch} />\n                </ToolbarItem>\n                <ToolbarItem variant='pagination'>\n                  <Pagination\n                    itemCount={rowData.length}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    widgetId='consumer-group-pagination-top'\n                    onPerPageSelect={onPerPageSelect}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n            <Divider />\n            {consumerGroupByTopic ? (\n              <Table\n                aria-label='Compact Table'\n                variant={TableVariant.compact}\n                cells={tableColumns}\n                rows={\n                  page != 1\n                    ? rowData.slice(offset, offset + perPage)\n                    : rowData.slice(0, perPage)\n                }\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            ) : (\n              <Table\n                aria-label='Compact Table'\n                variant={TableVariant.compact}\n                cells={tableColumns}\n                rows={\n                  page != 1\n                    ? rowData.slice(offset, offset + perPage)\n                    : rowData.slice(0, perPage)\n                }\n                actions={actions}\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            )}\n            {rowData.length < 1 ? (\n              <EmptyConsumers />\n            ) : (\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='consumer-group-pagination-bottom'\n                onPerPageSelect={onPerPageSelect}\n                offset={0}\n              />\n            )}\n          </DrawerContent>\n        </Drawer>\n      </Card>\n      <Divider />\n    </>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  getTopicListPath,\n  onClickTopicList,\n}) => {\n  return (\n    <section className='pf-c-page__main-breadcrumb'>\n      <Breadcrumb>\n        <BreadcrumbItem\n          onClick={(e) => {\n            e.preventDefault();\n            onClickTopicList();\n          }}\n          to={getTopicListPath()}\n        >\n          Topics\n        </BreadcrumbItem>\n        <BreadcrumbItem>{topicName}</BreadcrumbItem>\n      </Breadcrumb>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent className='header-padding'>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </section>\n  );\n};\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={2} className='grid-item-padding'>\n        <JumpLinks\n          isVertical\n          label='JUMP TO SECTION'\n          scrollableSelector='#topic-detail-view'\n          style={{ position: 'absolute' }}\n        >\n          <JumpLinksItem key={0} href='#core-configuration'>\n            Core configuration\n          </JumpLinksItem>\n          <JumpLinksItem key={1} href='#messages'>\n            Messages\n          </JumpLinksItem>\n          <JumpLinksItem key={2} href='#log'>\n            Log\n          </JumpLinksItem>\n          <JumpLinksItem key={3} href='#replication'>\n            Replication\n          </JumpLinksItem>\n          <JumpLinksItem key={4} href='#cleanup'>\n            Cleanup\n          </JumpLinksItem>\n          <JumpLinksItem key={5} href='#index'>\n            Index\n          </JumpLinksItem>\n          <JumpLinksItem key={6} href='#flush'>\n            Flush\n          </JumpLinksItem>\n          <JumpLinksItem key={7} href='#delete'>\n            Delete\n          </JumpLinksItem>\n        </JumpLinks>\n      </GridItem>\n      <GridItem span={8} className='grid-item-padding'>\n        <PageGroup hasOverflowScroll id='topic-detail-view'>\n          <PageSection>\n            <TextContent>\n              <Text\n                component={TextVariants.h2}\n                tabIndex={-1}\n                id='core-configuration'\n              >\n                Core configuration\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.coreConfigInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail name'\n              fieldLabel='Name'\n              fieldValue={topic.name}\n              popoverBody={t('createTopic.topicNameLabelBody')}\n              popoverHeader={t('createTopic.topicNameLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail partition'\n              fieldLabel='Partitions'\n              fieldValue={topic.numPartitions}\n              popoverBody={t('createTopic.partitionsLabelBody')}\n              popoverHeader={t('createTopic.partitionsLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail replicas'\n              fieldLabel='Replicas'\n              fieldValue={topic.replicationFactor}\n              popoverBody={t('createTopic.replicasLabelBody')}\n              popoverHeader={t('createTopic.replicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min-in-sync replica'\n              fieldLabel='Minimum in-sync replicas'\n              fieldValue={topic['min.insync.replicas']}\n              popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n              popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention time'\n              fieldLabel='Retention Time'\n              fieldValue={topic['retention.ms']}\n              popoverBody={t('createTopic.retentionTimeLabelBody')}\n              popoverHeader={t('createTopic.retentionTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n                Messages\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.messageSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Maximum message bytes'\n              fieldValue={topic['max.message.bytes']}\n              popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n              popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp type'\n              fieldLabel='Message timestamp type'\n              fieldValue={topic['message.timestamp.type']}\n              popoverBody={t('createTopic.messageTimestampLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp difference'\n              fieldLabel='Maximum message timestamp difference'\n              fieldValue={topic['message.timestamp.difference.max.ms']}\n              popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampDiffLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail compression type'\n              fieldLabel='Compression type'\n              fieldValue={topic['compression.type']}\n              popoverBody={t('createTopic.compressionTypeLabelBody')}\n              popoverHeader={t('createTopic.compressionTypeLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message format version'\n              fieldLabel='Message format version'\n              fieldValue={topic['log.message.format.version']}\n              popoverBody={t('createTopic.messageFormatLabelBody')}\n              popoverHeader={t('createTopic.messageFormatLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                Log\n              </Text>\n              <Text component={TextVariants.p} className='section-info-head'>\n                {t('createTopic.logSectionInfo')}\n              </Text>\n              <Text\n                component={TextVariants.small}\n                className='section-info-note'\n              >\n                {t('createTopic.logSectionInfoNote')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail cleanup policy'\n              fieldLabel='Cleanup policy'\n              fieldValue={topic['cleanup.policy']}\n              popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n              popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention bytes'\n              fieldLabel='Delete retention time'\n              fieldValue={topic['delete.retention.ms']}\n              popoverBody={t('createTopic.deleteRetentionLabelBody')}\n              popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n              unit={'time'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min cleanable dirty ratio'\n              fieldLabel='Minimum cleanable dirty ratio'\n              fieldValue={topic['min.cleanable.dirty.ratio']}\n              popoverBody={t('createTopic.minRatioLabelBody')}\n              popoverHeader={t('createTopic.minRatioLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min compaction lag time'\n              fieldLabel='Minimum compaction lag time'\n              fieldValue={topic['min.compaction.lag.ms']}\n              popoverBody={t('createTopic.minLagLabelBody')}\n              popoverHeader={t('createTopic.minLagLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='replication'>\n                Replication\n              </Text>\n              <Text component={TextVariants.p} className='section-info-head'>\n                {t('createTopic.replicationSectionInfo')}\n              </Text>\n              <Text\n                component={TextVariants.small}\n                className='section-info-note'\n              >\n                {t('createTopic.replicationSectionInfoNote')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail unclean leader election'\n              fieldLabel='Unclean leader election'\n              fieldValue={topic['unclean.leader.election.enable']}\n              popoverBody={t('createTopic.leaderElectionLabelBody')}\n              popoverHeader={t('createTopic.leaderElectionLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n                Cleanup\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.cleanupSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Log segment size'\n              fieldValue={topic['log.segment.bytes']}\n              popoverBody={t('createTopic.logSegmentLabelHead')}\n              popoverHeader={t('createTopic.logSegmentLabelBody')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment time'\n              fieldLabel='Segment time'\n              fieldValue={topic['segment.ms']}\n              popoverBody={t('createTopic.segementTimeLabelBody')}\n              popoverHeader={t('createTopic.segementTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment jitter time'\n              fieldLabel='Segment jitter time'\n              fieldValue={topic['segment.jitter.ms']}\n              popoverBody={t('createTopic.jitterTimeLabelBody')}\n              popoverHeader={t('createTopic.jitterTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='file delete delay'\n              fieldLabel='File delete delay'\n              fieldValue={topic['file.delete.delay.ms']}\n              popoverBody={t('createTopic.deleteDelayLabelBody')}\n              popoverHeader={t('createTopic.deleteDelayLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='preallocation log segment files'\n              fieldLabel='Preallocation log segment files'\n              fieldValue={topic.preallocate}\n              popoverBody={t('createTopic.preallocateLabelBody')}\n              popoverHeader={t('createTopic.preallocateLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                Index\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.indexSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='index interval size'\n              fieldLabel='Index interval size'\n              fieldValue={topic['index.interval.bytes']}\n              popoverBody={t('createTopic.indexIntervalLabelBody')}\n              popoverHeader={t('createTopic.indexIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment index size'\n              fieldLabel='Segment index size'\n              fieldValue={topic['segment.index.bytes']}\n              popoverBody={t('createTopic.segementIntervalLabelBody')}\n              popoverHeader={t('createTopic.segementIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                Flush\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.flushSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval messages'\n              fieldLabel='Flush interval messages'\n              fieldValue={topic['flush.messages']}\n              popoverBody={t('createTopic.intervalMessagesLabelBody')}\n              popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval time'\n              fieldLabel='Flush interval time'\n              fieldValue={topic['flush.ms']}\n              popoverBody={t('createTopic.intervalTimeLabelBody')}\n              popoverHeader={t('createTopic.intervalTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <Divider />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                Delete topic (irreversible)\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.deleteTopicInfo')}\n              </Text>\n            </TextContent>\n\n            <Button\n              variant='danger'\n              className='section-margin'\n              onClick={deleteTopic}\n            >\n              Delete topic\n            </Button>\n          </PageSection>\n        </PageGroup>\n      </GridItem>\n      <GridItem span={2} className='grid-item-padding'>\n        <Button variant='primary' onClick={updateTopic}>\n          Edit properties\n        </Button>\n      </GridItem>\n    </Grid>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic } from '../../../Contexts/Topic';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupsList } from '../../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\nimport { isAxiosError } from '../../../Utils/axios';\nimport { AlertContext } from '../../../Contexts/Alert';\nimport { useHistory } from 'react-router';\n\nexport type TopicDetailGroupProps = {\n  topicName: string;\n  onUpdateTopic: () => void;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onDeleteTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n  eventKey: number;\n};\n\n// TODO: Remove this mock, fetch it from server.\nconst topic: AdvancedTopic = {\n  name: 'SampleTopic2345',\n  numPartitions: '52',\n  replicationFactor: '35',\n  'min.insync.replicas': '78',\n  'retention.ms': '78',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '50',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '4',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': 'Producer',\n  'cleanup.policy': 'Delete',\n  'retention.bytes': '-1',\n  'retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '78',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': 'false',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '789',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '4',\n  'min.compaction.lag.ms': '58',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '6048000',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '0',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '6000',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: 'true',\n  'index.interval.bytes': '4096',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '10847560',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '783945',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '3894949',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicDetailGroup: React.FC<TopicDetailGroupProps> = ({\n  topicName,\n  onUpdateTopic,\n  getTopicListPath,\n  onClickTopicList,\n  onDeleteTopic,\n  onError,\n  eventKey,\n}) => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(topic);\n  const [activeTabKey, setActiveTabKey] = useState(eventKey);\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const fetchTopicDetail = async (topicName: string) => {\n    if (eventKey === 2) {\n      try {\n        const response = await getTopicDetail(topicName, config);\n        setTopicDetail(response);\n      } catch (err) {\n        if (isAxiosError(err)) {\n          if (onError) {\n            onError(err.response?.data.code, err.response?.data.error);\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert(`Topic ${topicName} does not exist`, AlertVariant.danger);\n            onClickTopicList();\n          }\n        }\n      }\n    }\n  };\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n  const onDeleteConsumer = () => {\n    history.push('/consumerGroups');\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        getTopicListPath={getTopicListPath}\n        onClickTopicList={onClickTopicList}\n      />\n      <PageSection variant={PageSectionVariants.light}>\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          isBox={false}\n          className='tab-padding'\n        >\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupsList\n              onDeleteConsumerGroup={onDeleteConsumer}\n              consumerGroupByTopic={true}\n              topic={topicName}\n            />\n          </Tab>\n          <Tab eventKey={2} title={<TabTitleText>Properties</TabTitleText>}>\n            <TopicDetailView\n              topic={topicDetail}\n              deleteTopic={deleteTopic}\n              updateTopic={onUpdateTopic}\n            />\n          </Tab>\n        </Tabs>\n        {deleteModal && (\n          <DeleteTopics\n            topicName={topicName}\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n            onDeleteTopic={onDeleteTopic}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '../../../../Services/TopicServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteTopics {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  topicName?: string;\n  onDeleteTopic: () => void;\n}\nexport const DeleteTopics: React.FunctionComponent<IDeleteTopics> = ({\n  setDeleteModal,\n  deleteModal,\n  topicName,\n  onDeleteTopic,\n}) => {\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useContext(AlertContext);\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      topicName && (await deleteTopic(topicName, config));\n      addAlert(`Successfully deleted topic ${topicName}`, AlertVariant.success);\n    } catch (err) {\n      addAlert(err.response.data.error, AlertVariant.danger);\n    }\n    onDeleteTopic();\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Delete topic?'\n      title='Delete topic?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n        >\n          Delete\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <b>{topicName}</b> will be deleted.{' '}\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>Type DELETE to confirm:</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport {\n  ConfigEntry,\n  DefaultApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length;\n\n  topicObj.replicationFactor = topic?.partitions\n    ?.map((p) => p.replicas?.length)\n    .reduce(\n      (previousValue = 0, currentValue = 0) => previousValue + currentValue\n    );\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"sourceRoot":""}