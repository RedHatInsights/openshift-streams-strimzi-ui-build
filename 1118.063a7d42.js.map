{"version":3,"file":"1118.063a7d42.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/components/MASLoading/MASLoading.tsx","webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SolidLabel.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/Cells.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SelectAccount.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/acls.ts","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateSelect.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/OperationCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/PermissionTypeCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/ResourceType.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/PatternTypeCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateTypeahead.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/ResourceCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/RemoveButtonCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/ExistingAclTable.tsx","webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/PreCancelModal.tsx","webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/ManagePermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/utils.ts","webpack://kafka-ui/./src/modules/Topics/utils/topicNameValidation.ts","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["import { FormGroup, Popover, ValidatedOptions } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\nexport type FormGroupWithPopoverProps = {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel?: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n  validated?: ValidatedOptions;\n  helperText?: string;\n  helperTextInvalid?: string;\n  isRequired?: boolean;\n};\n\nexport const FormGroupWithPopover: React.FC<FormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n  validated,\n  helperText,\n  helperTextInvalid,\n  isRequired,\n}) => {\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      validated={validated}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      isRequired={isRequired}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={(event) => event.preventDefault()}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  BullseyeProps,\n  Spinner,\n  SpinnerProps,\n} from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData, RowWrapperProps } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (\n  rowWrapperProps: RowWrapperProps\n): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps || {};\n  const { isExpanded, originalData } = row || {};\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={typeof trRef === 'function' ? undefined : trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event) => onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelProps } from '@patternfly/react-core';\nimport './SolidLabel.css';\n\nexport type SolidLabelProps = {\n  variant: AclResourceType;\n};\n\nexport const SolidLabel: React.VFC<SolidLabelProps> = ({ variant }) => {\n  const variantSwitch = (): {\n    labelColor: LabelProps['color'];\n    content: string;\n  } => {\n    switch (variant) {\n      case AclResourceType.Group:\n        return { labelColor: 'green', content: 'G' };\n      case AclResourceType.Cluster:\n        return { labelColor: 'grey', content: 'KI' };\n      case AclResourceType.Topic:\n        return { labelColor: 'blue', content: 'T' };\n      case AclResourceType.TransactionalId:\n        return { labelColor: 'orange', content: 'TI' };\n    }\n  };\n  const { labelColor, content } = variantSwitch();\n  return (\n    <Label color={labelColor} className={`mas-m-solid`}>\n      {content}\n    </Label>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { ICell } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport {\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelGroup, Tooltip } from '@patternfly/react-core';\nimport { EnhancedAclBinding } from '@app/services/acls';\nimport {\n  PrincipalType,\n  usePrincipals,\n  useAuth,\n} from '@rhoas/app-services-ui-shared';\nimport { sentenceCase } from 'sentence-case';\nimport { displayName } from '@app/modules/Permissions/utils';\nimport { useFederated } from '@app/contexts';\nimport { SolidLabel } from '@app/modules/Permissions/components/ManagePermissionsDialog/SolidLabel';\n\nexport type CellBuilder<T extends EnhancedAclBinding> = (\n  item: T,\n  row: number\n) => ICell | string;\n\nconst AllAccountsPrincipal: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  return (\n    <div>\n      <Label variant='outline'>{t('permission.table.all_accounts')}</Label>\n    </div>\n  );\n};\n\ntype PrincipalWithTooltipProps = {\n  acl: EnhancedAclBinding;\n};\nconst PrincipalWithTooltip: React.FunctionComponent<\n  PrincipalWithTooltipProps\n> = ({ acl }) => {\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n  const auth = useAuth();\n  const { kafka } = useFederated() || {};\n\n  const principals = usePrincipals()\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const locatedPrincipals = principals.filter((p) => p.id === acl.principal);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  if (locatedPrincipals.length === 1) {\n    if (locatedPrincipals[0].principalType === PrincipalType.ServiceAccount) {\n      return (\n        <Tooltip\n          content={\n            <div>\n              Type: {locatedPrincipals[0].principalType} <br />\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {' '}\n            {acl.principal} <InfoCircleIcon color='grey' />\n          </span>\n        </Tooltip>\n      );\n    } else {\n      return (\n        <Tooltip\n          content={\n            <div>\n              Type: {locatedPrincipals[0].principalType} <br />\n              Name: {locatedPrincipals[0].displayName} <br />\n              Email: {locatedPrincipals[0].emailAddress}\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {' '}\n            {acl.principal} <InfoCircleIcon color='grey' />\n          </span>\n        </Tooltip>\n      );\n    }\n  }\n  return <span> {acl.principal}</span>;\n};\n\nexport const principalCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  if (item.principal === '*') {\n    return {\n      title: <AllAccountsPrincipal />,\n      props: {},\n    };\n  } else {\n    return {\n      title: <PrincipalWithTooltip acl={item} />,\n      props: {},\n    };\n  }\n};\n\nexport const permissionOperationCell: CellBuilder<EnhancedAclBinding> = (\n  item\n) => {\n  return {\n    title: (\n      <LabelGroup>\n        {item.permission && (\n          <Label\n            variant='outline'\n            color={\n              item.permission === AclPermissionType.Deny ? 'red' : undefined\n            }\n          >\n            {sentenceCase(item.permission)}\n          </Label>\n        )}\n        {item.operation && (\n          <Label variant='outline'>{sentenceCase(item.operation)}</Label>\n        )}\n      </LabelGroup>\n    ),\n    props: {},\n  } as ICell;\n};\n\nexport const resourceCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  const PatternType: React.FunctionComponent = () => {\n    const { t } = useTranslation(['kafkaTemporaryFixMe']);\n    if (item.patternType === AclPatternType.Prefixed) {\n      return t('permission.cells.pattern_type_prefixed');\n    } else {\n      return t('permission.cells.pattern_type_literal');\n    }\n  };\n  if (item.resourceType === AclResourceType.Cluster) {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)}\n        </div>\n      ),\n    };\n  } else {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)} <PatternType /> \"{item.resourceName}\"\n        </div>\n      ),\n    };\n  }\n};\n","import React, { useState } from 'react';\nimport { Principal, PrincipalType } from '@rhoas/app-services-ui-shared';\nimport { useTranslation } from 'react-i18next';\nimport { FormGroupWithPopover } from '@app/components';\nimport {\n  Divider,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectProps,\n  SelectVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\n\nexport type SelectAccountProps = {\n  id: Validated<string | undefined>;\n  setId: React.Dispatch<React.SetStateAction<Validated<string | undefined>>>;\n  initialOptions: Principal[];\n  setEscapeClosesModal: (closes: boolean) => void;\n};\n\nexport const SelectAccount: React.VFC<SelectAccountProps> = ({\n  setId,\n  id,\n  initialOptions,\n  setEscapeClosesModal,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle: SelectProps['onToggle'] = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setId({ value: undefined, validated: undefined });\n    setIsOpen(false);\n  };\n\n  const onSelect: SelectProps['onSelect'] = (_, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setId(() => {\n        if (selection === '') {\n          return {\n            value: selection as string,\n            validated: ValidatedOptions.error,\n            errorMessage: t(\n              'permission.manage_permissions_dialog.must_select_account_error'\n            ),\n          };\n        } else {\n          return {\n            validated: ValidatedOptions.default,\n            value: selection as string,\n          };\n        }\n      });\n    }\n    setIsOpen(false);\n  };\n\n  const options = [\n    <SelectGroup key='all_accounts_group'>\n      <SelectOption\n        key='*'\n        value='*'\n        description={t(\n          'permission.manage_permissions_dialog.all_accounts_description'\n        )}\n      >\n        {t('permission.manage_permissions_dialog.all_accounts_title')}\n      </SelectOption>\n    </SelectGroup>,\n    <Divider key='divider' />,\n    <SelectGroup\n      label={t(\n        'permission.manage_permissions_dialog.all_accounts_service_account_group'\n      )}\n      key='service_accounts_group'\n    >\n      {initialOptions\n        .filter(\n          (principal) =>\n            principal.principalType === PrincipalType.ServiceAccount\n        )\n        .sort((a, b) =>\n          a.displayName && b.displayName\n            ? a.displayName.localeCompare(b.displayName)\n            : -1\n        )\n        .map((principal, index) => (\n          <SelectOption\n            key={index}\n            value={principal.id}\n            description={principal.displayName}\n          >\n            {principal.id}\n          </SelectOption>\n        ))}\n    </SelectGroup>,\n    <Divider key='divider' />,\n    <SelectGroup\n      label={t(\n        'permission.manage_permissions_dialog.all_accounts_user_account_group'\n      )}\n      key='user_accounts_group'\n    >\n      {initialOptions\n        .filter(\n          (principal) => principal.principalType === PrincipalType.UserAccount\n        )\n        .map((principal, index) => (\n          <SelectOption\n            key={index}\n            value={principal.id}\n            description={principal.displayName}\n          >\n            {principal.id}\n          </SelectOption>\n        ))}\n    </SelectGroup>,\n  ];\n\n  const customFilter: SelectProps['onFilter'] = (_, value) => {\n    if (!value) {\n      return options;\n    }\n\n    const input = new RegExp(value, 'i');\n    return options\n      .filter((accounts) => Array.isArray(accounts.props.children))\n      .map((account) =>\n        account.props.children.filter(\n          (allAccounts: any) =>\n            input.test(allAccounts.props.value) ||\n            input.test(allAccounts.props.description)\n        )\n      );\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t('permission.manage_permissions_dialog.account_id_title')}\n      fieldId='kafka-instance-name'\n      fieldLabel={t('permission.manage_permissions_dialog.account_id_title')}\n      labelBody={t('permission.manage_permissions_dialog.account_id_help')}\n      buttonAriaLabel={t(\n        'permission.manage_permissions_dialog.account_id_aria'\n      )}\n      isRequired={true}\n      helperTextInvalid={id.errorMessage}\n      validated={id.validated || ValidatedOptions.default}\n    >\n      <Select\n        variant={SelectVariant.typeahead}\n        className='kafka-ui--select--limit-height'\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_aria'\n        )}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={id.value}\n        onFilter={customFilter}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_placeholder'\n        )}\n        isCreatable={false}\n        menuAppendTo='parent'\n        validated={id.validated || ValidatedOptions.default}\n        isGrouped={true}\n      >\n        {options}\n      </Select>\n    </FormGroupWithPopover>\n  );\n};\n","import { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\n\nexport const AllAccountsId = '*';\n\nexport const isNewAclModified = (value: NewAcls): boolean => {\n  const emptyAcl = createEmptyNewAcl();\n  const newAcls = Array.isArray(value) ? value : [value];\n  return newAcls.some((v) => {\n    if (v.aclShortcutType === AclShortcutType.ManageAccess) {\n      return true;\n    } else if (v.aclShortcutType) {\n      return !(\n        v.patternType.value === emptyAcl.patternType.value &&\n        v.resource.value === emptyAcl.resource.value\n      );\n    }\n    return !(\n      v.permission.value === emptyAcl.permission.value &&\n      v.patternType.value === emptyAcl.patternType.value &&\n      v.resourceType.value === emptyAcl.resourceType.value &&\n      v.resource.value === emptyAcl.resource.value &&\n      v.operation.value === emptyAcl.operation.value\n    );\n  });\n};\n\nexport enum AclShortcutType {\n  ConsumeTopic = 'ConsumeTopic',\n  ProduceTopic = 'ProduceTopic',\n  ManageAccess = 'ManageAccess',\n}\n\nexport type NewAcl = {\n  permission: Validated<AclPermissionType | undefined>;\n  operation: Validated<AclOperation | undefined>;\n  resourceType: Validated<AclResourceType | undefined>;\n  patternType: Validated<AclPatternType | undefined>;\n  resource: Validated<string | undefined>;\n  aclShortcutType: AclShortcutType | undefined;\n  operations?: AclOperation[];\n  metaData?: {\n    title: string;\n    popoverHeader: string;\n    popoverBody: string;\n    ariaLabel: string;\n  };\n};\n\nexport type NewAcls = NewAcl | NewAcl[];\n\nexport const createEmptyNewAcl = (): NewAcl => {\n  return {\n    permission: {\n      value: AclPermissionType.Allow,\n    },\n    operation: {\n      value: undefined,\n    },\n    resourceType: {\n      value: undefined,\n    },\n    patternType: {\n      value: AclPatternType.Prefixed,\n    },\n    resource: {\n      value: undefined,\n    },\n    aclShortcutType: undefined,\n  } as NewAcl;\n};\n\nexport type CellProps = {\n  acl: NewAcl;\n  row: number;\n  childRow?: number;\n};\n\nexport type AclCellProps = CellProps & {\n  setAcls: React.Dispatch<React.SetStateAction<NewAcls[]>>;\n  setEscapeClosesModal: (closes: boolean) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n};\n\nexport const update2DArrayAcls = (\n  prevAcls: NewAcls[],\n  newAcl: NewAcl,\n  row: number,\n  childRow = 0\n) => {\n  const el = prevAcls[row];\n  if (Array.isArray(el) && childRow !== undefined) {\n    el[childRow] = newAcl;\n  } else {\n    prevAcls[row] = newAcl;\n  }\n  return prevAcls;\n};\n\nexport const handle2DArrayAcls = (\n  acls: NewAcls[],\n  row: number,\n  childRow = 0\n): NewAcl => {\n  const el = acls[row];\n  const newAcls = Array.isArray(el) ? el[childRow] : el;\n  return newAcls;\n};\n","import { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { useTranslation } from 'react-i18next';\nimport React, { useState } from 'react';\nimport { Select as PFSelect } from '@patternfly/react-core/dist/js/components/Select/Select';\nimport { SelectProps, SelectVariant } from '@patternfly/react-core';\nimport { SelectOption as PFSelectOption } from '@patternfly/react-core/dist/js/components/Select/SelectOption';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport { ValidatedOptions } from '@patternfly/react-core';\n\nexport type CreateSelectProps<T> = {\n  id: string;\n  options: SelectOption<T>[];\n  selected: Validated<string | undefined>;\n  setSelected: (row: number, id: T | undefined, childRow?: number) => void;\n  row: number;\n  childRow?: number;\n  placeholder?: string;\n  setEscapeClosesModal: (closes: boolean) => void;\n  onSelect: (value: string) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n  onClear: () => T | undefined;\n};\n\nexport const CreateSelect = <\n  T extends AclPermissionType | AclResourceType | AclPatternType | AclOperation\n>({\n  options,\n  setSelected,\n  selected,\n  row,\n  id,\n  placeholder,\n  setEscapeClosesModal,\n  onSelect,\n  menuAppendTo,\n  onClear,\n  childRow,\n}: CreateSelectProps<T>): React.ReactElement => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle: SelectProps['onToggle'] = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setSelected(row, onClear(), childRow);\n    setIsOpen(false);\n  };\n\n  const select: SelectProps['onSelect'] = (_, selection, isPlaceholder) => {\n    const value = selection === '' ? undefined : (selection as T);\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(row, value, childRow);\n      setIsOpen(false);\n      if (value) {\n        onSelect(value);\n      }\n    }\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.assign_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={selected.errorMessage}\n      validated={selected.validated || ValidatedOptions.default}\n    >\n      <PFSelect\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={select}\n        selections={selected.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={placeholder}\n        validated={selected.validated || ValidatedOptions.default}\n        menuAppendTo={menuAppendTo}\n        maxHeight={200}\n        direction={'up'}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          >\n            {option.title}\n          </PFSelectOption>\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions } from '@patternfly/react-core';\nimport { sentenceCase } from 'sentence-case';\nimport { snakeCase } from 'snake-case';\n\nimport { AclOperation } from '@rhoas/kafka-instance-sdk';\nimport {\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getOperations } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\n\ntype OperationCellProps = AclCellProps & {\n  resourceOperations: { [key: string]: Array<string> };\n};\n\nconst OperationCell: React.VFC<OperationCellProps> = ({\n  acl,\n  row,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n  resourceOperations,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const setOperation = (\n    row: number,\n    value?: AclOperation,\n    childRow?: number\n  ) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].operation = { value };\n            }\n          } else {\n            v.operation = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateSelect\n      options={getOperations()\n        .filter((value) => {\n          if (\n            acl.resourceType.value === undefined ||\n            acl.resourceType.value.toString() === ''\n          ) {\n            return true;\n          }\n          const resourceType = snakeCase(acl.resourceType.value.toString());\n          const operationType = snakeCase(value);\n          return resourceOperations[resourceType].some(\n            (p) => p === operationType\n          );\n        })\n        .map((value) => {\n          return {\n            value,\n            title: sentenceCase(value),\n          } as SelectOption<AclOperation>;\n        })}\n      selected={acl.operation}\n      setSelected={setOperation}\n      row={row}\n      id='operation'\n      placeholder={t(\n        'permission.manage_permissions_dialog.assign_permissions.operation_placeholder'\n      )}\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().operation.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            newPrevState.operation.validated = ValidatedOptions.error;\n            newPrevState.operation.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_operation_error'\n            );\n          } else {\n            newPrevState.operation.validated = ValidatedOptions.default;\n          }\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { OperationCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions, LabelGroup, Label } from '@patternfly/react-core';\nimport { sentenceCase } from 'sentence-case';\n\nimport { AclPermissionType } from '@rhoas/kafka-instance-sdk';\n\nimport {\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getPermissionsTypes } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\n\ntype PermissionTypeCellProps = AclCellProps;\n\nconst PermissionTypeCell: React.VFC<PermissionTypeCellProps> = ({\n  acl,\n  row,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const setPermissionType = (\n    row: number,\n    value?: AclPermissionType,\n    childRow?: number\n  ) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].permission = { value };\n            }\n          } else {\n            v.permission = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  if (acl.aclShortcutType) {\n    return (\n      <>\n        {Array.isArray(acl?.operations) && (\n          <LabelGroup numLabels={4}>\n            <Label\n              variant='outline'\n              color={\n                acl.permission.value === AclPermissionType.Deny\n                  ? 'red'\n                  : undefined\n              }\n            >\n              {sentenceCase(acl.permission.value || '')}\n            </Label>\n            {acl?.operations?.map((operation) => (\n              <Label variant='outline' key={operation}>\n                {sentenceCase(operation)}\n              </Label>\n            ))}\n          </LabelGroup>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <CreateSelect\n      options={getPermissionsTypes().map((value) => {\n        return {\n          value,\n          title: sentenceCase(value),\n        } as SelectOption<AclPermissionType>;\n      })}\n      selected={acl.permission}\n      setSelected={setPermissionType}\n      row={row}\n      id='permission-type'\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().permission.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            newPrevState.permission.validated = ValidatedOptions.error;\n            newPrevState.permission.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_permission_error'\n            );\n          } else {\n            newPrevState.permission.validated = ValidatedOptions.default;\n          }\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { PermissionTypeCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport {\n  AclShortcutType,\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getResourceTypes } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { SolidLabel } from './SolidLabel';\nimport { displayName } from '@app/modules/Permissions/utils';\n\ntype ResourceTypeProps = AclCellProps & {\n  kafkaName: string | undefined;\n};\n\nconst ResourceType: React.VFC<ResourceTypeProps> = ({\n  row,\n  acl,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n  kafkaName,\n}) => {\n  const { resourceType } = acl;\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  if (\n    (acl.aclShortcutType === AclShortcutType.ConsumeTopic ||\n      acl.aclShortcutType === AclShortcutType.ProduceTopic) &&\n    resourceType?.value\n  ) {\n    return (\n      <>\n        <SolidLabel variant={resourceType.value} />{' '}\n        {displayName(resourceType.value)}\n      </>\n    );\n  } else if (acl.aclShortcutType === AclShortcutType.ManageAccess) {\n    return (\n      <>\n        <SolidLabel variant={AclResourceType.Cluster} />{' '}\n        {displayName(AclResourceType.Cluster)} is \"{kafkaName}\"\n      </>\n    );\n  }\n\n  const setResourceType = (row: number, value?: AclResourceType) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            v[row].resourceType = { value };\n          } else {\n            v.resourceType = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateSelect\n      options={getResourceTypes().map((value) => {\n        return {\n          value,\n          title: displayName(value),\n        } as SelectOption<AclResourceType>;\n      })}\n      selected={acl.resourceType}\n      setSelected={setResourceType}\n      row={row}\n      id='resource-type'\n      placeholder={t(\n        'permission.manage_permissions_dialog.assign_permissions.resource_type_placeholder'\n      )}\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().resourceType.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n            // newPrevState.validated = ValidatedOptions.error;\n            // newPrevState.errorMessage = t(\n            //   'permission.manage_permissions_dialog.assign_permissions.must_select_resource_type_error'\n            // );\n          } else {\n            // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n            // newPrevState.validated = ValidatedOptions.default;\n          }\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { ResourceType };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions } from '@patternfly/react-core';\n\nimport { AclPatternType, AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport {\n  AclShortcutType,\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getPatternTypes } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\n\ntype PatternTypeCellProps = AclCellProps;\n\nconst PatternTypeCell: React.VFC<PatternTypeCellProps> = ({\n  acl,\n  row,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  if (\n    acl.resourceType.value === AclResourceType.Cluster ||\n    acl.aclShortcutType === AclShortcutType.ManageAccess\n  ) {\n    return <></>;\n  }\n\n  const setPatternType = (\n    row: number,\n    value?: AclPatternType,\n    childRow?: number\n  ) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].patternType = { value };\n            }\n          } else {\n            v.patternType = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateSelect\n      options={getPatternTypes()\n        ?.map((value) => {\n          return {\n            value,\n            title:\n              value === AclPatternType.Prefixed\n                ? t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_prefixed'\n                  )\n                : t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_literal'\n                  ),\n            description:\n              value === AclPatternType.Prefixed\n                ? t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_prefixed_help'\n                  )\n                : t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_literal_help'\n                  ),\n          } as SelectOption<AclPatternType>;\n        })\n        .sort((a, b) => b.value.localeCompare(a.value))}\n      selected={acl.patternType}\n      setSelected={setPatternType}\n      row={row}\n      childRow={childRow}\n      id='pattern-type'\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().patternType.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            newPrevState.patternType.validated = ValidatedOptions.error;\n            newPrevState.patternType.validated = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_pattern_type_error'\n            );\n          } else {\n            newPrevState.patternType.validated = ValidatedOptions.default;\n          }\n\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { PatternTypeCell };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport {\n  SelectVariant,\n  ValidatedOptions,\n  Select as PFSelect,\n  SelectOption as PFSelectOption,\n  SelectProps,\n} from '@patternfly/react-core';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\n\nexport type CreateTypeaheadProps = {\n  row: number;\n  childRow?: number;\n  value: Validated<string | undefined>;\n  setValue: (row: number, id: string | undefined, childRow?: number) => void;\n  initialOptions: () => string[];\n  id: string;\n  placeholder?: string;\n  onSelect: (value: string) => void;\n  setEscapeClosesModal: (closes: boolean) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n};\n\nexport const CreateTypeahead: React.VFC<CreateTypeaheadProps> = ({\n  row,\n  setValue,\n  value,\n  initialOptions,\n  id,\n  placeholder,\n  onSelect,\n  setEscapeClosesModal,\n  menuAppendTo,\n  childRow,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [options, setOptions] = useState<SelectOption<string>[]>([]);\n\n  useEffect(() => {\n    setOptions(\n      initialOptions().map((o) => {\n        return { value: o } as SelectOption<string>;\n      })\n    );\n  }, [initialOptions]);\n\n  const onToggle: SelectProps['onToggle'] = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setValue(row, undefined, childRow);\n    setIsOpen(false);\n  };\n\n  const select: SelectProps['onSelect'] = (_, selection, isPlaceholder) => {\n    const value = selection === '' ? undefined : (selection as string);\n    if (isPlaceholder) clearSelection();\n    else {\n      setValue(row, value, childRow);\n      setIsOpen(false);\n      onSelect(value || '');\n    }\n  };\n\n  const onCreateOption = (newValue: string) => {\n    setOptions([...options, { value: newValue } as SelectOption<string>]);\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.assign_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={value.errorMessage}\n      validated={value.validated || ValidatedOptions.default}\n    >\n      <PFSelect\n        variant={SelectVariant.typeahead}\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.assign_permissions.resource_name_aria'\n        )}\n        onToggle={onToggle}\n        className='pf-u-pr-lg-on-lg'\n        onSelect={select}\n        onClear={clearSelection}\n        selections={value.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={placeholder}\n        isCreatable={true}\n        onCreateOption={onCreateOption}\n        createText={t(\n          'permission.manage_permissions_dialog.assign_permissions.resource_name_typeahead_create_text'\n        )}\n        validated={value.validated || ValidatedOptions.default}\n        menuAppendTo={menuAppendTo}\n        maxHeight={200}\n        direction={'up'}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          />\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions } from '@patternfly/react-core';\n\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport {\n  AclShortcutType,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateTypeahead } from './CreateTypeahead';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\n\ntype ResourceCellProps = AclCellProps & {\n  topicNames: string[];\n  consumerGroupIds: string[];\n};\n\nconst ResourceCell: React.VFC<ResourceCellProps> = ({\n  row,\n  acl,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n  topicNames,\n  consumerGroupIds,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { validateName } = useValidateTopic();\n\n  if (\n    acl.resourceType.value === AclResourceType.Cluster ||\n    acl.aclShortcutType === AclShortcutType.ManageAccess\n  ) {\n    return <></>;\n  }\n\n  const setResource = (row: number, value?: string, childRow?: number) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].resource = { value };\n            }\n          } else {\n            v.resource = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateTypeahead\n      row={row}\n      childRow={childRow}\n      value={acl.resource}\n      setValue={setResource}\n      id='resource'\n      placeholder={t(\n        `permission.manage_permissions_dialog.assign_permissions.pattern_type_${\n          acl.patternType.value?.toLowerCase() || 'prefixed'\n        }_placeholder`\n      )}\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      initialOptions={() => {\n        if (acl.resourceType.value === AclResourceType.Topic) {\n          return topicNames;\n        }\n        if (acl.resourceType.value === AclResourceType.Group) {\n          return consumerGroupIds;\n        }\n        return [];\n      }}\n      onSelect={(value) => {\n        if (value === '*') {\n          setAcls((prevState) => {\n            const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n            newPrevState.resource.validated = ValidatedOptions.default;\n            return update2DArrayAcls(prevState, newPrevState, row, childRow);\n          });\n        } else {\n          const errorMessage = validateName(value);\n          if (errorMessage !== undefined) {\n            setAcls((prevState) => {\n              const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n              // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n              // newPrevState.validated = ValidatedOptions.error;\n              // newPrevState.errorMessage = errorMessage;\n              return update2DArrayAcls(prevState, newPrevState, row, childRow);\n            });\n          } else if (value !== undefined) {\n            setAcls((prevState) => {\n              const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n              // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n              // newPrevState.validated = ValidatedOptions.default;\n              return update2DArrayAcls(prevState, newPrevState, row, childRow);\n            });\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport { ResourceCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Tooltip, Button } from '@patternfly/react-core';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\nimport { CellProps } from './acls';\n\ntype RemoveButtonCellProps = CellProps & {\n  removeRow: (row: number) => void;\n};\n\nconst RemoveButtonCell: React.VFC<RemoveButtonCellProps> = ({\n  row,\n  removeRow,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <div className='pf-u-display-flex pf-u-justify-content-flex-end'>\n      <Tooltip\n        content={t(\n          'permission.manage_permissions_dialog.assign_permissions.remove_row_help'\n        )}\n      >\n        <Button\n          variant='link'\n          icon={<TrashIcon />}\n          onClick={() => removeRow(row)}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nexport { RemoveButtonCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ActionList,\n  ActionListItem,\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  Popover,\n  ButtonVariant,\n} from '@patternfly/react-core';\n\nimport { PermissionsDropdown } from '@rhoas/app-services-ui-components';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  cellWidth,\n  ICell,\n} from '@patternfly/react-table';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport { OperationCell } from './OperationCell';\nimport { PermissionTypeCell } from './PermissionTypeCell';\nimport { ResourceType } from './ResourceType';\nimport { PatternTypeCell } from './PatternTypeCell';\nimport { ResourceCell } from './ResourceCell';\nimport { RemoveButtonCell } from './RemoveButtonCell';\nimport {\n  createEmptyNewAcl,\n  NewAcls,\n  AclShortcutType,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport './CreatePermissions.css';\n\nexport type CreatePermissionsProps = {\n  selectedAccount?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n  acls: NewAcls[] | undefined;\n  setAcls: React.Dispatch<React.SetStateAction<NewAcls[]>>;\n  setEscapeClosesModal: (closes: boolean) => void;\n  resourceOperations: { [key: string]: Array<string> };\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n  kafkaName: string | undefined;\n};\n\nexport const CreatePermissions: React.FunctionComponent<\n  CreatePermissionsProps\n> = ({\n  acls,\n  setAcls,\n  topicNames,\n  consumerGroupIds,\n  selectedAccount,\n  setEscapeClosesModal,\n  resourceOperations,\n  menuAppendTo,\n  kafkaName,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const tableColumns = [\n    {\n      title: t('permission.table.resource_column_title'),\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: t('permission.table.permissions_column_title'),\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(10)],\n    },\n  ] as ICell[];\n\n  const removeRow = (row: number) => {\n    setAcls((prevState) => {\n      return prevState.filter((_, k) => k !== row);\n    });\n  };\n\n  const formGroupHelperText = () => {\n    if (selectedAccount === '*') {\n      return t(\n        'permission.manage_permissions_dialog.assign_permissions.help_all_accounts'\n      );\n    }\n    return t('permission.manage_permissions_dialog.assign_permissions.help', {\n      account_id: selectedAccount,\n    });\n  };\n\n  const onAddPermission = () => {\n    setAcls((prevState) => [...prevState, createEmptyNewAcl()]);\n  };\n\n  const onShortcutConsumeTopic = () => {\n    const newState = [\n      {\n        ...createEmptyNewAcl(),\n        aclShortcutType: AclShortcutType.ConsumeTopic,\n        resourceType: {\n          value: AclResourceType.Topic,\n        },\n        metaData: {\n          title: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic'\n          ),\n          popoverHeader: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic'\n          ),\n          popoverBody: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic_description'\n          ),\n          ariaLabel: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic'\n          ),\n        },\n        operations: [AclOperation.Read, AclOperation.Describe],\n      },\n      {\n        ...createEmptyNewAcl(),\n        aclShortcutType: AclShortcutType.ConsumeTopic,\n        resourceType: {\n          value: AclResourceType.Group,\n        },\n        operations: [AclOperation.Read],\n      },\n    ];\n\n    setAcls((prevState) => [...prevState, newState]);\n  };\n\n  const onShortcutProduceTopic = () => {\n    const newState = {\n      ...createEmptyNewAcl(),\n      aclShortcutType: AclShortcutType.ProduceTopic,\n      resourceType: {\n        value: AclResourceType.Topic,\n      },\n      metaData: {\n        title: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic'\n        ),\n        popoverHeader: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic'\n        ),\n        popoverBody: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic_description'\n        ),\n        ariaLabel: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic'\n        ),\n      },\n      operations: [\n        AclOperation.Write,\n        AclOperation.Create,\n        AclOperation.Describe,\n      ],\n    };\n    setAcls((prevState) => [...prevState, newState]);\n  };\n\n  const onShortcutManageAccess = () => {\n    const newState = {\n      ...createEmptyNewAcl(),\n      aclShortcutType: AclShortcutType.ManageAccess,\n      resource: { value: 'kafka-cluster' },\n      resourceType: {\n        value: AclResourceType.Cluster,\n      },\n      patternType: { value: AclPatternType.Literal },\n      metaData: {\n        title: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access'\n        ),\n        popoverHeader: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access'\n        ),\n        popoverBody: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access_description'\n        ),\n        ariaLabel: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access'\n        ),\n      },\n      operations: [AclOperation.Alter],\n    };\n\n    setAcls((prevState) => [...prevState, newState]);\n  };\n\n  const preparedRows = (acl: NewAcls, row: number) => {\n    const newAcl = Array.isArray(acl) ? acl : [acl];\n    return newAcl.map((acl, childRow) => {\n      return (\n        <>\n          {acl.aclShortcutType && childRow === 0 && (\n            <Tr style={{ borderBottom: 'none' }}>\n              <Td colSpan={5}>\n                <TextContent>\n                  <Text component={TextVariants.h6}>\n                    {acl?.metaData?.title}\n                    <Popover\n                      headerContent={<div>{acl.metaData?.popoverHeader}</div>}\n                      bodyContent={<div>{acl.metaData?.popoverBody}</div>}\n                    >\n                      <Button\n                        variant={ButtonVariant.plain}\n                        aria-label={acl.metaData?.ariaLabel}\n                      >\n                        <HelpIcon />\n                      </Button>\n                    </Popover>\n                  </Text>\n                </TextContent>\n              </Td>\n              <Td>\n                <RemoveButtonCell acl={acl} row={row} removeRow={removeRow} />\n              </Td>\n            </Tr>\n          )}\n          <Tr\n            key={row}\n            style={{\n              borderBottom: newAcl.length > 1 && childRow === 0 ? 'none' : '',\n            }}\n          >\n            <Td\n              width={\n                acl.aclShortcutType === AclShortcutType.ManageAccess ? 50 : 20\n              }\n              colSpan={\n                acl.aclShortcutType === AclShortcutType.ManageAccess ? 3 : 0\n              }\n              noPadding\n            >\n              <ResourceType\n                row={row}\n                acl={acl}\n                childRow={childRow}\n                setAcls={setAcls}\n                menuAppendTo={menuAppendTo}\n                setEscapeClosesModal={setEscapeClosesModal}\n                kafkaName={kafkaName}\n              />\n            </Td>\n            {acl.aclShortcutType !== AclShortcutType.ManageAccess && (\n              <>\n                <Td width={15} noPadding>\n                  <PatternTypeCell\n                    row={row}\n                    acl={acl}\n                    childRow={childRow}\n                    setAcls={setAcls}\n                    menuAppendTo={menuAppendTo}\n                    setEscapeClosesModal={setEscapeClosesModal}\n                  />\n                </Td>\n                <Td width={25} noPadding>\n                  <ResourceCell\n                    acl={acl}\n                    row={row}\n                    childRow={childRow}\n                    setAcls={setAcls}\n                    menuAppendTo={menuAppendTo}\n                    setEscapeClosesModal={setEscapeClosesModal}\n                    topicNames={topicNames}\n                    consumerGroupIds={consumerGroupIds}\n                  />\n                </Td>\n              </>\n            )}\n            <Td\n              width={acl.aclShortcutType ? 40 : 15}\n              colSpan={acl.aclShortcutType ? 3 : 0}\n              noPadding\n            >\n              <PermissionTypeCell\n                acl={acl}\n                row={row}\n                childRow={childRow}\n                setAcls={setAcls}\n                menuAppendTo={menuAppendTo}\n                setEscapeClosesModal={setEscapeClosesModal}\n              />\n            </Td>\n            {!acl.aclShortcutType && (\n              <>\n                <Td width={15} noPadding>\n                  <OperationCell\n                    acl={acl}\n                    row={row}\n                    childRow={childRow}\n                    setAcls={setAcls}\n                    menuAppendTo={menuAppendTo}\n                    setEscapeClosesModal={setEscapeClosesModal}\n                    resourceOperations={resourceOperations}\n                  />\n                </Td>\n                <Td width={10}>\n                  <RemoveButtonCell acl={acl} row={row} removeRow={removeRow} />\n                </Td>\n              </>\n            )}\n          </Tr>\n        </>\n      );\n    });\n  };\n\n  return (\n    <div>\n      <TextContent>\n        <Text component={TextVariants.h2}>\n          {t('permission.manage_permissions_dialog.assign_permissions.title')}\n        </Text>\n        <Text component={TextVariants.small}>{formGroupHelperText()}</Text>\n        {acls && acls.length > 0 && (\n          <Text component={TextVariants.small}>\n            {t(\n              'permission.manage_permissions_dialog.assign_permissions.all_fields_are_required'\n            )}\n          </Text>\n        )}\n      </TextContent>\n      {acls && acls.length > 0 && (\n        <TableComposable variant='compact'>\n          <Thead noWrap>\n            <Tr>\n              {tableColumns?.map((col, index) => (\n                <Th key={index}>{col.title}</Th>\n              ))}\n            </Tr>\n          </Thead>\n          <Tbody>{acls?.map((acl, row) => preparedRows(acl, row))}</Tbody>\n        </TableComposable>\n      )}\n      <ActionList>\n        <ActionListItem className='appServices-action-list__action-list-item'>\n          <PermissionsDropdown\n            onAddPermission={onAddPermission}\n            onShortcutProduceTopic={onShortcutProduceTopic}\n            onShortcutConsumeTopic={onShortcutConsumeTopic}\n            onShortcutManageAccess={onShortcutManageAccess}\n          />\n        </ActionListItem>\n      </ActionList>\n    </div>\n  );\n};\n","import { EnhancedAclBinding } from '@app/services/acls';\nimport React, { useEffect, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  CellBuilder,\n  permissionOperationCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport {\n  Button,\n  Label,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { TrashIcon } from '@patternfly/react-icons';\nimport { cellWidth, ICell, TableVariant } from '@patternfly/react-table';\nimport { MASTable } from '@app/components';\nimport { AclBinding } from '@rhoas/kafka-instance-sdk';\n\nexport type ExistingAclTableProps = {\n  existingAcls: Array<AclBinding>;\n  selectedAccountId?: string;\n  onRemove: (acl: EnhancedAclBinding) => void;\n};\n\nexport const ExistingAclTable: React.FunctionComponent<\n  ExistingAclTableProps\n> = ({ existingAcls, selectedAccountId, onRemove }) => {\n  type RemovableEnhancedAclBinding = EnhancedAclBinding & {\n    removed: boolean;\n    index: number;\n  };\n\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [acls, setAcls] = useState<RemovableEnhancedAclBinding[]>([]);\n\n  useEffect(() => {\n    // Workaround as I can't work out how to pass initial state for an array\n    setAcls(\n      existingAcls.map((v, k) => {\n        const answer = v as RemovableEnhancedAclBinding;\n        answer.index = k;\n        return answer;\n      })\n    );\n  }, [existingAcls]);\n\n  const removeRow = (acl: RemovableEnhancedAclBinding) => {\n    setAcls(\n      acls.map((v) => {\n        if (v.hash() === acl.hash()) {\n          v.removed = true;\n        }\n        return v;\n      })\n    );\n    onRemove(acl);\n  };\n\n  const tableColumns = [\n    {\n      title: t('permission.table.resource_column_title'),\n      columnTransforms: [cellWidth(60)],\n    },\n    {\n      title: t('permission.table.permissions_column_title'),\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(20)],\n    },\n  ] as ICell[];\n\n  const principalCell: CellBuilder<RemovableEnhancedAclBinding> = (item) => {\n    const RemoveButton: React.FunctionComponent = () => (\n      <Tooltip\n        content={t(\n          'permission.manage_permissions_dialog.assign_permissions.remove_row_help'\n        )}\n      >\n        <Button\n          variant='link'\n          icon={<TrashIcon />}\n          onClick={() => removeRow(item)}\n        />\n      </Tooltip>\n    );\n\n    const AllAccountsLabel: React.FunctionComponent = () => (\n      <Label variant='outline'>{t('permission.table.all_accounts')}</Label>\n    );\n\n    if (selectedAccountId === '*' && item.principal === '*') {\n      return {\n        title: (\n          <div className='pf-u-display-flex pf-u-justify-content-space-between pf-u-justify-content-flex-end-on-lg'>\n            <AllAccountsLabel /> <RemoveButton />\n          </div>\n        ),\n        props: {},\n      };\n    } else if (item.principal === '*') {\n      return {\n        title: (\n          <div className='pf-u-display-flex pf-u-justify-content-flex-end-on-lg'>\n            <AllAccountsLabel />\n          </div>\n        ),\n        props: {},\n      };\n    } else {\n      return {\n        title: (\n          <div className='pf-u-display-flex pf-u-justify-content-flex-end'>\n            <RemoveButton />\n          </div>\n        ),\n        props: {},\n      };\n    }\n  };\n\n  const cells = [resourceCell, permissionOperationCell, principalCell];\n\n  if (selectedAccountId === undefined || acls.length === 0) {\n    return <></>;\n  }\n\n  const HelperText: React.FunctionComponent = () => {\n    if (selectedAccountId === '*') {\n      return t(\n        'permission.manage_permissions_dialog.edit_existing.all_accounts_help'\n      );\n    }\n    return (\n      <Trans\n        ns={['kafkaTemporaryFixMe']}\n        i18nKey='permission.manage_permissions_dialog.edit_existing.help'\n      >\n        Review the list of existing permissions for the selected account. The\n        list includes account-specific permissions and permissions applied to\n        all accounts within this Kafka instance. Permissions labeled\n        <strong>All accounts</strong> cannot be removed when an individual\n        account ID is selected.\n      </Trans>\n    );\n  };\n\n  return (\n    <div>\n      <TextContent>\n        <Text component={TextVariants.h2}>\n          {t('permission.manage_permissions_dialog.edit_existing.title')}\n        </Text>\n        <Text component={TextVariants.small}>\n          <HelperText />\n        </Text>\n      </TextContent>\n\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: [\n            ...acls\n              .filter((acl) => !acl.removed)\n              .map((item, row) => {\n                return {\n                  cells: cells.map((f) => f(item, row)),\n                  originalData: item,\n                };\n              }),\n          ],\n          'aria-label': t('permission.table.table.permission_list_table'),\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          canSelectAll: false,\n          // TODO: gridBreakPoint: 'grid-lg' NOTE: This is needed so that the table doesn't overrun a narrow screen, but it currently breaks the first header because it's messing with :before of the first cell and so is the mas--[streams-]table-view__table\n        }}\n        rowDataTestId={'tablePermissions-row'}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\n\nexport type PreCancelModalProps = {\n  isOpen: boolean;\n  closeModal: () => void;\n  resumeEditing: () => void;\n};\n\nconst PreCancelModal: React.FC<PreCancelModalProps> = ({\n  isOpen,\n  closeModal,\n  resumeEditing,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <Modal\n      id='manage-permissions-precancel-modal'\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      aria-label={t(\n        'permission.manage_permissions_pre_cancel_dialog.aria_label'\n      )}\n      title={`${t(\n        'permission.manage_permissions_pre_cancel_dialog.discard_changes'\n      )}?`}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={closeModal}\n      onEscapePress={closeModal}\n      actions={[\n        <Button onClick={closeModal} key={1} variant={ButtonVariant.primary}>\n          {t('permission.manage_permissions_pre_cancel_dialog.discard_changes')}\n        </Button>,\n        <Button\n          onClick={resumeEditing}\n          key={2}\n          variant={ButtonVariant.secondary}\n        >\n          {t('permission.manage_permissions_pre_cancel_dialog.resume_editing')}\n        </Button>,\n      ]}\n    >\n      {t('permission.manage_permissions_pre_cancel_dialog.modal_description')}\n    </Modal>\n  );\n};\n\nexport { PreCancelModal };\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Alert,\n  FormAlert,\n  Modal,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  convertEnum,\n  EnhancedAclBinding,\n  usePermissionsService,\n} from '@app/services/acls';\nimport { ConfigContext, useFederated } from '@app/contexts';\nimport {\n  BaseModalProps,\n  ManagePermissionsModalProps,\n  ManagePermissionsProps,\n  usePrincipals,\n  useAuth,\n} from '@rhoas/app-services-ui-shared';\nimport { SelectAccount } from '@app/modules/Permissions/components/ManagePermissionsDialog/SelectAccount';\nimport { CreatePermissions } from '@app/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  AclShortcutType,\n  isNewAclModified,\n  NewAcl,\n  NewAcls,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\nimport { FormGroupWithPopover, MASLoading } from '@app/components';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\nimport { ExistingAclTable } from '@app/modules/Permissions/components/ManagePermissionsDialog/ExistingAclTable';\nimport {\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\nimport { PreCancelModal } from './PreCancelModal';\nimport './ManagePermissions.css';\n\nexport const ManagePermissions: React.VFC<\n  ManagePermissionsProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  title,\n  variant,\n}) => {\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n  const { getResourceOperations } = permissionsService;\n  const [resourceOperations, setResourceOperations] = useState<\n    { [key: string]: Array<string> } | undefined\n  >();\n\n  useEffect(() => {\n    const fetchResourceOperations = async () => {\n      const answer = await getResourceOperations();\n      setResourceOperations(answer);\n    };\n    fetchResourceOperations();\n  }, [getResourceOperations]);\n\n  return (\n    <ManagePermissionsModal\n      topicNames={topicNames}\n      consumerGroupIds={consumerGroupIds}\n      acls={acls}\n      resourceOperations={resourceOperations}\n      hideModal={hideModal}\n      selectedAccountId={selectedAccountId}\n      onSave={onSave}\n      kafkaName={kafkaName}\n      variant={variant}\n      title={title}\n    />\n  );\n};\n\nexport const ManagePermissionsModal: React.FC<\n  ManagePermissionsModalProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  resourceOperations,\n  title,\n  variant,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { kafka } = useFederated() || {};\n  const auth = useAuth();\n\n  const [selectedAccount, setSelectedAccount] = useState<\n    Validated<string | undefined>\n  >({ value: selectedAccountId, validated: undefined });\n  const [step, setStep] = useState<number>(\n    selectedAccountId === undefined ? 1 : 2\n  );\n  const [newAcls, setNewAcls] = useState<NewAcls[]>([]);\n  const [removeAcls, setRemoveAcls] = useState<EnhancedAclBinding[]>([]);\n  const [isOpenPreCancelModal, setIsOpenPreCancelModal] =\n    useState<boolean>(false);\n\n  const escapeClosesModal = useRef<boolean>(true);\n  const { validateName } = useValidateTopic();\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n\n  const principals = usePrincipals();\n\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  const setValidationAcls = (acls: NewAcls[]) => {\n    return acls?.map((value) => {\n      if (Array.isArray(value)) {\n        setValidationAcls(value);\n      }\n\n      if (!Array.isArray(value)) {\n        if (value.aclShortcutType === AclShortcutType.ManageAccess) {\n          return value;\n        }\n\n        const answer = Object.assign({}, value);\n\n        if (!value.aclShortcutType) {\n          if (value.operation.value === undefined) {\n            answer.operation.validated = ValidatedOptions.error;\n            answer.operation.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_operation_error'\n            );\n          } else {\n            answer.operation.validated = ValidatedOptions.default;\n          }\n\n          if (value.permission.value === undefined) {\n            answer.permission.validated = ValidatedOptions.error;\n            answer.permission.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_permission_error'\n            );\n          } else {\n            answer.permission.validated = ValidatedOptions.default;\n          }\n        }\n\n        if (value.resourceType.value === undefined) {\n          answer.resourceType.validated = ValidatedOptions.error;\n          answer.resourceType.errorMessage = t(\n            'permission.manage_permissions_dialog.assign_permissions.must_select_resource_type_error'\n          );\n        } else {\n          answer.resourceType.validated = ValidatedOptions.default;\n        }\n\n        if (value.resourceType.value !== AclResourceType.Cluster) {\n          if (value.resource.value === undefined) {\n            answer.resource.validated = ValidatedOptions.error;\n            answer.resource.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_resource_error'\n            );\n          } else if (value.resource.value === '*') {\n            answer.resource.validated = ValidatedOptions.default;\n          } else {\n            const errorMessage = validateName(value.resource.value);\n            if (errorMessage !== undefined) {\n              answer.resource.validated = ValidatedOptions.error;\n              answer.resource.errorMessage = errorMessage;\n            } else {\n              answer.resource.validated = ValidatedOptions.default;\n            }\n          }\n\n          if (value.patternType.value === undefined) {\n            answer.patternType.validated = ValidatedOptions.error;\n            answer.patternType.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_pattern_type_error'\n            );\n          } else {\n            answer.patternType.validated = ValidatedOptions.default;\n          }\n        }\n\n        return answer;\n      } else {\n        return value;\n      }\n    });\n  };\n\n  const validateAcls = async (acls: NewAcls[]) => {\n    if (acls) {\n      for (let value of acls.filter((value) => isNewAclModified(value))) {\n        value = Array.isArray(value) ? value : [value];\n        value.forEach((acl: NewAcl) => {\n          if (acl.resourceType.value === undefined) {\n            throw Error('resourceType must not be undefined');\n          }\n          if (acl.resourceType.value !== AclResourceType.Cluster) {\n            if (acl.resource.value === undefined) {\n              throw Error('resource must not be undefined');\n            }\n            if (acl.patternType.value === undefined) {\n              throw Error('patternType must not be undefined');\n            }\n          } else {\n            acl.resource.value = 'kafka-cluster';\n            acl.patternType.value = AclPatternType.Literal;\n          }\n          if (acl.permission.value === undefined) {\n            throw Error('permission must not be undefined');\n          }\n\n          if (acl.operation.value === undefined && !acl.aclShortcutType) {\n            throw Error('operation must not be undefined');\n          }\n\n          if (acl.operations) {\n            acl.operations?.forEach((operation) => {\n              acl.operation.value = operation;\n              saveAcl(acl);\n            });\n          } else {\n            saveAcl(acl);\n          }\n        });\n      }\n\n      await deleteAcls();\n\n      onSave && (await onSave());\n      hideModal();\n    }\n  };\n\n  const save = async () => {\n    let valid = true;\n    if (selectedAccount.value === undefined) {\n      setSelectedAccount((v) => {\n        return {\n          ...v,\n          validated: ValidatedOptions.error,\n          errorMessage: t(\n            'permission.manage_permissions_dialog.must_select_account_error'\n          ),\n        };\n      });\n      valid = false;\n    } else {\n      setSelectedAccount((v) => {\n        return {\n          ...v,\n          validated: ValidatedOptions.default,\n        };\n      });\n    }\n\n    const validatedAcls = setValidationAcls(newAcls);\n    const isInvalid = isFormInvalid(validatedAcls);\n    if (!isInvalid && valid) {\n      validateAcls(validatedAcls);\n    }\n\n    setNewAcls(validatedAcls);\n  };\n\n  const saveAcl = async (acl: NewAcls) => {\n    if (!Array.isArray(acl)) {\n      const { resource, patternType, permission, resourceType, operation } =\n        acl;\n      if (\n        resource?.value &&\n        patternType?.value &&\n        permission?.value &&\n        resourceType?.value &&\n        operation?.value\n      ) {\n        await permissionsService.addPermission({\n          resourceName: resource.value,\n          patternType: patternType.value,\n          permission: permission.value,\n          resourceType: resourceType.value,\n          operation: operation.value,\n          principal: `User:${selectedAccount.value}`,\n        });\n      }\n    }\n  };\n\n  const deleteAcls = async () => {\n    for (const value of removeAcls) {\n      await permissionsService.deletePermission({\n        resourceName: value.resourceName,\n        patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n        permissionType: convertEnum(value.permission, AclPermissionTypeFilter),\n        resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n        operation: convertEnum(value.operation, AclOperationFilter),\n        principal: `User:${selectedAccount.value}`,\n      });\n    }\n  };\n\n  const isFormInvalid = (newAcls: NewAcls[]): boolean => {\n    return newAcls.some((value) => {\n      value = Array.isArray(value) ? value : [value];\n      return value?.some(\n        (v) =>\n          v.operation.validated === 'error' ||\n          v.patternType.validated === 'error' ||\n          v.resource.validated === 'error' ||\n          v.resourceType.validated === 'error'\n      );\n    });\n  };\n\n  const Step2 = () => {\n    if (step === 2) {\n      if (resourceOperations === undefined) {\n        return <MASLoading />;\n      }\n      const menuAppendTo =\n        document.getElementById('manage-permissions-modal') || undefined;\n\n      const FormValidAlert: React.FunctionComponent = () => {\n        if (isFormInvalid(newAcls)) {\n          return (\n            <FormAlert>\n              <Alert\n                variant='danger'\n                title={t('common:form_invalid_alert')}\n                aria-live='polite'\n                isInline\n              />\n            </FormAlert>\n          );\n        }\n        return <></>;\n      };\n      return (\n        <>\n          <FormValidAlert />\n          <ExistingAclTable\n            existingAcls={acls.filter(\n              (i) =>\n                i.principal === `${selectedAccount.value}` ||\n                i.principal === '*'\n            )}\n            selectedAccountId={selectedAccount.value}\n            onRemove={(acl) =>\n              setRemoveAcls((prevState) => {\n                return [...prevState, acl];\n              })\n            }\n          />\n          <CreatePermissions\n            acls={newAcls}\n            setAcls={setNewAcls}\n            topicNames={topicNames}\n            consumerGroupIds={consumerGroupIds}\n            selectedAccount={selectedAccount.value}\n            setEscapeClosesModal={setEscapeClosesModal}\n            resourceOperations={resourceOperations}\n            menuAppendTo={menuAppendTo}\n            kafkaName={kafkaName}\n          />\n        </>\n      );\n    }\n    return <></>;\n  };\n\n  const principal = principals\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const Account = () => {\n    if (step === 1) {\n      return (\n        <SelectAccount\n          id={selectedAccount}\n          setId={setSelectedAccount}\n          initialOptions={principal}\n          setEscapeClosesModal={setEscapeClosesModal}\n        />\n      );\n    }\n    return (\n      <FormGroupWithPopover\n        labelHead={t('permission.manage_permissions_dialog.account_id_title')}\n        fieldId='kafka-instance-name'\n        fieldLabel={t('permission.manage_permissions_dialog.account_id_title')}\n        labelBody={t('permission.manage_permissions_dialog.account_id_help')}\n        buttonAriaLabel={t(\n          'permission.manage_permissions_dialog.account_id_aria'\n        )}\n        isRequired={true}\n      >\n        {selectedAccount.value === '*'\n          ? t('permission.manage_permissions_dialog.all_accounts_title')\n          : selectedAccount.value}\n      </FormGroupWithPopover>\n    );\n  };\n\n  const setEscapeClosesModal = (closes: boolean) => {\n    escapeClosesModal.current = closes;\n  };\n\n  const onEscapePress = () => {\n    if (escapeClosesModal.current) {\n      hideModal();\n    }\n  };\n\n  const isDisabledSaveButton = !(\n    newAcls?.some((p) => isNewAclModified(p)) || removeAcls.length > 0\n  );\n\n  const SubmitButton: React.FunctionComponent = () => {\n    if (step === 1) {\n      return (\n        <Button\n          variant='primary'\n          onClick={() => setStep(2)}\n          isDisabled={selectedAccount.value === undefined}\n        >\n          {t('permission.manage_permissions_dialog.step_1_submit_button')}\n        </Button>\n      );\n    }\n    return (\n      <Button\n        variant='primary'\n        onClick={save}\n        key={1}\n        isDisabled={isDisabledSaveButton}\n      >\n        {t('permission.manage_permissions_dialog.step_2_submit_button')}\n      </Button>\n    );\n  };\n\n  const ModalForm: React.FunctionComponent = () => (\n    <Form>\n      <FormGroup\n        fieldId='kafka-instance-name'\n        label={t('permission.manage_permissions_dialog.kafka_instance_title')}\n      >\n        {kafkaName}\n      </FormGroup>\n      <Account />\n      <Step2 />\n    </Form>\n  );\n\n  const closePermissionModal = () => {\n    if (step === 2 && !isDisabledSaveButton) {\n      setIsOpenPreCancelModal(true);\n    } else {\n      hideModal();\n    }\n  };\n\n  const closePreCancelModal = () => {\n    setIsOpenPreCancelModal(false);\n    hideModal();\n  };\n\n  const resumeEditingPermissions = () => {\n    setIsOpenPreCancelModal(false);\n  };\n\n  return (\n    <Modal\n      id='manage-permissions-modal'\n      variant={variant}\n      isOpen={true}\n      aria-label={t('permission.manage_permissions_dialog.aria_label')}\n      position='top'\n      title={title}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={closePermissionModal}\n      onEscapePress={onEscapePress}\n      actions={[\n        <SubmitButton key={1} />,\n        <Button onClick={closePermissionModal} key={2} variant='secondary'>\n          {t('permission.manage_permissions_dialog.cancel_button')}\n        </Button>,\n      ]}\n    >\n      <PreCancelModal\n        isOpen={isOpenPreCancelModal}\n        closeModal={closePreCancelModal}\n        resumeEditing={resumeEditingPermissions}\n      />\n      <ModalForm />\n    </Modal>\n  );\n};\n\nexport default ManagePermissions;\n","import { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { sentenceCase } from 'sentence-case';\n\nexport const displayName = (resourceType: AclResourceType): string => {\n  switch (resourceType) {\n    case AclResourceType.Group:\n      return 'Consumer group';\n      break;\n    case AclResourceType.Topic:\n      return 'Topic';\n      break;\n    case AclResourceType.Cluster:\n      return 'Kafka instance';\n      break;\n    case AclResourceType.TransactionalId:\n      return 'Transactional ID';\n      break;\n    default:\n      return sentenceCase(resourceType);\n      break;\n  }\n};\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const useValidateTopic = (): {\n  validateName(name: string): string | undefined;\n} => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return {\n    validateName: useCallback(\n      (name) => {\n        const legalNameChars = new RegExp('^[a-zA-Z0-9._-]+$');\n        if (name.length && !legalNameChars.test(name)) {\n          return t('topic.topic_name_helper_text');\n        } else if (name.length > 249) {\n          return t('topic.cannot_exceed_characters');\n        } else if (name === '.' || name === '..') {\n          return t('topic.invalid_name_with_dot');\n        }\n        return undefined;\n      },\n      [t]\n    ),\n  };\n};\n","import { useCallback, useMemo } from 'react';\nimport { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type EnhancedAclBinding = AclBinding & {\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const usePermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = useCallback(\n    async (\n      filter: AclFilter,\n      size?: number,\n      page?: number\n    ): Promise<EnhancedAclBindingListPage> => {\n      const accessToken = await config?.getToken();\n\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n        filter.resourceType,\n        filter.resourceName,\n        filter.patternType,\n        filter.principal,\n        filter.operation,\n        filter.permissionType,\n        page,\n        size\n      );\n      return enhanceAclBindingListPage(response);\n    },\n    [config]\n  );\n\n  const addPermission = useCallback(\n    async (acl: AclBinding) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.createAcl(acl);\n    },\n    [config]\n  );\n\n  const deletePermission = useCallback(\n    async (acl: AclFilter) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.deleteAcls(\n        acl.resourceType,\n        acl.resourceName,\n        acl.patternType,\n        acl.principal,\n        acl.operation,\n        acl.permissionType\n      );\n    },\n    [config]\n  );\n\n  const getResourceOperations = useCallback(async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return api.getAclResourceOperations().then((response) => response.data);\n  }, [config]);\n\n  return useMemo(() => {\n    return {\n      getPermissions,\n      addPermission,\n      deletePermission,\n      getResourceOperations,\n    } as PermissionsService;\n  }, [getPermissions, addPermission, deletePermission, getResourceOperations]);\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        return {\n          ...item,\n          // Strip out the \"User:\" prefix\n          principal: item.principal.substring(5),\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["FormGroupWithPopover","children","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","validated","helperText","helperTextInvalid","isRequired","FormGroup","label","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","rowDataTestId","useContext","trRef","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","undefined","css","rowId","hidden","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","SolidLabel","labelColor","content","AclResourceType","variantSwitch","Label","color","AllAccountsPrincipal","t","useTranslation","PrincipalWithTooltip","acl","currentlyLoggedInuser","setCurrentlyLoggedInuser","useState","auth","useAuth","kafka","locatedPrincipals","usePrincipals","getAllPrincipals","filter","p","id","owner","principal","useEffect","username","getUsername","length","principalType","PrincipalType","Tooltip","InfoCircleIcon","displayName","emailAddress","principalCell","item","title","permissionOperationCell","LabelGroup","permission","AclPermissionType","sentenceCase","operation","resourceCell","PatternType","patternType","AclPatternType","resourceType","resourceName","SelectAccount","setId","initialOptions","setEscapeClosesModal","isOpen","setIsOpen","clearSelection","options","SelectGroup","SelectOption","description","Divider","sort","a","b","localeCompare","map","index","errorMessage","ValidatedOptions","Select","SelectVariant","typeAheadAriaLabel","onToggle","newState","onSelect","_","selection","isPlaceholder","onClear","selections","onFilter","input","RegExp","accounts","Array","isArray","account","allAccounts","test","isInputValuePersisted","placeholderText","isCreatable","menuAppendTo","isGrouped","isNewAclModified","emptyAcl","createEmptyNewAcl","some","v","aclShortcutType","AclShortcutType","ManageAccess","resource","update2DArrayAcls","prevAcls","newAcl","childRow","el","handle2DArrayAcls","acls","CreateSelect","setSelected","selected","placeholder","P","maxHeight","direction","option","isDisabled","disabled","OperationCell","setAcls","resourceOperations","toString","snakeCase","operationType","prevState","k","newPrevState","PermissionTypeCell","operations","numLabels","ResourceType","kafkaName","ConsumeTopic","ProduceTopic","PatternTypeCell","CreateTypeahead","setValue","setOptions","o","onCreateOption","newValue","createText","ResourceCell","topicNames","consumerGroupIds","validateName","toLowerCase","RemoveButtonCell","removeRow","Button","icon","CreatePermissions","selectedAccount","tableColumns","columnTransforms","cellWidth","TextContent","Text","component","TextVariants","account_id","TableComposable","Thead","noWrap","Tr","col","Th","Tbody","style","borderBottom","Td","colSpan","metaData","popoverHeader","popoverBody","ButtonVariant","width","noPadding","preparedRows","ActionList","ActionListItem","PermissionsDropdown","onAddPermission","onShortcutProduceTopic","AclOperation","onShortcutConsumeTopic","onShortcutManageAccess","ExistingAclTable","existingAcls","selectedAccountId","onRemove","answer","RemoveButton","TrashIcon","hash","removed","AllAccountsLabel","Trans","ns","i18nKey","f","TableVariant","canSelectAll","PreCancelModal","closeModal","resumeEditing","Modal","ModalVariant","titleIconVariant","showClose","onClose","onEscapePress","actions","ManagePermissions","hideModal","onSave","config","permissionsService","getResourceOperations","setResourceOperations","ManagePermissionsModal","setSelectedAccount","step","setStep","newAcls","setNewAcls","removeAcls","setRemoveAcls","isOpenPreCancelModal","setIsOpenPreCancelModal","escapeClosesModal","useRef","principals","setValidationAcls","Object","assign","save","valid","validatedAcls","isFormInvalid","forEach","Error","saveAcl","deleteAcls","validateAcls","addPermission","deletePermission","AclPatternTypeFilter","permissionType","AclPermissionTypeFilter","AclResourceTypeFilter","AclOperationFilter","Step2","document","getElementById","FormValidAlert","FormAlert","Alert","isInline","i","Account","closes","current","isDisabledSaveButton","closePermissionModal","position","Form","useValidateTopic","useCallback","name","legalNameChars","convertEnum","entries","find","usePermissionsService","getPermissions","size","page","accessToken","getToken","api","AclsApi","Configuration","basePath","response","getAcls","enhanceAclBindingListPage","createAcl","getAclResourceOperations","then","data","useMemo","total","items","substring","getPermissionsTypes","values","getOperations","getResourceTypes","getPatternTypes"],"sourceRoot":""}