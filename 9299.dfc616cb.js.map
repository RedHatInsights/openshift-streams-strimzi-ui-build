{"version":3,"file":"9299.dfc616cb.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Topics/components/CreateTopicHead/CreateTopicHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepTopicName/StepTopicName.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepPartitions/StepPartitions.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepMessageRetention/StepMessageRetention.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepReplicas/StepReplicas.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/WizardCustomFooter.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/CreateTopicWizard.tsx","webpack://kafka-ui/./src/modules/Topics/pages/CreateTopic/CreateTopicPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\n\nexport type CreateTopicProps = {\n  isSwitchChecked: boolean;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsSwitchChecked: (value: boolean) => void;\n};\n\nexport const CreateTopichead: React.FC<CreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>Kafka Instances</BreadcrumbItem>\n      <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {t('topic.create_topic')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          {t('topic.create_topic')}\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label={t('topic.show_all_options')}\n          labelOff={t('topic.show_all_options')}\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Form,\n  FormGroup,\n  FormSection,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { IAdvancedTopic } from '@app/modules/Topics/utils';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type StepTopicNameProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (value: IAdvancedTopic) => void;\n  topicNameValidated: 'error' | 'default';\n  setTopicNameValidated: (value: 'error' | 'default') => void;\n  invalidText: string;\n  setInvalidText: (value: string) => void;\n};\n\nexport const StepTopicName: React.FC<StepTopicNameProps> = ({\n  topicData,\n  setTopicData,\n  topicNameValidated,\n  setTopicNameValidated,\n  invalidText,\n  setInvalidText,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { validateName } = useValidateTopic();\n\n  const topicNameInput = topicData && topicData.name;\n\n  useEffect(() => {\n    validationCheck(topicNameInput);\n  }, [topicData.name]);\n\n  const validationCheck = (inputValue: string) => {\n    const errorMessage = validateName(inputValue);\n    if (errorMessage) {\n      setInvalidText(errorMessage);\n      setTopicNameValidated('error');\n    } else {\n      setTopicNameValidated('default');\n    }\n  };\n\n  const handleTopicNameChange = (value) => {\n    validationCheck(value);\n    setTopicData({ ...topicData, name: value });\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Form onSubmit={preventFormSubmit}>\n      <FormSection\n        title={t('topic.topic_name')}\n        id='topic-name'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.topic_name_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.topic_name_info_note')}\n          </Text>\n        </TextContent>\n        <FormGroup\n          label={t('topic.topic_name')}\n          fieldId='step-topic-name-form'\n          helperText={t('topic.topic_name_helper_text')}\n          helperTextInvalid={invalidText}\n          validated={topicNameValidated}\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder={t('topic.enter_name')}\n            validated={topicNameValidated}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  FormSection,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { MIN_PARTITIONS, MAX_PARTITIONS } from '@app/constant';\nimport { IAdvancedTopic } from '@app/modules/Topics/utils';\n\nexport type StepPartitionsProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (value: IAdvancedTopic) => void;\n};\n\nexport const StepPartitions: React.FC<StepPartitionsProps> = ({\n  topicData,\n  setTopicData,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const handleOnPlus = () => {\n    setTopicData({\n      ...topicData,\n      numPartitions: String(Number(topicData['numPartitions']) + 1),\n    });\n  };\n\n  const handleOnMinus = () => {\n    setTopicData({\n      ...topicData,\n      numPartitions: String(Number(topicData['numPartitions']) - 1),\n    });\n  };\n\n  const handlePartitionTouchspinChange = (event) => {\n    let num = Number(event.target.value);\n    if (num < MIN_PARTITIONS) {\n      num = MIN_PARTITIONS;\n    } else if (num > MAX_PARTITIONS) {\n      num = MAX_PARTITIONS;\n    }\n    setTopicData({ ...topicData, numPartitions: String(num) });\n  };\n\n  const partitionsInput = topicData && topicData['numPartitions'];\n\n  return (\n    <Form>\n      <FormSection\n        title={t('topic.partitions')}\n        id='partitions'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.partition_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.partition_info_note')}\n          </Text>\n        </TextContent>\n\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText={t('topic.partition_helper_text')}\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={Number(partitionsInput)}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n            min={MIN_PARTITIONS}\n            max={MAX_PARTITIONS}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Form,\n  FormGroup,\n  FormSection,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { CustomRetentionMessage } from '@app/modules/Topics/components';\nimport {\n  IAdvancedTopic,\n  RetentionTimeUnits,\n  RetentionSizeUnits,\n  unitsToBytes as RetentionSizeUnitToValue,\n  RetentionTimeUnitToValue,\n  retentionTimeSelectOptions,\n  retentionSizeSelectOptions,\n} from '@app/modules/Topics/utils';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type StepMessageRetentionProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (topic: IAdvancedTopic) => void;\n};\n\nexport const StepMessageRetention: React.FC<StepMessageRetentionProps> = ({\n  topicData,\n  setTopicData,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>(false);\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>(false);\n\n  const handleRetentionMessageTime = (value: string) => {\n    setTopicData({\n      ...topicData,\n      'retention.ms':\n        value === RetentionTimeUnits.UNLIMITED ||\n        value === RetentionTimeUnits.CUSTOM\n          ? topicData['retention.ms']\n          : RetentionTimeUnitToValue[value],\n      selectedRetentionTimeOption: value,\n    });\n  };\n\n  const handleRetentionMessageSize = (value: string) => {\n    setTopicData({\n      ...topicData,\n      'retention.bytes':\n        value === RetentionSizeUnits.UNLIMITED ||\n        value === RetentionSizeUnits.CUSTOM\n          ? topicData['retention.bytes']\n          : RetentionSizeUnitToValue[value],\n      selectedRetentionSizeOption: value,\n    });\n  };\n\n  const onRetentionTimeToggle = (isOpen: boolean) => {\n    setIsRetentionTimeSelectOpen(isOpen);\n  };\n\n  const onRetentionSizeToggle = (isOpen: boolean) => {\n    setIsRetentionSizeSelectOpen(isOpen);\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Form onSubmit={preventFormSubmit}>\n        <FormSection\n          title={t('topic.message_retention')}\n          id='message-retention'\n          titleElement={'h2'}\n        >\n          <TextContent>\n            <Text component={TextVariants.p}>\n              {t('topic.message_retention_info')}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t('topic.message_retention_info_note')}\n            </Text>\n          </TextContent>\n\n          <FormGroup\n            fieldId='form-group-retention-time-in-wizard'\n            label={t('topic.retention_time')}\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.DAY\n                }\n                name='radioDay'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.DAY)\n                }\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value={RetentionTimeUnits.DAY}\n              />\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.WEEK\n                }\n                name='radioWeek'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.WEEK)\n                }\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value={RetentionTimeUnits.WEEK}\n              />\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.CUSTOM\n                }\n                name='radioCustomTime'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.CUSTOM)\n                }\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value={RetentionTimeUnits.CUSTOM}\n              />\n              {topicData.selectedRetentionTimeOption ===\n                RetentionTimeUnits.CUSTOM && (\n                <CustomRetentionMessage\n                  name='retention-ms'\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  onToggle={onRetentionTimeToggle}\n                  isOpen={isRetentionTimeSelectOpen}\n                  selectOptions={retentionTimeSelectOptions}\n                />\n              )}\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.UNLIMITED\n                }\n                name='radioUnlimitedTime'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.UNLIMITED)\n                }\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-3'\n                value={RetentionTimeUnits.UNLIMITED}\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId='form-group-retention-size-in-wizard'\n            label='Retention size'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionSizeOption ===\n                  RetentionSizeUnits.UNLIMITED\n                }\n                name='radioUnlimitedSize'\n                onChange={() =>\n                  handleRetentionMessageSize(RetentionSizeUnits.UNLIMITED)\n                }\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-6'\n                value={RetentionSizeUnits.UNLIMITED}\n              />\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionSizeOption ===\n                  RetentionSizeUnits.CUSTOM\n                }\n                name='radioCustomSize'\n                onChange={() =>\n                  handleRetentionMessageSize(RetentionSizeUnits.CUSTOM)\n                }\n                label='Custom size'\n                aria-label='custom input'\n                id='radio-controlled-5'\n                value={RetentionSizeUnits.CUSTOM}\n              />\n              {topicData.selectedRetentionSizeOption ===\n                RetentionSizeUnits.CUSTOM && (\n                <CustomRetentionMessage\n                  name='retention-bytes'\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  onToggle={onRetentionSizeToggle}\n                  isOpen={isRetentionSizeSelectOpen}\n                  selectOptions={retentionSizeSelectOptions}\n                />\n              )}\n            </Stack>\n          </FormGroup>\n        </FormSection>\n      </Form>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  Text,\n  TextContent,\n  TextVariants,\n  Form,\n  FormSection,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { TextWithLabelPopover } from '@app/components/TextWithLabelPopover';\n\nexport type StepReplicasProps = {\n  replicationFactor: number;\n  minInSyncReplica: number;\n};\n\nexport const StepReplicas: React.FC<StepReplicasProps> = ({\n  replicationFactor,\n  minInSyncReplica,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <Form>\n      <FormSection\n        title={t('common.replicas')}\n        id='replica-section'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.replicas_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.replicas_detail')}\n          </Text>\n        </TextContent>\n        <Alert\n          variant='info'\n          isInline\n          title={t('topic.replicas_helper_text')}\n        />\n\n        <TextWithLabelPopover\n          fieldId='replicas'\n          btnAriaLabel={t('common.replicas')}\n          fieldLabel={t('common.replicas')}\n          fieldValue={replicationFactor.toString()}\n          popoverBody={t('topic.replicas_description')}\n          popoverHeader={t('topic.replicas')}\n        />\n\n        <TextWithLabelPopover\n          fieldId='min-insync-replicas'\n          btnAriaLabel='topic detail min-in-sync replica'\n          fieldLabel='Minimum in-sync replicas'\n          fieldValue={minInSyncReplica.toString()}\n          popoverBody={t('topic.min_insync_replicas_description')}\n          popoverHeader={t('topic.min_insync_replicas')}\n        />\n      </FormSection>\n    </Form>\n  );\n};\n","import React from 'react';\nimport {\n  WizardContextConsumer,\n  Button,\n  WizardFooter,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IWizardFooter {\n  isLoading: boolean;\n  onValidate: (value: () => void) => void;\n  topicNameValidated: 'error' | 'default';\n  closeWizard: () => void;\n}\nexport const WizardCustomFooter: React.FC<IWizardFooter> = ({\n  isLoading,\n  onValidate,\n  topicNameValidated,\n  closeWizard,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, onNext, onBack }) => {\n          if (activeStep.name == t('topic.topic_name')) {\n            return (\n              <>\n                <Button\n                  variant='primary'\n                  type='submit'\n                  isLoading={isLoading}\n                  onClick={() => onValidate(onNext)}\n                  isDisabled={topicNameValidated == 'default' ? false : true}\n                >\n                  {t('common.next')}\n                </Button>\n                <Button variant='secondary' isDisabled={true}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n\n          if (activeStep.name == 'Replicas') {\n            return (\n              <>\n                <Button\n                  variant='primary'\n                  type='submit'\n                  onClick={onNext}\n                  isLoading={isLoading}\n                >\n                  {t('common.finish')}\n                </Button>\n                <Button variant='secondary' onClick={onBack}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n          return (\n            <>\n              <Button variant='primary' type='submit' onClick={onNext}>\n                {t('common.next')}\n              </Button>\n              <Button variant='secondary' onClick={onBack}>\n                {t('common.back')}\n              </Button>\n              <Button variant='link' onClick={closeWizard}>\n                {t('common.cancel')}\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  Divider,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport {\n  StepMessageRetention,\n  StepPartitions,\n  StepReplicas,\n  StepTopicName,\n  TopicAdvanceConfig,\n  WizardCustomFooter,\n} from '@app/modules/Topics/components';\nimport {\n  Configuration,\n  NewTopicInput,\n  TopicsApi,\n} from '@rhoas/kafka-instance-sdk';\nimport { serializeTopic } from '@app/modules/Topics/utils';\nimport { ConfigContext } from '@app/contexts';\nimport { getTopic } from '@app/services';\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport './CreateTopicWizard.css';\nimport { isAxiosError } from '@app/utils/axios';\nimport {\n  IAdvancedTopic,\n  RetentionSizeUnits,\n  RetentionTimeUnits,\n} from '@app/modules/Topics/utils';\n\nexport type CreateTopicWizardProps = {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n};\n\nexport const CreateTopicWizard: React.FC<CreateTopicWizardProps> = ({\n  isSwitchChecked,\n  onCloseCreateTopic,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n\n  const initialFieldsValue = {\n    name: '',\n    numPartitions: '1',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': 'delete',\n    selectedRetentionTimeOption: RetentionTimeUnits.WEEK,\n    selectedRetentionSizeOption: RetentionSizeUnits.UNLIMITED,\n  };\n\n  //states\n  const [topicNameValidated, setTopicNameValidated] = useState<\n    'error' | 'default'\n  >('default');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [invalidText, setInvalidText] = useState<string>('');\n  const [topicData, setTopicData] =\n    useState<IAdvancedTopic>(initialFieldsValue);\n\n  const closeWizard = () => {\n    onCloseCreateTopic && onCloseCreateTopic();\n  };\n\n  const saveTopic = () => {\n    // Object may change based on schema\n    setIsLoading(true);\n    const configPropties = isSwitchChecked ? ['cleanup.policy'] : [];\n    const topic: NewTopicInput = serializeTopic(topicData, configPropties);\n\n    new TopicsApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then(() => {\n        addAlert({\n          variant: AlertVariant.success,\n          title: t('topic.topic_successfully_created'),\n        });\n        setIsLoading(false);\n        closeWizard();\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        addAlert({\n          variant: AlertVariant.danger,\n          title: err.response.data.error_message,\n        });\n        closeWizard();\n      });\n  };\n\n  const fetchTopic = async (topicName, onNext) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      if (topicRes) {\n        setInvalidText(t('topic.already_exists', { name: topicName }));\n        setTopicNameValidated('error');\n        setIsLoading(false);\n      }\n    } catch (error) {\n      if (error && isAxiosError(error) && error.response?.status === 404) {\n        setTopicNameValidated('default');\n        setIsLoading(false);\n        onNext();\n      }\n    }\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: t('topic.topic_name'),\n      enableNext:\n        topicData?.name.trim() !== '' && topicNameValidated === 'default',\n      component: (\n        <StepTopicName\n          topicData={topicData}\n          setTopicData={setTopicData}\n          topicNameValidated={topicNameValidated}\n          setTopicNameValidated={setTopicNameValidated}\n          invalidText={invalidText}\n          setInvalidText={setInvalidText}\n        />\n      ),\n    },\n    {\n      name: t('common.partitions'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: (\n        <StepPartitions topicData={topicData} setTopicData={setTopicData} />\n      ),\n    },\n    {\n      name: t('topic.message_retention'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: (\n        <StepMessageRetention\n          topicData={topicData}\n          setTopicData={setTopicData}\n        />\n      ),\n    },\n    {\n      name: t('common.replicas'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: <StepReplicas replicationFactor={3} minInSyncReplica={2} />,\n      nextButtonText: t('common.finish'),\n    },\n  ];\n\n  const title = t('topic.wizard_title');\n\n  const onValidate = (onNext) => {\n    if (topicData?.name.length < 1) {\n      setInvalidText(t('topic.required'));\n      setTopicNameValidated('error');\n    } else if (topicData?.name === '.' || topicData?.name === '..') {\n      setInvalidText(t('topic.invalid_name_with_dot'));\n      setTopicNameValidated('error');\n    } else {\n      setIsLoading(true);\n      fetchTopic(topicData?.name, onNext);\n    }\n  };\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <Divider className='kafka-ui--divider--FlexShrink' />\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={onCloseCreateTopic}\n              topicData={topicData}\n              setTopicData={setTopicData}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n            data-testid='topicBasicCreate-Wizard'\n            footer={\n              <WizardCustomFooter\n                isLoading={isLoading}\n                onValidate={onValidate}\n                topicNameValidated={topicNameValidated}\n                closeWizard={closeWizard}\n              />\n            }\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useBasename } from '@rhoas/app-services-ui-shared';\nimport {\n  CreateTopichead,\n  CreateTopicWizard,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const CreateTopicPage: React.FC = () => {\n  const { kafkaName, kafkaPageLink, kafkaInstanceLink } = useFederated() || {};\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n\n  const onCloseCreateTopic = () => {\n    history.push(`${basename}/topics`);\n  };\n\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n        kafkaName={kafkaName}\n        kafkaInstanceLink={kafkaInstanceLink}\n        kafkaPageLink={kafkaPageLink}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        onCloseCreateTopic={onCloseCreateTopic}\n      />\n    </>\n  );\n};\n"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","kafkaName","kafkaPageLink","kafkaInstanceLink","t","useTranslation","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","StepTopicName","topicData","setTopicData","topicNameValidated","setTopicNameValidated","invalidText","setInvalidText","validateName","topicNameInput","name","useEffect","validationCheck","inputValue","errorMessage","Form","onSubmit","event","preventDefault","FormSection","title","titleElement","TextContent","Text","component","TextVariants","FormGroup","fieldId","helperText","helperTextInvalid","validated","isRequired","TextInput","type","value","placeholder","StepPartitions","partitionsInput","NumberInput","onPlus","numPartitions","String","Number","onMinus","inputName","num","target","widthChars","min","max","StepMessageRetention","useState","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","handleRetentionMessageTime","selectedRetentionTimeOption","handleRetentionMessageSize","selectedRetentionSizeOption","Stack","hasGutter","Radio","CustomRetentionMessage","onToggle","isOpen","selectOptions","StepReplicas","replicationFactor","minInSyncReplica","Alert","isInline","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","toString","popoverBody","popoverHeader","WizardCustomFooter","isLoading","onValidate","closeWizard","WizardFooter","WizardContextConsumer","activeStep","onNext","onBack","Button","onClick","isDisabled","onCloseCreateTopic","config","useContext","addAlert","useAlert","initialFieldsValue","setIsLoading","saveTopic","configPropties","topic","TopicsApi","Configuration","basePath","accessToken","getToken","createTopic","then","AlertVariant","catch","err","response","data","error_message","steps","enableNext","trim","canJumpTo","nextButtonText","Divider","TopicAdvanceConfig","isCreate","handleCancel","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","footer","length","topicName","status","fetchTopic","CreateTopicPage","history","useHistory","basename","getBasename","useBasename","push"],"sourceRoot":""}