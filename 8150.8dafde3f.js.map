{"version":3,"file":"8150.8dafde3f.js","mappings":"6IAsBaA,E,MAAmB,sBAC9BC,GAEWC,EAAe,WAC1B,WAAAC,YAAWH,K,2LC+Cb,QAjDkE,SAAC,G,IACjEI,EAAS,YACTC,EAAa,gBACbC,EAAoB,uBACpBC,EAA2B,8BAC3BC,EAAK,QACLC,EAAO,UACPC,EAAW,cACXC,EAAQ,WAEAC,GAAc,IAAAC,YAAuC,UAU7D,OACE,kBAAC,EAAAC,gBAAe,CAACC,KAAM,KACrB,kBAAC,aAAsB,CAACC,MAAO,CAAEC,SAAUP,EAAaC,SAAQ,IAC9D,kBAAC,aAAyB,CACxBK,MAAO,CACLZ,UAAS,EACTC,cAAa,EACbC,qBAAoB,EACpBE,MAAK,EACLD,4BAA2B,EAC3BE,QAAO,EACPS,iBAnBe,WACvBN,GACEA,EAAU,EAAAO,UAAA,kBAA6B,CACrCX,MAAK,EACLY,SAAUb,OAkBR,kBAAC,EAAAc,cAAa,KACZ,kBAAC,KAAkB,KACjB,kBAAC,IAAc,CAACC,aAAc,IAC9B,kBAAC,EAAAC,YAAW,CAACC,UAAQ,GACnB,kBAAC,IAAoB,CAACpB,UAAWA,IACjC,kBAAC,IAAgB,c,05CCnD3BqB,EAAoB,SACxBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,G,YADA,IAAAD,IAAAA,EAAyB,EAAAE,gBAAA,K,gBAExBC,SAAO,W,wDACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAShC,OATI0B,EAAc,SASlB,GAPU,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAIVQ,kBACRE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,I,OAEJ,MAAO,CAAP,EAVE,SAUcM,cAGZC,EAAsB,SAC1BC,EACAhB,GAAkC,uBACjCU,SAAO,W,wDACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAQlC,OARM0B,EAAc,SAQpB,GANY,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAGZ0B,wBAAwBD,I,OAClC,OADA,SACA,YAqBIE,EAA2B,SAC/BlB,EACAgB,EACAf,EACAI,EACAc,EACA7B,GAAc,uBACboB,SAAO,W,wDACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAShC,OATI0B,EAAc,SASlB,GAPU,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAIV6B,yBAAyBJ,EAAiB,CAClD1B,MAAK,EACLW,OAAM,EACNoB,OAAQ,CAAC,CAAEhB,MAAK,EAAEc,WAAU,O,OAEhC,MAAO,CAAP,EALE,mB,0ECnFQG,E,o2CAAZ,SAAYA,GACV,cACA,0BACA,6BACA,kCAJF,CAAYA,IAAAA,EAAQ,KAOb,IAAMC,EAAY,SACvBvB,EACAE,EACAC,EACAqB,EACAvB,EACAM,EACAC,G,YADA,IAAAD,IAAAA,EAAyB,EAAAE,gBAAA,K,gBAExBC,SAAO,W,wDACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAQU,OARtC0B,EAAc,SAQwB,GANhC,IAAI,EAAAc,UACd,IAAI,EAAAZ,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAGgCgC,UACpDtB,EACAC,EACAC,EACAqB,OACAjD,EACAgC,EACAC,I,OAEF,MAAO,CAAP,EAT4C,SAS5BM,cAGLY,EAAiB,SAC5BC,EACA3B,GAAkC,uBACjCU,SAAO,W,0DACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAQjB,OARX0B,EAAc,SAQH,GANL,IAAI,EAAAc,UACd,IAAI,EAAAZ,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAGKqC,SAASD,I,OAEpC,OAFQb,EAAS,SAA6B,KAEvC,CAAP,EAAOe,EAAqBf,YAGxBe,EAAuB,SAACxB,G,UACtByB,EAA2B,CAAEC,KAAM,GAAIC,cAAe,KAe5D,OAdI3B,GAASA,EAAM0B,OAAMD,EAASC,KAAO1B,EAAM0B,MAEnC,QAAZ,EAAA1B,EAAML,cAAM,SAAEiC,SAAQ,SAACjC,GACjBA,EAAOkC,MACTJ,EAAS9B,EAAOkC,KAAOlC,EAAOV,UAIlCwC,EAASE,eAAiC,QAAjB,EAAA3B,MAAAA,OAAK,EAALA,EAAOc,kBAAU,eAAEgB,OAAOC,aAAc,IAEjEN,EAASO,mBACNhC,MAAAA,OAAK,EAALA,EAAOc,cAA2C,QAA7B,EAAAd,MAAAA,OAAK,EAALA,EAAOc,WAAW,GAAGmB,gBAAQ,eAAEH,OAAOC,aAC5D,IAEKN,GAGIS,EAAmB,SAC9BZ,EACAa,EACAxC,GAAkC,uBACjCU,SAAO,W,wDACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAQK,OARjC0B,EAAc,SAQmB,GAN3B,IAAI,EAAAc,UACd,IAAI,EAAAZ,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAG2BkD,YAC/Cd,EACAa,I,OAEF,MAAO,CAAP,EAJuC,SAIvBE,gBAGLd,EAAW,SACtBD,EACA3B,GAAkC,uBACjCU,SAAO,W,kEACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAQjB,OARX0B,EAAc,SAQH,GANL,IAAI,EAAAc,UACd,IAAI,EAAAZ,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAGKqC,SAASD,I,OAapC,OAbMgB,EAAW,UAEXC,EAASD,EAAS7B,MACjBd,OAAS4C,EAAO5C,QAAW,GAClC4C,EAAO5C,OAAO6C,KAAK,CACjBX,IAAK,oBACL5C,MAIG,QAJI,EAAyB,QAAzB,EAAa,QAAb,EAAAqD,EAAS7B,YAAI,eAAEK,kBAAU,eAC5B2B,KAAI,SAACC,GAAC,MAAK,OAAU,QAAV,EAAAA,EAAET,gBAAQ,eAAEH,UACxBa,QACC,SAACC,EAAmBC,GAAqB,YAAxC,IAAAD,IAAAA,EAAA,QAAmB,IAAAC,IAAAA,EAAA,GAAqBD,EAAgBC,YAC1D,eACCd,aAEC,CAAP,EAAOO,EAAS7B,cAGLqC,EAAc,SACzBxB,EACA3B,GAAkC,uBACjCU,SAAO,W,wDACY,SAAMV,MAAAA,OAAM,EAANA,EAAQf,Y,OAQlC,OARM0B,EAAc,SAQpB,GANY,IAAI,EAAAc,UACd,IAAI,EAAAZ,cAAc,CAChBF,YAAW,EACXpB,SAAUS,MAAAA,OAAM,EAANA,EAAQT,YAGZ4D,YAAYxB,I,OACtB,OADA,SACA","sources":["webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Permissions/PermissionsFederated.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts","webpack://kafka-ui/./src/services/topics.ts"],"sourcesContent":["import React, { useContext } from 'react';\nimport { DeleteInstanceProps } from '@rhoas/app-services-ui-shared';\n\nexport type FederatedProps = Pick<DeleteInstanceProps, 'kafka'> & {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n  showSchemas?: JSX.Element | undefined;\n  redirectAfterDeleteInstance?: () => void;\n  onDeleteInstance?: () => void;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React from 'react';\nimport { PageSection } from '@patternfly/react-core';\nimport { PermissionsTableView } from '@app/modules/Permissions/pages/PermissionsTable/PermissionsTableView';\nimport { ModalProvider } from '@rhoas/app-services-ui-components';\nimport { I18nextProvider } from 'react-i18next';\nimport kafkai18n from '@app/i18n';\nimport {\n  MainViewHeader,\n  KafkaModalLoader,\n  PaginationProvider,\n} from '@app/components';\nimport {\n  FederatedProps,\n  FederatedContext,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\nimport { useModal, ModalType } from '@rhoas/app-services-ui-shared';\n\ntype PermissionsFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst PermissionsFederated: React.FC<PermissionsFederatedProps> = ({\n  kafkaName,\n  kafkaPageLink,\n  handleInstanceDrawer,\n  redirectAfterDeleteInstance,\n  kafka,\n  onError,\n  apiBasePath,\n  getToken,\n}) => {\n  const { showModal } = useModal<ModalType.KasDeleteInstance>();\n\n  const onDeleteInstance = () => {\n    showModal &&\n      showModal(ModalType.KasDeleteInstance, {\n        kafka,\n        onDelete: redirectAfterDeleteInstance,\n      });\n  };\n\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <FederatedContext.Provider\n          value={{\n            kafkaName,\n            kafkaPageLink,\n            handleInstanceDrawer,\n            kafka,\n            redirectAfterDeleteInstance,\n            onError,\n            onDeleteInstance,\n          }}\n        >\n          <ModalProvider>\n            <PaginationProvider>\n              <MainViewHeader activeTabKey={4} />\n              <PageSection isFilled>\n                <PermissionsTableView kafkaName={kafkaName} />\n                <KafkaModalLoader />\n              </PageSection>\n            </PaginationProvider>\n          </ModalProvider>\n        </FederatedContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default PermissionsFederated;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  ConsumerGroup,\n  ConsumerGroupList,\n  ConsumerGroupResetOffsetParametersOffsetEnum,\n  ConsumerGroupResetOffsetResult,\n  GroupsApi,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nconst consumerGroupResetOffset = async (\n  config: IConfiguration | undefined,\n  consumerGroupId: string,\n  offset: ConsumerGroupResetOffsetParametersOffsetEnum,\n  topic: string,\n  partitions: number[],\n  value?: string\n): Promise<AxiosResponse<ConsumerGroupResetOffsetResult>> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupResetOffsetResult> =\n    await api.resetConsumerGroupOffset(consumerGroupId, {\n      value,\n      offset,\n      topics: [{ topic, partitions }],\n    });\n  return response;\n};\n\nexport {\n  getConsumerGroups,\n  deleteConsumerGroup,\n  getConsumerGroupDetail,\n  consumerGroupResetOffset,\n};\n","import { AxiosResponse } from 'axios';\nimport {\n  ConfigEntry,\n  TopicsApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { IAdvancedTopic } from '@app/modules/Topics/utils';\nimport { SortByDirection } from '@patternfly/react-table';\n\nexport enum OrderKey {\n  name = 'name',\n  partitions = 'partitions',\n  retentionMs = 'retention.ms',\n  retentionSize = 'retention.bytes',\n}\n\nexport const getTopics = async (\n  config: IConfiguration | undefined,\n  limit?: number,\n  size?: number,\n  filter?: string,\n  offset?: number | undefined,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: OrderKey\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopics(\n    offset,\n    limit,\n    size,\n    filter,\n    undefined,\n    order,\n    orderKey\n  );\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<IAdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): IAdvancedTopic => {\n  const topicObj: IAdvancedTopic = { name: '', numPartitions: '0' };\n  if (topic && topic.name) topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length.toString() || '0';\n\n  topicObj.replicationFactor =\n    (topic?.partitions && topic?.partitions[0].replicas?.length.toString()) ||\n    '0';\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"names":["FederatedContext","undefined","useFederated","useContext","kafkaName","kafkaPageLink","handleInstanceDrawer","redirectAfterDeleteInstance","kafka","onError","apiBasePath","getToken","showModal","useModal","I18nextProvider","i18n","value","basePath","onDeleteInstance","ModalType","onDelete","ModalProvider","activeTabKey","PageSection","isFilled","getConsumerGroups","config","offset","limit","size","page","topic","groupIdFilter","order","orderKey","SortByDirection","Promise","accessToken","GroupsApi","Configuration","data","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","consumerGroupResetOffset","partitions","resetConsumerGroupOffset","topics","OrderKey","getTopics","filter","TopicsApi","getTopicDetail","topicName","getTopic","convertTopicResponse","topicObj","name","numPartitions","forEach","key","length","toString","replicationFactor","replicas","updateTopicModel","topicSettings","updateTopic","status","response","answer","push","map","p","reduce","previousValue","currentValue","deleteTopic"],"sourceRoot":""}