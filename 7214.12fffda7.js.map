{"version":3,"file":"7214.12fffda7.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/components/MASLoading/MASLoading.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SelectAccount.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateSelect.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateTypeahead.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/acls.ts","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/ExistingAclTable.tsx","webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/PreCancelModal.tsx","webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/ManagePermissions.tsx","webpack://kafka-ui/./src/modules/Topics/utils/topicNameValidation.ts"],"sourcesContent":["import { FormGroup, Popover, ValidatedOptions } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\nexport type FormGroupWithPopoverProps = {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel?: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n  validated?: ValidatedOptions;\n  helperText?: string;\n  helperTextInvalid?: string;\n  isRequired?: boolean;\n};\n\nexport const FormGroupWithPopover: React.FC<FormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n  validated,\n  helperText,\n  helperTextInvalid,\n  isRequired,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      validated={validated}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      isRequired={isRequired}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  BullseyeProps,\n  Spinner,\n  SpinnerProps,\n} from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React, { useState } from 'react';\nimport { Principal, PrincipalType } from '@rhoas/app-services-ui-shared';\nimport { useTranslation } from 'react-i18next';\nimport { FormGroupWithPopover } from '@app/components';\nimport {\n  Divider,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\n\nexport type SelectAccountProps = {\n  id: Validated<string | undefined>;\n  setId: React.Dispatch<React.SetStateAction<Validated<string | undefined>>>;\n  initialOptions: Principal[];\n  setEscapeClosesModal: (closes: boolean) => void;\n};\n\nexport const SelectAccount: React.FunctionComponent<SelectAccountProps> = ({\n  setId,\n  id,\n  initialOptions,\n  setEscapeClosesModal,\n}) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setId({ value: undefined, validated: undefined });\n    setIsOpen(false);\n  };\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (selection === '') selection = undefined;\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setId(() => {\n        if (selection === undefined) {\n          return {\n            value: selection,\n            validated: ValidatedOptions.error,\n            errorMessage: t(\n              'permission.manage_permissions_dialog.must_select_account_error'\n            ),\n          };\n        } else {\n          return {\n            validated: ValidatedOptions.default,\n            value: selection,\n          };\n        }\n      });\n    }\n    setIsOpen(false);\n  };\n\n  const options = [\n    <SelectGroup key='all_accounts_group'>\n      <SelectOption\n        key='*'\n        value='*'\n        description={t(\n          'permission.manage_permissions_dialog.all_accounts_description'\n        )}\n      >\n        {t('permission.manage_permissions_dialog.all_accounts_title')}\n      </SelectOption>\n    </SelectGroup>,\n    <Divider key='divider' />,\n    <SelectGroup\n      label={t(\n        'permission.manage_permissions_dialog.all_accounts_service_account_group'\n      )}\n      key='service_accounts_group'\n    >\n      {initialOptions\n        .filter(\n          (principal) =>\n            principal.principalType === PrincipalType.ServiceAccount\n        )\n        .sort((a, b) =>\n          a.displayName && b.displayName\n            ? a.displayName.localeCompare(b.displayName)\n            : -1\n        )\n        .map((principal, index) => (\n          <SelectOption\n            key={index}\n            value={principal.id}\n            description={principal.displayName}\n          >\n            {principal.id}\n          </SelectOption>\n        ))}\n    </SelectGroup>,\n    <Divider key='divider' />,\n    <SelectGroup\n      label={t(\n        'permission.manage_permissions_dialog.all_accounts_user_account_group'\n      )}\n      key='user_accounts_group'\n    >\n      {initialOptions\n        .filter(\n          (principal) => principal.principalType === PrincipalType.UserAccount\n        )\n        .map((principal, index) => (\n          <SelectOption\n            key={index}\n            value={principal.id}\n            description={principal.displayName}\n          >\n            {principal.id}\n          </SelectOption>\n        ))}\n    </SelectGroup>,\n  ];\n\n  const customFilter = (_, value: string) => {\n    if (!value) {\n      return options;\n    }\n\n    const input = new RegExp(value, 'i');\n    return options\n      .filter((accounts) => Array.isArray(accounts.props.children))\n      .map((account) =>\n        account.props.children.filter(\n          (allAccounts) =>\n            input.test(allAccounts.props.value) ||\n            input.test(allAccounts.props.description)\n        )\n      );\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t('permission.manage_permissions_dialog.account_id_title')}\n      fieldId='kafka-instance-name'\n      fieldLabel={t('permission.manage_permissions_dialog.account_id_title')}\n      labelBody={t('permission.manage_permissions_dialog.account_id_help')}\n      buttonAriaLabel={t(\n        'permission.manage_permissions_dialog.account_id_aria'\n      )}\n      isRequired={true}\n      helperTextInvalid={id.errorMessage}\n      validated={id.validated || ValidatedOptions.default}\n    >\n      <Select\n        variant={SelectVariant.typeahead}\n        className='kafka-ui--select--limit-height'\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_aria'\n        )}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={id.value}\n        onFilter={customFilter}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_placeholder'\n        )}\n        isCreatable={false}\n        menuAppendTo='parent'\n        validated={id.validated || ValidatedOptions.default}\n        isGrouped={true}\n      >\n        {options}\n      </Select>\n    </FormGroupWithPopover>\n  );\n};\n","import { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { useTranslation } from 'react-i18next';\nimport React, { useState } from 'react';\nimport { Select as PFSelect } from '@patternfly/react-core/dist/js/components/Select/Select';\nimport { SelectVariant } from '@patternfly/react-core';\nimport { SelectOption as PFSelectOption } from '@patternfly/react-core/dist/js/components/Select/SelectOption';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport { ValidatedOptions } from '@patternfly/react-core';\n\nexport type CreateSelectProps<T> = {\n  id: string;\n  options: SelectOption<T>[];\n  selected: Validated<string | undefined>;\n  setSelected: (row: number, id: T | undefined) => void;\n  row: number;\n  placeholder?: string;\n  setEscapeClosesModal: (closes: boolean) => void;\n  onSelect: (value: string) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n  onClear: () => T | undefined;\n};\n\nexport const CreateSelect = <\n  T extends AclPermissionType | AclResourceType | AclPatternType | AclOperation\n>({\n  options,\n  setSelected,\n  selected,\n  row,\n  id,\n  placeholder,\n  setEscapeClosesModal,\n  onSelect,\n  menuAppendTo,\n  onClear,\n}: CreateSelectProps<T>): React.ReactElement => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setSelected(row, onClear());\n    setIsOpen(false);\n  };\n\n  const select = (event, selection, isPlaceholder) => {\n    if (selection === '') selection = undefined;\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(row, selection);\n      setIsOpen(false);\n      onSelect(selection);\n    }\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.assign_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={selected.errorMessage}\n      validated={selected.validated || ValidatedOptions.default}\n    >\n      <PFSelect\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={select}\n        onClear={clearSelection}\n        selections={selected.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={placeholder}\n        validated={selected.validated || ValidatedOptions.default}\n        menuAppendTo={menuAppendTo}\n        maxHeight={200}\n        direction={'up'}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          >\n            {option.title}\n          </PFSelectOption>\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport {\n  SelectVariant,\n  ValidatedOptions,\n  Select as PFSelect,\n  SelectOption as PFSelectOption,\n} from '@patternfly/react-core';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\n\nexport type CreateTypeaheadProps = {\n  row: number;\n  value: Validated<string | undefined>;\n  setValue: (row: number, id: string | undefined) => void;\n  initialOptions: () => string[];\n  id: string;\n  placeholder?: string;\n  onSelect: (value: string) => void;\n  setEscapeClosesModal: (closes: boolean) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n};\n\nexport const CreateTypeahead: React.FunctionComponent<CreateTypeaheadProps> = ({\n  row,\n  setValue,\n  value,\n  initialOptions,\n  id,\n  placeholder,\n  onSelect,\n  setEscapeClosesModal,\n  menuAppendTo,\n}) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [options, setOptions] = useState<SelectOption<string>[]>([]);\n\n  useEffect(() => {\n    setOptions(\n      initialOptions().map((o) => {\n        return { value: o } as SelectOption<string>;\n      })\n    );\n  }, [initialOptions]);\n\n  const onToggle = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setValue(row, undefined);\n    setIsOpen(false);\n  };\n\n  const select = (event, selection, isPlaceholder) => {\n    if (selection === '') selection = undefined;\n    if (isPlaceholder) clearSelection();\n    else {\n      setValue(row, selection);\n      setIsOpen(false);\n      onSelect(selection);\n    }\n  };\n\n  const onCreateOption = (newValue: string) => {\n    setOptions([...options, { value: newValue } as SelectOption<string>]);\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.assign_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={value.errorMessage}\n      validated={value.validated || ValidatedOptions.default}\n    >\n      <PFSelect\n        variant={SelectVariant.typeahead}\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.assign_permissions.resource_name_aria'\n        )}\n        onToggle={onToggle}\n        className='pf-u-pr-lg-on-lg'\n        onSelect={select}\n        onClear={clearSelection}\n        selections={value.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={placeholder}\n        isCreatable={true}\n        onCreateOption={onCreateOption}\n        createText={t(\n          'permission.manage_permissions_dialog.assign_permissions.resource_name_typeahead_create_text'\n        )}\n        validated={value.validated || ValidatedOptions.default}\n        menuAppendTo={menuAppendTo}\n        maxHeight={200}\n        direction={'up'}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          />\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\n\nexport const AllAccountsId = '*';\n\nexport const isNewAclModified = (value: NewAcl, totalRows = 0): boolean => {\n  const emptyAcl = createEmptyNewAcl();\n  return !(\n    value.permission.value === emptyAcl.permission.value &&\n    value.patternType.value === emptyAcl.patternType.value &&\n    value.resourceType.value === emptyAcl.resourceType.value &&\n    value.resource.value === emptyAcl.resource.value &&\n    value.operation.value === emptyAcl.operation.value &&\n    totalRows <= 1\n  );\n};\n\nexport type NewAcl = {\n  permission: Validated<AclPermissionType | undefined>;\n  operation: Validated<AclOperation | undefined>;\n  resourceType: Validated<AclResourceType | undefined>;\n  patternType: Validated<AclPatternType | undefined>;\n  resource: Validated<string | undefined>;\n};\n\nexport const createEmptyNewAcl = (): NewAcl => {\n  return {\n    permission: {\n      value: AclPermissionType.Allow,\n    },\n    operation: {\n      value: undefined,\n    },\n    resourceType: {\n      value: undefined,\n    },\n    patternType: {\n      value: AclPatternType.Prefixed,\n    },\n    resource: {\n      value: undefined,\n    },\n  } as NewAcl;\n};\n","import {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport React from 'react';\nimport {\n  getOperations,\n  getPatternTypes,\n  getPermissionsTypes,\n  getResourceTypes,\n} from '@app/services/acls';\nimport {\n  cellWidth,\n  ICell,\n  IRowData,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { MASTable } from '@app/components';\nimport {\n  ActionList,\n  ActionListItem,\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { CreateSelect } from '@app/modules/Permissions/components/ManagePermissionsDialog/CreateSelect';\nimport { sentenceCase } from 'sentence-case';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { snakeCase } from 'snake-case';\nimport { CreateTypeahead } from '@app/modules/Permissions/components/ManagePermissionsDialog/CreateTypeahead';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\nimport {\n  createEmptyNewAcl,\n  isNewAclModified,\n  NewAcl,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\nimport { displayName } from '@app/modules/Permissions/utils';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\n\nexport type CreatePermissionsProps = {\n  selectedAccount?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n  acls: NewAcl[];\n  setAcls: React.Dispatch<React.SetStateAction<NewAcl[]>>;\n  setEscapeClosesModal: (closes: boolean) => void;\n  resourceOperations: { [key: string]: Array<string> };\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n};\n\nexport const CreatePermissions: React.FunctionComponent<CreatePermissionsProps> =\n  ({\n    acls,\n    setAcls,\n    topicNames,\n    consumerGroupIds,\n    selectedAccount,\n    setEscapeClosesModal,\n    resourceOperations,\n    menuAppendTo,\n  }) => {\n    const { validateName } = useValidateTopic();\n    const { t } = useTranslation();\n\n    const tableColumns = [\n      {\n        title: t('permission.table.resource_column_title'),\n        columnTransforms: [cellWidth(20)],\n      },\n      {\n        title: '',\n        columnTransforms: [cellWidth(15)],\n      },\n      {\n        title: '',\n        columnTransforms: [cellWidth(25)],\n      },\n      {\n        title: t('permission.table.permissions_column_title'),\n        columnTransforms: [cellWidth(20)],\n      },\n      {\n        title: '',\n        columnTransforms: [cellWidth(20)],\n      },\n    ] as ICell[];\n\n    const setPermissionType = (row: number, value?: AclPermissionType) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.permission = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setOperation = (row: number, value?: AclOperation) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.operation = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setResourceType = (row: number, value?: AclResourceType) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.resourceType = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setPatternType = (row: number, value?: AclPatternType) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.patternType = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setResource = (row: number, value?: string) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.resource = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const addRow = () => {\n      setAcls((prevState) => [...prevState, createEmptyNewAcl()]);\n    };\n\n    const removeRow = (row: number) => {\n      setAcls((prevState) => {\n        if (prevState.length > 1) {\n          return prevState.filter((v, k) => k !== row);\n        }\n        return [createEmptyNewAcl()];\n      });\n    };\n\n    const formGroupHelperText = () => {\n      if (selectedAccount === '*') {\n        return t(\n          'permission.manage_permissions_dialog.assign_permissions.help_all_accounts'\n        );\n      }\n      return t('permission.manage_permissions_dialog.assign_permissions.help', {\n        account_id: selectedAccount,\n      });\n    };\n\n    type CellProps = {\n      acl: NewAcl;\n      row: number;\n    };\n\n    const PatternTypeCell: React.FunctionComponent<CellProps> = ({\n      acl,\n      row,\n    }) => {\n      if (acl.resourceType.value === AclResourceType.Cluster) {\n        return <></>;\n      }\n      return (\n        <CreateSelect\n          options={getPatternTypes()\n            .map((value) => {\n              return {\n                value,\n                title:\n                  value === AclPatternType.Prefixed\n                    ? t(\n                        'permission.manage_permissions_dialog.assign_permissions.pattern_type_prefixed'\n                      )\n                    : t(\n                        'permission.manage_permissions_dialog.assign_permissions.pattern_type_literal'\n                      ),\n                description:\n                  value === AclPatternType.Prefixed\n                    ? t(\n                        'permission.manage_permissions_dialog.assign_permissions.pattern_type_prefixed_help'\n                      )\n                    : t(\n                        'permission.manage_permissions_dialog.assign_permissions.pattern_type_literal_help'\n                      ),\n              } as SelectOption<AclPatternType>;\n            })\n            .sort((a, b) => b.value.localeCompare(a.value))}\n          selected={acl.patternType}\n          setSelected={setPatternType}\n          row={row}\n          id='pattern-type'\n          setEscapeClosesModal={setEscapeClosesModal}\n          menuAppendTo={menuAppendTo}\n          onClear={() => createEmptyNewAcl().patternType.value}\n          onSelect={(value) => {\n            setAcls((prevState) => {\n              if (value === undefined) {\n                prevState[row].patternType.validated = ValidatedOptions.error;\n                prevState[row].patternType.validated = t(\n                  'permission.manage_permissions_dialog.assign_permissions.must_select_pattern_type_error'\n                );\n              } else {\n                prevState[row].patternType.validated = ValidatedOptions.default;\n              }\n              return prevState;\n            });\n          }}\n        />\n      );\n    };\n\n    const ResourceType: React.FunctionComponent<CellProps> = ({ row, acl }) => {\n      return (\n        <CreateSelect\n          options={getResourceTypes().map((value) => {\n            return {\n              value,\n              title: displayName(value),\n            } as SelectOption<AclResourceType>;\n          })}\n          selected={acl.resourceType}\n          setSelected={setResourceType}\n          row={row}\n          id='resource-type'\n          placeholder={t(\n            'permission.manage_permissions_dialog.assign_permissions.resource_type_placeholder'\n          )}\n          setEscapeClosesModal={setEscapeClosesModal}\n          menuAppendTo={menuAppendTo}\n          onClear={() => createEmptyNewAcl().resourceType.value}\n          onSelect={(value) => {\n            setAcls((prevState) => {\n              if (value === undefined) {\n                prevState[row].resourceType.validated = ValidatedOptions.error;\n                prevState[row].resourceType.errorMessage = t(\n                  'permission.manage_permissions_dialog.assign_permissions.must_select_resource_type_error'\n                );\n              } else {\n                prevState[row].resourceType.validated =\n                  ValidatedOptions.default;\n              }\n              return prevState;\n            });\n          }}\n        />\n      );\n    };\n\n    const ResourceCell: React.FunctionComponent<CellProps> = ({ row, acl }) => {\n      if (acl.resourceType.value === AclResourceType.Cluster) {\n        return <></>;\n      }\n      return (\n        <CreateTypeahead\n          row={row}\n          value={acl.resource}\n          setValue={setResource}\n          id='resource'\n          placeholder={t(\n            `permission.manage_permissions_dialog.assign_permissions.pattern_type_${\n              acl.patternType.value?.toLowerCase() || 'prefixed'\n            }_placeholder`\n          )}\n          setEscapeClosesModal={setEscapeClosesModal}\n          menuAppendTo={menuAppendTo}\n          initialOptions={() => {\n            if (acl.resourceType.value === AclResourceType.Topic) {\n              return topicNames;\n            }\n            if (acl.resourceType.value === AclResourceType.Group) {\n              return consumerGroupIds;\n            }\n            return [];\n          }}\n          onSelect={(value) => {\n            if (value === '*') {\n              setAcls((prevState) => {\n                prevState[row].resource.validated = ValidatedOptions.default;\n                return prevState;\n              });\n            } else {\n              const errorMessage = validateName(value);\n              if (errorMessage !== undefined) {\n                setAcls((prevState) => {\n                  prevState[row].resource.validated = ValidatedOptions.error;\n                  prevState[row].resource.errorMessage = errorMessage;\n                  return prevState;\n                });\n              } else if (value !== undefined) {\n                setAcls((prevState) => {\n                  prevState[row].resource.validated = ValidatedOptions.default;\n                  return prevState;\n                });\n              }\n            }\n          }}\n        />\n      );\n    };\n\n    const PermissionTypeCell: React.FunctionComponent<CellProps> = ({\n      acl,\n      row,\n    }) => {\n      return (\n        <CreateSelect\n          options={getPermissionsTypes().map((value) => {\n            return {\n              value,\n              title: sentenceCase(value),\n            } as SelectOption<AclPermissionType>;\n          })}\n          selected={acl.permission}\n          setSelected={setPermissionType}\n          row={row}\n          id='permission-type'\n          setEscapeClosesModal={setEscapeClosesModal}\n          menuAppendTo={menuAppendTo}\n          onClear={() => createEmptyNewAcl().permission.value}\n          onSelect={(value) => {\n            setAcls((prevState) => {\n              if (value === undefined) {\n                prevState[row].permission.validated = ValidatedOptions.error;\n                prevState[row].permission.errorMessage = t(\n                  'permission.manage_permissions_dialog.assign_permissions.must_select_permission_error'\n                );\n              } else {\n                prevState[row].permission.validated = ValidatedOptions.default;\n              }\n              return prevState;\n            });\n          }}\n        />\n      );\n    };\n\n    const OperationCell: React.FunctionComponent<CellProps> = ({\n      acl,\n      row,\n    }) => {\n      return (\n        <CreateSelect\n          options={getOperations()\n            .filter((value) => {\n              if (\n                acl.resourceType.value === undefined ||\n                acl.resourceType.value.toString() === ''\n              ) {\n                return true;\n              }\n              const resourceType = snakeCase(acl.resourceType.value.toString());\n              const operationType = snakeCase(value);\n              return resourceOperations[resourceType].some(\n                (p) => p === operationType\n              );\n            })\n            .map((value) => {\n              return {\n                value,\n                title: sentenceCase(value),\n              } as SelectOption<AclOperation>;\n            })}\n          selected={acl.operation}\n          setSelected={setOperation}\n          row={row}\n          id='operation'\n          placeholder={t(\n            'permission.manage_permissions_dialog.assign_permissions.operation_placeholder'\n          )}\n          setEscapeClosesModal={setEscapeClosesModal}\n          menuAppendTo={menuAppendTo}\n          onClear={() => createEmptyNewAcl().operation.value}\n          onSelect={(value) => {\n            setAcls((prevState) => {\n              if (value === undefined) {\n                prevState[row].operation.validated = ValidatedOptions.error;\n                prevState[row].operation.errorMessage = t(\n                  'permission.manage_permissions_dialog.assign_permissions.must_select_operation_error'\n                );\n              } else {\n                prevState[row].operation.validated = ValidatedOptions.default;\n              }\n              return prevState;\n            });\n          }}\n        />\n      );\n    };\n\n    const RemoveButtonCell: React.FunctionComponent<CellProps> = ({\n      row,\n      acl,\n    }) => {\n      return (\n        <Tooltip\n          content={t(\n            'permission.manage_permissions_dialog.assign_permissions.remove_row_help'\n          )}\n        >\n          <Button\n            variant='link'\n            icon={<TrashIcon />}\n            onClick={() => removeRow(row)}\n            isDisabled={!isNewAclModified(acl, acls.length)}\n          />\n        </Tooltip>\n      );\n    };\n\n    return (\n      <div>\n        <TextContent>\n          <Text component={TextVariants.h2}>\n            {t('permission.manage_permissions_dialog.assign_permissions.title')}\n          </Text>\n          <Text component={TextVariants.small}>{formGroupHelperText()}</Text>\n          <Text component={TextVariants.small}>\n            {t(\n              'permission.manage_permissions_dialog.assign_permissions.all_fields_are_required'\n            )}\n          </Text>\n        </TextContent>\n\n        <MASTable\n          tableProps={{\n            cells: tableColumns,\n            rows: acls.map((acl, row) => {\n              return {\n                cells: [\n                  {\n                    title: <ResourceType row={row} acl={acl} />,\n                  },\n                  {\n                    title: <PatternTypeCell row={row} acl={acl} />,\n                  },\n                  {\n                    title: <ResourceCell acl={acl} row={row} />,\n                  },\n                  {\n                    title: <PermissionTypeCell acl={acl} row={row} />,\n                  },\n                  {\n                    title: (\n                      <div className='pf-u-display-flex pf-u-justify-content-space-between'>\n                        <div>\n                          <OperationCell acl={acl} row={row} />\n                        </div>\n                        <div>\n                          <RemoveButtonCell acl={acl} row={row} />\n                        </div>\n                      </div>\n                    ),\n                  },\n                ],\n              } as IRowData;\n            }),\n            'aria-label': t('permission.table.table.permission_list_table'),\n            shouldDefaultCustomRowWrapper: true,\n            variant: TableVariant.compact,\n            canSelectAll: false,\n          }}\n          rowDataTestId={'tablePermissions-row'}\n        />\n        <ActionList>\n          <ActionListItem>\n            <Button variant='link' icon={<PlusCircleIcon />} onClick={addRow}>\n              {t(\n                'permission.manage_permissions_dialog.assign_permissions.add_row'\n              )}\n            </Button>\n          </ActionListItem>\n        </ActionList>\n      </div>\n    );\n  };\n","import { EnhancedAclBinding } from '@app/services/acls';\nimport React, { useEffect, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  CellBuilder,\n  permissionOperationCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport {\n  Button,\n  Label,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { TrashIcon } from '@patternfly/react-icons';\nimport { cellWidth, ICell, TableVariant } from '@patternfly/react-table';\nimport { MASTable } from '@app/components';\nimport { AclBinding } from '@rhoas/kafka-instance-sdk';\n\nexport type ExistingAclTableProps = {\n  existingAcls: Array<AclBinding>;\n  selectedAccountId?: string;\n  onRemove: (acl: EnhancedAclBinding) => void;\n};\n\nexport const ExistingAclTable: React.FunctionComponent<ExistingAclTableProps> =\n  ({ existingAcls, selectedAccountId, onRemove }) => {\n    type RemovableEnhancedAclBinding = EnhancedAclBinding & {\n      removed: boolean;\n      index: number;\n    };\n\n    const { t } = useTranslation();\n    const [acls, setAcls] = useState<RemovableEnhancedAclBinding[]>([]);\n\n    useEffect(() => {\n      // Workaround as I can't work out how to pass initial state for an array\n      setAcls(\n        existingAcls.map((v, k) => {\n          const answer = v as RemovableEnhancedAclBinding;\n          answer.index = k;\n          return answer;\n        })\n      );\n    }, [existingAcls]);\n\n    const removeRow = (acl: RemovableEnhancedAclBinding) => {\n      setAcls(\n        acls.map((v) => {\n          if (v.hash() === acl.hash()) {\n            v.removed = true;\n          }\n          return v;\n        })\n      );\n      onRemove(acl);\n    };\n\n    const tableColumns = [\n      {\n        title: t('permission.table.resource_column_title'),\n        columnTransforms: [cellWidth(60)],\n      },\n      {\n        title: t('permission.table.permissions_column_title'),\n        columnTransforms: [cellWidth(20)],\n      },\n      {\n        title: '',\n        columnTransforms: [cellWidth(20)],\n      },\n    ] as ICell[];\n\n    const principalCell: CellBuilder<RemovableEnhancedAclBinding> = (item) => {\n      const RemoveButton: React.FunctionComponent = () => (\n        <Button\n          variant='link'\n          icon={<TrashIcon />}\n          onClick={() => removeRow(item)}\n        />\n      );\n\n      const AllAccountsLabel: React.FunctionComponent = () => (\n        <Label variant='outline'>{t('permission.table.all_accounts')}</Label>\n      );\n\n      if (selectedAccountId === '*' && item.principal === '*') {\n        return {\n          title: (\n            <div className='pf-u-display-flex pf-u-justify-content-space-between pf-u-justify-content-flex-end-on-lg'>\n              <AllAccountsLabel /> <RemoveButton />\n            </div>\n          ),\n          props: {},\n        };\n      } else if (item.principal === '*') {\n        return {\n          title: (\n            <div className='pf-u-display-flex pf-u-justify-content-flex-end-on-lg'>\n              <AllAccountsLabel />\n            </div>\n          ),\n          props: {},\n        };\n      } else {\n        return {\n          title: (\n            <div className='pf-u-display-flex pf-u-justify-content-flex-end'>\n              <RemoveButton />\n            </div>\n          ),\n          props: {},\n        };\n      }\n    };\n\n    const cells = [resourceCell, permissionOperationCell, principalCell];\n\n    if (selectedAccountId === undefined || acls.length === 0) {\n      return <></>;\n    }\n\n    const HelperText: React.FunctionComponent = () => {\n      if (selectedAccountId === '*') {\n        return t(\n          'permission.manage_permissions_dialog.edit_existing.all_accounts_help'\n        );\n      }\n      return (\n        <Trans i18nKey='permission.manage_permissions_dialog.edit_existing.help'>\n          Review the list of existing permissions for the selected account. The\n          list includes account-specific permissions and permissions applied to\n          all accounts within this Kafka instance. Permissions labeled\n          <strong>All accounts</strong> cannot be removed when an individual\n          account ID is selected.\n        </Trans>\n      );\n    };\n\n    return (\n      <div>\n        <TextContent>\n          <Text component={TextVariants.h2}>\n            {t('permission.manage_permissions_dialog.edit_existing.title')}\n          </Text>\n          <Text component={TextVariants.small}>\n            <HelperText />\n          </Text>\n        </TextContent>\n\n        <MASTable\n          tableProps={{\n            cells: tableColumns,\n            rows: [\n              ...acls\n                .filter((acl) => !acl.removed)\n                .map((item, row) => {\n                  return {\n                    cells: cells.map((f) => f(item, row)),\n                    originalData: item,\n                  };\n                }),\n            ],\n            'aria-label': t('permission.table.table.permission_list_table'),\n            shouldDefaultCustomRowWrapper: true,\n            variant: TableVariant.compact,\n            canSelectAll: false,\n            // TODO: gridBreakPoint: 'grid-lg' NOTE: This is needed so that the table doesn't overrun a narrow screen, but it currently breaks the first header because it's messing with :before of the first cell and so is the mas--[streams-]table-view__table\n          }}\n          rowDataTestId={'tablePermissions-row'}\n        />\n      </div>\n    );\n  };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\n\nexport type PreCancelModalProps = {\n  isOpen: boolean;\n  closeModal: () => void;\n  resumeEditing: () => void;\n};\n\nconst PreCancelModal: React.FC<PreCancelModalProps> = ({\n  isOpen,\n  closeModal,\n  resumeEditing,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      id='manage-permissions-precancel-modal'\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      aria-label={t(\n        'permission.manage_permissions_pre_cancel_dialog.aria_label'\n      )}\n      title={`${t(\n        'permission.manage_permissions_pre_cancel_dialog.discard_changes'\n      )}?`}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={closeModal}\n      onEscapePress={closeModal}\n      actions={[\n        <Button onClick={closeModal} key={1} variant={ButtonVariant.primary}>\n          {t('permission.manage_permissions_pre_cancel_dialog.discard_changes')}\n        </Button>,\n        <Button\n          onClick={resumeEditing}\n          key={2}\n          variant={ButtonVariant.secondary}\n        >\n          {t('permission.manage_permissions_pre_cancel_dialog.resume_editing')}\n        </Button>,\n      ]}\n    >\n      {t('permission.manage_permissions_pre_cancel_dialog.modal_description')}\n    </Modal>\n  );\n};\n\nexport { PreCancelModal };\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  convertEnum,\n  EnhancedAclBinding,\n  usePermissionsService,\n} from '@app/services/acls';\nimport { ConfigContext, useFederated } from '@app/contexts';\nimport {\n  BaseModalProps,\n  ManagePermissionsModalProps,\n  ManagePermissionsProps,\n  usePrincipals,\n  useAuth,\n} from '@rhoas/app-services-ui-shared';\nimport { SelectAccount } from '@app/modules/Permissions/components/ManagePermissionsDialog/SelectAccount';\nimport { CreatePermissions } from '@app/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  createEmptyNewAcl,\n  isNewAclModified,\n  NewAcl,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\nimport { FormGroupWithPopover, MASLoading } from '@app/components';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\nimport { ExistingAclTable } from '@app/modules/Permissions/components/ManagePermissionsDialog/ExistingAclTable';\nimport {\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\nimport { PreCancelModal } from './PreCancelModal';\nimport './ManagePermissions.css';\n\nexport const ManagePermissions: React.FC<\n  ManagePermissionsProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  title,\n  variant,\n}) => {\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n  const [resourceOperations, setResourceOperations] = useState<\n    { [key: string]: Array<string> } | undefined\n  >();\n\n  useEffect(() => {\n    const fetchResourceOperations = async () => {\n      const answer = await permissionsService.getResourceOperations();\n      setResourceOperations(answer);\n    };\n    fetchResourceOperations();\n  }, []);\n\n  return (\n    <ManagePermissionsModal\n      topicNames={topicNames}\n      consumerGroupIds={consumerGroupIds}\n      acls={acls}\n      resourceOperations={resourceOperations}\n      hideModal={hideModal}\n      selectedAccountId={selectedAccountId}\n      onSave={onSave}\n      kafkaName={kafkaName}\n      variant={variant}\n      title={title}\n    />\n  );\n};\n\nexport const ManagePermissionsModal: React.FC<\n  ManagePermissionsModalProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  resourceOperations,\n  title,\n  variant,\n}) => {\n  const { t } = useTranslation();\n  const { kafka } = useFederated() || {};\n  const auth = useAuth();\n\n  const [selectedAccount, setSelectedAccount] = useState<\n    Validated<string | undefined>\n  >({ value: selectedAccountId, validated: undefined });\n  const [step, setStep] = useState<number>(\n    selectedAccountId === undefined ? 1 : 2\n  );\n  const [newAcls, setNewAcls] = useState<NewAcl[]>([createEmptyNewAcl()]);\n  const [removeAcls, setRemoveAcls] = useState<EnhancedAclBinding[]>([]);\n  const [isOpenPreCancelModal, setIsOpenPreCancelModal] =\n    useState<boolean>(false);\n\n  const escapeClosesModal = useRef<boolean>(true);\n  const { validateName } = useValidateTopic();\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n\n  const principals = usePrincipals();\n\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  const save = async () => {\n    let valid = true;\n    if (selectedAccount.value === undefined) {\n      setSelectedAccount((v) => {\n        return {\n          ...v,\n          validated: ValidatedOptions.error,\n          errorMessage: t(\n            'permission.manage_permissions_dialog.must_select_account_error'\n          ),\n        };\n      });\n      valid = false;\n    } else {\n      setSelectedAccount((v) => {\n        return {\n          ...v,\n          validated: ValidatedOptions.default,\n        };\n      });\n    }\n\n    setNewAcls((prevState) => {\n      return prevState.map((value) => {\n        if (isNewAclModified(value)) {\n          const answer = Object.assign({}, value);\n          if (value.resourceType.value === undefined) {\n            answer.resourceType.validated = ValidatedOptions.error;\n            answer.resourceType.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_resource_type_error'\n            );\n            valid = false;\n          } else {\n            answer.resourceType.validated = ValidatedOptions.default;\n          }\n          if (value.resourceType.value !== AclResourceType.Cluster) {\n            if (value.resource.value === undefined) {\n              answer.resource.validated = ValidatedOptions.error;\n              answer.resource.errorMessage = t(\n                'permission.manage_permissions_dialog.assign_permissions.must_select_resource_error'\n              );\n              valid = false;\n            } else if (value.resource.value === '*') {\n              answer.resource.validated = ValidatedOptions.default;\n            } else {\n              const errorMessage = validateName(value.resource.value);\n              if (errorMessage !== undefined) {\n                answer.resource.validated = ValidatedOptions.error;\n                answer.resource.errorMessage = errorMessage;\n                valid = false;\n              } else {\n                answer.resource.validated = ValidatedOptions.default;\n              }\n            }\n            if (value.patternType.value === undefined) {\n              answer.patternType.validated = ValidatedOptions.error;\n              answer.patternType.errorMessage = t(\n                'permission.manage_permissions_dialog.assign_permissions.must_select_pattern_type_error'\n              );\n              valid = false;\n            } else {\n              answer.patternType.validated = ValidatedOptions.default;\n            }\n          }\n          if (value.permission.value === undefined) {\n            answer.permission.validated = ValidatedOptions.error;\n            answer.permission.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_permission_error'\n            );\n            valid = false;\n          } else {\n            answer.permission.validated = ValidatedOptions.default;\n          }\n          if (value.operation.value === undefined) {\n            answer.operation.validated = ValidatedOptions.error;\n            answer.operation.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_operation_error'\n            );\n            valid = false;\n          } else {\n            answer.operation.validated = ValidatedOptions.default;\n          }\n          return answer;\n        } else {\n          return value;\n        }\n      });\n    });\n    if (valid) {\n      for (const value of newAcls.filter((value) => isNewAclModified(value))) {\n        if (value.resourceType.value === undefined) {\n          throw Error('resourceType must not be undefined');\n        }\n        if (value.resourceType.value !== AclResourceType.Cluster) {\n          if (value.resource.value === undefined) {\n            throw Error('resource must not be undefined');\n          }\n          if (value.patternType.value === undefined) {\n            throw Error('patternType must not be undefined');\n          }\n        } else {\n          value.resource.value = 'kafka-cluster';\n          value.patternType.value = AclPatternType.Literal;\n        }\n        if (value.permission.value === undefined) {\n          throw Error('permission must not be undefined');\n        }\n\n        if (value.operation.value === undefined) {\n          throw Error('operation must not be undefined');\n        }\n        await permissionsService.addPermission({\n          resourceName: value.resource.value,\n          patternType: value.patternType.value,\n          permission: value.permission.value,\n          resourceType: value.resourceType.value,\n          operation: value.operation.value,\n          principal: `User:${selectedAccount.value}`,\n        });\n      }\n      for (const value of removeAcls) {\n        await permissionsService.deletePermission({\n          resourceName: value.resourceName,\n          patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n          permissionType: convertEnum(\n            value.permission,\n            AclPermissionTypeFilter\n          ),\n          resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n          operation: convertEnum(value.operation, AclOperationFilter),\n          principal: `User:${selectedAccount.value}`,\n        });\n      }\n      onSave && (await onSave());\n      hideModal();\n    }\n  };\n\n  const Step2 = () => {\n    if (step === 2) {\n      if (resourceOperations === undefined) {\n        return <MASLoading />;\n      }\n      const menuAppendTo =\n        document.getElementById('manage-permissions-modal') || undefined;\n      return (\n        <>\n          <ExistingAclTable\n            existingAcls={acls.filter(\n              (i) =>\n                i.principal === `${selectedAccount.value}` ||\n                i.principal === '*'\n            )}\n            selectedAccountId={selectedAccount.value}\n            onRemove={(acl) =>\n              setRemoveAcls((prevState) => {\n                return [...prevState, acl];\n              })\n            }\n          />\n          <CreatePermissions\n            acls={newAcls}\n            setAcls={setNewAcls}\n            topicNames={topicNames}\n            consumerGroupIds={consumerGroupIds}\n            selectedAccount={selectedAccount.value}\n            setEscapeClosesModal={setEscapeClosesModal}\n            resourceOperations={resourceOperations}\n            menuAppendTo={menuAppendTo}\n          />\n        </>\n      );\n    }\n    return <></>;\n  };\n\n  const principal = principals\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const Account = () => {\n    if (step === 1) {\n      return (\n        <SelectAccount\n          id={selectedAccount}\n          setId={setSelectedAccount}\n          initialOptions={principal}\n          setEscapeClosesModal={setEscapeClosesModal}\n        />\n      );\n    }\n    return (\n      <FormGroupWithPopover\n        labelHead={t('permission.manage_permissions_dialog.account_id_title')}\n        fieldId='kafka-instance-name'\n        fieldLabel={t('permission.manage_permissions_dialog.account_id_title')}\n        labelBody={t('permission.manage_permissions_dialog.account_id_help')}\n        buttonAriaLabel={t(\n          'permission.manage_permissions_dialog.account_id_aria'\n        )}\n        isRequired={true}\n      >\n        {selectedAccount.value === '*'\n          ? t('permission.manage_permissions_dialog.all_accounts_title')\n          : selectedAccount.value}\n      </FormGroupWithPopover>\n    );\n  };\n\n  const setEscapeClosesModal = (closes: boolean) => {\n    escapeClosesModal.current = closes;\n  };\n\n  const onEscapePress = () => {\n    if (escapeClosesModal.current) {\n      hideModal();\n    }\n  };\n\n  const isDisabledSaveButton = !newAcls.some(\n    (p) => isNewAclModified(p) || removeAcls.length > 0\n  );\n\n  const SubmitButton: React.FunctionComponent = () => {\n    if (step === 1) {\n      return (\n        <Button\n          variant='primary'\n          onClick={() => setStep(2)}\n          isDisabled={selectedAccount.value === undefined}\n        >\n          {t('permission.manage_permissions_dialog.step_1_submit_button')}\n        </Button>\n      );\n    }\n    return (\n      <Button\n        variant='primary'\n        onClick={save}\n        key={1}\n        isDisabled={isDisabledSaveButton}\n      >\n        {t('permission.manage_permissions_dialog.step_2_submit_button')}\n      </Button>\n    );\n  };\n\n  const ModalForm: React.FunctionComponent = () => (\n    <Form>\n      <FormGroup\n        fieldId='kafka-instance-name'\n        label={t('permission.manage_permissions_dialog.kafka_instance_title')}\n      >\n        {kafkaName}\n      </FormGroup>\n      <Account />\n      <Step2 />\n    </Form>\n  );\n\n  const closePermissionModal = () => {\n    if (step === 2 && !isDisabledSaveButton) {\n      setIsOpenPreCancelModal(true);\n    } else {\n      hideModal();\n    }\n  };\n\n  const closePreCancelModal = () => {\n    setIsOpenPreCancelModal(false);\n    hideModal();\n  };\n\n  const resumeEditingPermissions = () => {\n    setIsOpenPreCancelModal(false);\n  };\n\n  return (\n    <Modal\n      id='manage-permissions-modal'\n      variant={variant}\n      isOpen={true}\n      aria-label={t('permission.manage_permissions_dialog.aria_label')}\n      position='top'\n      title={title}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={closePermissionModal}\n      onEscapePress={onEscapePress}\n      actions={[\n        <SubmitButton key={1} />,\n        <Button onClick={closePermissionModal} key={2} variant='secondary'>\n          {t('permission.manage_permissions_dialog.cancel_button')}\n        </Button>,\n      ]}\n    >\n      <PreCancelModal\n        isOpen={isOpenPreCancelModal}\n        closeModal={closePreCancelModal}\n        resumeEditing={resumeEditingPermissions}\n      />\n      <ModalForm />\n    </Modal>\n  );\n};\n\nexport default ManagePermissions;\n","import { useTranslation } from 'react-i18next';\n\nexport const useValidateTopic = (): {\n  validateName(name: string): string | undefined;\n} => {\n  const { t } = useTranslation();\n\n  return {\n    validateName: (name) => {\n      const legalNameChars = new RegExp('^[a-zA-Z0-9._-]+$');\n      if (name.length && !legalNameChars.test(name)) {\n        return t('topic.topic_name_helper_text');\n      } else if (name.length > 249) {\n        return t('topic.cannot_exceed_characters');\n      } else if (name === '.' || name === '..') {\n        return t('topic.invalid_name_with_dot');\n      }\n      return undefined;\n    },\n  };\n};\n"],"names":["FormGroupWithPopover","children","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","validated","helperText","helperTextInvalid","isRequired","FormGroup","label","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","SelectAccount","setId","id","initialOptions","setEscapeClosesModal","t","useTranslation","useState","isOpen","setIsOpen","clearSelection","value","undefined","options","SelectGroup","key","SelectOption","description","Divider","filter","principal","principalType","PrincipalType","sort","a","b","displayName","localeCompare","map","index","errorMessage","ValidatedOptions","Select","variant","SelectVariant","typeAheadAriaLabel","onToggle","newState","onSelect","selection","isPlaceholder","onClear","selections","onFilter","_","input","RegExp","accounts","Array","isArray","props","account","allAccounts","test","isInputValuePersisted","placeholderText","isCreatable","menuAppendTo","isGrouped","CreateSelect","setSelected","selected","row","placeholder","P","maxHeight","direction","option","isDisabled","disabled","title","CreateTypeahead","setValue","setOptions","useEffect","o","onCreateOption","newValue","createText","isNewAclModified","totalRows","emptyAcl","createEmptyNewAcl","permission","patternType","resourceType","resource","operation","AclPermissionType","AclPatternType","CreatePermissions","acls","setAcls","topicNames","consumerGroupIds","selectedAccount","resourceOperations","validateName","tableColumns","columnTransforms","cellWidth","setPermissionType","prevState","v","k","setOperation","setResourceType","setPatternType","setResource","PatternTypeCell","acl","AclResourceType","ResourceType","ResourceCell","toLowerCase","PermissionTypeCell","sentenceCase","OperationCell","toString","snakeCase","operationType","some","p","RemoveButtonCell","Tooltip","content","Button","icon","length","removeRow","TextContent","Text","component","TextVariants","account_id","MASTable","tableProps","cells","rows","shouldDefaultCustomRowWrapper","TableVariant","canSelectAll","rowDataTestId","ActionList","ActionListItem","ExistingAclTable","existingAcls","selectedAccountId","onRemove","answer","item","RemoveButton","TrashIcon","hash","removed","AllAccountsLabel","Label","Trans","i18nKey","f","originalData","PreCancelModal","closeModal","resumeEditing","Modal","ModalVariant","titleIconVariant","showClose","onClose","onEscapePress","actions","ButtonVariant","ManagePermissions","hideModal","onSave","kafkaName","config","useContext","permissionsService","setResourceOperations","getResourceOperations","ManagePermissionsModal","kafka","auth","useAuth","setSelectedAccount","step","setStep","newAcls","setNewAcls","removeAcls","setRemoveAcls","isOpenPreCancelModal","setIsOpenPreCancelModal","escapeClosesModal","useRef","currentlyLoggedInuser","setCurrentlyLoggedInuser","principals","usePrincipals","getUsername","username","save","valid","Object","assign","Error","addPermission","resourceName","deletePermission","AclPatternTypeFilter","permissionType","AclPermissionTypeFilter","AclResourceTypeFilter","AclOperationFilter","Step2","document","getElementById","i","getAllPrincipals","owner","Account","closes","current","isDisabledSaveButton","closePermissionModal","position","Form","useValidateTopic","name","legalNameChars"],"sourceRoot":""}