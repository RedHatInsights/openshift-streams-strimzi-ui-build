{"version":3,"file":"9299.ed8945f1.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Topics/components/CreateTopicHead/CreateTopicHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepTopicName/StepTopicName.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepPartitions/StepPartitions.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepMessageRetention/StepMessageRetention.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepReplicas/StepReplicas.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/WizardCustomFooter.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/CreateTopicWizard.tsx","webpack://kafka-ui/./src/modules/Topics/pages/CreateTopic/CreateTopicPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\n\nexport type CreateTopicProps = {\n  isSwitchChecked: boolean;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsSwitchChecked: (value: boolean) => void;\n};\n\nexport const CreateTopichead: React.FC<CreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>Kafka Instances</BreadcrumbItem>\n      <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {t('topic.create_topic')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          {t('topic.create_topic')}\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label={t('topic.show_all_options')}\n          labelOff={t('topic.show_all_options')}\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n    </>\n  );\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Form,\n  FormGroup,\n  FormSection,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { IAdvancedTopic } from '@app/modules/Topics/utils';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type StepTopicNameProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (value: IAdvancedTopic) => void;\n  topicNameValidated: 'error' | 'default';\n  setTopicNameValidated: (value: 'error' | 'default') => void;\n  invalidText: string;\n  setInvalidText: (value: string) => void;\n};\n\nexport const StepTopicName: React.FC<StepTopicNameProps> = ({\n  topicData,\n  setTopicData,\n  topicNameValidated,\n  setTopicNameValidated,\n  invalidText,\n  setInvalidText,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { validateName } = useValidateTopic();\n\n  const topicNameInput = topicData && topicData.name;\n\n  const validationCheck = useCallback(\n    (inputValue: string) => {\n      const errorMessage = validateName(inputValue);\n      if (errorMessage) {\n        setInvalidText(errorMessage);\n        setTopicNameValidated('error');\n      } else {\n        setTopicNameValidated('default');\n      }\n    },\n    [setInvalidText, setTopicNameValidated, validateName]\n  );\n\n  useEffect(() => {\n    validationCheck(topicNameInput);\n  }, [topicData.name, topicNameInput, validationCheck]);\n\n  const handleTopicNameChange = (value: string) => {\n    validationCheck(value);\n    setTopicData({ ...topicData, name: value });\n  };\n\n  return (\n    <Form onSubmit={(event) => event.preventDefault()}>\n      <FormSection\n        title={t('topic.topic_name')}\n        id='topic-name'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.topic_name_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.topic_name_info_note')}\n          </Text>\n        </TextContent>\n        <FormGroup\n          label={t('topic.topic_name')}\n          fieldId='step-topic-name-form'\n          helperText={t('topic.topic_name_helper_text')}\n          helperTextInvalid={invalidText}\n          validated={topicNameValidated}\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder={t('topic.enter_name')}\n            validated={topicNameValidated}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  FormSection,\n  NumberInputProps,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { MIN_PARTITIONS, MAX_PARTITIONS } from '@app/constant';\nimport { IAdvancedTopic } from '@app/modules/Topics/utils';\n\nexport type StepPartitionsProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (value: IAdvancedTopic) => void;\n};\n\nexport const StepPartitions: React.FC<StepPartitionsProps> = ({\n  topicData,\n  setTopicData,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const handleOnPlus = () => {\n    setTopicData({\n      ...topicData,\n      numPartitions: String(Number(topicData['numPartitions']) + 1),\n    });\n  };\n\n  const handleOnMinus = () => {\n    setTopicData({\n      ...topicData,\n      numPartitions: String(Number(topicData['numPartitions']) - 1),\n    });\n  };\n\n  const handlePartitionTouchspinChange: NumberInputProps['onChange'] = (\n    event\n  ) => {\n    let num = Number((event.target as HTMLInputElement).value);\n    if (num < MIN_PARTITIONS) {\n      num = MIN_PARTITIONS;\n    } else if (num > MAX_PARTITIONS) {\n      num = MAX_PARTITIONS;\n    }\n    setTopicData({ ...topicData, numPartitions: String(num) });\n  };\n\n  const partitionsInput = topicData && topicData['numPartitions'];\n\n  return (\n    <Form>\n      <FormSection\n        title={t('topic.partitions')}\n        id='partitions'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.partition_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.partition_info_note')}\n          </Text>\n        </TextContent>\n\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText={t('topic.partition_helper_text')}\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={Number(partitionsInput)}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n            min={MIN_PARTITIONS}\n            max={MAX_PARTITIONS}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Form,\n  FormGroup,\n  FormSection,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { CustomRetentionMessage } from '@app/modules/Topics/components';\nimport {\n  IAdvancedTopic,\n  RetentionTimeUnits,\n  RetentionSizeUnits,\n  RetentionTimeUnitToValue,\n  retentionTimeSelectOptions,\n  retentionSizeSelectOptions,\n  unitsToBytes,\n} from '@app/modules/Topics/utils';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type StepMessageRetentionProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (topic: IAdvancedTopic) => void;\n};\n\nexport const StepMessageRetention: React.FC<StepMessageRetentionProps> = ({\n  topicData,\n  setTopicData,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>(false);\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>(false);\n\n  const handleRetentionMessageTime = (value: RetentionTimeUnits) => {\n    setTopicData({\n      ...topicData,\n      'retention.ms':\n        value === RetentionTimeUnits.UNLIMITED ||\n        value === RetentionTimeUnits.CUSTOM\n          ? topicData['retention.ms']\n          : `${RetentionTimeUnitToValue[value]}`,\n      selectedRetentionTimeOption: value,\n    });\n  };\n\n  const handleRetentionMessageSize = (value: RetentionSizeUnits) => {\n    setTopicData({\n      ...topicData,\n      'retention.bytes':\n        value === RetentionSizeUnits.UNLIMITED ||\n        value === RetentionSizeUnits.CUSTOM\n          ? topicData['retention.bytes']\n          : `${unitsToBytes[value]}`,\n      selectedRetentionSizeOption: value,\n    });\n  };\n\n  const onRetentionTimeToggle = (isOpen: boolean) => {\n    setIsRetentionTimeSelectOpen(isOpen);\n  };\n\n  const onRetentionSizeToggle = (isOpen: boolean) => {\n    setIsRetentionSizeSelectOpen(isOpen);\n  };\n\n  return (\n    <>\n      <Form onSubmit={(event) => event.preventDefault()}>\n        <FormSection\n          title={t('topic.message_retention')}\n          id='message-retention'\n          titleElement={'h2'}\n        >\n          <TextContent>\n            <Text component={TextVariants.p}>\n              {t('topic.message_retention_info')}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t('topic.message_retention_info_note')}\n            </Text>\n          </TextContent>\n\n          <FormGroup\n            fieldId='form-group-retention-time-in-wizard'\n            label={t('topic.retention_time')}\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.DAY\n                }\n                name='radioDay'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.DAY)\n                }\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value={RetentionTimeUnits.DAY}\n              />\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.WEEK\n                }\n                name='radioWeek'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.WEEK)\n                }\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value={RetentionTimeUnits.WEEK}\n              />\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.CUSTOM\n                }\n                name='radioCustomTime'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.CUSTOM)\n                }\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value={RetentionTimeUnits.CUSTOM}\n              />\n              {topicData.selectedRetentionTimeOption ===\n                RetentionTimeUnits.CUSTOM && (\n                <CustomRetentionMessage\n                  name='retention-ms'\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  onToggle={onRetentionTimeToggle}\n                  isOpen={isRetentionTimeSelectOpen}\n                  selectOptions={retentionTimeSelectOptions}\n                />\n              )}\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionTimeOption ===\n                  RetentionTimeUnits.UNLIMITED\n                }\n                name='radioUnlimitedTime'\n                onChange={() =>\n                  handleRetentionMessageTime(RetentionTimeUnits.UNLIMITED)\n                }\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-3'\n                value={RetentionTimeUnits.UNLIMITED}\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId='form-group-retention-size-in-wizard'\n            label='Retention size'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionSizeOption ===\n                  RetentionSizeUnits.UNLIMITED\n                }\n                name='radioUnlimitedSize'\n                onChange={() =>\n                  handleRetentionMessageSize(RetentionSizeUnits.UNLIMITED)\n                }\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-6'\n                value={RetentionSizeUnits.UNLIMITED}\n              />\n              <Radio\n                isChecked={\n                  topicData.selectedRetentionSizeOption ===\n                  RetentionSizeUnits.CUSTOM\n                }\n                name='radioCustomSize'\n                onChange={() =>\n                  handleRetentionMessageSize(RetentionSizeUnits.CUSTOM)\n                }\n                label='Custom size'\n                aria-label='custom input'\n                id='radio-controlled-5'\n                value={RetentionSizeUnits.CUSTOM}\n              />\n              {topicData.selectedRetentionSizeOption ===\n                RetentionSizeUnits.CUSTOM && (\n                <CustomRetentionMessage\n                  name='retention-bytes'\n                  topicData={topicData}\n                  setTopicData={setTopicData}\n                  onToggle={onRetentionSizeToggle}\n                  isOpen={isRetentionSizeSelectOpen}\n                  selectOptions={retentionSizeSelectOptions}\n                />\n              )}\n            </Stack>\n          </FormGroup>\n        </FormSection>\n      </Form>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  Text,\n  TextContent,\n  TextVariants,\n  Form,\n  FormSection,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { TextWithLabelPopover } from '@app/components/TextWithLabelPopover';\n\nexport type StepReplicasProps = {\n  replicationFactor: number;\n  minInSyncReplica: number;\n};\n\nexport const StepReplicas: React.FC<StepReplicasProps> = ({\n  replicationFactor,\n  minInSyncReplica,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <Form>\n      <FormSection\n        title={t('common.replicas')}\n        id='replica-section'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.replicas_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.replicas_detail')}\n          </Text>\n        </TextContent>\n        <Alert\n          variant='info'\n          isInline\n          title={t('topic.replicas_helper_text')}\n        />\n\n        <TextWithLabelPopover\n          fieldId='replicas'\n          btnAriaLabel={t('common.replicas')}\n          fieldLabel={t('common.replicas')}\n          fieldValue={replicationFactor.toString()}\n          popoverBody={t('topic.replicas_description')}\n          popoverHeader={t('topic.replicas')}\n        />\n\n        <TextWithLabelPopover\n          fieldId='min-insync-replicas'\n          btnAriaLabel='topic detail min-in-sync replica'\n          fieldLabel='Minimum in-sync replicas'\n          fieldValue={minInSyncReplica.toString()}\n          popoverBody={t('topic.min_insync_replicas_description')}\n          popoverHeader={t('topic.min_insync_replicas')}\n        />\n      </FormSection>\n    </Form>\n  );\n};\n","import React from 'react';\nimport {\n  WizardContextConsumer,\n  Button,\n  WizardFooter,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IWizardFooter {\n  isLoading: boolean;\n  onValidate: (value: () => void) => void;\n  topicNameValidated: 'error' | 'default';\n  closeWizard: () => void;\n}\nexport const WizardCustomFooter: React.FC<IWizardFooter> = ({\n  isLoading,\n  onValidate,\n  topicNameValidated,\n  closeWizard,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, onNext, onBack }) => {\n          if (activeStep.name == t('topic.topic_name')) {\n            return (\n              <>\n                <Button\n                  variant='primary'\n                  type='submit'\n                  isLoading={isLoading}\n                  onClick={() => onValidate(onNext)}\n                  isDisabled={topicNameValidated == 'default' ? false : true}\n                >\n                  {t('common.next')}\n                </Button>\n                <Button variant='secondary' isDisabled={true}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n\n          if (activeStep.name == 'Replicas') {\n            return (\n              <>\n                <Button\n                  variant='primary'\n                  type='submit'\n                  onClick={onNext}\n                  isLoading={isLoading}\n                >\n                  {t('common.finish')}\n                </Button>\n                <Button variant='secondary' onClick={onBack}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n          return (\n            <>\n              <Button variant='primary' type='submit' onClick={onNext}>\n                {t('common.next')}\n              </Button>\n              <Button variant='secondary' onClick={onBack}>\n                {t('common.back')}\n              </Button>\n              <Button variant='link' onClick={closeWizard}>\n                {t('common.cancel')}\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  Divider,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport {\n  IWizardFooter,\n  StepMessageRetention,\n  StepPartitions,\n  StepReplicas,\n  StepTopicName,\n  TopicAdvanceConfig,\n  WizardCustomFooter,\n} from '@app/modules/Topics/components';\nimport {\n  Configuration,\n  NewTopicInput,\n  TopicsApi,\n} from '@rhoas/kafka-instance-sdk';\nimport { serializeTopic } from '@app/modules/Topics/utils';\nimport { ConfigContext } from '@app/contexts';\nimport { getTopic } from '@app/services';\nimport { useAlert } from '@rhoas/app-services-ui-shared';\nimport './CreateTopicWizard.css';\nimport { isAxiosError } from '@app/utils/axios';\nimport {\n  IAdvancedTopic,\n  RetentionSizeUnits,\n  RetentionTimeUnits,\n} from '@app/modules/Topics/utils';\n\nexport type CreateTopicWizardProps = {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n};\n\nexport const CreateTopicWizard: React.FC<CreateTopicWizardProps> = ({\n  isSwitchChecked,\n  onCloseCreateTopic,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n\n  const initialFieldsValue = {\n    name: '',\n    numPartitions: '1',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': 'delete',\n    selectedRetentionTimeOption: RetentionTimeUnits.WEEK,\n    selectedRetentionSizeOption: RetentionSizeUnits.UNLIMITED,\n  };\n\n  //states\n  const [topicNameValidated, setTopicNameValidated] = useState<\n    'error' | 'default'\n  >('default');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [invalidText, setInvalidText] = useState<string>('');\n  const [topicData, setTopicData] =\n    useState<IAdvancedTopic>(initialFieldsValue);\n\n  const closeWizard = () => {\n    onCloseCreateTopic && onCloseCreateTopic();\n  };\n\n  const saveTopic = () => {\n    // Object may change based on schema\n    setIsLoading(true);\n    const configPropties = isSwitchChecked ? ['cleanup.policy'] : [];\n    const topic: NewTopicInput = serializeTopic(topicData, configPropties);\n\n    new TopicsApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then(() => {\n        addAlert({\n          variant: AlertVariant.success,\n          title: t('topic.topic_successfully_created'),\n        });\n        setIsLoading(false);\n        closeWizard();\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        addAlert({\n          variant: AlertVariant.danger,\n          title: err.response.data.error_message,\n        });\n        closeWizard();\n      });\n  };\n\n  const fetchTopic = async (topicName: string, onNext: () => void) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      if (topicRes) {\n        setInvalidText(t('topic.already_exists', { name: topicName }));\n        setTopicNameValidated('error');\n        setIsLoading(false);\n      }\n    } catch (error) {\n      if (error && isAxiosError(error) && error.response?.status === 404) {\n        setTopicNameValidated('default');\n        setIsLoading(false);\n        onNext();\n      }\n    }\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: t('topic.topic_name'),\n      enableNext:\n        topicData?.name.trim() !== '' && topicNameValidated === 'default',\n      component: (\n        <StepTopicName\n          topicData={topicData}\n          setTopicData={setTopicData}\n          topicNameValidated={topicNameValidated}\n          setTopicNameValidated={setTopicNameValidated}\n          invalidText={invalidText}\n          setInvalidText={setInvalidText}\n        />\n      ),\n    },\n    {\n      name: t('common.partitions'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: (\n        <StepPartitions topicData={topicData} setTopicData={setTopicData} />\n      ),\n    },\n    {\n      name: t('topic.message_retention'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: (\n        <StepMessageRetention\n          topicData={topicData}\n          setTopicData={setTopicData}\n        />\n      ),\n    },\n    {\n      name: t('common.replicas'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: <StepReplicas replicationFactor={3} minInSyncReplica={2} />,\n      nextButtonText: t('common.finish'),\n    },\n  ];\n\n  const title = t('topic.wizard_title');\n\n  const onValidate: IWizardFooter['onValidate'] = (onNext) => {\n    if (topicData?.name.length < 1) {\n      setInvalidText(t('topic.required'));\n      setTopicNameValidated('error');\n    } else if (topicData?.name === '.' || topicData?.name === '..') {\n      setInvalidText(t('topic.invalid_name_with_dot'));\n      setTopicNameValidated('error');\n    } else {\n      setIsLoading(true);\n      fetchTopic(topicData?.name, onNext);\n    }\n  };\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <Divider className='kafka-ui--divider--FlexShrink' />\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={onCloseCreateTopic}\n              topicData={topicData}\n              setTopicData={setTopicData}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n            data-testid='topicBasicCreate-Wizard'\n            footer={\n              <WizardCustomFooter\n                isLoading={isLoading}\n                onValidate={onValidate}\n                topicNameValidated={topicNameValidated}\n                closeWizard={closeWizard}\n              />\n            }\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useBasename } from '@rhoas/app-services-ui-shared';\nimport {\n  CreateTopichead,\n  CreateTopicWizard,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const CreateTopicPage: React.FC = () => {\n  const { kafkaName, kafkaPageLink, kafkaInstanceLink } = useFederated() || {};\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n\n  const onCloseCreateTopic = () => {\n    history.push(`${basename}/topics`);\n  };\n\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n        kafkaName={kafkaName}\n        kafkaInstanceLink={kafkaInstanceLink}\n        kafkaPageLink={kafkaPageLink}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        onCloseCreateTopic={onCloseCreateTopic}\n      />\n    </>\n  );\n};\n"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","kafkaName","kafkaPageLink","kafkaInstanceLink","t","useTranslation","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","StepTopicName","topicData","setTopicData","topicNameValidated","setTopicNameValidated","invalidText","setInvalidText","validateName","topicNameInput","name","validationCheck","useCallback","inputValue","errorMessage","useEffect","Form","onSubmit","event","preventDefault","FormSection","title","titleElement","TextContent","Text","component","TextVariants","FormGroup","fieldId","helperText","helperTextInvalid","validated","isRequired","TextInput","type","value","placeholder","StepPartitions","partitionsInput","NumberInput","onPlus","numPartitions","String","Number","onMinus","inputName","num","target","widthChars","min","max","StepMessageRetention","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","useState","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","handleRetentionMessageTime","selectedRetentionTimeOption","handleRetentionMessageSize","selectedRetentionSizeOption","Stack","hasGutter","Radio","CustomRetentionMessage","onToggle","isOpen","selectOptions","StepReplicas","replicationFactor","minInSyncReplica","Alert","isInline","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","toString","popoverBody","popoverHeader","WizardCustomFooter","isLoading","onValidate","closeWizard","WizardFooter","WizardContextConsumer","activeStep","onNext","onBack","Button","onClick","isDisabled","onCloseCreateTopic","config","useContext","addAlert","useAlert","initialFieldsValue","setIsLoading","saveTopic","configPropties","topic","TopicsApi","Configuration","basePath","accessToken","getToken","createTopic","then","AlertVariant","catch","err","response","data","error_message","steps","enableNext","trim","canJumpTo","nextButtonText","Divider","TopicAdvanceConfig","isCreate","handleCancel","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","footer","length","topicName","error","status","fetchTopic","CreateTopicPage","history","useHistory","getBasename","useBasename","basename","push"],"sourceRoot":""}