{"version":3,"file":"226.5f00d9f0.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-styles/dist/esm/index.js","webpack://kafka-ui/./src/components/MASToolbar/MASToolbar.tsx","webpack://kafka-ui/./src/components/MainViewHeader/MainViewHeader.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsToolbar.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTable.tsx","webpack://kafka-ui/./src/modules/Permissions/pages/PermissionsTable/PermissionsTableView.tsx"],"sourcesContent":["/** Joins args into a className string\n *\n * @param {any} args list of objects, string, or arrays to reduce\n */\nexport function css(...args) {\n    // Adapted from https://github.com/JedWatson/classnames/blob/master/index.js\n    const classes = [];\n    const hasOwn = {}.hasOwnProperty;\n    args.filter(Boolean).forEach((arg) => {\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n        }\n        else if (Array.isArray(arg) && arg.length) {\n            const inner = css(...arg);\n            if (inner) {\n                classes.push(inner);\n            }\n        }\n        else if (argType === 'object') {\n            for (const key in arg) {\n                if (hasOwn.call(arg, key) && arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    });\n    return classes.join(' ');\n}\n//# sourceMappingURL=index.js.map","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: React.ReactElement;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: React.ReactNode;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const {\n    id,\n    clearAllFilters,\n    collapseListedFiltersBreakpoint = 'md',\n    inset,\n    ...restToolbarProps\n  } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          {toggleGroupProps && (\n            <ToolbarToggleGroup\n              {...toggleGroupProps}\n              toggleIcon={toggleGroupProps.toggleIcon}\n            >\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const {\n              key = 'mas',\n              variant,\n              className,\n              id,\n              alignment,\n              item,\n              ...restItemProps\n            } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Level,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n  Title,\n} from '@patternfly/react-core';\nimport { useFederated } from '@app/contexts';\n\nexport type MainViewHeaderProps = {\n  activeTabKey: number;\n};\n\nconst MainViewHeader: React.FC<MainViewHeaderProps> = ({ activeTabKey }) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const history = useHistory();\n\n  const { kafkaPageLink, kafkaName, handleInstanceDrawer, onDeleteInstance } =\n    useFederated() || {};\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelectKebabOption = (activeTab: string) => {\n    handleInstanceDrawer && handleInstanceDrawer(true, activeTab);\n  };\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelectTab = (_, tabKey: string | number) => {\n    let redirectPath;\n    switch (tabKey) {\n      case 1:\n        redirectPath = 'dashboard';\n        break;\n      case 2:\n        redirectPath = 'topics';\n        break;\n      case 3:\n        redirectPath = 'consumer-groups';\n        break;\n      case 4:\n        redirectPath = 'acls';\n        break;\n      default:\n        redirectPath = 'dashboard';\n        break;\n    }\n\n    history.push(redirectPath);\n  };\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>\n        {t('common.kafka_instance')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      key='view-kafka'\n      onClick={() => onSelectKebabOption('details')}\n    >\n      {t('common.view_instance')}\n    </DropdownItem>,\n    <DropdownItem\n      key='connect-kafka'\n      onClick={() => onSelectKebabOption('connection')}\n    >\n      {t('common.view_connection')}\n    </DropdownItem>,\n    <DropdownItem key='delete-kafka' onClick={onDeleteInstance}>\n      {t('common.delete_instance')}\n    </DropdownItem>,\n  ];\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <Title headingLevel='h1'>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </Title>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id='toggle-data-plane' />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          />\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n        className='pf-c-page__main-tabs'\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={onSelectTab}\n          data-testid='pageKafka-tabProperties'\n          className='pf-m-page-insets'\n        >\n          <Tab\n            title={<TabTitleText>{t('dashboard.dashboard')}</TabTitleText>}\n            eventKey={1}\n            data-testid='pageKafka-tabDashboard'\n            id='dashboard-tab-section'\n            aria-label={t('dashboard.dashboard')}\n            tabContentId='kafka-ui-TabcontentDashboard'\n          />\n          <Tab\n            title={<TabTitleText>{t('topic.topics')}</TabTitleText>}\n            eventKey={2}\n            data-testid='pageKafka-tabTopics'\n            id='topics-tab-section'\n            aria-label={t('topic.topics')}\n            tabContentId='kafka-ui-TabcontentTopicsList'\n          />\n          <Tab\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            eventKey={3}\n            data-testid='pageKafka-tabConsumers'\n            id='consumer-groups-tab-section'\n            aria-label={t('consumerGroup.consumer_groups')}\n            tabContentId='kafka-ui-TabcontentConsumersList'\n          />\n          <Tab\n            title={<TabTitleText>{t('permission.tab.label')}</TabTitleText>}\n            eventKey={4}\n            data-testid='pageKafka-tabPermissions'\n            id='permissions-tab-section'\n            aria-label={t('permission.tab.label')}\n            tabContentId='kafka-ui-TabcontentPermissions'\n          />\n        </Tabs>\n      </PageSection>\n    </>\n  );\n};\n\nexport { MainViewHeader };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/components';\n\ntype PermissionsToolbarKebabProps = {\n  onDeleteSelected: () => void;\n  deleteSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbarKebab: React.FunctionComponent<PermissionsToolbarKebabProps> =\n  ({ deleteSelectedEnabled, onDeleteSelected }) => {\n    const { t } = useTranslation(['kafkaTemporaryFixMe']);\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n\n    const onToggle = (v) => {\n      setIsOpen(v);\n    };\n\n    const onSelect = () => {\n      setIsOpen((prevState) => !prevState);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById(\n        'permissions-toolbar-kebab-toggle'\n      );\n      element?.focus();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key='delete_selected'\n        onClick={onDeleteSelected}\n        isDisabled={!deleteSelectedEnabled}\n      >\n        {t('permission.table.delete_selected')}\n      </DropdownItem>,\n    ];\n    return (\n      <Dropdown\n        onSelect={onSelect}\n        toggle={\n          <KebabToggle\n            onToggle={onToggle}\n            id='permissions-toolbar-kebab-toggle'\n          />\n        }\n        isOpen={isOpen}\n        isPlain\n        dropdownItems={dropdownItems}\n      />\n    );\n  };\n\nexport type PermissionsToolbarProps = {\n  total: number;\n  page: number;\n  perPage: number;\n  setFilteredValue: (value: string) => void;\n  filteredValue: string;\n  openManagePermissions?: () => void;\n  onDeleteSelected: () => void;\n  deletedSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbar: React.FC<PermissionsToolbarProps> = ({\n  total = 0,\n  page,\n  perPage,\n  setFilteredValue,\n  openManagePermissions,\n  onDeleteSelected,\n  deletedSelectedEnabled,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const onClear = () => {\n    setFilteredValue('');\n  };\n\n  const toggleGroupItems = <></>;\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          id='permissions-toolbar-manage-permissions-button'\n          data-testid='actionManagePermissions'\n          onClick={openManagePermissions}\n        >\n          {t('permission.table.manage_button')}\n        </Button>\n      ),\n    },\n    {\n      item: (\n        <PermissionsToolbarKebab\n          deleteSelectedEnabled={deletedSelectedEnabled}\n          onDeleteSelected={onDeleteSelected}\n        />\n      ),\n    },\n  ];\n\n  if (total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='permissions-pagination-options-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.minimal_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n          isCompact={true}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: '', breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { PermissionsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EmptyState, MASEmptyStateVariant } from '@app/components';\n\nexport type PermissionsTableEmptyStateProps = {\n  openManagePermissions?: () => void;\n};\nexport const PermissionsTableEmptyState: React.FunctionComponent<PermissionsTableEmptyStateProps> =\n  ({ openManagePermissions }) => {\n    const { t } = useTranslation(['kafkaTemporaryFixMe']);\n    return (\n      <EmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t('permission.table.no_results_title'),\n        }}\n        emptyStateBodyProps={{\n          body: t('permission.table.no_results_body'),\n        }}\n        buttonProps={{\n          title: t('permission.table.manage_permissions_button'),\n          onClick: openManagePermissions,\n          'data-testid': 'actionManagePermissions',\n        }}\n      />\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PaginationVariant } from '@patternfly/react-core';\nimport {\n  IActionsResolver,\n  ICell,\n  OnSelect,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { PermissionsToolbar } from './PermissionsToolbar';\nimport {\n  AclFilter,\n  convertEnum,\n  EnhancedAclBinding,\n  EnhancedAclBindingListPage,\n  PermissionsService,\n} from '@app/services/acls';\nimport { useTimeout } from '@app/hooks';\nimport {\n  permissionOperationCell,\n  principalCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport { PermissionsTableEmptyState } from '@app/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState';\nimport {\n  AclOperationFilter,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\nimport { ModalType, useModal } from '@rhoas/app-services-ui-shared';\nimport { MASPagination, MASTable, usePaginationParams } from '@app/components';\n\nexport type PermissionsTableProps = {\n  permissionsService: PermissionsService;\n  kafkaName?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n};\n\nconst PermissionsTable: React.FC<PermissionsTableProps> = ({\n  permissionsService,\n  kafkaName,\n  topicNames,\n  consumerGroupIds,\n}) => {\n  type SelectableEnhancedAclBinding = EnhancedAclBinding & {\n    selected: boolean;\n  };\n\n  type SelectableEnhancedAclBindingListPage = Omit<\n    EnhancedAclBindingListPage,\n    'items'\n  > & {\n    items?: SelectableEnhancedAclBinding[];\n  };\n\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [filteredValue, setFilteredValue] = useState<string>('');\n  const { showModal } = useModal<ModalType.KafkaManagePermissions>() || {};\n  const [aclPage, setAclPage] = useState<\n    SelectableEnhancedAclBindingListPage | undefined\n  >();\n  const { page, perPage } = usePaginationParams() || {};\n\n  const fetchPermissions = async () => {\n    try {\n      const response = await permissionsService.getPermissions(\n        {\n          resourceName: filteredValue !== '' ? filteredValue : undefined,\n        } as AclFilter,\n        perPage,\n        page\n      );\n      setAclPage((prevState) => {\n        return {\n          items: response.items?.map((value) => {\n            const found = prevState?.items?.filter(\n              (p) => p.hash() === value.hash()\n            );\n            const selected =\n              (found?.length !== 0 && found?.every((p) => p.selected)) || false;\n            return {\n              selected,\n              ...value,\n            };\n          }),\n          page: response.page,\n          size: response.size,\n          total: response.total,\n        };\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  useEffect(() => {\n    fetchPermissions();\n  }, []);\n\n  useEffect(() => {\n    fetchPermissions();\n  }, [page, perPage]);\n\n  useTimeout(() => fetchPermissions(), 5000);\n\n  const tableColumns = [\n    { title: t('permission.table.resource_column_title') },\n    { title: t('permission.table.permissions_column_title') },\n    { title: t('permission.table.account_column_title') },\n    { title: '' },\n  ] as ICell[];\n\n  const cells = [resourceCell, permissionOperationCell, principalCell];\n\n  const onSelect: OnSelect = (event, isSelected, rowIndex) => {\n    if (rowIndex === -1) {\n      setAclPage((prevState) => {\n        if (prevState) {\n          return {\n            items: prevState?.items?.map((p) => {\n              p.selected = isSelected;\n              return p;\n            }),\n            ...prevState,\n          };\n        }\n      });\n    } else {\n      setAclPage((prevState) => {\n        if (prevState) {\n          const items = prevState?.items;\n          if (items !== undefined) {\n            items[rowIndex].selected = isSelected;\n          }\n          return {\n            items,\n            ...prevState,\n          };\n        }\n      });\n    }\n  };\n\n  const openManagePermissions = (selectedAccountId?: string) => {\n    const onSave = async () => {\n      await fetchPermissions();\n    };\n\n    showModal &&\n      showModal(ModalType.KafkaManagePermissions, {\n        selectedAccountId,\n        kafkaName,\n        acls: aclPage?.items || [],\n        topicNames,\n        consumerGroupIds,\n        onSave,\n      });\n  };\n\n  const onDeleteSelected = () => {\n    aclPage?.items\n      ?.filter((item) => item.selected)\n      .forEach((value) => {\n        permissionsService\n          .deletePermission({\n            resourceName: value.resourceName,\n            patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n            permissionType: convertEnum(\n              value.permission,\n              AclPermissionTypeFilter\n            ),\n            resourceType: convertEnum(\n              value.resourceType,\n              AclResourceTypeFilter\n            ),\n            operation: convertEnum(value.operation, AclOperationFilter),\n            principal: `User:${value.principal}`,\n          })\n          .then(() => fetchPermissions());\n      });\n    fetchPermissions();\n  };\n\n  const onDelete = (rowIndex?: number) => {\n    if (rowIndex !== undefined && aclPage?.items !== undefined) {\n      const value = aclPage.items[rowIndex];\n      permissionsService\n        .deletePermission({\n          resourceName: value.resourceName,\n          patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n          permissionType: convertEnum(\n            value.permission,\n            AclPermissionTypeFilter\n          ),\n          resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n          operation: convertEnum(value.operation, AclOperationFilter),\n          principal: `User:${value.principal}`,\n        })\n        .then(() => fetchPermissions());\n    }\n  };\n\n  const actionResolver: IActionsResolver = (_, { rowIndex }) => {\n    const resolver = [\n      {\n        title: t('permission.table.row_kebab.manage'),\n        ['data-testid']: 'permission-table-row-manage',\n        onClick: () => {\n          if (aclPage?.items !== undefined && rowIndex !== undefined) {\n            openManagePermissions(aclPage.items[rowIndex].principal);\n          }\n        },\n      },\n      {\n        title: t('permission.table.row_kebab.delete'),\n        ['data-testid']: 'permission-table-row-delete',\n        onClick: () => onDelete(rowIndex),\n      },\n    ];\n    return resolver;\n  };\n\n  if (\n    aclPage === undefined ||\n    aclPage.items === undefined ||\n    aclPage.items.length === 0\n  ) {\n    return (\n      <PermissionsTableEmptyState\n        openManagePermissions={() => openManagePermissions()}\n      />\n    );\n  }\n\n  return (\n    <>\n      <PermissionsToolbar\n        total={aclPage.total || 0}\n        page={aclPage.page || 1}\n        perPage={aclPage.size || 10}\n        openManagePermissions={() => openManagePermissions()}\n        setFilteredValue={setFilteredValue}\n        filteredValue={filteredValue}\n        deletedSelectedEnabled={aclPage.items.some((item) => item.selected)}\n        onDeleteSelected={onDeleteSelected}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: aclPage.items.map((item, row) => {\n            return {\n              cells: cells.map((f) => f(item, row)),\n              selected: item.selected,\n              originalData: item,\n            };\n          }),\n          'aria-label': t('permission.table.permission_list_table'),\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          onSelect,\n          actionResolver,\n          canSelectAll: false,\n        }}\n        rowDataTestId={'tablePermissions-row'}\n      />\n      <MASPagination\n        widgetId='permissions-pagination-options-menu-bottom'\n        itemCount={aclPage.total || 0}\n        variant={PaginationVariant.bottom}\n        page={aclPage.page}\n        perPage={aclPage.size}\n        titles={{\n          paginationTitle: t('common.full_pagination'),\n          perPageSuffix: t('common.per_page_suffix'),\n          toFirstPage: t('common.to_first_page'),\n          toPreviousPage: t('common.to_previous_page'),\n          toLastPage: t('common.to_last_page'),\n          toNextPage: t('common.to_next_page'),\n          optionsToggle: t('common.options_toggle'),\n          currPage: t('common.curr_page'),\n        }}\n      />\n    </>\n  );\n};\nexport { PermissionsTable };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { usePermissionsService } from '@app/services/acls';\nimport { PermissionsTable } from '@app/modules/Permissions/components/PermissionsTable';\nimport { ConfigContext } from '@app/contexts';\nimport { getConsumerGroups, getTopics } from '@app/services';\n\nexport type PermissionsTableViewProps = {\n  kafkaName?: string;\n};\nexport const PermissionsTableView: React.FunctionComponent<PermissionsTableViewProps> =\n  ({ kafkaName }) => {\n    const config = useContext(ConfigContext);\n\n    const permissionsService = usePermissionsService(config);\n    const [topicNames, setTopicNames] = useState<string[]>([]);\n    const [consumerGroupIds, setConsumerGroupNames] = useState<string[]>([]);\n\n    useEffect(() => {\n      const fetchTopicNames = async () => {\n        const response = await getTopics(config);\n        const topicNames = response.items?.map((topic) => topic.name || '');\n        setTopicNames(topicNames || []);\n      };\n      fetchTopicNames();\n    }, [config]);\n\n    useEffect(() => {\n      const fetchConsumerGroupNames = async () => {\n        const response = await getConsumerGroups(config);\n        const consumerGroupNames = response.items?.map(\n          (consumerGroup) => consumerGroup.groupId || ''\n        );\n        setConsumerGroupNames(consumerGroupNames || []);\n      };\n      fetchConsumerGroupNames();\n    }, [config]);\n\n    //const permissionsService = createMockPermissionsService();\n\n    return (\n      <PermissionsTable\n        permissionsService={permissionsService}\n        kafkaName={kafkaName}\n        topicNames={topicNames}\n        consumerGroupIds={consumerGroupIds}\n      />\n    );\n  };\n\nexport default PermissionsTableView;\n"],"names":["css","args","classes","hasOwn","hasOwnProperty","filter","Boolean","forEach","arg","argType","push","Array","isArray","length","inner","key","call","join","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","id","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","map","toolbarItem","index","variant","className","alignment","item","restItemProps","ToolbarItem","MainViewHeader","activeTabKey","t","useTranslation","history","useHistory","kafkaPageLink","kafkaName","handleInstanceDrawer","onDeleteInstance","useState","isOpen","setIsOpen","onSelectKebabOption","activeTab","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","dropdownItems","DropdownItem","onClick","PageSection","PageSectionVariants","Level","Title","headingLevel","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","DropdownPosition","padding","default","Tabs","activeKey","_","tabKey","redirectPath","Tab","title","TabTitleText","eventKey","tabContentId","PermissionsToolbarKebab","deleteSelectedEnabled","onDeleteSelected","onFocus","element","document","getElementById","focus","isDisabled","prevState","v","PermissionsToolbar","total","page","perPage","setFilteredValue","openManagePermissions","deletedSelectedEnabled","Button","MASPagination","widgetId","itemCount","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","isCompact","xl","breakpoint","PermissionsTableEmptyState","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","buttonProps","PermissionsTable","permissionsService","topicNames","consumerGroupIds","filteredValue","showModal","useModal","aclPage","setAclPage","fetchPermissions","getPermissions","resourceName","undefined","items","value","found","p","hash","selected","every","size","useEffect","tableColumns","cells","selectedAccountId","ModalType","acls","onSave","some","deletePermission","patternType","AclPatternTypeFilter","permissionType","permission","AclPermissionTypeFilter","resourceType","AclResourceTypeFilter","operation","AclOperationFilter","principal","then","MASTable","tableProps","rows","row","f","originalData","shouldDefaultCustomRowWrapper","TableVariant","event","isSelected","rowIndex","actionResolver","resolver","onDelete","canSelectAll","rowDataTestId","PaginationVariant","PermissionsTableView","config","useContext","setTopicNames","setConsumerGroupNames","response","topic","name","consumerGroupNames","consumerGroup","groupId"],"sourceRoot":""}