{"version":3,"file":"299.9b1712d9.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Topics/components/CreateTopicHead/CreateTopicHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepTopicName/StepTopicName.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepPartitions/StepPartitions.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepMessageRetention/StepMessageRetention.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepReplicas/StepReplicas.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/WizardCustomFooter.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/CreateTopicWizard.tsx","webpack://kafka-ui/./src/modules/Topics/pages/CreateTopic/CreateTopicPage.tsx","webpack://kafka-ui/./src/services/topicNameValidation.ts"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\n\nexport type CreateTopicProps = {\n  isSwitchChecked: boolean;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsSwitchChecked: (value: boolean) => void;\n};\n\nexport const CreateTopichead: React.FC<CreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n  kafkaName,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n        Kafka Instances\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {t('topic.create_topic')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          {t('topic.create_topic')}\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label={t('topic.show_all_options')}\n          labelOff={t('topic.show_all_options')}\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Form,\n  FormGroup,\n  FormSection,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { IAdvancedTopic } from '../CreateTopicWizard';\nimport { useValidateTopic } from '@app/services/topicNameValidation';\n\nexport type StepTopicNameProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (value: IAdvancedTopic) => void;\n  topicNameValidated: 'error' | 'default';\n  setTopicNameValidated: (value: 'error' | 'default') => void;\n  invalidText: string;\n  setInvalidText: (value: string) => void;\n};\n\nexport const StepTopicName: React.FC<StepTopicNameProps> = ({\n  topicData,\n  setTopicData,\n  topicNameValidated,\n  setTopicNameValidated,\n  invalidText,\n  setInvalidText,\n}) => {\n  const { t } = useTranslation();\n  const { validateName } = useValidateTopic();\n\n  const topicNameInput = topicData && topicData.name;\n\n  useEffect(() => {\n    validationCheck(topicNameInput);\n  }, []);\n\n  const validationCheck = (topicNameInput) => {\n    const errorMessage = validateName(topicNameInput);\n    if (errorMessage) {\n      setInvalidText(errorMessage);\n      setTopicNameValidated('error');\n    }\n  };\n\n  const handleTopicNameChange = (value) => {\n    validationCheck(value);\n    setTopicData({ ...topicData, name: value });\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Form onSubmit={preventFormSubmit}>\n      <FormSection\n        title={t('topic.topic_name')}\n        id='topic-name'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.topic_name_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.topic_name_info_note')}\n          </Text>\n        </TextContent>\n        <FormGroup\n          label={t('topic.topic_name')}\n          fieldId='step-topic-name-form'\n          helperText={t('topic.topic_name_helper_text')}\n          helperTextInvalid={invalidText}\n          validated={topicNameValidated}\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder={t('topic.enter_name')}\n            validated={topicNameValidated}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  FormSection,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { MIN_PARTITIONS, MAX_PARTITIONS } from '@app/constant';\nimport { IAdvancedTopic } from '../CreateTopicWizard';\n\nexport type StepPartitionsProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (value: IAdvancedTopic) => void;\n};\n\nexport const StepPartitions: React.FC<StepPartitionsProps> = ({\n  topicData,\n  setTopicData,\n}) => {\n  const { t } = useTranslation();\n\n  const handleOnPlus = () => {\n    setTopicData({\n      ...topicData,\n      numPartitions: String(Number(topicData['numPartitions']) + 1),\n    });\n  };\n\n  const handleOnMinus = () => {\n    setTopicData({\n      ...topicData,\n      numPartitions: String(Number(topicData['numPartitions']) - 1),\n    });\n  };\n\n  const handlePartitionTouchspinChange = (event) => {\n    let num = Number(event.target.value);\n    if (num < MIN_PARTITIONS) {\n      num = MIN_PARTITIONS;\n    } else if (num > MAX_PARTITIONS) {\n      num = MAX_PARTITIONS;\n    }\n    setTopicData({ ...topicData, numPartitions: String(num) });\n  };\n\n  const partitionsInput = topicData && topicData['numPartitions'];\n\n  return (\n    <Form>\n      <FormSection\n        title={t('topic.partitions')}\n        id='partitions'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.partition_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.partition_info_note')}\n          </Text>\n        </TextContent>\n\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText={t('topic.partition_helper_text')}\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={Number(partitionsInput)}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n            min={MIN_PARTITIONS}\n            max={MAX_PARTITIONS}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSection,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type StepMessageRetentionProps = {\n  setMsgRetentionValue: (value: number) => void;\n  currentPeriod: string | number;\n  currentSize: string | number;\n  setCurrentPeriod: (value: string | number) => void;\n  setCurrentSize: (value: string | number) => void;\n  setRetentionSize: (value: number) => void;\n};\n\nexport const StepMessageRetention: React.FC<StepMessageRetentionProps> = ({\n  setMsgRetentionValue,\n  currentPeriod,\n  currentSize,\n  setCurrentPeriod,\n  setCurrentSize,\n  setRetentionSize,\n}) => {\n  const { t } = useTranslation();\n\n  enum RetentionTimeOption {\n    MILLISECOND = 1,\n    SECOND = 1000,\n    MINUTE = 60000,\n    HOUR = 3600000,\n    DAY = 86400000,\n    WEEK = 604800000,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n\n  enum RetentionSizeOption {\n    BYTE = 1,\n    KIBIBYTE = 1024,\n    MEBIBYTE = 1048576,\n    GIBIBYTE = 1073741824,\n    TEBIBYTE = 1.0995116e12,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n  const [retentionTimeTouchspinValue, setRetentionTimeTouchspinValue] =\n    useState<number>(7);\n  const [retentionSizeTouchspinValue, setRetentionSizeTouchspinValue] =\n    useState<number>(1);\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>(false);\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>(false);\n  const [selectedTime, setSelectedTime] = useState<boolean>(false);\n  const [selectedSize, setSelectedSize] = useState<boolean>(false);\n  const [retentionTimeFactor, setRetentionTimeFactor] = useState<number>(\n    RetentionTimeOption.DAY\n  );\n  const [retentionSizeFactor, setRetentionSizeFactor] = useState<number>(\n    RetentionSizeOption.BYTE\n  );\n\n  useEffect(() => {\n    if (currentPeriod === RetentionTimeOption.DAY) {\n      setMsgRetentionValue(RetentionTimeOption.DAY);\n    } else if (currentPeriod === RetentionTimeOption.WEEK) {\n      setMsgRetentionValue(RetentionTimeOption.WEEK);\n    } else if (currentPeriod === RetentionTimeOption.UNLIMITED) {\n      setMsgRetentionValue(RetentionTimeOption.UNLIMITED);\n    } else if (currentPeriod === RetentionTimeOption.CUSTOM) {\n      setMsgRetentionValue(retentionTimeFactor * retentionTimeTouchspinValue);\n    }\n\n    if (currentSize === RetentionSizeOption.UNLIMITED) {\n      setRetentionSize(RetentionSizeOption.UNLIMITED);\n    } else if (currentSize === RetentionSizeOption.CUSTOM) {\n      setRetentionSize(retentionSizeFactor * retentionSizeTouchspinValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    currentPeriod,\n    currentSize,\n    retentionTimeTouchspinValue,\n    retentionSizeTouchspinValue,\n    retentionTimeFactor,\n    retentionSizeFactor,\n  ]);\n\n  const handleMessageRetention = (_, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radioDay') {\n      setCurrentPeriod(RetentionTimeOption.DAY);\n    } else if (name === 'radioWeek') {\n      setCurrentPeriod(RetentionTimeOption.WEEK);\n    } else if (name === 'radioUnlimitedTime') {\n      setCurrentPeriod(RetentionTimeOption.UNLIMITED);\n    } else if (name === 'radioCustomTime') {\n      setCurrentPeriod(RetentionTimeOption.CUSTOM);\n    }\n\n    if (name === 'radioCustomSize') {\n      setCurrentSize(RetentionSizeOption.CUSTOM);\n    } else if (name === 'radioUnlimitedSize') {\n      setCurrentSize(RetentionSizeOption.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isRetentionTimeSelectOpen) => {\n    setIsRetentionTimeSelectOpen(isRetentionTimeSelectOpen);\n  };\n\n  const onRetentionSizeToggle = (isRetentionSizeSelectOpen) => {\n    setIsRetentionSizeSelectOpen(isRetentionSizeSelectOpen);\n  };\n\n  const onRetentionTimeSelect = (event, selection) => {\n    if (selection === 'days') {\n      setRetentionTimeFactor(RetentionTimeOption.DAY);\n    } else if (selection === 'unlimited') {\n      setRetentionTimeFactor(RetentionTimeOption.UNLIMITED);\n    } else if (selection === 'milliseconds') {\n      setRetentionTimeFactor(RetentionTimeOption.MILLISECOND);\n    } else if (selection === 'seconds') {\n      setRetentionTimeFactor(RetentionTimeOption.SECOND);\n    } else if (selection === 'minutes') {\n      setRetentionTimeFactor(RetentionTimeOption.MINUTE);\n    } else if (selection === 'hours') {\n      setRetentionTimeFactor(RetentionTimeOption.HOUR);\n    }\n    setSelectedTime(selection);\n    setIsRetentionTimeSelectOpen(false);\n  };\n\n  const onRetentionSizeSelect = (event, selection) => {\n    if (selection === 'unlimited') {\n      setRetentionSizeFactor(RetentionSizeOption.UNLIMITED);\n    } else if (selection === 'bytes') {\n      setRetentionSizeFactor(RetentionSizeOption.BYTE);\n    } else if (selection === 'kibibytes') {\n      setRetentionSizeFactor(RetentionSizeOption.KIBIBYTE);\n    } else if (selection === 'mebibytes') {\n      setRetentionSizeFactor(RetentionSizeOption.MEBIBYTE);\n    } else if (selection === 'gibibytes') {\n      setRetentionSizeFactor(RetentionSizeOption.GIBIBYTE);\n    } else if (selection === 'tebibytes') {\n      setRetentionSizeFactor(RetentionSizeOption.TEBIBYTE);\n    }\n    setSelectedSize(selection);\n    setIsRetentionSizeSelectOpen(false);\n  };\n\n  const handleRetentionTimePlusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue + 1);\n  };\n\n  const handleRetentionTimeMinusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue - 1);\n  };\n\n  const handleRetentionTimeTouchSpinChange = (event) => {\n    setRetentionTimeTouchspinValue(Number(event.target.value));\n  };\n\n  const handleRetentionSizePlusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue + 1);\n  };\n\n  const handleRetentionSizeMinusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue - 1);\n  };\n\n  const handleRetentionSizeTouchSpinChange = (event) => {\n    setRetentionSizeTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Form onSubmit={preventFormSubmit}>\n        <FormSection\n          title={t('topic.message_retention')}\n          id='message-retention'\n          titleElement={'h2'}\n        >\n          <TextContent>\n            <Text component={TextVariants.p}>\n              {t('topic.message_retention_info')}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t('topic.message_retention_info_note')}\n            </Text>\n          </TextContent>\n\n          <FormGroup\n            fieldId='form-group-retention-time-in-wizard'\n            label={t('topic.retention_time')}\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.DAY}\n                name='radioDay'\n                onChange={handleMessageRetention}\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value='day'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.WEEK}\n                name='radioWeek'\n                onChange={handleMessageRetention}\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value='week'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.CUSTOM}\n                name='radioCustomTime'\n                onChange={handleMessageRetention}\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value='custom'\n              />\n              {currentPeriod === RetentionTimeOption.CUSTOM && (\n                <div className='kafka-ui--radio__parameters'>\n                  <Flex>\n                    <FlexItem>\n                      <NumberInput\n                        onMinus={handleRetentionTimeMinusClick}\n                        onPlus={handleRetentionTimePlusClick}\n                        value={retentionTimeTouchspinValue}\n                        onChange={handleRetentionTimeTouchSpinChange}\n                        min={0}\n                      />\n                    </FlexItem>\n                    <FlexItem>\n                      <Select\n                        variant={SelectVariant.single}\n                        aria-label='Select Input'\n                        onToggle={onRetentionTimeToggle}\n                        onSelect={onRetentionTimeSelect}\n                        selections={selectedTime}\n                        isOpen={isRetentionTimeSelectOpen}\n                      >\n                        <SelectOption key={0} value='days' isPlaceholder />\n                        <SelectOption key={1} value='seconds' />\n                        <SelectOption key={2} value='minutes' />\n                        <SelectOption key={3} value='hours' />\n                        <SelectOption key={4} value='milliseconds' />\n                      </Select>\n                    </FlexItem>\n                  </Flex>\n                </div>\n              )}\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.UNLIMITED}\n                name='radioUnlimitedTime'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-3'\n                value='unlimited'\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId='form-group-retention-size-in-wizard'\n            label='Retention size'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.UNLIMITED}\n                name='radioUnlimitedSize'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-6'\n                value='unlimited'\n              />\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.CUSTOM}\n                name='radioCustomSize'\n                onChange={handleMessageRetention}\n                label='Custom size'\n                aria-label='custom input'\n                id='radio-controlled-5'\n                value='custom'\n              />\n              {currentSize === RetentionSizeOption.CUSTOM && (\n                <div className='kafka-ui--radio__parameters'>\n                  <Flex>\n                    <FlexItem>\n                      <NumberInput\n                        onMinus={handleRetentionSizeMinusClick}\n                        onPlus={handleRetentionSizePlusClick}\n                        value={retentionSizeTouchspinValue}\n                        onChange={handleRetentionSizeTouchSpinChange}\n                        min={0}\n                      />\n                    </FlexItem>\n                    <FlexItem>\n                      <Select\n                        variant={SelectVariant.single}\n                        aria-label='Select Input'\n                        onToggle={onRetentionSizeToggle}\n                        onSelect={onRetentionSizeSelect}\n                        selections={selectedSize}\n                        isOpen={isRetentionSizeSelectOpen}\n                      >\n                        <SelectOption key={5} value='bytes' isPlaceholder />\n                        <SelectOption key={6} value='kibibytes' />\n                        <SelectOption key={7} value='mebibytes' />\n                        <SelectOption key={8} value='gibibytes' />\n                        <SelectOption key={9} value='tebibytes' />\n                      </Select>\n                    </FlexItem>\n                  </Flex>\n                </div>\n              )}\n            </Stack>\n          </FormGroup>\n        </FormSection>\n      </Form>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  Text,\n  TextContent,\n  TextVariants,\n  Form,\n  FormSection,\n} from '@patternfly/react-core';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { TextWithLabelPopover } from '@app/components/TextWithLabelPopover';\n\nexport type StepReplicasProps = {\n  replicationFactor: number;\n  minInSyncReplica: number;\n};\n\nexport const StepReplicas: React.FC<StepReplicasProps> = ({\n  replicationFactor,\n  minInSyncReplica,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Form>\n      <FormSection\n        title={t('common.replicas')}\n        id='replica-section'\n        titleElement={'h2'}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t('topic.replicas_info')}</Text>\n          <Text component={TextVariants.small}>\n            {t('topic.replicas_detail')}\n          </Text>\n        </TextContent>\n        <Alert\n          variant='info'\n          isInline\n          title={t('topic.replicas_helper_text')}\n        />\n\n        <TextWithLabelPopover\n          fieldId='replicas'\n          btnAriaLabel={t('common.replicas')}\n          fieldLabel={t('common.replicas')}\n          fieldValue={replicationFactor.toString()}\n          popoverBody={t('topic.replicas_description')}\n          popoverHeader={t('topic.replicas')}\n        />\n\n        <TextWithLabelPopover\n          fieldId='min-insync-replicas'\n          btnAriaLabel='topic detail min-in-sync replica'\n          fieldLabel='Minimum in-sync replicas'\n          fieldValue={minInSyncReplica.toString()}\n          popoverBody={t('topic.min_insync_replicas_description')}\n          popoverHeader={t('topic.min_insync_replicas')}\n        />\n      </FormSection>\n    </Form>\n  );\n};\n","import React from 'react';\nimport {\n  WizardContextConsumer,\n  Button,\n  WizardFooter,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IWizardFooter {\n  isLoading: boolean;\n  onValidate: (value: () => void) => void;\n  topicNameValidated: 'error' | 'default';\n  closeWizard: () => void;\n}\nexport const WizardCustomFooter: React.FC<IWizardFooter> = ({\n  isLoading,\n  onValidate,\n  topicNameValidated,\n  closeWizard,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, onNext, onBack }) => {\n          if (activeStep.name == t('topic.topic_name')) {\n            return (\n              <>\n                <Button\n                  variant='primary'\n                  type='submit'\n                  isLoading={isLoading}\n                  onClick={() => onValidate(onNext)}\n                  isDisabled={topicNameValidated == 'default' ? false : true}\n                >\n                  {t('common.next')}\n                </Button>\n                <Button variant='secondary' isDisabled={true}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n\n          if (activeStep.name == 'Replicas') {\n            return (\n              <>\n                <Button\n                  variant='primary'\n                  type='submit'\n                  onClick={onNext}\n                  isLoading={isLoading}\n                >\n                  {t('common.finish')}\n                </Button>\n                <Button variant='secondary' onClick={onBack}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n          return (\n            <>\n              <Button variant='primary' type='submit' onClick={onNext}>\n                {t('common.next')}\n              </Button>\n              <Button variant='secondary' onClick={onBack}>\n                {t('common.back')}\n              </Button>\n              <Button variant='link' onClick={closeWizard}>\n                {t('common.cancel')}\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  Divider,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport {\n  StepMessageRetention,\n  StepPartitions,\n  StepReplicas,\n  StepTopicName,\n  TopicAdvanceConfig,\n  WizardCustomFooter,\n} from '@app/modules/Topics/components';\nimport {\n  Configuration,\n  NewTopicInput,\n  TopicsApi,\n} from '@rhoas/kafka-instance-sdk';\nimport { convertUnits, formatTopicRequest } from '@app/modules/Topics/utils';\nimport { ConfigContext } from '@app/contexts';\nimport { getTopic } from '@app/services';\nimport { useAlert } from '@bf2/ui-shared';\nimport './CreateTopicWizard.css';\n\nexport type CreateTopicWizardProps = {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n};\n\nexport interface IAdvancedTopic {\n  /** unique identifier for a topic within the cluster */\n  name: string;\n  /** ordered list of messages that make up a topic */\n  numPartitions: string;\n  /** number of replicas for a Kafka topic */\n  replicationFactor?: string;\n  /** the length of time that messages are retained before they are deleted */\n  'retention.ms'?: string;\n  /** unit for retention time */\n  'retention.ms.unit'?: string;\n  /** maximum total size of a partition's log segments before old log segments are deleted */\n  'retention.bytes'?: string;\n  /** unit for retention bytes */\n  'retention.bytes.unit'?: string;\n  /** determines whether messages that reach the retention window are deleted or compacted */\n  'cleanup.policy'?: string;\n}\n\nexport const CreateTopicWizard: React.FC<CreateTopicWizardProps> = ({\n  isSwitchChecked,\n  onCloseCreateTopic,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [retentionSize, setRetentionSize] = useState(1);\n  const [replicationFactorTouchspinValue] = useState(3);\n  const [minInSyncReplicaTouchspinValue] = useState(2);\n  const [topicNameValidated, setTopicNameValidated] = useState<\n    'error' | 'default'\n  >('default');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [invalidText, setInvalidText] = useState<string>('');\n  const [topicData, setTopicData] = useState<IAdvancedTopic>({\n    name: '',\n    numPartitions: '1',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '-1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': 'delete',\n  });\n\n  const [currentPeriod, setCurrentPeriod] = React.useState<string | number>(\n    604800000\n  );\n  const [currentSize, setCurrentSize] = React.useState<string | number>(-1);\n\n  const closeWizard = () => {\n    onCloseCreateTopic && onCloseCreateTopic();\n  };\n\n  const saveTopic = () => {\n    // Object may change based on schema\n    setIsLoading(true);\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(topicData))\n      : {\n          name: topicData?.name,\n          settings: {\n            numPartitions: Number(topicData?.numPartitions),\n            config: [\n              {\n                key: 'retention.ms',\n                value: msgRetentionValue.toString(),\n              },\n              { key: 'retention.bytes', value: retentionSize.toString() },\n            ],\n          },\n        };\n\n    new TopicsApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then(() => {\n        addAlert({\n          variant: AlertVariant.success,\n          title: t('topic.topic_successfully_created'),\n        });\n        setIsLoading(false);\n        closeWizard();\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        addAlert({\n          variant: AlertVariant.danger,\n          title: err.response.data.error_message,\n        });\n        closeWizard();\n      });\n  };\n\n  const fetchTopic = async (topicName, onNext) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      if (topicRes) {\n        setInvalidText(t('topic.already_exists', { name: topicName }));\n        setTopicNameValidated('error');\n        setIsLoading(false);\n      }\n    } catch (error) {\n      if (error.response.status == '404') {\n        setTopicNameValidated('default');\n        setIsLoading(false);\n        onNext();\n      }\n    }\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: t('topic.topic_name'),\n      enableNext:\n        topicData?.name.trim() !== '' && topicNameValidated === 'default',\n      component: (\n        <StepTopicName\n          topicData={topicData}\n          setTopicData={setTopicData}\n          topicNameValidated={topicNameValidated}\n          setTopicNameValidated={setTopicNameValidated}\n          invalidText={invalidText}\n          setInvalidText={setInvalidText}\n        />\n      ),\n    },\n    {\n      name: t('common.partitions'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: (\n        <StepPartitions topicData={topicData} setTopicData={setTopicData} />\n      ),\n    },\n    {\n      name: t('topic.message_retention'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: (\n        <StepMessageRetention\n          setMsgRetentionValue={setMsgRetentionValue}\n          currentPeriod={currentPeriod}\n          currentSize={currentSize}\n          setCurrentPeriod={setCurrentPeriod}\n          setCurrentSize={setCurrentSize}\n          setRetentionSize={setRetentionSize}\n        />\n      ),\n    },\n    {\n      name: t('common.replicas'),\n      canJumpTo: topicData?.name.trim() !== '',\n      component: (\n        <StepReplicas\n          replicationFactor={replicationFactorTouchspinValue}\n          minInSyncReplica={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: t('common.finish'),\n    },\n  ];\n\n  const title = t('topic.wizard_title');\n\n  const onValidate = (onNext) => {\n    if (topicData?.name.length < 1) {\n      setInvalidText(t('topic.required'));\n      setTopicNameValidated('error');\n    } else if (topicData?.name === '.' || topicData?.name === '..') {\n      setInvalidText(t('topic.invalid_name_with_dot'));\n      setTopicNameValidated('error');\n    } else {\n      setIsLoading(true);\n      fetchTopic(topicData?.name, onNext);\n    }\n  };\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <Divider className='kafka-ui--divider--FlexShrink' />\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={onCloseCreateTopic}\n              topicData={topicData}\n              setTopicData={setTopicData}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n            data-testid='topicBasicCreate-Wizard'\n            footer={\n              <WizardCustomFooter\n                isLoading={isLoading}\n                onValidate={onValidate}\n                topicNameValidated={topicNameValidated}\n                closeWizard={closeWizard}\n              />\n            }\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useBasename } from '@bf2/ui-shared';\nimport {\n  CreateTopichead,\n  CreateTopicWizard,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const CreateTopicPage: React.FC = () => {\n  const { kafkaName, kafkaPageLink, kafkaInstanceLink } = useFederated() || {};\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n\n  const onCloseCreateTopic = () => {\n    history.push(basename);\n  };\n\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n        kafkaName={kafkaName}\n        kafkaInstanceLink={kafkaInstanceLink}\n        kafkaPageLink={kafkaPageLink}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        onCloseCreateTopic={onCloseCreateTopic}\n      />\n    </>\n  );\n};\n","import { useTranslation } from 'react-i18next';\n\nexport const useValidateTopic = (): {\n  validateName(name: string): string | undefined;\n} => {\n  const { t } = useTranslation();\n\n  return {\n    validateName: (name) => {\n      const legalNameChars = new RegExp('^[a-zA-Z0-9._-]+$');\n      if (name.length && !legalNameChars.test(name)) {\n        return t('topic.topic_name_helper_text');\n      } else if (name.length > 249) {\n        return t('topic.cannot_exceed_characters');\n      } else if (name === '.' || name === '..') {\n        return t('topic.invalid_name_with_dot');\n      }\n      return undefined;\n    },\n  };\n};\n"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","kafkaName","kafkaPageLink","t","useTranslation","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","StepTopicName","topicData","setTopicData","topicNameValidated","setTopicNameValidated","invalidText","setInvalidText","validateName","topicNameInput","name","useEffect","validationCheck","errorMessage","Form","onSubmit","event","preventDefault","FormSection","title","titleElement","TextContent","Text","component","TextVariants","FormGroup","fieldId","helperText","helperTextInvalid","validated","isRequired","TextInput","type","value","placeholder","StepPartitions","partitionsInput","NumberInput","onPlus","numPartitions","String","Number","onMinus","inputName","num","target","widthChars","min","max","StepMessageRetention","RetentionTimeOption","RetentionSizeOption","setMsgRetentionValue","currentPeriod","currentSize","setCurrentPeriod","setCurrentSize","setRetentionSize","useState","retentionTimeTouchspinValue","setRetentionTimeTouchspinValue","retentionSizeTouchspinValue","setRetentionSizeTouchspinValue","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","selectedTime","setSelectedTime","selectedSize","setSelectedSize","DAY","retentionTimeFactor","setRetentionTimeFactor","BYTE","retentionSizeFactor","setRetentionSizeFactor","WEEK","UNLIMITED","CUSTOM","handleMessageRetention","_","Stack","hasGutter","Radio","Flex","FlexItem","Select","SelectVariant","onToggle","onSelect","selection","MILLISECOND","SECOND","MINUTE","HOUR","selections","isOpen","SelectOption","key","isPlaceholder","KIBIBYTE","MEBIBYTE","GIBIBYTE","TEBIBYTE","StepReplicas","replicationFactor","minInSyncReplica","Alert","isInline","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","toString","popoverBody","popoverHeader","WizardCustomFooter","isLoading","onValidate","closeWizard","WizardFooter","WizardContextConsumer","activeStep","onNext","onBack","Button","onClick","isDisabled","onCloseCreateTopic","config","useContext","addAlert","useAlert","msgRetentionValue","retentionSize","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","setIsLoading","saveTopic","topic","settings","TopicsApi","Configuration","basePath","accessToken","getToken","createTopic","then","AlertVariant","catch","err","response","data","error_message","steps","enableNext","trim","canJumpTo","nextButtonText","Divider","TopicAdvanceConfig","isCreate","handleCancel","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","footer","length","topicName","status","fetchTopic","CreateTopicPage","kafkaInstanceLink","history","useHistory","basename","getBasename","useBasename","push","useValidateTopic","legalNameChars","RegExp","test"],"sourceRoot":""}