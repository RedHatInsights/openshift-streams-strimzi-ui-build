{"version":3,"file":"5460.5a90041a.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-styles/dist/esm/index.js","webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/components/MASToolbar/MASToolbar.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/components/ConsumerGroupState.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/components/ConsumerGroupsTable/ConsumerGroupToolbar.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/components/ConsumerGroupsTable/ConsumerGroupsTable.tsx"],"sourcesContent":["/** Joins args into a className string\n *\n * @param {any} args list of objects, string, or arrays to reduce\n */\nexport function css(...args) {\n    // Adapted from https://github.com/JedWatson/classnames/blob/master/index.js\n    const classes = [];\n    const hasOwn = {}.hasOwnProperty;\n    args.filter(Boolean).forEach((arg) => {\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n        }\n        else if (Array.isArray(arg) && arg.length) {\n            const inner = css(...arg);\n            if (inner) {\n                classes.push(inner);\n            }\n        }\n        else if (argType === 'object') {\n            for (const key in arg) {\n                if (hasOwn.call(arg, key) && arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    });\n    return classes.join(' ');\n}\n//# sourceMappingURL=index.js.map","import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData, RowWrapperProps } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (\n  rowWrapperProps: RowWrapperProps\n): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps || {};\n  const { isExpanded, originalData } = row || {};\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={typeof trRef === 'function' ? undefined : trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event) => onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: React.ReactElement;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: React.ReactNode;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const {\n    id,\n    clearAllFilters,\n    collapseListedFiltersBreakpoint = 'md',\n    inset,\n    ...restToolbarProps\n  } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          {toggleGroupProps && (\n            <ToolbarToggleGroup\n              {...toggleGroupProps}\n              toggleIcon={toggleGroupProps.toggleIcon}\n            >\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const {\n              key = 'mas',\n              variant,\n              className,\n              id,\n              alignment,\n              item,\n              ...restItemProps\n            } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import { useTranslation } from 'react-i18next';\nimport { ConsumerGroupState as ConsumerGroupStateEnum } from '@rhoas/kafka-instance-sdk';\n\nexport const ConsumerGroupState = (\n  state: ConsumerGroupStateEnum | undefined\n) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  switch (state) {\n    case ConsumerGroupStateEnum.Stable:\n      return t('consumerGroup.state.stable');\n    case ConsumerGroupStateEnum.Empty:\n      return t('consumerGroup.state.empty');\n    case ConsumerGroupStateEnum.Dead:\n      return t('consumerGroup.state.dead');\n    case ConsumerGroupStateEnum.CompletingRebalance:\n      return t('consumerGroup.state.completing_rebalance');\n    case ConsumerGroupStateEnum.PreparingRebalance:\n      return t('consumerGroup.state.preparing_rebalance');\n    case ConsumerGroupStateEnum.Unknown:\n      return t('consumerGroup.state.unknown');\n    default:\n      return null;\n  }\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport { MASToolbar, ToolbarItemProps, MASPagination } from '@app/components';\nimport { SearchIcon } from '@patternfly/react-icons';\n\nexport type ConsumerGroupToolbarProps = {\n  setSearch: (value: string) => void;\n  search: string;\n  total: number;\n  page: number;\n  perPage: number;\n};\n\nconst ConsumerGroupToolbar: React.FC<ConsumerGroupToolbarProps> = ({\n  search,\n  setSearch,\n  total,\n  page,\n  perPage,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [searchInputValue, setSearchInputValue] = useState<string>('');\n\n  const onClear = () => {\n    setSearch('');\n  };\n\n  const onChangeInput = (value: string) => {\n    setSearchInputValue(value);\n  };\n\n  const onSearch = () => {\n    setSearch(searchInputValue);\n    setSearchInputValue('');\n  };\n\n  const onDeleteChip = () => {\n    setSearch('');\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarFilter\n        chips={search ? [search] : []}\n        deleteChip={onDeleteChip}\n        categoryName={''}\n      >\n        <InputGroup>\n          <TextInput\n            name='searchConsumerGroups'\n            id='search-consumer-groups-input'\n            type='search'\n            aria-label={t('consumerGroup.consumer_group_search_input')}\n            placeholder={t('common.search')}\n            value={searchInputValue}\n            onChange={onChangeInput}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={searchInputValue.length ? false : true}\n            onClick={onSearch}\n            aria-label={t('consumerGroup.consumer_group_search')}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarFilter>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [];\n\n  if (total && total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='consumer-group-pagination-options-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.minimal_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: '', breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { ConsumerGroupToolbar };\n","import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PaginationVariant } from '@patternfly/react-core';\nimport {\n  TableVariant,\n  IRowData,\n  OnSort,\n  ISortBy,\n  sortable,\n  info,\n  IAction,\n  IActionsResolver,\n} from '@patternfly/react-table';\nimport { ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport {\n  MASTable,\n  MASPagination,\n  EmptyState,\n  MASEmptyStateVariant,\n  MASTableProps,\n} from '@app/components';\nimport {\n  ConsumerGroupToolbar,\n  ConsumerGroupToolbarProps,\n} from './ConsumerGroupToolbar';\nimport {\n  ModalType,\n  ModalTypePropsMap,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\nimport { ConsumerGroupState } from '../ConsumerGroupState';\n// import { ConsumerGroupState } from '@rhoas/kafka-instance-sdk';\n\nexport type ConsumerGroupsTableProps = ConsumerGroupToolbarProps & {\n  consumerGroups?: ConsumerGroup[];\n  rowDataTestId?: string;\n  isDrawerOpen?: boolean;\n  onViewConsumerGroup: (consumerGroup: ConsumerGroup) => void;\n  refreshConsumerGroups?: () => void;\n  onSort: OnSort;\n  sortBy: ISortBy;\n};\n\nconst ConsumerGroupsTable: React.FC<ConsumerGroupsTableProps> = ({\n  consumerGroups,\n  total,\n  page,\n  perPage,\n  search,\n  setSearch,\n  rowDataTestId,\n  isDrawerOpen,\n  onViewConsumerGroup,\n  refreshConsumerGroups,\n  onSort,\n  sortBy,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { showModal } = useModal<ModalType.KafkaDeleteConsumerGroup>();\n  const { showModal: showResetOffsetModal } =\n    useModal<ModalType.KafkaConsumerGroupResetOffset>();\n  const [activeRow, setActiveRow] = useState<string>();\n\n  const tableColumns = [\n    { title: t('consumerGroup.consumer_group_id'), transforms: [sortable] },\n    { title: t('consumerGroup.active_members') },\n    {\n      title: t('consumerGroup.partitions_with_lag'),\n      transforms: [\n        info({\n          popover: (\n            <div>{t('consumerGroup.partitions_with_lag_description')}</div>\n          ),\n          ariaLabel: 'partitions with lag',\n          popoverProps: {\n            headerContent: t('consumerGroup.partitions_with_lag_name'),\n          },\n        }),\n      ],\n    },\n    { title: t('consumerGroup.state_label') },\n  ];\n\n  useEffect(() => {\n    if (!isDrawerOpen) {\n      setActiveRow('');\n    }\n  }, [isDrawerOpen]);\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    consumerGroups?.map((row: IRowData) => {\n      const { groupId, state, metrics } = row;\n      tableRow.push({\n        cells: [\n          groupId,\n          metrics.activeConsumers,\n          metrics.laggingPartitions,\n          ConsumerGroupState(state),\n        ],\n        originalData: { ...row, rowId: groupId },\n      });\n    });\n\n    return tableRow;\n  };\n\n  const onSelectDeleteConsumerGroup = (\n    groupId: string,\n    state: string | undefined\n  ) => {\n    showModal(ModalType.KafkaDeleteConsumerGroup, {\n      consumerName: groupId,\n      refreshConsumerGroups,\n      state,\n    });\n  };\n\n  const onSelectResetOffsetConsumerGroup = (data: ConsumerGroup) => {\n    showResetOffsetModal(ModalType.KafkaConsumerGroupResetOffset, {\n      refreshConsumerGroups,\n      consumerGroupData:\n        data as ModalTypePropsMap[ModalType.KafkaConsumerGroupResetOffset]['consumerGroupData'],\n    });\n  };\n\n  const onSelectKebabDropdownOption = (\n    //event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    originalData: ConsumerGroup\n  ) => {\n    const { groupId, state } = originalData;\n    //set selected row for view consumer group details\n    setActiveRow(groupId);\n    onSelectDeleteConsumerGroup(groupId, state);\n    // Set focus back on previous selected element i.e. kebab button\n    //event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const onSelectResetOffset = (\n    //event: any,\n    originalData: ConsumerGroup\n  ) => {\n    onSelectResetOffsetConsumerGroup(originalData);\n  };\n\n  const onClickDrawerButton = (row: IRowData) => {\n    const { originalData } = row;\n    onViewConsumerGroup(originalData);\n    setActiveRow(originalData?.groupId);\n  };\n\n  const actionResolver: IActionsResolver = (rowData: IRowData) => {\n    const originalData: ConsumerGroup = rowData.originalData;\n    const onDelete: IAction = {\n      title: t('common.delete'),\n      onClick: () => onSelectKebabDropdownOption(originalData),\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    onDelete['data-testid'] = 'tableConsumers-actionDelete';\n\n    const onViewOffset: IAction = {\n      title: t('consumerGroup.view_partitions_offsets'),\n      onClick: (_, __, row) => onClickDrawerButton(row),\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    onViewOffset['data-testid'] = 'tableConsumers-actionOpenDrawer';\n\n    const onReset: IAction = {\n      title: t('consumerGroup.reset_offset'),\n      onClick: () => onSelectResetOffset(originalData),\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    onReset['data-testid'] = 'tableConsumers-resetOffset';\n\n    return [onDelete, onViewOffset, onReset];\n  };\n\n  const onRowClick: MASTableProps['onRowClick'] = (event, _, row) => {\n    if (event?.target) {\n      const { originalData } = row || {};\n      const tagName = (\n        (event?.target as unknown as HTMLElement).tagName || ''\n      ).toLocaleLowerCase();\n      // Open modal on row click except kebab button click\n      if (tagName !== 'button' && tagName !== 'a') {\n        onViewConsumerGroup(originalData);\n        setActiveRow(originalData?.groupId);\n      }\n    }\n  };\n\n  return (\n    <>\n      <ConsumerGroupToolbar\n        search={search}\n        setSearch={setSearch}\n        total={total}\n        perPage={perPage}\n        page={page}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: preparedTableCells(),\n          'aria-label': t('consumerGroup.consumer_group_list'),\n          actionResolver: actionResolver,\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          onSort,\n          sortBy,\n        }}\n        activeRow={activeRow}\n        onRowClick={onRowClick}\n        rowDataTestId={rowDataTestId || 'tableConsumers-row'}\n      />\n      {total < 1 && search.length > 0 && (\n        <EmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('common.no_results_title'),\n          }}\n          emptyStateBodyProps={{\n            body: t('common.no_results_body'),\n          }}\n        />\n      )}\n      {total > 0 && (\n        <MASPagination\n          widgetId='consumer-group-pagination-options-menu-bottom'\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.full_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { ConsumerGroupsTable };\nexport default ConsumerGroupsTable;\n"],"names":["css","args","classes","hasOwn","hasOwnProperty","filter","Boolean","forEach","arg","argType","push","Array","isArray","length","inner","key","call","join","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","rowDataTestId","useContext","trRef","className","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","undefined","rowId","hidden","onClick","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","children","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","id","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","map","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","ConsumerGroupState","state","t","useTranslation","ConsumerGroupToolbar","search","setSearch","total","page","perPage","searchInputValue","setSearchInputValue","useState","ToolbarFilter","chips","deleteChip","categoryName","InputGroup","TextInput","name","type","placeholder","onChange","Button","ButtonVariant","isDisabled","SearchIcon","MASPagination","widgetId","itemCount","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","default","xl","breakpoint","ConsumerGroupsTable","consumerGroups","isDrawerOpen","onViewConsumerGroup","refreshConsumerGroups","showModal","useModal","showResetOffsetModal","setActiveRow","tableColumns","title","transforms","sortable","info","popover","popoverProps","headerContent","useEffect","onSelectKebabDropdownOption","groupId","ModalType","consumerName","onSelectDeleteConsumerGroup","onSelectResetOffset","data","consumerGroupData","tableRow","metrics","activeConsumers","laggingPartitions","preparedTableCells","rowData","onDelete","onViewOffset","_","__","onClickDrawerButton","onReset","TableVariant","target","tagName","toLocaleLowerCase","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant"],"sourceRoot":""}