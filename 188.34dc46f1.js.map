{"version":3,"file":"188.34dc46f1.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-styles/dist/esm/index.js","webpack://kafka-ui/./src/components/MASToolbar/MASToolbar.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsToolbar.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTable.tsx","webpack://kafka-ui/./src/modules/Permissions/pages/PermissionsTable/PermissionsTableView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/MainView/MainView.tsx"],"sourcesContent":["/** Joins args into a className string\n *\n * @param {any} args list of objects, string, or arrays to reduce\n */\nexport function css(...args) {\n    // Adapted from https://github.com/JedWatson/classnames/blob/master/index.js\n    const classes = [];\n    const hasOwn = {}.hasOwnProperty;\n    args.filter(Boolean).forEach((arg) => {\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n        }\n        else if (Array.isArray(arg) && arg.length) {\n            const inner = css(...arg);\n            if (inner) {\n                classes.push(inner);\n            }\n        }\n        else if (argType === 'object') {\n            for (const key in arg) {\n                if (hasOwn.call(arg, key) && arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    });\n    return classes.join(' ');\n}\n//# sourceMappingURL=index.js.map","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: React.ReactElement;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: any;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const {\n    id,\n    clearAllFilters,\n    collapseListedFiltersBreakpoint = 'md',\n    inset,\n    ...restToolbarProps\n  } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          {toggleGroupProps && (\n            <ToolbarToggleGroup\n              {...toggleGroupProps}\n              toggleIcon={toggleGroupProps.toggleIcon}\n            >\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const {\n              key = 'mas',\n              variant,\n              className,\n              id,\n              alignment,\n              item,\n              ...restItemProps\n            } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/components';\n\ntype PermissionsToolbarKebabProps = {\n  onDeleteSelected: () => void;\n  deleteSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbarKebab: React.FunctionComponent<PermissionsToolbarKebabProps> =\n  ({ deleteSelectedEnabled, onDeleteSelected }) => {\n    const { t } = useTranslation();\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n\n    const onToggle = (v) => {\n      setIsOpen(v);\n    };\n\n    const onSelect = () => {\n      setIsOpen((prevState) => !prevState);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById(\n        'permissions-toolbar-kebab-toggle'\n      );\n      element?.focus();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key='delete_selected'\n        onClick={onDeleteSelected}\n        isDisabled={!deleteSelectedEnabled}\n      >\n        {t('permission.table.delete_selected')}\n      </DropdownItem>,\n    ];\n    return (\n      <Dropdown\n        onSelect={onSelect}\n        toggle={\n          <KebabToggle\n            onToggle={onToggle}\n            id='permissions-toolbar-kebab-toggle'\n          />\n        }\n        isOpen={isOpen}\n        isPlain\n        dropdownItems={dropdownItems}\n      />\n    );\n  };\n\nexport type PermissionsToolbarProps = {\n  total: number;\n  page: number;\n  perPage: number;\n  setFilteredValue: (value: string) => void;\n  filteredValue: string;\n  openManagePermissions?: () => void;\n  onDeleteSelected: () => void;\n  deletedSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbar: React.FC<PermissionsToolbarProps> = ({\n  total = 0,\n  page,\n  perPage,\n  setFilteredValue,\n  openManagePermissions,\n  onDeleteSelected,\n  deletedSelectedEnabled,\n}) => {\n  const { t } = useTranslation();\n\n  const onClear = () => {\n    setFilteredValue('');\n  };\n\n  const toggleGroupItems = <></>;\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          id='permissions-toolbar-manage-permissions-button'\n          data-testid='actionManagePermissions'\n          onClick={openManagePermissions}\n        >\n          {t('permission.table.manage_button')}\n        </Button>\n      ),\n    },\n    {\n      item: (\n        <PermissionsToolbarKebab\n          deleteSelectedEnabled={deletedSelectedEnabled}\n          onDeleteSelected={onDeleteSelected}\n        />\n      ),\n    },\n  ];\n\n  if (total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='permissions-pagination-options-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.minimal_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n          isCompact={true}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: '', breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { PermissionsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EmptyState, MASEmptyStateVariant } from '@app/components';\n\nexport type PermissionsTableEmptyStateProps = {\n  openManagePermissions?: () => void;\n};\nexport const PermissionsTableEmptyState: React.FunctionComponent<PermissionsTableEmptyStateProps> =\n  ({ openManagePermissions }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t('permission.table.no_results_title'),\n        }}\n        emptyStateBodyProps={{\n          body: t('permission.table.no_results_body'),\n        }}\n        buttonProps={{\n          title: t('permission.table.manage_permissions_button'),\n          onClick: openManagePermissions,\n          'data-testid': 'actionManagePermissions',\n        }}\n      />\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PaginationVariant } from '@patternfly/react-core';\nimport {\n  IActionsResolver,\n  ICell,\n  OnSelect,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { MASPagination, MASTable, ModalType, useModal } from '@app/components';\nimport { PermissionsToolbar } from './PermissionsToolbar';\nimport {\n  AclFilter,\n  convertEnum,\n  EnhancedAclBinding,\n  EnhancedAclBindingListPage,\n  PermissionsService,\n} from '@app/services/acls';\nimport { useTimeout } from '@app/hooks';\nimport {\n  permissionOperationCell,\n  principalCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport { PermissionsTableEmptyState } from '@app/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState';\nimport {\n  AclOperationFilter,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\n\nexport type PermissionsTableProps = {\n  permissionsService: PermissionsService;\n  kafkaName?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n};\n\nconst PermissionsTable: React.FC<PermissionsTableProps> = ({\n  permissionsService,\n  kafkaName,\n  topicNames,\n  consumerGroupIds,\n}) => {\n  type SelectableEnhancedAclBinding = EnhancedAclBinding & {\n    selected: boolean;\n  };\n\n  type SelectableEnhancedAclBindingListPage = Omit<\n    EnhancedAclBindingListPage,\n    'items'\n  > & {\n    items?: SelectableEnhancedAclBinding[];\n  };\n\n  const { t } = useTranslation();\n  const [filteredValue, setFilteredValue] = useState<string>('');\n  const { showModal } = useModal<ModalType.ManagePermissions>() || {};\n  const [aclPage, setAclPage] = useState<\n    SelectableEnhancedAclBindingListPage | undefined\n  >();\n\n  const fetchPermissions = async () => {\n    try {\n      const response = await permissionsService.getPermissions({\n        resourceName: filteredValue !== '' ? filteredValue : undefined,\n      } as AclFilter);\n      setAclPage((prevState) => {\n        return {\n          items: response.items?.map((value) => {\n            const found = prevState?.items?.filter(\n              (p) => p.hash() === value.hash()\n            );\n            const selected =\n              (found?.length !== 0 && found?.every((p) => p.selected)) || false;\n            return {\n              selected,\n              ...value,\n            };\n          }),\n          page: response.page,\n          size: response.size,\n          total: response.total,\n        };\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  useEffect(() => {\n    fetchPermissions();\n  }, []);\n\n  useTimeout(() => fetchPermissions(), 5000);\n\n  const tableColumns = [\n    { title: '' },\n    { title: '' },\n    { title: '' },\n    { title: '' },\n  ] as ICell[];\n\n  const cells = [principalCell, permissionOperationCell, resourceCell];\n\n  const onSelect: OnSelect = (event, isSelected, rowIndex) => {\n    if (rowIndex === -1) {\n      setAclPage((prevState) => {\n        if (prevState) {\n          return {\n            items: prevState?.items?.map((p) => {\n              p.selected = isSelected;\n              return p;\n            }),\n            ...prevState,\n          };\n        }\n      });\n    } else {\n      setAclPage((prevState) => {\n        if (prevState) {\n          const items = prevState?.items;\n          if (items !== undefined) {\n            items[rowIndex].selected = isSelected;\n          }\n          return {\n            items,\n            ...prevState,\n          };\n        }\n      });\n    }\n  };\n\n  const openManagePermissions = (selectedAccountId?: string) => {\n    const onSave = async () => {\n      await fetchPermissions();\n    };\n\n    showModal &&\n      showModal(ModalType.ManagePermissions, {\n        selectedAccountId,\n        kafkaName,\n        acls: aclPage?.items || [],\n        topicNames,\n        consumerGroupIds,\n        onSave,\n      });\n  };\n\n  const onDeleteSelected = () => {\n    aclPage?.items\n      ?.filter((item) => item.selected)\n      .forEach((value) => {\n        permissionsService\n          .deletePermission({\n            resourceName: value.resourceName,\n            patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n            permissionType: convertEnum(\n              value.permission,\n              AclPermissionTypeFilter\n            ),\n            resourceType: convertEnum(\n              value.resourceType,\n              AclResourceTypeFilter\n            ),\n            operation: convertEnum(value.operation, AclOperationFilter),\n            principal: `User:${value.principal}`,\n          })\n          .then(() => fetchPermissions());\n      });\n    fetchPermissions();\n  };\n\n  const onDelete = (rowIndex?: number) => {\n    if (rowIndex !== undefined && aclPage?.items !== undefined) {\n      const value = aclPage.items[rowIndex];\n      permissionsService\n        .deletePermission({\n          resourceName: value.resourceName,\n          patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n          permissionType: convertEnum(\n            value.permission,\n            AclPermissionTypeFilter\n          ),\n          resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n          operation: convertEnum(value.operation, AclOperationFilter),\n          principal: `User:${value.principal}`,\n        })\n        .then(() => fetchPermissions());\n    }\n  };\n\n  const actionResolver: IActionsResolver = (_, { rowIndex }) => {\n    const resolver = [\n      {\n        title: t('permission.table.row_kebab.manage'),\n        ['data-testid']: 'permission-table-row-manage',\n        onClick: () => {\n          if (aclPage?.items !== undefined && rowIndex !== undefined) {\n            openManagePermissions(aclPage.items[rowIndex].principal);\n          }\n        },\n      },\n      {\n        title: t('permission.table.row_kebab.delete'),\n        ['data-testid']: 'permission-table-row-delete',\n        onClick: () => onDelete(rowIndex),\n      },\n    ];\n    return resolver;\n  };\n\n  if (\n    aclPage === undefined ||\n    aclPage.items === undefined ||\n    aclPage.items.length === 0\n  ) {\n    return <PermissionsTableEmptyState />;\n  }\n\n  return (\n    <>\n      <PermissionsToolbar\n        total={aclPage.total || 0}\n        page={aclPage.page || 1}\n        perPage={aclPage.size || 10}\n        openManagePermissions={() => openManagePermissions()}\n        setFilteredValue={setFilteredValue}\n        filteredValue={filteredValue}\n        deletedSelectedEnabled={aclPage.items.some((item) => item.selected)}\n        onDeleteSelected={onDeleteSelected}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: aclPage.items.map((item, row) => {\n            return {\n              cells: cells.map((f) => f(item, row)),\n              selected: item.selected,\n              originalData: item,\n            };\n          }),\n          'aria-label': t('permission.table.permission_list_table'),\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          onSelect,\n          actionResolver,\n          canSelectAll: false,\n        }}\n        rowDataTestId={'tablePermissions-row'}\n      />\n      <MASPagination\n        widgetId='permissions-pagination-options-menu-bottom'\n        itemCount={aclPage.total || 0}\n        variant={PaginationVariant.bottom}\n        page={aclPage.page}\n        perPage={aclPage.size}\n        titles={{\n          paginationTitle: t('common.full_pagination'),\n          perPageSuffix: t('common.per_page_suffix'),\n          toFirstPage: t('common.to_first_page'),\n          toPreviousPage: t('common.to_previous_page'),\n          toLastPage: t('common.to_last_page'),\n          toNextPage: t('common.to_next_page'),\n          optionsToggle: t('common.options_toggle'),\n          currPage: t('common.curr_page'),\n        }}\n      />\n    </>\n  );\n};\nexport { PermissionsTable };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { usePermissionsService } from '@app/services/acls';\nimport { PermissionsTable } from '@app/modules/Permissions/components/PermissionsTable';\nimport { ConfigContext } from '@app/contexts';\nimport { getConsumerGroups, getTopics } from '@app/services';\n\nexport type PermissionsTableViewProps = {\n  kafkaName?: string;\n};\nexport const PermissionsTableView: React.FunctionComponent<PermissionsTableViewProps> =\n  ({ kafkaName }) => {\n    const config = useContext(ConfigContext);\n\n    const permissionsService = usePermissionsService(config);\n    const [topicNames, setTopicNames] = useState<string[]>([]);\n    const [consumerGroupIds, setConsumerGroupNames] = useState<string[]>([]);\n\n    useEffect(() => {\n      const fetchTopicNames = async () => {\n        const response = await getTopics(config);\n        const topicNames = response.items?.map((topic) => topic.name || '');\n        setTopicNames(topicNames || []);\n      };\n      fetchTopicNames();\n    }, [config]);\n\n    useEffect(() => {\n      const fetchConsumerGroupNames = async () => {\n        const response = await getConsumerGroups(config);\n        const consumerGroupNames = response.items?.map(\n          (consumerGroup) => consumerGroup.groupId || ''\n        );\n        setConsumerGroupNames(consumerGroupNames || []);\n      };\n      fetchConsumerGroupNames();\n    }, [config]);\n\n    //const permissionsService = createMockPermissionsService();\n\n    return (\n      <PermissionsTable\n        permissionsService={permissionsService}\n        kafkaName={kafkaName}\n        topicNames={topicNames}\n        consumerGroupIds={consumerGroupIds}\n      />\n    );\n  };\n\nexport default PermissionsTableView;\n","import React, { lazy, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Level,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Title,\n} from '@patternfly/react-core';\nimport { useFederated } from '@app/contexts';\nimport { MASLoading } from '@app/components';\nimport '../style.css';\nimport PermissionsTableView from '@app/modules/Permissions/pages/PermissionsTable/PermissionsTableView';\n\nconst Topics = lazy(() => import('@app/modules/Topics/Topics'));\nconst ConsumerGroups = lazy(\n  () => import('@app/modules/ConsumerGroups/ConsumerGroups')\n);\n\nexport const MainView: React.FC = () => {\n  const { t } = useTranslation();\n  const {\n    kafkaPageLink,\n    kafkaName,\n    handleInstanceDrawer,\n    setIsOpenDeleteInstanceModal,\n    showMetrics,\n    activeTab,\n  } = useFederated() || {};\n\n  const [activeTabKey, setActiveTabKey] = useState(activeTab || 1);\n  const contentRefConsumerGroups = React.createRef<HTMLElement>();\n  const contentRefTopics = React.createRef<HTMLElement>();\n  const contentRefDashboard = React.createRef<HTMLElement>();\n  const contentRefPermissions = React.createRef<HTMLElement>();\n\n  const handleTabClick = (_event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelectKebabOption = (activeTab: string) => {\n    handleInstanceDrawer && handleInstanceDrawer(true, activeTab);\n  };\n\n  const onDeleteInstance = () => {\n    setIsOpenDeleteInstanceModal && setIsOpenDeleteInstanceModal(true);\n  };\n\n  const dropdownItems = [\n    <DropdownItem\n      key='view-kafka'\n      onClick={() => onSelectKebabOption('details')}\n    >\n      {t('common.view_instance')}\n    </DropdownItem>,\n    <DropdownItem\n      key='connect-kafka'\n      onClick={() => onSelectKebabOption('connection')}\n    >\n      {t('common.view_connection')}\n    </DropdownItem>,\n    <DropdownItem key='delete-kafka' onClick={onDeleteInstance}>\n      {t('common.delete_instance')}\n    </DropdownItem>,\n  ];\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>\n        {t('common.kafka_instance')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <Title headingLevel='h1'>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </Title>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id='toggle-data-plane' />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          />\n        </Level>\n      </PageSection>\n      <React.Suspense fallback={<MASLoading />}>\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n          className='pf-c-page__main-tabs'\n        >\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n            data-testid='pageKafka-tabProperties'\n            className='pf-m-page-insets'\n          >\n            <Tab\n              title={<TabTitleText>{t('dashboard.dashboard')}</TabTitleText>}\n              eventKey={1}\n              data-testid='pageKafka-tabDashboard'\n              id='dashboard-tab-section'\n              aria-label={t('dashboard.dashboard')}\n              tabContentRef={contentRefDashboard}\n              tabContentId='kafka-ui-TabcontentDashboard'\n            />\n            <Tab\n              title={<TabTitleText>{t('topic.topics')}</TabTitleText>}\n              eventKey={2}\n              data-testid='pageKafka-tabTopics'\n              id='topics-tab-section'\n              aria-label={t('topic.topics')}\n              tabContentRef={contentRefTopics}\n              tabContentId='kafka-ui-TabcontentTopicsList'\n            />\n            <Tab\n              title={\n                <TabTitleText>\n                  {t('consumerGroup.consumer_groups')}\n                </TabTitleText>\n              }\n              eventKey={3}\n              data-testid='pageKafka-tabConsumers'\n              id='consumer-groups-tab-section'\n              aria-label={t('consumerGroup.consumer_groups')}\n              tabContentRef={contentRefConsumerGroups}\n              tabContentId='kafka-ui-TabcontentConsumersList'\n            />\n            <Tab\n              title={<TabTitleText>{t('permission.tab.label')}</TabTitleText>}\n              eventKey={4}\n              data-testid='pageKafka-tabPermissions'\n              id='permissions-tab-section'\n              aria-label={t('permission.tab.label')}\n              tabContentRef={contentRefPermissions}\n              tabContentId='kafka-ui-TabcontentPermissions'\n              // className='kafka-ui-m-full-height'\n            />\n          </Tabs>\n        </PageSection>\n        <PageSection isFilled>\n          <TabContent\n            eventKey={1}\n            ref={contentRefDashboard}\n            id='kafka-ui-TabcontentDashboard'\n            className='kafka-ui-m-full-height'\n            aria-label={t('dashboard.dashboard')}\n            hidden={activeTabKey !== 1}\n          >\n            {showMetrics}\n          </TabContent>\n          <TabContent\n            eventKey={2}\n            ref={contentRefTopics}\n            id='kafka-ui-TabcontentTopicsList'\n            className='kafka-ui-m-full-height'\n            aria-label={t('topic.topics')}\n            hidden={activeTabKey !== 2}\n          >\n            <Topics />\n          </TabContent>\n          <TabContent\n            eventKey={3}\n            ref={contentRefConsumerGroups}\n            id='kafka-ui-TabcontentConsumersList'\n            className='kafka-ui-m-full-height'\n            aria-label={t('consumerGroup.consumer_groups')}\n            hidden={activeTabKey != 3}\n          >\n            <ConsumerGroups consumerGroupByTopic={false} />\n          </TabContent>\n          <TabContent\n            eventKey={4}\n            ref={contentRefPermissions}\n            id='kafka-ui-TabcontentPermissions'\n            className='kafka-ui-m-full-height'\n            aria-label={t('permission.tab.label')}\n            hidden\n          >\n            <PermissionsTableView kafkaName={kafkaName} />\n          </TabContent>\n        </PageSection>\n      </React.Suspense>\n    </>\n  );\n};\n"],"names":["css","args","classes","hasOwn","hasOwnProperty","filter","Boolean","forEach","arg","argType","push","Array","isArray","length","inner","key","call","join","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","id","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","map","toolbarItem","index","variant","className","alignment","item","restItemProps","ToolbarItem","PermissionsToolbarKebab","deleteSelectedEnabled","onDeleteSelected","t","useTranslation","useState","isOpen","setIsOpen","onFocus","element","document","getElementById","focus","dropdownItems","DropdownItem","onClick","isDisabled","Dropdown","onSelect","prevState","toggle","KebabToggle","onToggle","v","isPlain","PermissionsToolbar","total","page","perPage","setFilteredValue","openManagePermissions","deletedSelectedEnabled","Button","MASPagination","widgetId","itemCount","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","isCompact","default","xl","breakpoint","PermissionsTableEmptyState","EmptyState","emptyStateProps","titleProps","title","emptyStateBodyProps","body","buttonProps","PermissionsTable","permissionsService","kafkaName","topicNames","consumerGroupIds","filteredValue","showModal","aclPage","setAclPage","fetchPermissions","getPermissions","resourceName","undefined","items","value","found","p","hash","selected","every","size","useEffect","cells","selectedAccountId","acls","onSave","some","deletePermission","patternType","AclPatternTypeFilter","permissionType","permission","AclPermissionTypeFilter","resourceType","AclResourceTypeFilter","operation","AclOperationFilter","principal","then","MASTable","tableProps","rows","row","f","originalData","shouldDefaultCustomRowWrapper","TableVariant","event","isSelected","rowIndex","actionResolver","_","resolver","onDelete","canSelectAll","rowDataTestId","PaginationVariant","config","useContext","setTopicNames","setConsumerGroupNames","response","topic","name","consumerGroupNames","consumerGroup","groupId","Topics","lazy","ConsumerGroups","MainView","kafkaPageLink","handleInstanceDrawer","setIsOpenDeleteInstanceModal","showMetrics","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroups","contentRefTopics","contentRefDashboard","contentRefPermissions","onSelectKebabOption","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","PageSection","PageSectionVariants","Level","Title","headingLevel","position","DropdownPosition","fallback","MASLoading","padding","Tabs","activeKey","_event","tabIndex","Tab","TabTitleText","eventKey","tabContentRef","tabContentId","isFilled","TabContent","ref","hidden","consumerGroupByTopic"],"sourceRoot":""}