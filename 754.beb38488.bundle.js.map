{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/code-branch-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/plus-circle-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/search-icon.js","webpack://kafka-ui/./src/i18n/locale/index.ts","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/SearchTopics.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/EmptyTopics.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/EmptySearch.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/DeleteTopicsModal.tsx","webpack://kafka-ui/./src/Components/Loading/Loading.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/TopicsList.tsx","webpack://kafka-ui/./src/Hooks/useTimeOut.ts","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupData.ts","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/SearchConsumers.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList.tsx","webpack://kafka-ui/./src/Modules/AppNavigation/AppNavigation.tsx","webpack://kafka-ui/./src/Panels/Topics/TopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Components/TextWithLabelPopover/TextWithLabelPopover.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerDataByTopics.ts","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupDetailByTopics.ts","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsByTopicsDrawer.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/SearchConsumerGroupsByTopics.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopicHead.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/Panels/ConsumerGroups/ConsumerGroupsView.tsx","webpack://kafka-ui/./src/Components/ErrorBoundary/UnexpectedError.tsx","webpack://kafka-ui/./src/Components/ErrorBoundary/ErrorBoundary.tsx","webpack://kafka-ui/./src/Modules/AppNavigation/AppMastHead.tsx","webpack://kafka-ui/./src/i18n/index.ts","webpack://kafka-ui/./src/Bootstrap/bootstrap.tsx","webpack://kafka-ui/./src/Panels/MastHead/MastHead.tsx","webpack://kafka-ui/./src/Panels/Topics/DetailView.tsx","webpack://kafka-ui/./src/Panels/Topics/CreateView.tsx","webpack://kafka-ui/./src/Panels/Topics/UpdateView.tsx","webpack://kafka-ui/./src/Panels/ConsumerGroupsByTopic/ConsumerGroupsByTopic.tsx","webpack://kafka-ui/./src/Components/ServerAlertGroup/ServerAlertGroup.tsx","webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Contexts/Topic/Context.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","resources","en","translation","de","SearchTopics","search","setSearch","onClear","InputGroup","SearchInput","id","type","placeholder","value","onChange","EmptyTopics","onCreateTopic","EmptyState","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","Button","variant","className","onClick","EmptySearch","getTopics","config","getToken","accessToken","basePath","getTopicsList","data","getTopicDetail","topicName","getTopic","convertTopicResponse","topic","topicObj","forEach","key","numPartitions","partitions","length","replicationFactor","map","p","replicas","reduce","previousValue","currentValue","updateTopicModel","topicSettings","updateTopic","status","deleteTopic","DeleteTopics","setDeleteModal","deleteModal","addAlert","useContext","history","onClose","Modal","ModalVariant","isOpen","title","titleIconVariant","showClose","Text","Flex","FlexItem","AlertVariant","response","err","push","Loading","Bullseye","Spinner","TopicsListComponent","callback","delay","savedCallback","useState","loading","setLoading","page","setPage","perPage","setPerPage","offset","setOffset","topics","setTopics","filteredTopics","setFilteredTopics","setTopicName","fetchTopic","topicsList","useEffect","useRef","current","setTimeout","clearInterval","onSetPage","_event","pageNumber","onPerPageSelect","tableColumns","transforms","sortable","rowData","items","isInline","onTopicClick","toString","trim","filter","topicsFiltered","includes","prevState","undefined","actions","_","rowId","onDelete","onEdit","Card","Toolbar","ToolbarContent","ToolbarItem","Pagination","itemCount","widgetId","Table","TableVariant","cells","rows","slice","TableHeader","TableBody","Divider","PaginationVariant","consumerGroupData","members","state","SearchConsumers","setTableData","filterSearch","consumersFiltered","console","log","row","toLowerCase","indexOf","ConsumerGroupsList","tableData","consumer","Label","color","AppNavigation","eventKey","activeTabKey","setActiveTabKey","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","PageSection","PageSectionVariants","align","default","iconPosition","padding","Tabs","activeKey","onSelect","event","tabIndex","Tab","TabTitleText","hidden","Page","Topics","TopicDetailHead","TextContent","component","TextVariants","TextWithLabelPopover","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","unit","displayText","Number","style","fontWeight","display","Popover","headerContent","bodyContent","preventDefault","position","left","top","noVerticalAlign","TopicDetailView","t","useTranslation","Grid","hasGutter","GridItem","span","JumpLinks","isVertical","label","scrollableSelector","JumpLinksItem","href","PageGroup","hasOverflowScroll","preallocate","ConsumerGroupDataByTopics","mockConsumerGroupDetailByTopics","partition","currentOffset","logendOffset","offsetLag","ConsumerGroupsByTopicDrawer","isExpanded","consumerGroupDetail","consumergroup","DrawerPanelContent","widths","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","dataLabel","SearchConsumerGroupsByTopics","searchText","setSearchText","ButtonVariant","ConsumerGroupByTopicList","setIsExpanded","setConsumerGroupDetail","panelContent","ConsumerGroupByTopic","Drawer","DrawerContent","TopicDetailGroup","topicDetail","setTopicDetail","fetchTopicDetail","isBox","UpdateTopicHead","UpdateTopicView","store","updateBulkStore","setTopic","topicRes","saveToStore","advanceConfig","configItem","patchConfig","previousTopic","item","Object","keys","TopicAdvanceConfig","isCreate","saveTopic","newConfig","handleCancel","UpdateTopicPage","UnexpectedError","updateState","EmptyStateVariant","TitleSizes","hasError","setState","getDerivedStateFromError","error","componentDidCatch","errorInfo","render","this","props","children","AppMastHead","isDropDownOpen","setIsDropDownOpen","userDropDownItems","DropdownItem","brandImgLogo","Brand","src","brandImg","alt","userDropDownToggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","userDropDown","Dropdown","toggle","isPlain","dropdownItems","avatar","Avatar","HeaderTools","PageHeaderTools","PageHeader","logo","logoComponent","headerTools","initReactI18next","use","init","detection","order","caches","fallbackLng","debug","interpolation","escapeValue","mainContainerId","header","ErrorBoundary","Switch","Route","path","exact","useHistory","CreateTopicPage","setIsCreateTopic","goBack","document","getElementById","ServerAlertGroup","alerts","onCloseAlert","AlertGroup","isToast","message","Alert","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","AlertContext","createContext","AlertProvider","setAlerts","timers","setTimers","timersKeys","timer","timeOuts","alert","timeOut","hideAlert","clearTimeout","el","Provider","Date","getTime","initialState","TopicContext","TopicContextProvider","setStore","updateStore"],"mappings":"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","file":"754.beb38488.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CodeBranchIconConfig = {\n  name: 'CodeBranchIcon',\n  height: 512,\n  width: 384,\n  svgPath: 'M384 144c0-44.2-35.8-80-80-80s-80 35.8-80 80c0 36.4 24.3 67.1 57.5 76.8-.6 16.1-4.2 28.5-11 36.9-15.4 19.2-49.3 22.4-85.2 25.7-28.2 2.6-57.4 5.4-81.3 16.9v-144c32.5-10.2 56-40.5 56-76.3 0-44.2-35.8-80-80-80S0 35.8 0 80c0 35.8 23.5 66.1 56 76.3v199.3C23.5 365.9 0 396.2 0 432c0 44.2 35.8 80 80 80s80-35.8 80-80c0-34-21.2-63.1-51.2-74.6 3.1-5.2 7.8-9.8 14.9-13.4 16.2-8.2 40.4-10.4 66.1-12.8 42.2-3.9 90-8.4 118.2-43.4 14-17.4 21.1-39.8 21.6-67.9 31.6-10.8 54.4-40.7 54.4-75.9zM80 64c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16zm0 384c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm224-320c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CodeBranchIcon = require('../createIcon').createIcon(exports.CodeBranchIconConfig);\nexports[\"default\"] = exports.CodeBranchIcon;","\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PlusCircleIcon = require('../createIcon').createIcon(exports.PlusCircleIconConfig);\nexports[\"default\"] = exports.PlusCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.SearchIconConfig = {\n  name: 'SearchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.SearchIcon = require('../createIcon').createIcon(exports.SearchIconConfig);\nexports[\"default\"] = exports.SearchIcon;","import en from './en.json';\nimport de from './de.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n","import React from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\n\nexport interface ISearchTopicsProps {\n  setSearch: (value: string) => void;\n  search: string;\n  onClear: () => void;\n}\nconst SearchTopics: React.FunctionComponent<ISearchTopicsProps> = ({\n  search,\n  setSearch,\n  onClear,\n}) => {\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n  };\n\n  const onClearHandler = () => {\n    onClear();\n    setSearch('');\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-topics-input'\n        type='search'\n        aria-label='search input '\n        placeholder='Search'\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClearHandler}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchTopics };\n","import React from 'react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport PlusIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\n\nexport interface IEmptyTopic {\n  onCreateTopic?: () => void;\n}\n\nexport const EmptyTopics: React.FunctionComponent<IEmptyTopic> = ({\n  onCreateTopic,\n}) => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={PlusIcon} />\n      <Title headingLevel='h5' size='lg'>\n        You don&apos;t have any topics yet\n      </Title>\n      <EmptyStateBody>\n        Create a topic by clicking the button below to get started\n      </EmptyStateBody>\n      <Button\n        variant='primary'\n        className='topics-empty-page'\n        onClick={onCreateTopic}\n      >\n        Create Topic\n      </Button>\n    </EmptyState>\n  );\n};\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport const EmptySearch: React.FunctionComponent = () => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel='h5' size='lg'>\n        No results found\n      </Title>\n      <EmptyStateBody>\n        No result match the filter criteria. Remove filter or clear all filters\n        to show results\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport { DefaultApi, Topic, TopicSettings, TopicsList } from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length;\n\n  topicObj.replicationFactor = topic?.partitions\n    ?.map((p) => p.replicas?.length)\n    .reduce(\n      (previousValue = 0, currentValue = 0) => previousValue + currentValue\n    );\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n","import React, { useContext } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Flex,\n  Text,\n  FlexItem,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '../../../../Services/TopicServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { useHistory } from 'react-router';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteTopics {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  topicName?: string;\n}\nexport const DeleteTopics: React.FunctionComponent<IDeleteTopics> = ({\n  setDeleteModal,\n  deleteModal,\n  topicName,\n}) => {\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      topicName && (await deleteTopic(topicName, config));\n      addAlert(`Successfully deleted topic ${topicName}`, AlertVariant.success);\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    history.push('/topics');\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Modal warning example'\n      title=' Delete Topic  ?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='no-header-example'\n      onClose={onClose}\n      // onClick={onSave}\n    >\n      <Text> The Topic {topicName} will be deleted </Text>\n\n      <br />\n      <Flex>\n        <FlexItem>\n          <Button variant='danger' onClick={onDelete}>\n            Delete Topic\n          </Button>\n        </FlexItem>\n        <FlexItem>\n          <Button variant='link' onClick={onClose}>\n            Cancel\n          </Button>\n        </FlexItem>\n      </Flex>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  AlertVariant,\n  Button,\n  Card,\n  Divider,\n  Pagination,\n  PaginationVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  sortable,\n} from '@patternfly/react-table';\nimport { useTimeout } from '../../../../Hooks/useTimeOut';\nimport { SearchTopics } from './SearchTopics';\nimport { EmptyTopics } from './EmptyTopics';\nimport { EmptySearch } from './EmptySearch';\nimport { getTopics } from '../../../../Services';\nimport { DeleteTopics } from './DeleteTopicsModal';\nimport { useHistory } from 'react-router';\nimport { ConfigContext } from '../../../../Contexts';\nimport { TopicsList } from '../../../../OpenApi';\nimport { Loading } from '../../../../Components/Loading/Loading';\nimport { AlertContext } from '../../../../Contexts/Alert';\n\nimport './TopicList.css';\n\nexport interface ITopic {\n  name: string;\n  replicas: number;\n  partitions: number;\n}\n\nexport interface ITopicProps {\n  rows: ITopic[];\n}\n\nexport interface ITopicList {\n  onCreateTopic: () => void;\n}\n\nexport const TopicsListComponent: React.FunctionComponent<ITopicList> = ({\n  onCreateTopic,\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState<number>(0);\n  const [search, setSearch] = useState('');\n  const [topics, setTopics] = useState<TopicsList>();\n  const [filteredTopics, setFilteredTopics] = useState<TopicsList>();\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [topicName, setTopicName] = useState<string | undefined>();\n  const history = useHistory();\n\n  const { addAlert } = useContext(AlertContext);\n\n  const config = useContext(ConfigContext);\n\n  const fetchTopic = async () => {\n    try {\n      const topicsList = await getTopics(config);\n      if (topicsList) {\n        setTopics(topicsList);\n        setFilteredTopics(topicsList);\n      }\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    fetchTopic();\n  }, [deleteModal]);\n\n  useTimeout(() => fetchTopic(), 5000);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n  const onTopicClick = (topic: string) => {\n    history.push(`/topic/${topic}`);\n  };\n\n  const tableColumns = [\n    { title: 'Name' },\n    { title: 'Replicas', transforms: [sortable] },\n    { title: 'Partitions', transforms: [sortable] },\n  ];\n  const rowData =\n    filteredTopics?.items?.map((topic) => [\n      {\n        title: (\n          <Button\n            variant='link'\n            isInline\n            onClick={() =>\n              onTopicClick((topic && topic.name && topic.name.toString()) || '')\n            }\n          >\n            {topic?.name}\n          </Button>\n        ),\n      },\n      topic.partitions\n        ?.map((p) => (p.replicas ? p.replicas.length : 0))\n        .reduce(\n          (previousValue, currentValue) => previousValue + currentValue,\n          0\n        ),\n      topic.partitions?.length,\n    ]) || [];\n\n  useEffect(() => {\n    if (\n      search &&\n      search.trim() != '' &&\n      topics?.items &&\n      topics.items.length > 0\n    ) {\n      const filterSearch = topics?.items.filter(\n        (topicsFiltered) =>\n          topicsFiltered?.name && topicsFiltered.name.includes(search)\n      );\n      setFilteredTopics((prevState) =>\n        prevState\n          ? {\n              ...prevState,\n              items: filterSearch,\n            }\n          : undefined\n      );\n    } else {\n      setFilteredTopics(topics);\n    }\n  }, [search, topics]);\n\n  const onClear = () => {\n    setFilteredTopics(topics);\n  };\n  const onDelete = (rowId: any) => {\n    if (filteredTopics?.items) {\n      setTopicName(filteredTopics.items[rowId].name);\n    }\n    setDeleteModal(true);\n  };\n\n  const onEdit = (rowId: any) => {\n    if (filteredTopics?.items) {\n      history.push(`/topics/update/${filteredTopics.items[rowId].name}`);\n    }\n  };\n\n  const actions = [\n    { title: 'Delete', onClick: (_, rowId) => onDelete(rowId) },\n    { title: 'Edit', onClick: (_, rowId) => onEdit(rowId) },\n  ];\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <>\n      {deleteModal && (\n        <DeleteTopics\n          topicName={topicName}\n          setDeleteModal={setDeleteModal}\n          deleteModal={deleteModal}\n        />\n      )}\n      {rowData.length < 1 && search.length < 1 ? (\n        <EmptyTopics onCreateTopic={onCreateTopic} />\n      ) : (\n        <Card>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem className='pf-c-toolbar-item--search'>\n                <SearchTopics\n                  onClear={onClear}\n                  search={search}\n                  setSearch={setSearch}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Button\n                  id='topic-list-create-topic-button'\n                  className='topics-per-page'\n                  onClick={() => {\n                    onCreateTopic();\n                  }}\n                >\n                  Create topic\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem variant='pagination'>\n                <Pagination\n                  itemCount={rowData.length}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId='topic-list-pagination-top'\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n\n          <Table\n            aria-label='Compact Table'\n            variant={TableVariant.compact}\n            cells={tableColumns}\n            rows={\n              page != 1\n                ? rowData.slice(offset, offset + perPage)\n                : rowData.slice(0, perPage)\n            }\n            actions={actions}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </Card>\n      )}\n      <Divider />\n      {rowData.length < 1 && search.length > 1 && <EmptySearch />}\n      {rowData.length > 1 && (\n        <Card>\n          <Pagination\n            itemCount={rowData.length}\n            perPage={perPage}\n            page={page}\n            onSetPage={onSetPage}\n            widgetId='topic-list-pagination-bottom'\n            onPerPageSelect={onPerPageSelect}\n            offset={0}\n            variant={PaginationVariant.bottom}\n          />\n        </Card>\n      )}\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useTimeout: any = (callback: any, delay: number) => {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n};\n","export const consumerGroupData = [\n  {\n    id: 'Custom_0',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_1',\n    members: 1,\n    partitions: 1,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_2',\n    members: 0,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_3',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_4',\n    members: 1,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_5',\n    members: 0,\n    partitions: 0,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_6',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_7',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_8',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_9',\n    members: 1,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_10',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\nimport { consumerGroupData } from './ConsumerGroupData';\n\nexport interface IConsumerGroupData {\n  id: string;\n  members: number;\n  partitions: number;\n  state: number;\n}\n\nexport interface ISearchConsumerGroupProps {\n  setTableData: (IConsumerGroupData) => void;\n}\n\nconst SearchConsumers: React.FunctionComponent<ISearchConsumerGroupProps> = ({\n  setTableData,\n}) => {\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    if (search && search.trim() != '') {\n      const filterSearch = consumerGroupData.filter((consumersFiltered) =>\n        consumersFiltered?.id.includes(search)\n      );\n      setTableData(filterSearch);\n      console.log(filterSearch);\n    } else {\n      setTableData(consumerGroupData);\n    }\n  }, [search]);\n\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n    setTableData(\n      consumerGroupData.filter(\n        (row) => row.id.toLowerCase().indexOf(search.toLowerCase()) > -1\n      )\n    );\n  };\n  const onClear = () => {\n    setSearch('');\n    setTableData(consumerGroupData);\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-consumers-input'\n        type='search'\n        aria-label='search input '\n        placeholder='Search'\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchConsumers };\n","import React, { useState } from 'react';\nimport {\n  Card,\n  Divider,\n  Label,\n  Pagination,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { SearchConsumers } from './SearchConsumers';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { CheckCircleIcon } from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { consumerGroupData } from './ConsumerGroupData';\nimport { EmptySearch } from '../../../Topics/TopicList/Components/EmptySearch';\nexport const ConsumerGroupsList: React.FunctionComponent = () => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState(0);\n  const [tableData, setTableData] = useState(consumerGroupData);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const tableColumns = [\n    { title: 'Consumer Group ID' },\n    { title: 'Active Members' },\n    { title: 'Unconsumed Partitions' },\n    { title: 'State' },\n  ];\n\n  //const rowData = model.consumersList.items.map((consumer) => [\n  const rowData = tableData.map((consumer) => [\n    consumer.id,\n    consumer.members,\n    consumer.partitions,\n    {\n      title: (\n        <Label\n          color={consumer.state === 'Stable' ? 'green' : 'red'}\n          icon={\n            consumer.state === 'Stable' ? (\n              <CheckCircleIcon />\n            ) : (\n              <ExclamationCircleIcon />\n            )\n          }\n        >\n          {consumer.state}\n        </Label>\n      ),\n    },\n  ]);\n\n  return (\n    <>\n      <Card>\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <SearchConsumers setTableData={setTableData} />\n            </ToolbarItem>\n            <ToolbarItem variant='pagination'>\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='consumer-group-pagination-top'\n                onPerPageSelect={onPerPageSelect}\n              />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n        <Divider />\n        <Table\n          aria-label='Compact Table'\n          variant={TableVariant.compact}\n          cells={tableColumns}\n          rows={\n            page != 1\n              ? rowData.slice(offset, offset + perPage)\n              : rowData.slice(0, perPage)\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n        {rowData.length < 1 ? (\n          <EmptySearch />\n        ) : (\n          <Pagination\n            itemCount={rowData.length}\n            perPage={perPage}\n            page={page}\n            onSetPage={onSetPage}\n            widgetId='consumer-group-pagination-bottom'\n            onPerPageSelect={onPerPageSelect}\n            offset={0}\n          />\n        )}\n      </Card>\n      <Divider />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Flex,\n  FlexItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Page,\n  Tabs,\n  Tab,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { TopicsListComponent } from '../Topics/TopicList/Components/TopicsList';\nimport { ConsumerGroupsList } from '../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/js/icons/code-branch-icon';\nimport { useHistory } from 'react-router';\ninterface ITabHeaderProps {\n  eventKey: number;\n}\nexport const AppNavigation: React.FunctionComponent<ITabHeaderProps> = ({\n  eventKey,\n}) => {\n  const [activeTabKey, setActiveTabKey] = useState(eventKey);\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n  const history = useHistory();\n\n  const onCreateTopic = () => {\n    history.push('/topics/create');\n  };\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='#'>OpenShift Streams</BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        MK Cluster Instance\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <section>{mainBreadcrumbs}</section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Flex>\n          <FlexItem align={{ default: 'alignRight' }}>\n            <Button\n              variant='link'\n              icon={<CodeBranchIcon />}\n              iconPosition='right'\n            >\n              Connect to this cluster\n            </Button>\n          </FlexItem>\n        </Flex>\n        <Title headingLevel='h1'>MK Cluster Instance</Title>\n      </PageSection>\n      <br />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs activeKey={activeTabKey} onSelect={handleTabClick}>\n          <Tab\n            title={<TabTitleText>Home</TabTitleText>}\n            eventKey={0}\n            id='home-tab-section'\n            aria-label='Home Tab'\n            hidden\n          >\n            <Title headingLevel='h4'>Home </Title>\n          </Tab>\n          <Tab\n            title={<TabTitleText>Topics</TabTitleText>}\n            eventKey={1}\n            id='topics-tab-section'\n            aria-label='Topics Tab'\n          >\n            <Page>\n              <PageSection>\n                <TopicsListComponent onCreateTopic={onCreateTopic} />\n              </PageSection>\n            </Page>\n          </Tab>\n          <Tab\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n            eventKey={2}\n            id='consumer-groups-tab-section'\n            aria-label='Consumer Groups Tab'\n          >\n            <Page>\n              <PageSection>\n                <ConsumerGroupsList />\n              </PageSection>\n            </Page>\n          </Tab>\n          <Tab\n            title={<TabTitleText>Metrics</TabTitleText>}\n            eventKey={3}\n            id='metrics-tab-section'\n            aria-label='Metrics Tab'\n          >\n            <Title headingLevel='h4'>Metrics </Title>\n          </Tab>\n        </Tabs>\n      </PageSection>\n    </PageSection>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { AppNavigation } from '../../Modules/AppNavigation/AppNavigation';\nconst Topics: FunctionComponent = () => {\n  return <AppNavigation eventKey={1} />;\n};\n\nexport { Topics };\n\nexport default Topics;\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n}) => {\n  return (\n    <section className='pf-c-page__main-breadcrumb'>\n      <Breadcrumb>\n        <BreadcrumbItem to='#/topics'>Topics</BreadcrumbItem>\n        <BreadcrumbItem to={`#/topic/${topicName}`}>{topicName}</BreadcrumbItem>\n      </Breadcrumb>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent className='header-padding'>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </section>\n  );\n};\n","import { Popover, TextContent, Text } from '@patternfly/react-core';\nimport React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport bytes from 'bytes';\nimport humanizeDuration from 'humanize-duration';\n\nimport './TextWithLabelPopover.css';\n\nexport interface TextWithLabelPopoverProps {\n  /** Field label */\n  fieldLabel: string;\n  /** Field value */\n  fieldValue?: string;\n  /** Header text for popover label */\n  popoverHeader: string;\n  /** Body text for popover label */\n  popoverBody: string;\n  /** Aria label for popover button */\n  btnAriaLabel: string;\n  /** Unit (if exists) for the field */\n  unit?: string;\n}\n\nexport const TextWithLabelPopover: React.FC<TextWithLabelPopoverProps> = ({\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  unit,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  let displayText = '-';\n\n  if (fieldValue) {\n    if (unit) {\n      if (unit === 'ms') {\n        displayText = humanizeDuration(Number(fieldValue));\n      }\n      if (unit === 'bytes') {\n        displayText = bytes(Number(fieldValue));\n      }\n    } else {\n      displayText = fieldValue;\n    }\n  }\n\n  return (\n    <TextContent className='text-content-padding'>\n      <Text style={{ fontWeight: 700, display: 'inline' }}>{fieldLabel}</Text>\n      <Popover\n        headerContent={<div>{popoverHeader}</div>}\n        bodyContent={<div>{popoverBody}</div>}\n      >\n        <button\n          aria-label={btnAriaLabel}\n          onClick={preventButtonSubmit}\n          className='pf-c-form__group-label-help'\n          style={{ position: 'relative', left: '5px', top: '2px' }}\n        >\n          <HelpIcon noVerticalAlign />\n        </button>\n      </Popover>\n      <Text>{displayText}</Text>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={2} className='grid-item-padding'>\n        <JumpLinks\n          isVertical\n          label='JUMP TO SECTION'\n          scrollableSelector='#topic-detail-view'\n          style={{ position: 'absolute' }}\n        >\n          <JumpLinksItem key={0} href='#core-configuration'>\n            Core configuration\n          </JumpLinksItem>\n          <JumpLinksItem key={1} href='#messages'>\n            Messages\n          </JumpLinksItem>\n          <JumpLinksItem key={2} href='#log'>\n            Log\n          </JumpLinksItem>\n          <JumpLinksItem key={3} href='#replication'>\n            Replication\n          </JumpLinksItem>\n          <JumpLinksItem key={4} href='#cleanup'>\n            Cleanup\n          </JumpLinksItem>\n          <JumpLinksItem key={5} href='#index'>\n            Index\n          </JumpLinksItem>\n          <JumpLinksItem key={6} href='#flush'>\n            Flush\n          </JumpLinksItem>\n          <JumpLinksItem key={7} href='#delete'>\n            Delete\n          </JumpLinksItem>\n        </JumpLinks>\n      </GridItem>\n      <GridItem span={8} className='grid-item-padding'>\n        <PageGroup hasOverflowScroll id='topic-detail-view'>\n          <PageSection>\n            <TextContent>\n              <Text\n                component={TextVariants.h2}\n                tabIndex={-1}\n                id='core-configuration'\n              >\n                Core configuration\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.coreConfigInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail name'\n              fieldLabel='Name'\n              fieldValue={topic.name}\n              popoverBody={t('createTopic.topicNameLabelBody')}\n              popoverHeader={t('createTopic.topicNameLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail partition'\n              fieldLabel='Partitions'\n              fieldValue={topic.numPartitions}\n              popoverBody={t('createTopic.partitionsLabelBody')}\n              popoverHeader={t('createTopic.partitionsLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail replicas'\n              fieldLabel='Replicas'\n              fieldValue={topic.replicationFactor}\n              popoverBody={t('createTopic.replicasLabelBody')}\n              popoverHeader={t('createTopic.replicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min-in-sync replica'\n              fieldLabel='Minimum in-sync replicas'\n              fieldValue={topic['min.insync.replicas']}\n              popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n              popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention time'\n              fieldLabel='Retention Time'\n              fieldValue={topic['retention.ms']}\n              popoverBody={t('createTopic.retentionTimeLabelBody')}\n              popoverHeader={t('createTopic.retentionTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n                Messages\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.messageSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Maximum message bytes'\n              fieldValue={topic['max.message.bytes']}\n              popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n              popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp type'\n              fieldLabel='Message timestamp type'\n              fieldValue={topic['message.timestamp.type']}\n              popoverBody={t('createTopic.messageTimestampLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp difference'\n              fieldLabel='Maximum message timestamp difference'\n              fieldValue={topic['message.timestamp.difference.max.ms']}\n              popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampDiffLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail compression type'\n              fieldLabel='Compression type'\n              fieldValue={topic['compression.type']}\n              popoverBody={t('createTopic.compressionTypeLabelBody')}\n              popoverHeader={t('createTopic.compressionTypeLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message format version'\n              fieldLabel='Message format version'\n              fieldValue={topic['log.message.format.version']}\n              popoverBody={t('createTopic.messageFormatLabelBody')}\n              popoverHeader={t('createTopic.messageFormatLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                Log\n              </Text>\n              <Text component={TextVariants.p} className='section-info-head'>\n                {t('createTopic.logSectionInfo')}\n              </Text>\n              <Text\n                component={TextVariants.small}\n                className='section-info-note'\n              >\n                {t('createTopic.logSectionInfoNote')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail cleanup policy'\n              fieldLabel='Cleanup policy'\n              fieldValue={topic['log.cleanup.policy']}\n              popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n              popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention bytes'\n              fieldLabel='Delete retention time'\n              fieldValue={topic['delete.retention.ms']}\n              popoverBody={t('createTopic.deleteRetentionLabelBody')}\n              popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n              unit={'time'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min cleanable dirty ratio'\n              fieldLabel='Minimum cleanable dirty ratio'\n              fieldValue={topic['min.cleanable.dirty.ratio']}\n              popoverBody={t('createTopic.minRatioLabelBody')}\n              popoverHeader={t('createTopic.minRatioLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min compaction lag time'\n              fieldLabel='Minimum compaction lag time'\n              fieldValue={topic['min.compaction.lag.ms']}\n              popoverBody={t('createTopic.minLagLabelBody')}\n              popoverHeader={t('createTopic.minLagLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='replication'>\n                Replication\n              </Text>\n              <Text component={TextVariants.p} className='section-info-head'>\n                {t('createTopic.replicationSectionInfo')}\n              </Text>\n              <Text\n                component={TextVariants.small}\n                className='section-info-note'\n              >\n                {t('createTopic.replicationSectionInfoNote')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail unclean leader election'\n              fieldLabel='Unclean leader election'\n              fieldValue={topic['unclean.leader.election.enable']}\n              popoverBody={t('createTopic.leaderElectionLabelBody')}\n              popoverHeader={t('createTopic.leaderElectionLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n                Cleanup\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.cleanupSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Log segment size'\n              fieldValue={topic['log.segment.bytes']}\n              popoverBody={t('createTopic.logSegmentLabelHead')}\n              popoverHeader={t('createTopic.logSegmentLabelBody')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment time'\n              fieldLabel='Segment time'\n              fieldValue={topic['segment.ms']}\n              popoverBody={t('createTopic.segementTimeLabelBody')}\n              popoverHeader={t('createTopic.segementTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment jitter time'\n              fieldLabel='Segment jitter time'\n              fieldValue={topic['segment.jitter.ms']}\n              popoverBody={t('createTopic.jitterTimeLabelBody')}\n              popoverHeader={t('createTopic.jitterTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='file delete delay'\n              fieldLabel='File delete delay'\n              fieldValue={topic['file.delete.delay.ms']}\n              popoverBody={t('createTopic.deleteDelayLabelBody')}\n              popoverHeader={t('createTopic.deleteDelayLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='preallocation log segment files'\n              fieldLabel='Preallocation log segment files'\n              fieldValue={topic.preallocate}\n              popoverBody={t('createTopic.preallocateLabelBody')}\n              popoverHeader={t('createTopic.preallocateLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                Index\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.indexSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='index interval size'\n              fieldLabel='Index interval size'\n              fieldValue={topic['index.interval.bytes']}\n              popoverBody={t('createTopic.indexIntervalLabelBody')}\n              popoverHeader={t('createTopic.indexIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment index size'\n              fieldLabel='Segment index size'\n              fieldValue={topic['segment.index.bytes']}\n              popoverBody={t('createTopic.segementIntervalLabelBody')}\n              popoverHeader={t('createTopic.segementIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                Flush\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.flushSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval messages'\n              fieldLabel='Flush interval messages'\n              fieldValue={topic['flush.messages']}\n              popoverBody={t('createTopic.intervalMessagesLabelBody')}\n              popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval time'\n              fieldLabel='Flush interval time'\n              fieldValue={topic['flush.ms']}\n              popoverBody={t('createTopic.intervalTimeLabelBody')}\n              popoverHeader={t('createTopic.intervalTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <Divider />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                Delete topic (irreversible)\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.deleteTopicInfo')}\n              </Text>\n            </TextContent>\n\n            <Button\n              variant='danger'\n              className='section-margin'\n              onClick={deleteTopic}\n            >\n              Delete topic\n            </Button>\n          </PageSection>\n        </PageGroup>\n      </GridItem>\n      <GridItem span={2} className='grid-item-padding'>\n        <Button variant='primary' onClick={updateTopic}>\n          Edit properties\n        </Button>\n      </GridItem>\n    </Grid>\n  );\n};\n","export const ConsumerGroupDataByTopics = [\n  {\n    id: 'Custom_0',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_1',\n    members: 1,\n    partitions: 1,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_2',\n    members: 0,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_3',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_4',\n    members: 1,\n    partitions: 0,\n    state: 'Stable',\n  },\n];\n","export const mockConsumerGroupDetailByTopics = [\n  {\n    partition: 0,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 2,\n    logendOffset: 0,\n    offsetLag: 1,\n  },\n  {\n    partition: 1,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 0,\n    logendOffset: 0,\n    offsetLag: 0,\n  },\n  {\n    partition: 2,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 0,\n    logendOffset: 0,\n    offsetLag: 0,\n  },\n];\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { mockConsumerGroupDetailByTopics } from './ConsumerGroupDetailByTopics';\nimport { IConsumerGroupByTopic } from './SearchConsumerGroupsByTopics.patternfly';\n\nexport interface ISearchTopicsConsumerListProps {\n  isExpanded: (value: boolean) => void;\n  consumerGroupDetail: IConsumerGroupByTopic | undefined;\n}\n\nexport const ConsumerGroupsByTopicDrawer: React.FunctionComponent<ISearchTopicsConsumerListProps> = ({\n  isExpanded,\n  consumerGroupDetail,\n}) => {\n  const columns = [\n    'Partition',\n    'Client ID + Customer ID',\n    'Current offset',\n    'Log end offset',\n    'Offset lag',\n    {\n      title: '',\n      dataLabel: 'Action',\n    },\n  ];\n\n  const rows = mockConsumerGroupDetailByTopics.map((consumergroup) => [\n    consumergroup.partition,\n    consumergroup.id,\n    consumergroup.currentOffset,\n    consumergroup.logendOffset,\n    consumergroup.offsetLag,\n    { title: <a href='#'>Reset offset</a> },\n  ]);\n\n  const onCloseClick = () => {\n    isExpanded(false);\n  };\n\n  return (\n    <DrawerPanelContent widths={{ default: 'width_50' }}>\n      <DrawerHead>\n        <span>\n          <TextContent>\n            <Text>Consumer group ID</Text>\n            <Text component={TextVariants.h1}>\n              {consumerGroupDetail && consumerGroupDetail.id}\n            </Text>\n          </TextContent>\n        </span>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onCloseClick} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <TextContent>\n          <Flex>\n            <FlexItem>\n              <Text component={TextVariants.h4} size={50}>\n                Active members\n              </Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.members}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>Unconsumed partitions</Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.partitions}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>State</Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.state}\n              </Text>\n            </FlexItem>\n          </Flex>\n        </TextContent>\n      </DrawerPanelBody>\n\n      <Table\n        aria-label='Compact Table'\n        variant={TableVariant.compact}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </DrawerPanelContent>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  InputGroup,\n  SearchInput,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { ConsumerGroupDataByTopics } from './ConsumerDataByTopics';\n\nexport interface IConsumerGroupByTopic {\n  id: string;\n  members: number;\n  partitions: number;\n  state: string;\n}\nexport interface ISearchConsumerGroupsByTopicsProps {\n  setTableData: (value: IConsumerGroupByTopic[]) => void;\n}\nexport const SearchConsumerGroupsByTopics: React.FunctionComponent<ISearchConsumerGroupsByTopicsProps> = ({\n  setTableData,\n}) => {\n  const [searchText, setSearchText] = useState('');\n\n  const onChangeInput = (value: string) => {\n    setSearchText(value);\n  };\n\n  const onConfirm = () => {\n    setTableData(\n      ConsumerGroupDataByTopics.filter(\n        (row) => row.id.toLowerCase().indexOf(searchText.toLowerCase()) > -1\n      )\n    );\n  };\n  const onClear = () => {\n    setSearchText('');\n    setTableData(ConsumerGroupDataByTopics);\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='searchText-consumer-groups-by-topic-input'\n        type='searchText'\n        aria-label='searchText input'\n        placeholder='Search'\n        value={searchText}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n      <Button\n        variant={ButtonVariant.control}\n        aria-label='searchText button for searchText input'\n        onClick={onConfirm}\n        id='searchText-consumer-groups-by-topic-button'\n      >\n        <SearchIcon />\n      </Button>\n    </InputGroup>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Label,\n  Card,\n  Divider,\n  Pagination,\n  Toolbar,\n  Button,\n  ToolbarContent,\n  Drawer,\n  DrawerContent,\n  ToolbarItem,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { ConsumerGroupDataByTopics } from './ConsumerDataByTopics';\nimport { ConsumerGroupsByTopicDrawer } from './ConsumerGroupsByTopicsDrawer.patternfly';\nimport {\n  SearchConsumerGroupsByTopics,\n  IConsumerGroupByTopic,\n} from './SearchConsumerGroupsByTopics.patternfly';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { EmptySearch } from '../../../TopicList/Components/EmptySearch';\n\nexport const ConsumerGroupByTopicList: React.FunctionComponent = () => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState(0);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [\n    consumerGroupDetail,\n    setConsumerGroupDetail,\n  ] = useState<IConsumerGroupByTopic>();\n  const [tableData, setTableData] = useState(ConsumerGroupDataByTopics);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const onClickConsumerGroup = (\n    id: string,\n    members: number,\n    partitions: number,\n    state: string\n  ) => {\n    const consumerDetail = { id, members, partitions, state };\n    setConsumerGroupDetail(consumerDetail);\n    setIsExpanded(true);\n  };\n  const panelContent = (\n    <ConsumerGroupsByTopicDrawer\n      consumerGroupDetail={consumerGroupDetail}\n      isExpanded={setIsExpanded}\n    />\n  );\n\n  const tableColumns = [\n    { title: 'Consumer group ID' },\n    { title: 'Active members for this topic' },\n    { title: 'Unconsumed partitions for this topic' },\n    { title: 'State' },\n  ];\n  const rowData = tableData.map((ConsumerGroupByTopic) => [\n    {\n      title: (\n        <Button\n          variant='link'\n          onClick={() =>\n            onClickConsumerGroup(\n              ConsumerGroupByTopic.id,\n              ConsumerGroupByTopic.members,\n              ConsumerGroupByTopic.partitions,\n              ConsumerGroupByTopic.state\n            )\n          }\n        >\n          {ConsumerGroupByTopic.id}\n        </Button>\n      ),\n    },\n    ConsumerGroupByTopic?.members,\n    ConsumerGroupByTopic?.partitions,\n    {\n      title: (\n        <Label\n          color={ConsumerGroupByTopic.state === 'Stable' ? 'green' : 'red'}\n          icon={\n            ConsumerGroupByTopic.state === 'Stable' ? (\n              <CheckCircleIcon />\n            ) : (\n              <ExclamationCircleIcon />\n            )\n          }\n        >\n          {ConsumerGroupByTopic.state}\n        </Label>\n      ),\n    },\n  ]);\n\n  return (\n    <>\n      <Card>\n        <Title headingLevel='h4'> </Title>\n        <Drawer isExpanded={isExpanded}>\n          <DrawerContent panelContent={panelContent}>\n            <Toolbar>\n              <ToolbarContent>\n                <ToolbarItem>\n                  <SearchConsumerGroupsByTopics setTableData={setTableData} />\n                </ToolbarItem>\n\n                <ToolbarItem variant='pagination'>\n                  <Pagination\n                    itemCount={rowData.length}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    widgetId='pagination-options-menu-top'\n                    onPerPageSelect={onPerPageSelect}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n            <Divider />\n\n            <Table\n              aria-label='Compact Table'\n              variant={TableVariant.compact}\n              cells={tableColumns}\n              rows={\n                page != 1\n                  ? rowData.slice(offset, offset + perPage)\n                  : rowData.slice(0, perPage)\n              }\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n\n            {rowData.length > 0 ? (\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='pagination-options-menu-top'\n                onPerPageSelect={onPerPageSelect}\n                offset={0}\n              />\n            ) : (\n              <EmptySearch />\n            )}\n          </DrawerContent>\n        </Drawer>\n      </Card>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic } from '../../../Contexts/Topic';\nimport {\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { useHistory, useParams } from 'react-router';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupByTopicList } from './Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\n\nexport type TopicDetailRouteParams = {\n  topicName: string;\n};\n\n// TODO: Remove this mock, fetch it from server.\nconst topic: AdvancedTopic = {\n  name: 'SampleTopic2345',\n  numPartitions: '52',\n  replicationFactor: '35',\n  'min.insync.replicas': '78',\n  'retention.ms': '78',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '50',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '4',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': 'Producer',\n  'log.cleanup.policy': 'Delete',\n  'log.retention.bytes': '-1',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '78',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': 'false',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '789',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '4',\n  'min.compaction.lag.ms': '58',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '6048000',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '0',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '6000',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: 'true',\n  'index.interval.bytes': '4096',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '10847560',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '783945',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '3894949',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicDetailGroup: React.FC = () => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(topic);\n  const { topicName } = useParams<TopicDetailRouteParams>();\n  const history = useHistory();\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const fetchTopicDetail = async (topicName: string) => {\n    const response = await getTopicDetail(topicName, config);\n    setTopicDetail(response);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const updateTopic = () => {\n    history.push(`/topics/update/${topicName}`);\n  };\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n\n  return (\n    <>\n      <TopicDetailHead topicName={topicName} />\n      <PageSection variant={PageSectionVariants.light}>\n        <Tabs\n          activeKey={1}\n          onSelect={() => {\n            return;\n          }}\n          isBox={false}\n          className='tab-padding'\n        >\n          <Tab\n            eventKey={0}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupByTopicList />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n            <TopicDetailView\n              topic={topicDetail}\n              deleteTopic={deleteTopic}\n              updateTopic={updateTopic}\n            />\n          </Tab>\n        </Tabs>\n        {deleteModal && (\n          <DeleteTopics\n            topicName={topicName}\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport { Title, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nexport interface IUpdateTopicHeadProps {\n  topicName: string;\n}\n\nexport const UpdateTopicHead: React.FC<IUpdateTopicHeadProps> = ({\n  topicName,\n}) => {\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='/#/topics'>Topics</BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {topicName}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <section\n      className='pf-c-page__main-breadcrumb'\n      style={{ padding: '20px 20px' }}\n    >\n      {mainBreadcrumbs}\n      <br />\n      <br />\n      <Title headingLevel='h1' size='xl'>\n        {topicName}\n      </Title>\n    </section>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport '../../CreateTopic/Components/CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from '../../CreateTopic/Components/TopicAdvanceConfig';\nimport { useParams, useHistory } from 'react-router';\nimport { getTopic, updateTopicModel } from '../../../../Services/index';\nimport { Topic, TopicSettings } from '../../../../OpenApi/api';\nimport {\n  AdvancedTopic,\n  initialState,\n  TopicContext,\n} from '../../../../Contexts/Topic';\nimport { ConfigContext } from '../../../../Contexts';\nimport { DeleteTopics } from '../../TopicList/Components/DeleteTopicsModal';\nimport { AlertContext } from '../../../../Contexts/Alert';\n\nexport const UpdateTopicView: React.FC = () => {\n  const { store, updateBulkStore } = React.useContext(TopicContext);\n  const { topicName } = useParams<any>();\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [topic, setTopic] = useState<Topic>();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const fetchTopic = async (topicName) => {\n    const topicRes = await getTopic(topicName, config);\n    setTopic(topicRes);\n    if (topicRes) saveToStore(topicRes);\n  };\n\n  useEffect(() => {\n    (async function () {\n      await updateBulkStore(initialState);\n      fetchTopic(topicName);\n    })();\n  }, []);\n\n  const saveToStore = (topic: Topic) => {\n    const advanceConfig: AdvancedTopic = store;\n    advanceConfig.numPartitions = topic?.partitions?.length.toString() || '0';\n    advanceConfig.name = topic.name || '';\n    topic.config?.forEach((configItem) => {\n      advanceConfig[configItem.key || ''] = configItem.value || '';\n    });\n    updateBulkStore(advanceConfig);\n  };\n\n  const patchConfig = (previousTopic: Topic) => {\n    const updatedConfig = previousTopic.config?.length\n      ? previousTopic.config.filter((item) => {\n          if (item.key && store[item.key] != item.value)\n            return { key: item.key, value: store[item.key] };\n        })\n      : Object.keys(store).map((key) => {\n          return { key: key, value: store[key] };\n        });\n    return updatedConfig;\n  };\n\n  const saveTopic = async () => {\n    const newConfig = topic && (await patchConfig(topic));\n\n    const topicSettings: TopicSettings = {\n      numPartitions: Number(store.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      const updateStatus = await updateTopicModel(\n        store.name,\n        topicSettings,\n        config\n      );\n\n      if (updateStatus === 200) {\n        addAlert(\n          'The topic was successfully updated in the Kafka instance',\n          AlertVariant.success\n        );\n        history.push(`/topic/${topicName}`);\n      }\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    updateBulkStore(initialState);\n  };\n\n  const handleCancel = () => {\n    history.push('/topics');\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={handleCancel}\n      />\n      <br />\n      <br />\n      {deleteModal && (\n        <DeleteTopics\n          deleteModal={deleteModal}\n          setDeleteModal={setDeleteModal}\n          topicName={topicName}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ConsumerGroupByTopicList } from '../TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\nimport { UpdateTopicHead } from './Components/UpdateTopicHead';\nimport { UpdateTopicView } from './Components/UpdateTopicView';\nimport { useParams } from 'react-router';\n\nexport interface IUpdateTopicRouteParams {\n  topicName: string;\n}\n\nexport const UpdateTopicPage: React.FC = () => {\n  const { topicName } = useParams<IUpdateTopicRouteParams>();\n  return (\n    <>\n      <UpdateTopicHead topicName={topicName} />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        {/* <div> */}\n        <Tabs\n          activeKey={1}\n          onSelect={() => {\n            return;\n          }}\n          isBox={false}\n          className='tab-padding'\n        >\n          <Tab\n            eventKey={0}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupByTopicList />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n            <PageSection variant='light'>\n              <UpdateTopicView />\n            </PageSection>\n          </Tab>\n        </Tabs>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { ConsumerGroupsList } from '../../Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\n\nexport const ConsumerGroupsView: FunctionComponent = () => {\n  return <ConsumerGroupsList />;\n};\n\nexport default ConsumerGroupsView;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\ntype IUnexpectedErrorProps = {\n  updateState: (hasError: boolean) => void;\n};\n\nexport const UnexpectedError: React.FC<IUnexpectedErrorProps> = ({\n  updateState,\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const navigateToHome = () => {\n    updateState(false);\n    history.push('/');\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={ExclamationCircleIcon} />\n        <Title headingLevel='h1' size={TitleSizes.lg}>\n          {t('common.errorBoundaryTitle')}\n        </Title>\n        <EmptyStateBody>{t('common.unexpectedError')}</EmptyStateBody>\n        <Button variant={ButtonVariant.primary} onClick={navigateToHome}>\n          {t('common.returnToHome')}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React, { ErrorInfo } from 'react';\nimport { UnexpectedError } from './UnexpectedError';\n\ntype IErrorBoundaryProps = {\n  children: React.ReactNode;\n};\n\ntype IErrorBoundary = {\n  hasError: boolean;\n};\n\nexport class ErrorBoundary extends React.Component<\n  IErrorBoundaryProps,\n  IErrorBoundary\n> {\n  state: IErrorBoundary = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error: Error): IErrorBoundary {\n    console.error(error);\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    console.error('error:', error, errorInfo);\n  }\n\n  updateState = (hasError: boolean): void => {\n    this.setState({ hasError });\n  };\n\n  render(): React.ReactNode {\n    if (this.state.hasError) {\n      return <UnexpectedError updateState={this.updateState} />;\n    }\n    return this.props.children;\n  }\n}\n","import {\n  Avatar,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  PageHeader,\n  Brand,\n  PageHeaderTools,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport avatarImg from '../../Images/img_avatar.svg';\nimport brandImg from '../../Images/brandImg.png';\n\nexport const AppMastHead: React.FC = () => {\n  const [isDropDownOpen, setIsDropDownOpen] = useState<boolean>(false);\n  const handleUserDropDownSelect = () => {\n    setIsDropDownOpen(!isDropDownOpen);\n  };\n\n  const handleUserDropDownToggle = () => {\n    setIsDropDownOpen(!isDropDownOpen);\n  };\n\n  const userDropDownItems = [<DropdownItem key='logout'>Logout</DropdownItem>];\n  const brandImgLogo = <Brand src={brandImg} alt={'Red Hat logo'} />;\n\n  const userDropDownToggle = (\n    <DropdownToggle\n      id='user-dropdown-toggle'\n      onToggle={handleUserDropDownToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      Ned Username\n    </DropdownToggle>\n  );\n\n  const userDropDown = (\n    <Dropdown\n      onSelect={handleUserDropDownSelect}\n      toggle={userDropDownToggle}\n      isOpen={isDropDownOpen}\n      isPlain\n      dropdownItems={userDropDownItems}\n    />\n  );\n\n  const avatar = (\n    <React.Fragment>\n      <Avatar src={avatarImg} className='app-masthead-avatar' alt='avatar' />\n    </React.Fragment>\n  );\n\n  const HeaderTools = (\n    <PageHeaderTools>\n      {userDropDown}\n      {avatar}\n    </PageHeaderTools>\n  );\n\n  return (\n    <PageHeader\n      logo={brandImgLogo}\n      logoComponent='h1'\n      headerTools={HeaderTools}\n    />\n  );\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst init = (): void => {\n  i18n\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      detection: {\n        order: ['htmlTag', 'navigator'],\n        caches: [],\n      },\n      fallbackLng: 'en',\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      resources,\n    });\n};\n\nexport { init };\n","import { init } from '../i18n';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { ConfigContext } from '../Contexts';\nimport { Topics } from '../Panels/Topics';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport CreateTopic from '../Panels/Topics/CreateView';\nimport TopicDetail from '../Panels/Topics/DetailView';\nimport UpdateTopicView from '../Panels/Topics/UpdateView';\nimport { TopicContextProvider } from '../Contexts/Topic';\nimport { ConsumerGroupsView } from '../Panels/ConsumerGroups/ConsumerGroupsView';\nimport { ConsumerGroupsTopicsView } from '../Panels/ConsumerGroupsByTopic/ConsumerGroupsByTopic';\nimport { ErrorBoundary } from '../Components/ErrorBoundary/ErrorBoundary';\nimport { AlertProvider } from '../Contexts/Alert/Context';\nimport { MastHead } from '../Panels/MastHead/MastHead';\n\ninit(); //Bootstrap i18next support\nReactDOM.render(\n  <ConfigContext.Provider\n    value={{\n      basePath: 'http://localhost:8000/api/managed-services-strimzi-ui/v1/api',\n      getToken: async () => '',\n    }}\n  >\n    <TopicContextProvider>\n      <MastHead>\n        <Router>\n          <AlertProvider>\n            <ErrorBoundary>\n              <Switch>\n                <Route path='/' component={Topics} exact />\n                <Route path='/topics' component={Topics} exact />\n                <Route path='/topic/:topicName' component={TopicDetail} exact />\n                <Route path='/topics/create' component={CreateTopic} exact />\n                <Route\n                  path='/topics/update/:topicName'\n                  component={UpdateTopicView}\n                  exact\n                />\n                <Route\n                  path='/consumerGroups'\n                  component={ConsumerGroupsView}\n                  exact\n                />\n                <Route\n                  path='/topics/consumerGroups/:topicName'\n                  component={ConsumerGroupsTopicsView}\n                  exact\n                />\n              </Switch>\n            </ErrorBoundary>\n          </AlertProvider>\n        </Router>\n      </MastHead>\n    </TopicContextProvider>\n  </ConfigContext.Provider>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport { Page } from '@patternfly/react-core';\nimport { AppMastHead } from '../../Modules/AppNavigation/AppMastHead';\n\nexport type MastHeadProps = {\n  children: React.ReactNode;\n};\n\nexport const MastHead: React.FC<MastHeadProps> = ({ children }) => {\n  return (\n    <Page mainContainerId='main-container' header={<AppMastHead />}>\n      {children}\n    </Page>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { TopicDetailGroup } from '../../Modules/Topics/TopicDetails/TopicDetailPage';\n\nconst TopicDetail: FunctionComponent = () => {\n  return <TopicDetailGroup />;\n};\n\nexport { TopicDetail };\n\nexport default TopicDetail;\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { useHistory } from 'react-router-dom';\nimport { CreateTopicPage } from 'src/Modules/Topics/CreateTopic/CreateTopicPage';\n\nconst CreateTopic: FunctionComponent = () => {\n  const history = useHistory();\n\n  return (\n    <CreateTopicPage\n      setIsCreateTopic={(value) => {\n        if (!value) {\n          history.goBack();\n        }\n      }}\n    />\n  );\n};\n\nexport { CreateTopic };\n\nexport default CreateTopic;\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { UpdateTopicPage } from 'src/Modules/Topics/UpdateTopic/UpdateTopicPage';\n\nconst UpdateTopic: FunctionComponent = () => {\n  return <UpdateTopicPage />;\n};\n\nexport { UpdateTopic };\n\nexport default UpdateTopic;\n","import React, { FunctionComponent } from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { ConsumerGroupByTopicList } from '../../Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\n\nexport const ConsumerGroupsTopicsView: FunctionComponent = () => {\n  return <ConsumerGroupByTopicList />;\n};\n\nexport default ConsumerGroupsTopicsView;\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertGroup,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { AlertType } from '../../Contexts/Alert';\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport const ServerAlertGroup: React.FC<AlertToastGroupProps> = ({\n  alerts,\n  onCloseAlert,\n}) => {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, message }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=''\n          title={message}\n          actionClose={\n            <AlertActionCloseButton\n              title={message}\n              onClose={() => onCloseAlert(key)}\n            />\n          }\n        />\n      ))}\n    </AlertGroup>\n  );\n};\n","import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nexport const initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.message.format.version': '',\n  'log.cleanup.policy': '',\n  'log.retention.bytes': '',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n"],"sourceRoot":""}