{"version":3,"file":"290.e0f1197e.js","mappings":"6hDAsHA,QAjGiE,SAAC,G,IAChEA,EAAS,YACTC,EAAa,gBACbC,EAAa,gBACbC,EAAS,YAEHC,GAAS,IAAAC,YAAW,KAClBC,GAAM,IAAAC,kBAAgB,EACxB,GAA0C,IAAAC,UAAiB,IAA1DC,EAAgB,KAAEC,EAAmB,KACpCC,IAAa,IAAAC,aAAc,CACjCD,SAAU,eAGX,SACK,GAA4B,IAAAH,WAAkB,GAA7CK,EAAS,KAAEC,EAAY,KAExBC,EAAU,WACdZ,KA8BF,OACE,kBAAC,EAAAa,MAAK,CACJC,QAAS,EAAAC,aAAA,MACTC,QAAQ,EAAI,aACAb,EAAE,4BACdc,MAAOd,EAAE,4BACTe,iBAAiB,UACjBC,WAAW,EAAI,mBACE,gBACjBP,QAASA,EACTQ,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLP,QAAQ,SACRQ,QAxCS,qD,qFAETzB,GACFc,GAAa,GACb,IAAM,QAAYd,EAAWI,GAAQsB,MAAK,WACxCf,EAAS,CACPS,MAAOd,EAAE,mCAAoC,CAAEqB,KAAM3B,IACrDiB,QAAS,EAAAW,aAAA,UAEX3B,GAAiBA,IACjBC,GAAiBA,SARjB,M,OAEF,S,sDAUFY,GAAa,GACbH,EAAS,CACPS,MAAO,EAAIS,SAASC,KAAKC,cACzBd,QAAS,EAAAW,aAAA,S,oBAGbb,I,YAqBMiB,IAAK,EAAC,cACM,gCACZC,WAA8C,UAAlCxB,EAAiByB,cAC7BrB,UAAWA,GAEVP,EAAE,kBAEL,kBAAC,EAAAkB,OAAM,CAACP,QAAQ,OAAOQ,QAASV,EAASiB,IAAK,GAC3C1B,EAAE,oBAIP,kBAAC,EAAA6B,KAAI,CAACC,GAAG,iBACN,IACD,2BACEC,QAAQ,sBACRC,wBAAyB,CACvBC,OAAQjC,EAAE,mCAAoC,CAAEqB,KAAM3B,QAK5D,6BACA,2BAAOqC,QAAQ,qBAAqB/B,EAAE,0BACtC,kBAAC,EAAAkC,UAAS,CACRC,MAAOhC,EACP2B,GAAG,oBACHT,KAAK,oBACLe,KAAK,OACLC,SA/C+B,SAACF,GACpC/B,EAAoB+B,IA+ChBG,WAAW","sources":["webpack://kafka-ui/./src/modules/Topics/dialogs/DeleteTopic/DeleteTopic.tsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { useAlert } from '@bf2/ui-shared';\nimport { BaseModalProps } from '@app/components/KafkaModal/ModalTypes';\n\nexport type DeleteTopicProps = {\n  topicName?: string;\n  onDeleteTopic?: () => void;\n  refreshTopics?: () => void;\n};\n\nconst DeleteTopic: React.FC<DeleteTopicProps & BaseModalProps> = ({\n  topicName,\n  onDeleteTopic,\n  refreshTopics,\n  hideModal,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (topicName) {\n        setIsLoading(true);\n        await deleteTopic(topicName, config).then(() => {\n          addAlert({\n            title: t('topic.topic_successfully_deleted', { name: topicName }),\n            variant: AlertVariant.success,\n          });\n          onDeleteTopic && onDeleteTopic();\n          refreshTopics && refreshTopics();\n        });\n      }\n    } catch (err) {\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n    onClose();\n  };\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t('topic.delete_modal_title')}\n      title={t('topic.delete_modal_title')}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          data-testid='modalDeleteTopic-buttonDelete'\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n          isLoading={isLoading}\n        >\n          {t('common.delete')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <label\n          htmlFor='instance-name-input'\n          dangerouslySetInnerHTML={{\n            __html: t('common.confirm_delete_modal_text', { name: topicName }),\n          }}\n        />\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>{t('common.confirm_delete')}</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n\nexport default DeleteTopic;\n"],"names":["topicName","onDeleteTopic","refreshTopics","hideModal","config","useContext","t","useTranslation","useState","verificationText","setVerificationText","addAlert","useAlert","isLoading","setIsLoading","onClose","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","then","name","AlertVariant","response","data","error_message","key","isDisabled","toUpperCase","Text","id","htmlFor","dangerouslySetInnerHTML","__html","TextInput","value","type","onChange","autoFocus"],"sourceRoot":""}