{"version":3,"file":"9537.e3cde171.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/createIcon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./src/components/DropdownWithToggle/DropdownWithToggle.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/dialogs/ConsumerGroupResetOffset/ConsumerGroupResetOffset.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIcon = exports.getSize = exports.IconSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nvar IconSize;\n(function (IconSize) {\n    IconSize[\"sm\"] = \"sm\";\n    IconSize[\"md\"] = \"md\";\n    IconSize[\"lg\"] = \"lg\";\n    IconSize[\"xl\"] = \"xl\";\n})(IconSize = exports.IconSize || (exports.IconSize = {}));\nconst getSize = (size) => {\n    switch (size) {\n        case IconSize.sm:\n            return '1em';\n        case IconSize.md:\n            return '1.5em';\n        case IconSize.lg:\n            return '2em';\n        case IconSize.xl:\n            return '3em';\n        default:\n            return '1em';\n    }\n};\nexports.getSize = getSize;\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\nfunction createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {\n    var _a;\n    return _a = class SVGIcon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.id = `icon-title-${currentId++}`;\n            }\n            render() {\n                const _a = this.props, { size, color, title, noVerticalAlign } = _a, props = tslib_1.__rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n                const hasTitle = Boolean(title);\n                const heightWidth = (0, exports.getSize)(size);\n                const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n                const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n                const viewBox = [xOffset, yOffset, width, height].join(' ');\n                return (React.createElement(\"svg\", Object.assign({ style: style, fill: color, height: heightWidth, width: heightWidth, viewBox: viewBox, \"aria-labelledby\": hasTitle ? this.id : null, \"aria-hidden\": hasTitle ? null : true, role: \"img\" }, props),\n                    hasTitle && React.createElement(\"title\", { id: this.id }, title),\n                    React.createElement(\"path\", { d: svgPath })));\n            }\n        },\n        _a.displayName = name,\n        _a.defaultProps = {\n            color: 'currentColor',\n            size: IconSize.sm,\n            noVerticalAlign: false\n        },\n        _a;\n}\nexports.createIcon = createIcon;\n//# sourceMappingURL=createIcon.js.map","\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { DropdownProps } from '@patternfly/react-core/dist/js';\n\nexport interface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, name: string) => void;\n  ariaLabel?: string;\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n  isLabelAndValueNotSame?: boolean;\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n  menuAppendTo,\n  isLabelAndValueNotSame,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect: DropdownProps['onSelect'] = (e) => {\n    if (e && e.currentTarget.textContent) {\n      let value: string = e.currentTarget.textContent;\n      if (onSelectOption && value) {\n        value = isLabelAndValueNotSame ? value.toLowerCase() : value;\n        onSelectOption(value, name);\n      }\n      setIsOpen((isOpen) => !isOpen);\n    }\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    return options.map(({ key, value, label }) => (\n      <DropdownItem key={key} value={value}>\n        {label || value}\n      </DropdownItem>\n    ));\n  };\n\n  const getSelectedValue = () => {\n    if (isLabelAndValueNotSame) {\n      const filteredOption = items?.filter((item) => item.value === value)[0];\n      return filteredOption?.label;\n    }\n    return value;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {getSelectedValue()}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n      menuAppendTo={menuAppendTo}\n    />\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n  Title,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { ConfigContext } from '@app/contexts';\nimport {\n  IRowData,\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table';\nimport {\n  Consumer,\n  OffsetType,\n  ConsumerGroupState,\n} from '@rhoas/kafka-instance-sdk';\nimport './ConsumerGroupResetOffset.css';\nimport { consumerGroupResetOffset } from '@app/services';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n  IDropdownWithToggleProps,\n} from '@app/components/DropdownWithToggle';\nimport { isAxiosError } from '@app/utils/axios';\nimport {\n  BaseModalProps,\n  ConsumerGroupResetOffsetProps,\n  useAlert,\n} from '@rhoas/app-services-ui-shared';\n\nexport type ConsumerRow = Consumer & {\n  selected?: boolean;\n};\n\nconst ConsumerGroupResetOffset: React.FC<\n  ConsumerGroupResetOffsetProps & BaseModalProps\n> = ({ consumerGroupData, refreshConsumerGroups, hideModal }) => {\n  const config = useContext(ConfigContext);\n\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const [confirmCheckboxChecked, setConfirmCheckboxChecked] =\n    useState<boolean>(false);\n  const [isDisconnected, setIsDisconnected] = useState<boolean>(false);\n  const [selectedTopic, setSelectedTopic] = useState<string>('');\n  const [selectedOffset, setOffset] = useState<OffsetType>();\n  const [customOffsetValue, setCustomOffsetValue] = useState<string>('');\n  const [consumers, setConsumers] = useState<ConsumerRow[]>([]);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n\n  const onCustomOffsetChange = (value: string) => {\n    setCustomOffsetValue(value);\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    consumers &&\n      consumers.forEach((row: ConsumerRow) => {\n        const {\n          partition,\n          groupId,\n          memberId,\n          offset: currentOffset,\n          logEndOffset,\n          lag,\n          selected,\n        } = row;\n        tableRow.push({\n          cells: [\n            partition,\n            groupId + memberId,\n            currentOffset,\n            logEndOffset,\n            lag,\n            {\n              title:\n                selected && selectedOffset\n                  ? selectedOffset === OffsetType.Absolute\n                    ? customOffsetValue\n                    : selectedOffset\n                  : '-',\n            },\n          ],\n          originalData: row,\n          selected,\n        });\n      });\n    return tableRow;\n  };\n\n  const getTopics = (\n    consumerGroupDetail: ConsumerGroupResetOffsetProps['consumerGroupData']\n  ) => {\n    const topics = (consumerGroupDetail?.consumers || []).map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = topics.filter(\n      (topic: string, i: number) => topics.indexOf(topic) === i\n    );\n    return distinctTopics.map((topic: string) => ({\n      key: topic,\n      value: topic,\n      isDisabled: false,\n    }));\n  };\n\n  const offsetOptions: IDropdownOption[] = [\n    {\n      key: OffsetType.Absolute,\n      value: OffsetType.Absolute,\n      isDisabled: false,\n    },\n    {\n      key: OffsetType.Latest,\n      value: OffsetType.Latest,\n      isDisabled: false,\n    },\n    {\n      key: OffsetType.Earliest,\n      value: OffsetType.Earliest,\n      isDisabled: false,\n    },\n  ];\n\n  useEffect(() => {\n    const filteredConsumers =\n      consumerGroupData &&\n      consumerGroupData.consumers.filter(\n        (consumer) => consumer.topic === selectedTopic\n      );\n    setConsumers(filteredConsumers || []);\n  }, [consumerGroupData, selectedTopic]);\n\n  useEffect(() => {\n    consumerGroupData?.state &&\n      setIsDisconnected(getIsDisconnected(consumerGroupData.state));\n  }, [consumerGroupData?.state]);\n\n  const onConfirmationChange = (checked: boolean) => {\n    setConfirmCheckboxChecked(checked);\n  };\n\n  const getIsDisconnected = (state: string) => {\n    return state !== ConsumerGroupState.Stable;\n  };\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const columns = [\n    t('consumerGroup.partition'),\n    `${t('consumerGroup.client_id')} + ${t('consumerGroup.member_id')}`,\n    t('consumerGroup.current_offset'),\n    t('consumerGroup.log_end_offset'),\n    t('consumerGroup.offset_lag'),\n    t('consumerGroup.new_offset'),\n  ];\n\n  const onTopicSelect: IDropdownWithToggleProps['onSelectOption'] = (value) => {\n    setSelectedTopic(value);\n  };\n\n  const onOffsetSelect: IDropdownWithToggleProps['onSelectOption'] = (\n    value\n  ) => {\n    setOffset(value as OffsetType);\n  };\n\n  const handleConsumerGroupResetOffset = async () => {\n    try {\n      const partitions = consumers\n        .filter(({ selected }) => selected === true)\n        .map(({ partition }) => partition);\n      if (selectedOffset === OffsetType.Absolute) {\n        consumerGroupData &&\n          (await consumerGroupResetOffset(\n            config,\n            consumerGroupData.groupId,\n            OffsetType.Absolute,\n            selectedTopic,\n            partitions,\n            customOffsetValue.toString()\n          ));\n      } else {\n        consumerGroupData &&\n          selectedOffset &&\n          (await consumerGroupResetOffset(\n            config,\n            consumerGroupData.groupId,\n            selectedOffset,\n            selectedTopic,\n            partitions\n          ));\n      }\n      addAlert({\n        variant: AlertVariant.success,\n        title: t('consumerGroup.offset_successfully_reset'),\n      });\n      refreshConsumerGroups && refreshConsumerGroups();\n    } catch (err) {\n      let message: string | undefined;\n      if (err && isAxiosError(err)) {\n        message = err.response?.data.error_message;\n      }\n      addAlert({\n        variant: AlertVariant.danger,\n        title: message || '',\n      });\n    }\n\n    onClose();\n  };\n\n  const onSelect = (\n    _: React.FormEvent<HTMLInputElement>,\n    isSelected: boolean,\n    rowId: number\n  ) => {\n    let newConsumers = [...consumers];\n    if (rowId === -1) {\n      newConsumers = consumers.map((consumer) => {\n        consumer.selected = isSelected;\n        return consumer;\n      });\n    } else {\n      newConsumers[rowId].selected = isSelected;\n    }\n    setConsumers(newConsumers);\n  };\n\n  const isResetOffsetDisabled = (): boolean => {\n    return (\n      selectedTopic === '' ||\n      !confirmCheckboxChecked ||\n      !isDisconnected ||\n      !selectedOffset ||\n      consumers.filter(({ selected }) => selected === true).length === 0\n    );\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      isOpen={true}\n      aria-label={'Modal for resetting offset of Kafka consumergroup'}\n      title={t('consumerGroup.reset_offset')}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={handleConsumerGroupResetOffset}\n          key={1}\n          isDisabled={isResetOffsetDisabled()}\n        >\n          {t('consumerGroup.reset_offset')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <Form isHorizontal>\n            <FormGroup label='Consumer group' fieldId='horizontal-form-name'>\n              <Title className='form-title' headingLevel='h4' size='md'>\n                {consumerGroupData?.groupId}\n              </Title>\n            </FormGroup>\n            {isDisconnected && (\n              <FormGroup label='Topic' fieldId='horizontal-form-name'>\n                <DropdownWithToggle\n                  id='topic-dropdown'\n                  toggleId='topic-dropdowntoggle'\n                  ariaLabel='topic-select-dropdown'\n                  onSelectOption={onTopicSelect}\n                  items={getTopics(consumerGroupData)}\n                  name='cleanup-policy'\n                  value={selectedTopic ? selectedTopic : t('common.select')}\n                  menuAppendTo={'parent'}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected && selectedTopic && (\n              <FormGroup label='New offset' fieldId='offset-dropdown'>\n                <DropdownWithToggle\n                  id='offset-dropdown'\n                  toggleId='offset-dropdowntoggle'\n                  ariaLabel='offset-select-dropdown'\n                  onSelectOption={onOffsetSelect}\n                  items={offsetOptions}\n                  name='offset-dropdown'\n                  value={selectedOffset ? selectedOffset : t('common.select')}\n                  menuAppendTo={'parent'}\n                />\n              </FormGroup>\n            )}\n\n            {isDisconnected &&\n              selectedTopic &&\n              selectedOffset === OffsetType.Absolute && (\n                <FormGroup label='Custom offset' fieldId='custom-offset-input'>\n                  <TextInput\n                    id='custom-offset-input'\n                    value={customOffsetValue}\n                    onChange={onCustomOffsetChange}\n                    type='number'\n                  />\n                </FormGroup>\n              )}\n          </Form>\n        </StackItem>\n        <StackItem>\n          {!isDisconnected && (\n            <Alert\n              className='modal-alert'\n              variant='danger'\n              isInline\n              title={t('consumerGroup.reset_offset_connected_alert_title')}\n            >\n              <p>{t('consumerGroup.reset_offset_connected_alert_body')}</p>\n            </Alert>\n          )}\n        </StackItem>\n        <StackItem>\n          {isDisconnected && consumers?.length > 0 && selectedTopic && (\n            <Stack hasGutter>\n              <StackItem>\n                <Table\n                  onSelect={onSelect}\n                  canSelectAll={true}\n                  aria-label='Selectable Table'\n                  cells={columns}\n                  rows={preparedTableCells()}\n                  className='consumer-table'\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              </StackItem>\n              <StackItem>\n                <Checkbox\n                  label={t('consumerGroup.reset_offset_accept')}\n                  aria-label='uncontrolled checkbox example'\n                  id='check-5'\n                  isChecked={confirmCheckboxChecked}\n                  onChange={onConfirmationChange}\n                />\n              </StackItem>\n            </Stack>\n          )}\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nexport default ConsumerGroupResetOffset;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  ConsumerGroup,\n  ConsumerGroupList,\n  OffsetType,\n  ConsumerGroupResetOffsetResult,\n  GroupsApi,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      undefined,\n      undefined,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nconst consumerGroupResetOffset = async (\n  config: IConfiguration | undefined,\n  consumerGroupId: string,\n  offset: OffsetType,\n  topic: string,\n  partitions: number[],\n  value?: string\n): Promise<AxiosResponse<ConsumerGroupResetOffsetResult>> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupResetOffsetResult> =\n    await api.resetConsumerGroupOffset(consumerGroupId, {\n      value,\n      offset,\n      topics: [{ topic, partitions }],\n    });\n  return response;\n};\n\nexport {\n  getConsumerGroups,\n  deleteConsumerGroup,\n  getConsumerGroupDetail,\n  consumerGroupResetOffset,\n};\n","import { AxiosError } from 'axios';\n\nexport type ErrorData = {\n  code: number;\n  error_message: string;\n};\n\nexport const isAxiosError = (\n  error: unknown\n): error is AxiosError<ErrorData> => {\n  return (error as AxiosError<ErrorData>) !== undefined;\n};\n"],"names":["exports","tslib_1","React","__importStar","IconSize","size","sm","md","lg","xl","currentId","name","xOffset","yOffset","width","height","svgPath","_a","Component","constructor","super","arguments","this","id","render","props","color","title","noVerticalAlign","__rest","hasTitle","Boolean","heightWidth","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","createElement","Object","assign","fill","role","d","displayName","defaultProps","__esModule","CaretDownIconConfig","CaretDownIcon","DropdownWithToggle","toggleId","items","value","ariaLabel","onSelectOption","menuAppendTo","isLabelAndValueNotSame","isOpen","setIsOpen","useState","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","filteredOption","filter","item","label","getSelectedValue","Dropdown","onSelect","e","currentTarget","textContent","toLowerCase","toggle","dropdownItems","options","map","key","DropdownItem","consumerGroupData","refreshConsumerGroups","hideModal","config","useContext","t","useTranslation","confirmCheckboxChecked","setConfirmCheckboxChecked","isDisconnected","setIsDisconnected","selectedTopic","setSelectedTopic","selectedOffset","setOffset","customOffsetValue","setCustomOffsetValue","consumers","setConsumers","addAlert","useAlert","offsetOptions","OffsetType","isDisabled","useEffect","filteredConsumers","consumer","topic","state","getIsDisconnected","ConsumerGroupState","onClose","columns","Modal","variant","ModalVariant","showClose","actions","Button","onClick","partitions","selected","partition","groupId","toString","AlertVariant","err","message","response","data","error_message","length","Stack","hasGutter","StackItem","Form","isHorizontal","FormGroup","fieldId","Title","className","headingLevel","consumerGroupDetail","topics","i","indexOf","getTopics","TextInput","onChange","type","Alert","isInline","Table","_","isSelected","rowId","newConsumers","canSelectAll","cells","rows","tableRow","forEach","row","memberId","offset","currentOffset","logEndOffset","lag","push","originalData","preparedTableCells","TableHeader","TableBody","Checkbox","isChecked","checked","getConsumerGroups","page","groupIdFilter","order","SortByDirection","orderKey","accessToken","getToken","api","GroupsApi","Configuration","basePath","undefined","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","consumerGroupResetOffset","resetConsumerGroupOffset","isAxiosError","error"],"sourceRoot":""}