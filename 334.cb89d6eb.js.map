{"version":3,"file":"334.cb89d6eb.js","mappings":"oGACAA,EAAQC,YAAa,EACrBD,EAAQE,oBAAsB,CAC5BC,KAAM,gBACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,0HACTC,QAAS,EACTC,QAAS,GAEXR,EAAQS,cAAgB,oBAAoCT,EAAQE,qBACpEF,EAAiB,QAAIA,EAAQS,e,4FCYhBC,EAAyD,SAAC,G,IACrEC,EAAE,KACFC,EAAQ,WACRC,EAAK,QACLC,EAAK,QACLC,EAAS,YACTC,EAAc,iBACdb,EAAI,OACJc,EAAY,eACZC,EAAsB,yBAEhB,GAAsB,IAAAC,YAArBC,EAAM,KAAEC,EAAS,KAqClBC,EACJ,kBAAC,EAAAC,eAAc,CACbZ,GAAIC,EACJY,SAtCa,SAACJ,GAChBC,EAAUD,IAsCRK,gBAAiB,WAZI,WACvB,GAAIP,EAAwB,CAC1B,IAAMQ,EAAiBb,MAAAA,OAAK,EAALA,EAAOc,QAAO,SAACC,GAAS,OAAAA,EAAKd,QAAUA,KAAO,GACrE,OAAOY,MAAAA,OAAc,EAAdA,EAAgBG,MAEzB,OAAOf,EASJgB,IAIL,OACE,kBAAC,EAAAC,SAAQ,CACP5B,KAAMA,EACNQ,GAAIA,EACJqB,SA7Ca,SAACC,GAChB,IAAMnB,EAAgBmB,EAAEC,cAAcC,YAClCnB,GAAkBF,IACpBmB,EAAEG,OAAOjC,KAAOA,EAChBa,EAAeF,EAAMuB,cAAeJ,IAEtCZ,GAAU,SAACD,GAAW,OAACA,MAwCrBkB,OAAQhB,EACRF,OAAQA,EAAM,aACFL,EACZwB,cAxCa,SAACC,GAChB,IAAM3B,EAAQ2B,EAAQC,KAAI,SAACC,GACjB,IAAAC,EAAsBD,EAAM,IAAvB5B,EAAiB4B,EAAM,MAAhBb,EAAUa,EAAM,MAEpC,OACE,kBAAC,EAAAE,aAAY,CAACD,IAAKA,EAAK7B,MAAOA,GAC5Be,GAASf,MAKhB,OAAOD,EA6BUgC,CAAShC,GACxBI,aAAcA,M,+ECzEP6B,EAA4D,SAAC,G,IACxEC,EAAQ,WACRC,EAAS,YACTC,EAAO,UACPC,EAAU,aACVC,EAAS,YACTC,EAAe,kBACfC,EAAS,YACTC,EAAU,aACVC,EAAiB,oBACjBC,EAAU,aAIV,OACE,kBAAC,EAAAC,UAAS,CACRR,QAASA,EACTpB,MAAOqB,EACPG,UAAWA,EACXC,WAAYA,EACZC,kBAAmBA,EACnBC,WAAYA,EACZE,UACE,kBAAC,EAAAC,QAAO,CACNC,cAAe,6BAAMZ,GACrBa,YAAa,6BAAMV,IAEnB,yCACcC,EACZU,QAjBkB,SAACC,GAAU,OAAAA,EAAMC,kBAkBnCC,UAAU,+BAEV,kBAAC,KAAQ,CAACC,iBAAe,OAK9BnB,K,8RC1BDoB,EAAgE,SAAC,G,IACrE3C,EAAQ,WACRJ,EAAM,SACNgD,EAAa,gBACbC,EAAS,YACTC,EAAY,eACZnE,EAAI,OAkBEoE,EAAkB,SAACpE,EAAcqE,G,MACjC1D,EACE2D,GAAY,QAAoBtE,GAChCuE,EACU,iBAAdD,EACI,8BACA,8BAEW,MAAbD,EACF1D,EAAQ6D,OAAON,EAAUI,IAAc,EACjB,MAAbD,IACT1D,EAAQ6D,OAAON,EAAUI,IAAc,GAGzCH,EAAa,EAAD,KACPD,KAAS,MACXI,GAAY3D,EAAK,EACjB4D,GAAoB,YAAyB,MAkBlD,OACE,yBAAKT,UAAU,+BACb,kBAAC,EAAAW,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,YAAW,CACV3E,KAAMA,EACN4E,QAAS,WAAM,OAAAR,EAAgBpE,EAAM,MACrC6E,OAAQ,WAAM,OAAAT,EAAgBpE,EAAM,MACpCW,MAAO6D,OAAON,GAAU,QAAoBlE,KAC5C8E,SAAU,SAAClB,GAAU,OAvBL,SACxBA,EACA5D,G,MAEQW,EAAUiD,EAAM7B,cAAa,MAC/BgD,EAAaC,KAAKC,MAAMT,OAAO7D,IAAQuE,WACvCZ,GAAY,QAAoBtE,GAEtCmE,EAAa,EAAD,KACPD,KAAS,MACXI,GAAYS,EAAU,KAaII,CAAkBvB,EAAO5D,IAC9CoF,aAAc,CAAEpF,KAAI,GACpBqF,cAAe,CAAErF,KAAI,GACrBsF,IAAK,KAGT,kBAAC,EAAAZ,SAAQ,KACP,kBAAC,EAAAa,OAAM,CACLC,QAAS,EAAAC,cAAA,OAAoB,aAClB,eACXpE,SAAUA,EACVQ,SAAU,SAAC6D,EAAGC,GAAc,OAvER,SAC5BrB,EACAqB,G,MAEAxB,EAAa,EAAD,KACPD,KAAS,MACX,WAAG,QAAoBI,GAAU,UAAUqB,EAC5C,EAAAC,4BACED,IAAc,SACV,YACAzB,EAAU0B,4BAA2B,KAG7CvE,GAAS,GA0D2BwE,CAAsB7F,EAAM2F,IACxDG,WAAY5B,EAAU,WAAG,QAAoBlE,GAAK,UAClDiB,OAAQA,GAEPgD,MAAAA,OAAa,EAAbA,EAAe3B,KAAI,SAACyD,GAAM,OACzB,kBAAC,EAAAC,aAAY,CACXxD,IAAKuD,EAAEvD,IACP7B,MAAOoF,EAAEpF,MACTsF,cAAeF,EAAEE,yB,oIC/G3BC,EAAkC,WAC9B,IAAAC,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAC,aAAY,CAACb,QAAQ,UACpB,kBAAC,EAAAc,UAAS,CACRC,YAAU,EACV7E,MAAOyE,EAAE,yBACTK,mBAAmB,kCACnBC,MAAO,CAAEC,SAAU,UACnBC,QAAS,KAET,kBAAC,EAAAC,cAAa,CAACpE,IAAK,EAAGqE,KAAK,uBACzBV,EAAE,6BAEL,kBAAC,EAAAS,cAAa,CAACpE,IAAK,EAAGqE,KAAK,aACzBV,EAAE,mBAEL,kBAAC,EAAAS,cAAa,CAACpE,IAAK,EAAGqE,KAAK,QACzBV,EAAE,cAEL,kBAAC,EAAAS,cAAa,CAACpE,IAAK,EAAGqE,KAAK,gBACzBV,EAAE,sBAEL,kBAAC,EAAAS,cAAa,CAACpE,IAAK,EAAGqE,KAAK,YACzBV,EAAE,mBAEL,kBAAC,EAAAS,cAAa,CAACpE,IAAK,EAAGqE,KAAK,UACzBV,EAAE,gBAEL,kBAAC,EAAAS,cAAa,CAACpE,IAAK,EAAGqE,KAAK,UACzBV,EAAE,mB,4RCWPW,EAAsD,SAAC,G,IAC3DC,EAAQ,WACR7C,EAAS,YACTC,EAAY,eACZ6C,EAAU,aACVC,EAAgB,mBAChBC,EAAW,cACXC,EAAc,iBACdC,EAAiB,oBACjBC,EAAc,iBACdC,EAAU,aACVC,EAAO,UAECpB,GAAM,IAAAC,kBAAgB,EACtBoB,GAAiB,SAAkB,aAGrC,GACJ,IAAAxG,UAA2B,EAAAyG,iBAAA,SADtBC,EAAmB,KAAEC,EAAsB,KAE5C,GACJ,IAAA3G,YADK4G,EAAyB,KAAEC,EAA4B,KAExD,GACJ,IAAA7G,YADK8G,EAAyB,KAAEC,EAA4B,MAI9D,IAAAC,YAAU,WACHjB,GACHC,EAAW9C,EAAUlE,MAEvBiI,EAAgB/D,EAAUlE,QACzB,IAEH,IAAMiI,EAAkB,SAACtH,GACvB,IAAMuH,EAAeV,EAAa7G,GAC9BuH,GACFf,EAAee,GACfd,EAAkB,EAAAK,iBAAA,QAElBL,EAAkB,EAAAK,iBAAA,UAqBhBU,EAA6B,SAACxH,GAClCwD,EAAa,EAAD,KACPD,GAAS,CACZ,kBACEvD,IAAU,gBACVA,IAAU,YACNuD,EAAU,mBACV,KAAyBvD,GAC/ByH,4BAA6BzH,MAY3B0H,EAA6B,SAAC1H,GAClCwD,EAAa,EAAD,KACPD,GAAS,CACZ,eACEvD,IAAU,gBACVA,IAAU,YACNuD,EAAU,gBACV,KAAyBvD,GAC/BiF,4BAA6BjF,MAiC3ByD,EAAkB,SAACpE,EAAcqE,G,MACjC1D,EACE2D,GAAY,QAAatE,GAEd,MAAbqE,EACF1D,EAAQ6D,OAAON,EAAUI,IAAc,EACjB,MAAbD,IACT1D,EAAQ6D,OAAON,EAAUI,IAAc,GAGzCH,EAAa,EAAD,KACPD,KAAS,MACXI,GAAY3D,EAAK,KAGfoG,GA7FuB,SAAC1C,GAC7B,IAAI1D,EACa,MAAb0D,EACF1D,EAAQ6D,OAAON,EAAUoE,eAAiB,EACpB,MAAbjE,IACT1D,EAAQ6D,OAAON,EAAUoE,eAAiB,GAGxCrB,GAAoBtG,EAAQsG,GAC9BU,EAAuB,EAAAF,iBAAA,SACvBH,GAAW,KAEXK,EAAuB,EAAAF,iBAAA,SACvBH,GAAW,IAiFXiB,CAAsBlE,IAIpBmE,EACJ,kBAACxE,EAAA,EAAsB,CACrBvD,SAAS,uCACTT,KAAK,eACLkE,UAAWA,EACXC,aAAcA,EACd9C,SA3E0B,SAACJ,GAC7B4G,EAA6B5G,IA2E3BA,OAAQ2G,EACR3D,cAAe,MAIbwE,EACJ,kBAACzE,EAAA,EAAsB,CACrBvD,SAAS,4CACTT,KAAK,kBACLkE,UAAWA,EACXC,aAAcA,EACd9C,SAnF0B,SAACJ,GAC7B8G,EAA6B9G,IAmF3BA,OAAQ6G,EACR7D,cAAe,MAInB,OACE,kBAAC,EAAAyE,YAAW,CACVC,MAAOxC,EAAE,4BACT3F,GAAG,qBACHoI,aAAc,MAEd,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgBlF,UAAU,gBACxCqC,EAAE,4BAGNY,EACC,kBAACpE,EAAA,EAAoB,CACnBE,UAAWsD,EAAE,oBACbrD,QAAQ,oBACRC,WAAYoD,EAAE,oBACdnD,UAAWmD,EAAE,gCACblD,gBAAgB,iCAChBG,kBAAmB8D,EACnBhE,UAAWmE,EACXhE,YAAY,EACZF,WAAYgD,EAAE,iCAEd,kBAAC,EAAA8C,UAAS,CACR5F,YAAU,EACV6F,KAAK,OACL1I,GAAG,oBACHR,KAAK,OACLW,MAAOuD,EAAUlE,KACjB8E,SAtGoB,SAC5BnE,EACAiD,G,MAEAqE,EAAgBtH,GACR,IAAM2D,EAAcV,EAAM7B,cAAa,KAC/CoC,EAAa,EAAD,KAAMD,KAAS,OAAG,QAAaI,IAAa3D,EAAK,MAiGrDe,MAAOyE,EAAE,oBACTgD,YAAahD,EAAE,oBACfjD,UAAWmE,KAIf,kBAAC+B,EAAA,EAAoB,CACnBtG,QAAQ,aACRuG,aAAa,oBACbtG,WAAW,OACXuG,WAAYpF,EAAUlE,KACtBuJ,YAAapD,EAAE,gCACfqD,cAAerD,EAAE,sBAIrB,kBAACxD,EAAA,EAAoB,CACnBG,QAAQ,0BACRC,WAAW,aACXF,UAAWsD,EAAE,oBACbnD,UAAWmD,EAAE,gCACblD,gBAAgB,iCAChBC,UAAWwE,EACXvE,WAAYoE,EAAUpB,EAAE,iCAA8BsD,GAEtD,kBAAC,EAAA9E,YAAW,CACVnE,GAAG,0BACHkJ,UAAU,iBACV5E,SA1HmB,SAAClB,G,MACpB,EAA6BA,EAAM7B,cAA3BuC,EAAS,OAAE3D,EAAK,QAC1BgJ,EAAiBnF,OAAO7D,GACxBsG,IACE0C,EAAiB1C,IACnBU,EAAuB,EAAAF,iBAAA,SACvBH,GAAW,IAGTqC,EAAiB1C,GACnB0C,EAAiB1C,EACjBU,EAAuB,EAAAF,iBAAA,SACvBH,GAAW,IACFqC,EAAiB,OAC1BA,EAAiB,OAGrBxF,EAAa,EAAD,KAAMD,KAAS,OAAG,QAAaI,IAAaqF,EAAc,MA0GhE9E,OAAQ,WAAM,OAAAT,EAAgB,iBAAkB,MAChDQ,QAAS,WAAM,OAAAR,EAAgB,iBAAkB,MACjDzD,MAAO6D,OAAON,EAAUoE,eACxBlD,aAAc,CAAEpF,KAAM,kBACtBqF,cAAe,CAAErF,KAAM,kBACvBsF,IAAK2B,EACL2C,IAAK,QAIT,kBAACR,EAAA,EAAoB,CACnBtG,QAAQ,WACRuG,aAAclD,EAAE,kBAChBpD,WAAYoD,EAAE,kBACdmD,WAAYvC,EAAW,KAAmB7C,EAAU2F,kBACpDN,YAAapD,EAAE,8BACfqD,cAAerD,EAAE,oBAEnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,sBACRuG,aAAa,mCACbtG,WAAW,2BACXuG,WAAY,KACZC,YAAapD,EAAE,yCACfqD,cAAerD,EAAE,+BAEnB,kBAACxD,EAAA,EAAoB,CACnBG,QAAQ,YACRC,WAAW,iBACXF,UAAWsD,EAAE,wBACbnD,UAAWmD,EAAE,oCACblD,gBAAgB,sCAEhB,kBAAC,EAAA6G,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,MAAK,CACJC,UACE/F,EAAU0B,8BACR,UACF1B,EAAU0B,8BACR,WACF1B,EAAU0B,8BACR,YAEJ5F,KAAK,wBACL8E,SAAU,WACR,OAAAuD,EAA2B,cAE7B3G,MAAO8G,EACP1E,UAAU,sCAAqC,aACpC,kBACXtD,GAAG,wBACHG,MAAO,cAET,kBAAC,EAAAqJ,MAAK,CACJC,UACE/F,EAAU0B,8BACV,eAEF5F,KAAK,2BACL8E,SAAU,WACR,OAAAuD,EAA2B,iBAE7B3G,MAAM,YAAW,aACN,YACXlB,GAAG,2BACHG,MAAO,mBAIb,kBAACgC,EAAA,EAAoB,CACnBG,QAAQ,iBACRC,WAAW,iBACXF,UAAWsD,EAAE,wBACbnD,UAAWmD,EAAE,oCACblD,gBAAgB,sCAEhB,kBAAC,EAAA6G,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,MAAK,CACJC,UACE/F,EAAUkE,8BACV,YAEFpI,KAAK,wBACL8E,SAAU,WACR,OAAAqD,EAA2B,cAE7BzG,MAAO+G,EACP3E,UAAU,sCAAqC,aACpC,cACXtD,GAAG,wBACHG,MAAO,cAET,kBAAC,EAAAqJ,MAAK,CACJC,UACE/F,EAAUkE,8BACV,eAEFpI,KAAK,2BACL8E,SAAU,WACR,OAAAqD,EAA2B,iBAE7BzG,MAAM,YAAW,aACN,YACXlB,GAAG,2BACHG,MAAO,qBCtWbuJ,EAAoB,WAChB,IAAA/D,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAsC,YAAW,CAACC,MAAOxC,EAAE,kBAAmB3F,GAAG,WAAWoI,aAAc,MACnE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgBlF,UAAU,gBACxCqC,EAAE,gCAIP,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,mBACRuG,aAAclD,EAAE,0BAChBpD,WAAYoD,EAAE,0BACdmD,WAAY,KACZC,YAAapD,EAAE,sCACfqD,cAAerD,EAAE,4BAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,yBACRuG,aAAclD,EAAE,gCAChBpD,WAAYoD,EAAE,gCACdmD,WAAY,IACZC,YAAapD,EAAE,4CACfqD,cAAerD,EAAE,kCAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,6BACRuG,aAAclD,EAAE,oCAChBpD,WAAYoD,EAAE,oCACdmD,WAAY,IACZC,YAAapD,EAAE,gDACfqD,cAAerD,EAAE,sCAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,mBACRuG,aAAclD,EAAE,0BAChBpD,WAAYoD,EAAE,0BACdmD,WAAY,WACZC,YAAapD,EAAE,sCACfqD,cAAerD,EAAE,4BAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,iBACRuG,aAAclD,EAAE,wBAChBpD,WAAYoD,EAAE,wBACdmD,WAAY,UACZC,YAAapD,EAAE,oCACfqD,cAAerD,EAAE,4B,2NC1CnBgE,EAA0B,SAAC,G,IAAEjG,EAAS,YAAEC,EAAY,eAChDgC,GAAM,IAAAC,kBAAgB,EAExBgE,EAA0C,CAC9C,CACE5H,IAAK,UACL7B,MAAO,UACPe,MAAOyE,EAAE,kBACTkE,YAAY,GAEd,CACE7H,IAAK,SACL7B,MAAO,SACPe,MAAOyE,EAAE,iBACTkE,YAAY,GAEd,CACE7H,IAAK,iBACL7B,MAAO,iBACPe,MAAO,UAAGyE,EAAE,kBAAiB,YAAIA,EAAE,kBACnCkE,YAAY,IAShB,OACE,kBAAC,EAAA3B,YAAW,CAACC,MAAOxC,EAAE,aAAc3F,GAAG,MAAMoI,aAAc,MACzD,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiB7C,EAAE,2BACpC,kBAAC,EAAA2C,KAAI,CAACC,UAAW,EAAAC,aAAA,OACd7C,EAAE,iCAIP,kBAACxD,EAAA,EAAoB,CACnBG,QAAQ,iBACRC,WAAYoD,EAAE,wBACdtD,UAAWsD,EAAE,wBACbnD,UAAWmD,EAAE,oCACblD,gBAAiBkD,EAAE,yBAEnB,kBAAC5F,EAAA,EAAkB,CACjBC,GAAG,mCACHC,SAAS,yCACTG,UAAWuF,EAAE,wBACbtF,eAzBe,SAACF,EAAeiD,G,MACvBU,EAAcV,EAAM3B,OAAM,KACxCkC,EAAa,OAAKD,KAAS,OAAG,QAAoBI,IAAa3D,EAAK,MAwB9DD,MAAO0J,EACPpK,KAAK,iBACLW,MAAOuD,EAAU,mBAAqB,GACtCnD,wBAAwB,KAI5B,kBAACqI,EAAA,EAAoB,CACnBtG,QAAQ,wBACRuG,aAAclD,EAAE,+BAChBpD,WAAYoD,EAAE,+BACdmD,WAAY,KACZC,YAAapD,EAAE,2CACfqD,cAAerD,EAAE,iCAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,sBACRuG,aAAclD,EAAE,6BAChBpD,WAAYoD,EAAE,6BACdmD,WAAY,KACZC,YAAapD,EAAE,yCACfqD,cAAerD,EAAE,+BAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,sCACRuG,aAAclD,EAAE,iCAChBpD,WAAYoD,EAAE,iCACdmD,WAAY,KACZC,YAAapD,EAAE,6CACfqD,cAAerD,EAAE,qCCjGnBmE,EAAwB,WACpB,IAAAnE,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAsC,YAAW,CACVC,MAAOxC,EAAE,qBACT3F,GAAG,cACHoI,aAAc,MAEd,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,GACd7C,EAAE,kCACH,kBAAC,EAAA2C,KAAI,CAACC,UAAW,EAAAC,aAAA,OACd7C,EAAE,0CAKT,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,0BACRuG,aAAclD,EAAE,iCAChBpD,WAAYoD,EAAE,iCACdmD,WAAYnD,EAAE,mBACdoD,YAAapD,EAAE,6CACfqD,cAAerD,EAAE,qCClBnBoE,EAAoB,WAChB,IAAApE,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAsC,YAAW,CAACC,MAAOxC,EAAE,kBAAmB3F,GAAG,UAAUoI,aAAc,MAClE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgBlF,UAAU,gBACxCqC,EAAE,gCAIP,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,mBACRuG,aAAclD,EAAE,0BAChBpD,WAAYoD,EAAE,0BACdmD,WAAY,KACZC,YAAapD,EAAE,0BACfqD,cAAerD,EAAE,wCAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,gBACRuG,aAAclD,EAAE,uBAChBpD,WAAYoD,EAAE,uBACdmD,WAAY,KACZC,YAAapD,EAAE,mCACfqD,cAAerD,EAAE,yBAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,sBACRuG,aAAclD,EAAE,6BAChBpD,WAAYoD,EAAE,6BACdmD,WAAY,KACZC,YAAapD,EAAE,yCACfqD,cAAerD,EAAE,+BAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,oBACRuG,aAAclD,EAAE,2BAChBpD,WAAYoD,EAAE,2BACdmD,WAAY,KACZC,YAAapD,EAAE,uCACfqD,cAAerD,EAAE,6BAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,gCACRuG,aAAclD,EAAE,uCAChBpD,WAAYoD,EAAE,uCACdmD,WAAYnD,EAAE,mBACdoD,YAAapD,EAAE,mDACfqD,cAAerD,EAAE,2CCvDnBqE,EAA8B,WAC1B,IAAArE,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAsC,YAAW,CAACC,MAAOxC,EAAE,eAAgB3F,GAAG,QAAQoI,aAAc,MAC7D,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgBlF,UAAU,gBACxCqC,EAAE,8BAIP,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,sBACRuG,aAAclD,EAAE,6BAChBpD,WAAYoD,EAAE,6BACdmD,WAAY,KACZC,YAAapD,EAAE,yCACfqD,cAAerD,EAAE,+BAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,qBACRuG,aAAclD,EAAE,4BAChBpD,WAAYoD,EAAE,4BACdmD,WAAY,KACZC,YAAapD,EAAE,wCACfqD,cAAerD,EAAE,gCC1BnBsE,EAAkB,WACd,IAAAtE,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAsC,YAAW,CAACC,MAAOxC,EAAE,eAAgB3F,GAAG,QAAQoI,aAAc,MAC7D,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgBlF,UAAU,gBACxCqC,EAAE,8BAIP,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,0BACRuG,aAAclD,EAAE,iCAChBpD,WAAYoD,EAAE,iCACdmD,WAAY,KACZC,YAAapD,EAAE,6CACfqD,cAAerD,EAAE,mCAGnB,kBAACiD,EAAA,EAAoB,CACnBtG,QAAQ,sBACRuG,aAAclD,EAAE,6BAChBpD,WAAYoD,EAAE,6BACdmD,WAAY,KACZC,YAAapD,EAAE,yCACfqD,cAAerD,EAAE,iC,60CCJZuE,EACX,SAAC,G,IACC3D,EAAQ,WACR4D,EAAS,YACTC,EAAY,eACZ1G,EAAS,YACTC,EAAY,eACZ0G,EAAa,gBAEPC,GAAS,IAAAC,YAAW,KAClBC,GAAc,IAAAC,YAA2C,UACzD9E,GAAM,IAAAC,kBAAgB,EACxB8E,EAAwB/E,EAAXY,EAAa,qBAA0B,eAGpD,GAAsC,IAAA/F,UAC1C,EAAAyG,iBAAA,SADKJ,EAAc,KAAED,EAAiB,KAGlC,GAAgC,IAAApG,UAAS,IAAxCkG,EAAW,KAAEC,EAAc,KAC5B,GAA4B,IAAAnG,WAAkB,GAA7CmK,EAAS,KAAEC,EAAY,KACxB,GAAwB,IAAApK,WAAkB,GAAzCuG,EAAO,KAAED,EAAU,KACpB,GAA0C,IAAAtG,UAE9CwD,OAAON,EAAUoE,gBAFZrB,EAAgB,KAAEoE,EAAmB,MAG5C,IAAArK,UAAiBkD,EAAU,sBAAwB,QAEnD,IAAM8C,EAAa,SAAOsE,GAAS,0C,gEAEd,O,sBAAA,IAAM,QAASA,EAAWR,I,cAArCS,EAAW,YAEXxE,GACFI,EAAehB,EAAE,uBAAwB,CAAEnG,KAAMsL,KACjDlE,EAAkB,EAAAK,iBAAA,OAClB2D,GAAa,IAEbC,EAAwC,QAApB,EAAAE,MAAAA,OAAQ,EAARA,EAAUC,kBAAU,eAAEC,S,+BAI1CC,OAAI,EACJ,IAAO,OAAa,KACtBA,EAAmB,QAAZ,IAAIC,gBAAQ,eAAEC,KAAKF,MAExB3E,GAAqB,MAAT2E,IACdtE,EAAkB,EAAAK,iBAAA,SAClB2D,GAAa,GACbT,K,+BAyBN,OACE,kBAAC,EAAAkB,YAAW,CAACC,QAAS,CAAEC,QAAS,cAC/B,kBAAC,EAAAC,QAAO,CAACjC,WAAS,GAChB,kBAAC7D,EAAqB,MACtB,kBAAC,EAAA+F,eAAc,KACb,kBAAC,EAAAC,UAAS,CAACC,mBAAiB,EAAC3L,GAAG,qBAC9B,kBAAC,EAAAqL,YAAW,CAACC,QAAS,CAAEC,QAAS,cAC/B,kBAAC,EAAAK,KAAI,KACH,kBAACtF,EAAiB,CAChBC,SAAUA,EACV7C,UAAWA,EACXC,aAAcA,EACd6C,WAAYA,EACZC,iBAAkBA,EAClBC,YAAaA,EACbC,eAAgBA,EAChBC,kBAAmBA,EACnBC,eAAgBA,EAChBC,WAAYA,EACZC,QAASA,IAEX,kBAAC2C,EAAO,MACR,kBAACC,EAAG,CAACjG,UAAWA,EAAWC,aAAcA,IACzC,kBAACmG,EAAW,MACZ,kBAACC,EAAO,MACR,kBAACC,EAAiB,MAClB,kBAACC,EAAK,OAER,kBAAC,EAAA4B,YAAW,CAACvI,UAAU,2BACrB,kBAAC,EAAAwI,OAAM,CACLnB,UAAWA,GAAaN,EACxBlH,QAnDE,WACXoD,EASC7C,EAAUlE,KAAKyL,OAAS,GAC1BtE,EAAehB,EAAE,mBACjBiB,EAAkB,EAAAK,iBAAA,SAElB2D,GAAa,GACbpE,EAAW9C,EAAUlE,OAbnBuH,EACFyD,EAAU,EAAAuB,UAAA,sBAAiC,CACzCC,YAAa7B,IAGfA,KA6CUnF,QAAQ,UAAS,cAEfuB,EACI,kCACA,2BAENsD,WAA+B,YAAnBhD,GAEX6D,GAEH,kBAAC,EAAAoB,OAAM,CACL3I,QAASiH,EACTpF,QAAQ,OAAM,cAEZuB,EACI,kCACA,8BAGLZ,EAAE,0B,yCCvJvB,IAAMsG,EAA8C,CAClD,CAAEjK,IAAK,OAAQ7B,MAAO,OAAQsF,eAAe,GAC7C,CAAEzD,IAAK,QAAS7B,MAAO,SACvB,CAAE6B,IAAK,UAAW7B,MAAO,WACzB,CAAE6B,IAAK,UAAW7B,MAAO,WACzB,CAAE6B,IAAK,eAAgB7B,MAAO,iBAG1B+L,EAA8C,CAClD,CAAElK,IAAK,QAAS7B,MAAO,QAASsF,eAAe,GAC/C,CAAEzD,IAAK,YAAa7B,MAAO,aAC3B,CAAE6B,IAAK,YAAa7B,MAAO,aAC3B,CAAE6B,IAAK,YAAa7B,MAAO,aAC3B,CAAE6B,IAAK,YAAa7B,MAAO,e,gDClBhBgM,EAAmB,WAGtB,IAAAxG,GAAM,IAAAC,kBAAgB,EAE9B,MAAO,CACLoB,aAAc,SAACxH,GACb,IAAM4M,EAAiB,IAAIC,OAAO,qBAClC,OAAI7M,EAAKyL,SAAWmB,EAAeE,KAAK9M,GAC/BmG,EAAE,gCACAnG,EAAKyL,OAAS,IAChBtF,EAAE,kCACS,MAATnG,GAAyB,OAATA,EAClBmG,EAAE,oCADJ","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./src/components/DropdownWithToggle/DropdownWithToggle.tsx","webpack://kafka-ui/./src/components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/modules/Topics/components/CustomRetentionMessage/CustomRetentionMessage.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/TopicAdvanceJumpLinks.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/CoreConfiguration.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/Message.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/Log.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/Replication.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/Cleanup.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/TopicAdvanceIndex.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/Flush.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/TopicAdvanceConfig.tsx","webpack://kafka-ui/./src/modules/Topics/utils/data-options.ts","webpack://kafka-ui/./src/modules/Topics/utils/topicNameValidation.ts"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n  isLabelAndValueNotSame?: boolean;\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n  menuAppendTo,\n  isLabelAndValueNotSame,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value: string = e.currentTarget.textContent;\n    if (onSelectOption && value) {\n      e.target.name = name;\n      onSelectOption(value.toLowerCase(), e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const getSelectedValue = () => {\n    if (isLabelAndValueNotSame) {\n      const filteredOption = items?.filter((item) => item.value === value)[0];\n      return filteredOption?.label;\n    }\n    return value;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {getSelectedValue()}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n      menuAppendTo={menuAppendTo}\n    />\n  );\n};\n","import { FormGroup, Popover, ValidatedOptions } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\nexport type FormGroupWithPopoverProps = {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel?: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n  validated?: ValidatedOptions;\n  helperText?: string;\n  helperTextInvalid?: string;\n  isRequired?: boolean;\n};\n\nexport const FormGroupWithPopover: React.FC<FormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n  validated,\n  helperText,\n  helperTextInvalid,\n  isRequired,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      validated={validated}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      isRequired={isRequired}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import React from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Select,\n  SelectProps,\n  SelectOption,\n  NumberInput,\n  NumberInputProps,\n  SelectVariant,\n  SelectOptionObject,\n} from '@patternfly/react-core';\nimport {\n  IAdvancedTopic,\n  kebabToDotSeparated,\n  SelectOptions,\n  RetentionTimeUnits,\n} from '@app/modules/Topics/utils';\n\nexport type CustomRetentionMessageProps = NumberInputProps &\n  SelectProps & {\n    id?: string;\n    selectOptions: SelectOptions[];\n    topicData: IAdvancedTopic;\n    name: string;\n    setTopicData: (data: IAdvancedTopic) => void;\n  };\n\nconst CustomRetentionMessage: React.FC<CustomRetentionMessageProps> = ({\n  onToggle,\n  isOpen,\n  selectOptions,\n  topicData,\n  setTopicData,\n  name,\n}) => {\n  const onSelectRetentionUnit = (\n    fieldName: string,\n    selection: string | SelectOptionObject\n  ) => {\n    setTopicData({\n      ...topicData,\n      [`${kebabToDotSeparated(fieldName)}.unit`]: selection,\n      selectedRetentionTimeOption:\n        selection !== RetentionTimeUnits.DAY\n          ? RetentionTimeUnits.CUSTOM\n          : topicData.selectedRetentionTimeOption,\n    });\n\n    onToggle(false);\n  };\n\n  const handleTouchSpin = (name: string, operator: string) => {\n    let value;\n    const fieldName = kebabToDotSeparated(name);\n    const selectedRetention =\n      fieldName === 'retention.ms'\n        ? 'selectedRetentionTimeOption'\n        : 'selectedRetentionSizeOption';\n\n    if (operator === '+') {\n      value = Number(topicData[fieldName]) + 1;\n    } else if (operator === '-') {\n      value = Number(topicData[fieldName]) - 1;\n    }\n\n    setTopicData({\n      ...topicData,\n      [fieldName]: value,\n      [selectedRetention]: RetentionTimeUnits.CUSTOM,\n    });\n  };\n\n  const onChangeTouchSpin = (\n    event: React.FormEvent<HTMLInputElement>,\n    name: string\n  ) => {\n    const { value } = event.currentTarget;\n    const truncValue = Math.trunc(Number(value)).toString();\n    const fieldName = kebabToDotSeparated(name);\n\n    setTopicData({\n      ...topicData,\n      [fieldName]: truncValue,\n    });\n  };\n\n  return (\n    <div className='kafka-ui--radio__parameters'>\n      <Flex>\n        <FlexItem>\n          <NumberInput\n            name={name}\n            onMinus={() => handleTouchSpin(name, '-')}\n            onPlus={() => handleTouchSpin(name, '+')}\n            value={Number(topicData[kebabToDotSeparated(name)])}\n            onChange={(event) => onChangeTouchSpin(event, name)}\n            plusBtnProps={{ name }}\n            minusBtnProps={{ name }}\n            min={0}\n          />\n        </FlexItem>\n        <FlexItem>\n          <Select\n            variant={SelectVariant.single}\n            aria-label='Select Input'\n            onToggle={onToggle}\n            onSelect={(_, selection) => onSelectRetentionUnit(name, selection)}\n            selections={topicData[`${kebabToDotSeparated(name)}.unit`]}\n            isOpen={isOpen}\n          >\n            {selectOptions?.map((s) => (\n              <SelectOption\n                key={s.key}\n                value={s.value}\n                isPlaceholder={s.isPlaceholder}\n              />\n            ))}\n          </Select>\n        </FlexItem>\n      </Flex>\n    </div>\n  );\n};\n\nexport { CustomRetentionMessage };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SidebarPanel, JumpLinks, JumpLinksItem } from '@patternfly/react-core';\n\nconst TopicAdvanceJumpLinks: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <SidebarPanel variant='sticky'>\n      <JumpLinks\n        isVertical\n        label={t('topic.jump_to_section')}\n        scrollableSelector='.pf-c-page__main[tabindex=\"-1\"]'\n        style={{ position: 'sticky' }}\n        offset={-164} // for header\n      >\n        <JumpLinksItem key={0} href='#core-configuration'>\n          {t('topic.core_configuration')}\n        </JumpLinksItem>\n        <JumpLinksItem key={1} href='#messages'>\n          {t('topic.messages')}\n        </JumpLinksItem>\n        <JumpLinksItem key={2} href='#log'>\n          {t('topic.log')}\n        </JumpLinksItem>\n        <JumpLinksItem key={3} href='#replication'>\n          {t('topic.replication')}\n        </JumpLinksItem>\n        <JumpLinksItem key={4} href='#cleanup'>\n          {t('common.cleanup')}\n        </JumpLinksItem>\n        <JumpLinksItem key={5} href='#index'>\n          {t('topic.index')}\n        </JumpLinksItem>\n        <JumpLinksItem key={6} href='#flush'>\n          {t('topic.flush')}\n        </JumpLinksItem>\n      </JumpLinks>\n    </SidebarPanel>\n  );\n};\n\nexport { TopicAdvanceJumpLinks };\n","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  NumberInput,\n  Stack,\n  Radio,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { FormGroupWithPopover, TextWithLabelPopover } from '@app/components';\nimport { CustomRetentionMessage } from '@app/modules/Topics/components';\nimport {\n  IAdvancedTopic,\n  RetentionSizeUnits,\n  RetentionTimeUnits,\n  kebabToCamel,\n  useValidateTopic,\n  unitsToBytes as RetentionSizeUnitToValue,\n  RetentionTimeUnitToValue,\n  retentionTimeSelectOptions,\n  retentionSizeSelectOptions,\n} from '@app/modules/Topics/utils';\nimport {\n  MAX_PARTITIONS,\n  DEFAULT_REPLICAS,\n  DEFAULT_MIN_INSYNC_REPLICAS,\n} from '@app/constant';\n\nexport type CoreConfigurationProps = {\n  isCreate?: boolean;\n  topicData: IAdvancedTopic;\n  setTopicData: (data: IAdvancedTopic) => void;\n  fetchTopic: (topic: string) => void;\n  initialPartition: number | undefined;\n  invalidText: string;\n  setInvalidText: (message: string) => void;\n  setTopicValidated: (error: ValidatedOptions) => void;\n  topicValidated: ValidatedOptions;\n  setWarning: (isWarning: boolean) => void;\n  warning: boolean;\n};\n\nconst CoreConfiguration: React.FC<CoreConfigurationProps> = ({\n  isCreate,\n  topicData,\n  setTopicData,\n  fetchTopic,\n  initialPartition,\n  invalidText,\n  setInvalidText,\n  setTopicValidated,\n  topicValidated,\n  setWarning,\n  warning,\n}) => {\n  const { t } = useTranslation();\n  const { validateName } = useValidateTopic();\n\n  //states\n  const [partitionsValidated, setPartitionsValidated] =\n    useState<ValidatedOptions>(ValidatedOptions.default);\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] =\n    useState<boolean>();\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] =\n    useState<boolean>();\n\n  //use effects\n  useEffect(() => {\n    if (!isCreate) {\n      fetchTopic(topicData.name);\n    }\n    validationCheck(topicData.name);\n  }, []);\n\n  const validationCheck = (value: string) => {\n    const errorMessage = validateName(value);\n    if (errorMessage) {\n      setInvalidText(errorMessage);\n      setTopicValidated(ValidatedOptions.error);\n    } else {\n      setTopicValidated(ValidatedOptions.default);\n    }\n  };\n\n  const partitionsWarnigCheck = (operator: string) => {\n    let value;\n    if (operator === '+') {\n      value = Number(topicData.numPartitions) + 1;\n    } else if (operator === '-') {\n      value = Number(topicData.numPartitions) - 1;\n    }\n\n    if (initialPartition && value > initialPartition) {\n      setPartitionsValidated(ValidatedOptions.warning);\n      setWarning(true);\n    } else {\n      setPartitionsValidated(ValidatedOptions.default);\n      setWarning(false);\n    }\n  };\n\n  const handleRetentionMessageSize = (value: string) => {\n    setTopicData({\n      ...topicData,\n      'retention.bytes':\n        value === RetentionSizeUnits.UNLIMITED ||\n        value === RetentionSizeUnits.CUSTOM\n          ? topicData['retention.bytes']\n          : RetentionSizeUnitToValue[value],\n      selectedRetentionSizeOption: value,\n    });\n  };\n\n  const onRetentionTimeToggle = (isOpen: boolean) => {\n    setIsRetentionTimeSelectOpen(isOpen);\n  };\n\n  const onRetentionSizeToggle = (isOpen: boolean) => {\n    setIsRetentionSizeSelectOpen(isOpen);\n  };\n\n  const handleRetentionMessageTime = (value: string) => {\n    setTopicData({\n      ...topicData,\n      'retention.ms':\n        value === RetentionTimeUnits.UNLIMITED ||\n        value === RetentionTimeUnits.CUSTOM\n          ? topicData['retention.ms']\n          : RetentionTimeUnitToValue[value],\n      selectedRetentionTimeOption: value,\n    });\n  };\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    validationCheck(value);\n    const { name: fieldName } = event.currentTarget;\n    setTopicData({ ...topicData, [kebabToCamel(fieldName)]: value });\n  };\n\n  const onPartitionsChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { name: fieldName, value } = event.currentTarget;\n    let partitionValue = Number(value);\n    if (initialPartition) {\n      if (partitionValue > initialPartition) {\n        setPartitionsValidated(ValidatedOptions.warning);\n        setWarning(true);\n      }\n\n      if (partitionValue < initialPartition) {\n        partitionValue = initialPartition;\n        setPartitionsValidated(ValidatedOptions.default);\n        setWarning(false);\n      } else if (partitionValue > MAX_PARTITIONS) {\n        partitionValue = MAX_PARTITIONS;\n      }\n    }\n    setTopicData({ ...topicData, [kebabToCamel(fieldName)]: partitionValue });\n  };\n\n  const handleTouchSpin = (name: string, operator: string) => {\n    let value;\n    const fieldName = kebabToCamel(name);\n\n    if (operator === '+') {\n      value = Number(topicData[fieldName]) + 1;\n    } else if (operator === '-') {\n      value = Number(topicData[fieldName]) - 1;\n    }\n\n    setTopicData({\n      ...topicData,\n      [fieldName]: value,\n    });\n\n    if (!isCreate) {\n      partitionsWarnigCheck(operator);\n    }\n  };\n\n  const retentionTimeInput = (\n    <CustomRetentionMessage\n      toggleId='core-config-retention-dropdowntoggle'\n      name='retention-ms'\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionTimeToggle}\n      isOpen={isRetentionTimeSelectOpen}\n      selectOptions={retentionTimeSelectOptions}\n    />\n  );\n\n  const retentionSizeInput = (\n    <CustomRetentionMessage\n      toggleId='core-config-retention-size-dropdowntoggle'\n      name='retention-bytes'\n      topicData={topicData}\n      setTopicData={setTopicData}\n      onToggle={onRetentionSizeToggle}\n      isOpen={isRetentionSizeSelectOpen}\n      selectOptions={retentionSizeSelectOptions}\n    />\n  );\n\n  return (\n    <FormSection\n      title={t('topic.core_configuration')}\n      id='core-configuration'\n      titleElement={'h2'}\n    >\n      <TextContent>\n        <Text component={TextVariants.p} className='section-info'>\n          {t('topic.core_config_info')}\n        </Text>\n      </TextContent>\n      {isCreate ? (\n        <FormGroupWithPopover\n          labelHead={t('topic.topic_name')}\n          fieldId='create-topic-name'\n          fieldLabel={t('topic.topic_name')}\n          labelBody={t('topic.topic_name_description')}\n          buttonAriaLabel='More info for topic name field'\n          helperTextInvalid={invalidText}\n          validated={topicValidated}\n          isRequired={true}\n          helperText={t('topic.topic_name_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='create-topic-name'\n            name='name'\n            value={topicData.name}\n            onChange={handleTextInputChange}\n            label={t('topic.topic_name')}\n            placeholder={t('topic.enter_name')}\n            validated={topicValidated}\n          />\n        </FormGroupWithPopover>\n      ) : (\n        <TextWithLabelPopover\n          fieldId='topic-name'\n          btnAriaLabel='topic detail name'\n          fieldLabel='Name'\n          fieldValue={topicData.name}\n          popoverBody={t('topic.topic_name_description')}\n          popoverHeader={t('topic.topic_name')}\n        />\n      )}\n\n      <FormGroupWithPopover\n        fieldId='create-topic-partitions'\n        fieldLabel='Partitions'\n        labelHead={t('topic.partitions')}\n        labelBody={t('topic.partitions_description')}\n        buttonAriaLabel='More info for partitions field'\n        validated={partitionsValidated}\n        helperText={warning ? t('topic.partitions_warning') : undefined}\n      >\n        <NumberInput\n          id='create-topic-partitions'\n          inputName='num-partitions'\n          onChange={onPartitionsChange}\n          onPlus={() => handleTouchSpin('num-partitions', '+')}\n          onMinus={() => handleTouchSpin('num-partitions', '-')}\n          value={Number(topicData.numPartitions)}\n          plusBtnProps={{ name: 'num-partitions' }}\n          minusBtnProps={{ name: 'num-partitions' }}\n          min={initialPartition}\n          max={MAX_PARTITIONS}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId='replicas'\n        btnAriaLabel={t('topic.replicas')}\n        fieldLabel={t('topic.replicas')}\n        fieldValue={isCreate ? DEFAULT_REPLICAS : topicData.replicationFactor}\n        popoverBody={t('topic.replicas_description')}\n        popoverHeader={t('topic.replicas')}\n      />\n      <TextWithLabelPopover\n        fieldId='min-insync-replicas'\n        btnAriaLabel='topic detail min-in-sync replica'\n        fieldLabel='Minimum in-sync replicas'\n        fieldValue={DEFAULT_MIN_INSYNC_REPLICAS}\n        popoverBody={t('topic.min_insync_replicas_description')}\n        popoverHeader={t('topic.min_insync_replicas')}\n      />\n      <FormGroupWithPopover\n        fieldId='retention'\n        fieldLabel='Retention time'\n        labelHead={t('topic.retention_time')}\n        labelBody={t('topic.retention_time_description')}\n        buttonAriaLabel='More info for retention time field'\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={\n              topicData.selectedRetentionTimeOption ===\n                RetentionTimeUnits.DAY ||\n              topicData.selectedRetentionTimeOption ===\n                RetentionTimeUnits.WEEK ||\n              topicData.selectedRetentionTimeOption ===\n                RetentionTimeUnits.CUSTOM\n            }\n            name='custom-retention-time'\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.CUSTOM)\n            }\n            label={retentionTimeInput}\n            className='kafka-ui--radio-label__number-input'\n            aria-label='custom duration'\n            id='custom-retention-time'\n            value={RetentionTimeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={\n              topicData.selectedRetentionTimeOption ===\n              RetentionTimeUnits.UNLIMITED\n            }\n            name='unlimited-retention-time'\n            onChange={() =>\n              handleRetentionMessageTime(RetentionTimeUnits.UNLIMITED)\n            }\n            label='Unlimited'\n            aria-label='Unlimited'\n            id='unlimited-retention-time'\n            value={RetentionTimeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n      <FormGroupWithPopover\n        fieldId='retention-size'\n        fieldLabel='Retention size'\n        labelHead={t('topic.retention_size')}\n        labelBody={t('topic.retention_size_description')}\n        buttonAriaLabel='More info for retention size field'\n      >\n        <Stack hasGutter>\n          <Radio\n            isChecked={\n              topicData.selectedRetentionSizeOption ===\n              RetentionSizeUnits.CUSTOM\n            }\n            name='custom-retention-size'\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.CUSTOM)\n            }\n            label={retentionSizeInput}\n            className='kafka-ui--radio-label__number-input'\n            aria-label='custom size'\n            id='custom-retention-size'\n            value={RetentionSizeUnits.CUSTOM}\n          />\n          <Radio\n            isChecked={\n              topicData.selectedRetentionSizeOption ===\n              RetentionSizeUnits.UNLIMITED\n            }\n            name='unlimited-retention-size'\n            onChange={() =>\n              handleRetentionMessageSize(RetentionSizeUnits.UNLIMITED)\n            }\n            label='Unlimited'\n            aria-label='Unlimited'\n            id='unlimited-retention-size'\n            value={RetentionSizeUnits.UNLIMITED}\n          />\n        </Stack>\n      </FormGroupWithPopover>\n    </FormSection>\n  );\n};\n\nexport { CoreConfiguration };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { TextWithLabelPopover } from '@app/components';\nimport {\n  DEFAULT_MAXIMUM_MESSAGE_BYTES,\n  DEFAULT_MESSAGE_TIMESTAMP_TYPE,\n  DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF,\n} from '@app/constant';\n\nconst Message: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormSection title={t('topic.messages')} id='messages' titleElement={'h2'}>\n      <TextContent>\n        <Text component={TextVariants.p} className='section-info'>\n          {t('topic.message_section_info')}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId='max-message-size'\n        btnAriaLabel={t('topic.max_message_size')}\n        fieldLabel={t('topic.max_message_size')}\n        fieldValue={DEFAULT_MAXIMUM_MESSAGE_BYTES}\n        popoverBody={t('topic.max_message_size_description')}\n        popoverHeader={t('topic.max_message_size')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='message-timestamp-type'\n        btnAriaLabel={t('topic.message_timestamp_type')}\n        fieldLabel={t('topic.message_timestamp_type')}\n        fieldValue={DEFAULT_MESSAGE_TIMESTAMP_TYPE}\n        popoverBody={t('topic.message_timestamp_type_description')}\n        popoverHeader={t('topic.message_timestamp_type')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='max-message-timestamp-diff'\n        btnAriaLabel={t('topic.max_message_timestamp_diff')}\n        fieldLabel={t('topic.max_message_timestamp_diff')}\n        fieldValue={DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF}\n        popoverBody={t('topic.max_message_timestamp_diff_description')}\n        popoverHeader={t('topic.max_message_timestamp_diff')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='compression-type'\n        btnAriaLabel={t('topic.compression_type')}\n        fieldLabel={t('topic.compression_type')}\n        fieldValue={'Producer'}\n        popoverBody={t('topic.compression_type_description')}\n        popoverHeader={t('topic.compression_type')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='message-format'\n        btnAriaLabel={t('topic.message_format')}\n        fieldLabel={t('topic.message_format')}\n        fieldValue={'2.7-IV2'}\n        popoverBody={t('topic.message_format_description')}\n        popoverHeader={t('topic.message_format')}\n      />\n    </FormSection>\n  );\n};\n\nexport { Message };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  FormGroupWithPopover,\n  DropdownWithToggle,\n  TextWithLabelPopover,\n  IDropdownOption,\n} from '@app/components';\nimport {\n  DEFAULT_MINIMUM_COMPACTION_LAG_TIME,\n  DEFAULT_DELETE_RETENTION_TIME,\n  DEFAULT_MIN_CLEANBLE_RATIO,\n} from '@app/constant';\nimport { IAdvancedTopic, kebabToDotSeparated } from '@app/modules/Topics/utils';\n\nexport type LogProps = {\n  topicData: IAdvancedTopic;\n  setTopicData: (data: IAdvancedTopic) => void;\n};\n\nconst Log: React.FC<LogProps> = ({ topicData, setTopicData }) => {\n  const { t } = useTranslation();\n\n  const cleanupPolicyOptions: IDropdownOption[] = [\n    {\n      key: 'compact',\n      value: 'compact',\n      label: t('common.compact'),\n      isDisabled: false,\n    },\n    {\n      key: 'delete',\n      value: 'delete',\n      label: t('common.delete'),\n      isDisabled: false,\n    },\n    {\n      key: 'compact-delete',\n      value: 'compact,delete',\n      label: `${t('common.compact')},${t('common.delete')}`,\n      isDisabled: false,\n    },\n  ];\n\n  const onSelectOption = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    setTopicData({ ...topicData, [kebabToDotSeparated(fieldName)]: value });\n  };\n\n  return (\n    <FormSection title={t('topic.log')} id='log' titleElement={'h2'}>\n      <TextContent>\n        <Text component={TextVariants.p}>{t('topic.log_section_info')}</Text>\n        <Text component={TextVariants.small}>\n          {t('topic.log_section_info_note')}\n        </Text>\n      </TextContent>\n\n      <FormGroupWithPopover\n        fieldId='cleanup-policy'\n        fieldLabel={t('topic.cleanup_policy')}\n        labelHead={t('topic.cleanup_policy')}\n        labelBody={t('topic.cleanup_policy_description')}\n        buttonAriaLabel={t('topic.cleanup_policy')}\n      >\n        <DropdownWithToggle\n          id='log-section-policy-type-dropdown'\n          toggleId='log-section-policy-type-dropdowntoggle'\n          ariaLabel={t('common.select_policy')}\n          onSelectOption={onSelectOption}\n          items={cleanupPolicyOptions}\n          name='cleanup-policy'\n          value={topicData['cleanup.policy'] || ''}\n          isLabelAndValueNotSame={true}\n        />\n      </FormGroupWithPopover>\n\n      <TextWithLabelPopover\n        fieldId='delete-retention-time'\n        btnAriaLabel={t('topic.delete_retention_time')}\n        fieldLabel={t('topic.delete_retention_time')}\n        fieldValue={DEFAULT_DELETE_RETENTION_TIME}\n        popoverBody={t('topic.delete_retention_time_description')}\n        popoverHeader={t('topic.delete_retention_time')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='min-cleanable-ratio'\n        btnAriaLabel={t('topic.min_cleanable_ratio')}\n        fieldLabel={t('topic.min_cleanable_ratio')}\n        fieldValue={DEFAULT_MIN_CLEANBLE_RATIO}\n        popoverBody={t('topic.min_cleanable_ratio_description')}\n        popoverHeader={t('topic.min_cleanable_ratio')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='min-compaction-lag-time-description'\n        btnAriaLabel={t('topic.min_compaction_lag_time')}\n        fieldLabel={t('topic.min_compaction_lag_time')}\n        fieldValue={DEFAULT_MINIMUM_COMPACTION_LAG_TIME}\n        popoverBody={t('topic.min_compaction_lag_time_description')}\n        popoverHeader={t('topic.min_compaction_lag_time')}\n      />\n    </FormSection>\n  );\n};\n\nexport { Log };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { TextWithLabelPopover } from '@app/components';\n\nconst Replication: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormSection\n      title={t('topic.replication')}\n      id='replication'\n      titleElement={'h2'}\n    >\n      <TextContent>\n        <Text component={TextVariants.p}>\n          {t('topic.replication_section_info')}\n          <Text component={TextVariants.small}>\n            {t('topic.replication_section_info_note')}\n          </Text>\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId='unclean-leader-election'\n        btnAriaLabel={t('topic.unclean_leader_election')}\n        fieldLabel={t('topic.unclean_leader_election')}\n        fieldValue={t('common.disabled')}\n        popoverBody={t('topic.unclean_leader_election_description')}\n        popoverHeader={t('topic.unclean_leader_election')}\n      />\n    </FormSection>\n  );\n};\n\nexport { Replication };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { TextWithLabelPopover } from '@app/components';\nimport {\n  DEFAULT_LOG_SEGMENT_SIZE,\n  DEFAULT_SEGMENT_TIME,\n  DEFAULT_SEGMENT_JITTER_TIME,\n  DEFAULT_FILE_DELETE_DELAY,\n} from '@app/constant';\n\nconst Cleanup: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormSection title={t('common.cleanup')} id='cleanup' titleElement={'h2'}>\n      <TextContent>\n        <Text component={TextVariants.p} className='section-info'>\n          {t('topic.cleanup_section_info')}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId='log-segment-size'\n        btnAriaLabel={t('topic.log_segment_size')}\n        fieldLabel={t('topic.log_segment_size')}\n        fieldValue={DEFAULT_LOG_SEGMENT_SIZE}\n        popoverBody={t('topic.log_segment_size')}\n        popoverHeader={t('topic.log_segment_size_description')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='segement-time'\n        btnAriaLabel={t('topic.segement_time')}\n        fieldLabel={t('topic.segement_time')}\n        fieldValue={DEFAULT_SEGMENT_TIME}\n        popoverBody={t('topic.segement_time_description')}\n        popoverHeader={t('topic.segement_time')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='segment-jitter-time'\n        btnAriaLabel={t('topic.segment_jitter_time')}\n        fieldLabel={t('topic.segment_jitter_time')}\n        fieldValue={DEFAULT_SEGMENT_JITTER_TIME}\n        popoverBody={t('topic.segment_jitter_time_description')}\n        popoverHeader={t('topic.segment_jitter_time')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='file-delete-delay'\n        btnAriaLabel={t('topic.file_delete_delay')}\n        fieldLabel={t('topic.file_delete_delay')}\n        fieldValue={DEFAULT_FILE_DELETE_DELAY}\n        popoverBody={t('topic.file_delete_delay_description')}\n        popoverHeader={t('topic.file_delete_delay')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='preallocate-log-segment-files'\n        btnAriaLabel={t('topic.preallocate_log_segment_files')}\n        fieldLabel={t('topic.preallocate_log_segment_files')}\n        fieldValue={t('common.disabled')}\n        popoverBody={t('topic.preallocate_log_segment_files_description')}\n        popoverHeader={t('topic.preallocate_log_segment_files')}\n      />\n    </FormSection>\n  );\n};\n\nexport { Cleanup };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { TextWithLabelPopover } from '@app/components';\nimport {\n  DEFAULT_INDEX_INTERVAL_SIZE,\n  DEFAULT_SEGMENT_INDEX_SIZE,\n} from '@app/constant';\n\nconst TopicAdvanceIndex: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormSection title={t('topic.index')} id='index' titleElement={'h2'}>\n      <TextContent>\n        <Text component={TextVariants.p} className='section-info'>\n          {t('topic.index_section_info')}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId='index-interval-size'\n        btnAriaLabel={t('topic.index_interval_size')}\n        fieldLabel={t('topic.index_interval_size')}\n        fieldValue={DEFAULT_INDEX_INTERVAL_SIZE}\n        popoverBody={t('topic.index_interval_size_description')}\n        popoverHeader={t('topic.index_interval_size')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='segment-index-size'\n        btnAriaLabel={t('topic.segment_index_size')}\n        fieldLabel={t('topic.segment_index_size')}\n        fieldValue={DEFAULT_SEGMENT_INDEX_SIZE}\n        popoverBody={t('topic.segment_index_size_description')}\n        popoverHeader={t('topic.segment_index_size')}\n      />\n    </FormSection>\n  );\n};\n\nexport { TopicAdvanceIndex };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  FormSection,\n  TextVariants,\n  TextContent,\n  Text,\n} from '@patternfly/react-core';\nimport { TextWithLabelPopover } from '@app/components';\nimport {\n  DEFAULT_FLUSH_INTERVAL_MESSAGES,\n  DEFAULT_FLUSH_INTERVAL_TIME,\n} from '@app/constant';\n\nconst Flush: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormSection title={t('topic.flush')} id='flush' titleElement={'h2'}>\n      <TextContent>\n        <Text component={TextVariants.p} className='section-info'>\n          {t('topic.flush_section_info')}\n        </Text>\n      </TextContent>\n\n      <TextWithLabelPopover\n        fieldId='flush-interval-messages'\n        btnAriaLabel={t('topic.flush_interval_messages')}\n        fieldLabel={t('topic.flush_interval_messages')}\n        fieldValue={DEFAULT_FLUSH_INTERVAL_MESSAGES}\n        popoverBody={t('topic.flush_interval_messages_description')}\n        popoverHeader={t('topic.flush_interval_messages')}\n      />\n\n      <TextWithLabelPopover\n        fieldId='flush-interval-time'\n        btnAriaLabel={t('topic.flush_interval_time')}\n        fieldLabel={t('topic.flush_interval_time')}\n        fieldValue={DEFAULT_FLUSH_INTERVAL_TIME}\n        popoverBody={t('topic.flush_interval_time_description')}\n        popoverHeader={t('topic.flush_interval_time')}\n      />\n    </FormSection>\n  );\n};\n\nexport { Flush };\n","import React, { useState, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ActionGroup,\n  Button,\n  Sidebar,\n  SidebarContent,\n  Form,\n  PageSection,\n  PageGroup,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { IAdvancedTopic } from '@app/modules/Topics/utils';\nimport { getTopic } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { isAxiosError } from '@app/utils/axios';\nimport { ModalType, useModal } from '@rhoas/app-services-ui-shared';\nimport { TopicAdvanceJumpLinks } from './TopicAdvanceJumpLinks';\nimport { CoreConfiguration } from './CoreConfiguration';\nimport { Message } from './Message';\nimport { Log } from './Log';\nimport { Replication } from './Replication';\nimport { Cleanup } from './Cleanup';\nimport { TopicAdvanceIndex } from './TopicAdvanceIndex';\nimport { Flush } from './Flush';\n\nexport type TopicAdvanceConfigProps = {\n  isCreate: boolean;\n  saveTopic: () => void;\n  handleCancel?: () => void;\n  topicData: IAdvancedTopic;\n  setTopicData: (val: IAdvancedTopic) => void;\n  isLoadingSave?: boolean;\n};\n\nexport const TopicAdvanceConfig: React.FunctionComponent<TopicAdvanceConfigProps> =\n  ({\n    isCreate,\n    saveTopic,\n    handleCancel,\n    topicData,\n    setTopicData,\n    isLoadingSave,\n  }) => {\n    const config = useContext(ConfigContext);\n    const { showModal } = useModal<ModalType.KafkaUpdatePartitions>();\n    const { t } = useTranslation();\n    const actionText = isCreate ? t('topic.create_topic') : t('common.save');\n\n    //states\n    const [topicValidated, setTopicValidated] = useState<ValidatedOptions>(\n      ValidatedOptions.default\n    );\n    const [invalidText, setInvalidText] = useState('');\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [warning, setWarning] = useState<boolean>(false);\n    const [initialPartition, setInitialPartition] = useState<\n      number | undefined\n    >(Number(topicData.numPartitions));\n    useState<string>(topicData['retention.ms.unit'] || 'days');\n\n    const fetchTopic = async (topicName) => {\n      try {\n        const topicRes = await getTopic(topicName, config);\n        if (topicRes) {\n          if (isCreate) {\n            setInvalidText(t('topic.already_exists', { name: topicName }));\n            setTopicValidated(ValidatedOptions.error);\n            setIsLoading(false);\n          } else {\n            setInitialPartition(topicRes?.partitions?.length);\n          }\n        }\n      } catch (err) {\n        let code: number | undefined;\n        if (err && isAxiosError(err)) {\n          code = err.response?.data.code;\n        }\n        if (isCreate && code === 404) {\n          setTopicValidated(ValidatedOptions.default);\n          setIsLoading(false);\n          saveTopic();\n        }\n      }\n    };\n\n    const onConfirm = () => {\n      if (!isCreate) {\n        if (warning) {\n          showModal(ModalType.KafkaUpdatePartitions, {\n            onSaveTopic: saveTopic,\n          });\n        } else {\n          saveTopic();\n        }\n      } else {\n        if (topicData.name.length < 1) {\n          setInvalidText(t('topic.required'));\n          setTopicValidated(ValidatedOptions.error);\n        } else {\n          setIsLoading(true);\n          fetchTopic(topicData.name);\n        }\n      }\n    };\n\n    return (\n      <PageSection padding={{ default: 'noPadding' }}>\n        <Sidebar hasGutter>\n          <TopicAdvanceJumpLinks />\n          <SidebarContent>\n            <PageGroup hasOverflowScroll id='topic-detail-view'>\n              <PageSection padding={{ default: 'noPadding' }}>\n                <Form>\n                  <CoreConfiguration\n                    isCreate={isCreate}\n                    topicData={topicData}\n                    setTopicData={setTopicData}\n                    fetchTopic={fetchTopic}\n                    initialPartition={initialPartition}\n                    invalidText={invalidText}\n                    setInvalidText={setInvalidText}\n                    setTopicValidated={setTopicValidated}\n                    topicValidated={topicValidated}\n                    setWarning={setWarning}\n                    warning={warning}\n                  />\n                  <Message />\n                  <Log topicData={topicData} setTopicData={setTopicData} />\n                  <Replication />\n                  <Cleanup />\n                  <TopicAdvanceIndex />\n                  <Flush />\n                </Form>\n                <ActionGroup className='kafka-ui--sticky-footer'>\n                  <Button\n                    isLoading={isLoading || isLoadingSave}\n                    onClick={onConfirm}\n                    variant='primary'\n                    data-testid={\n                      isCreate\n                        ? 'topicAdvanceCreate-actionCreate'\n                        : 'tabProperties-actionSave'\n                    }\n                    isDisabled={topicValidated === 'default' ? false : true}\n                  >\n                    {actionText}\n                  </Button>\n                  <Button\n                    onClick={handleCancel}\n                    variant='link'\n                    data-testid={\n                      isCreate\n                        ? 'topicAdvanceCreate-actionCancel'\n                        : 'tabProperties-actionCancel'\n                    }\n                  >\n                    {t('common.cancel')}\n                  </Button>\n                </ActionGroup>\n              </PageSection>\n            </PageGroup>\n          </SidebarContent>\n        </Sidebar>\n      </PageSection>\n    );\n  };\n","type SelectOptions = {\n  key: string;\n  value: string;\n  isPlaceholder?: boolean;\n  isDisabled?: boolean;\n};\n\nconst retentionTimeSelectOptions: SelectOptions[] = [\n  { key: 'days', value: 'days', isPlaceholder: true },\n  { key: 'hours', value: 'hours' },\n  { key: 'minutes', value: 'minutes' },\n  { key: 'seconds', value: 'seconds' },\n  { key: 'milliseconds', value: 'milliseconds' },\n];\n\nconst retentionSizeSelectOptions: SelectOptions[] = [\n  { key: 'bytes', value: 'bytes', isPlaceholder: true },\n  { key: 'kibibytes', value: 'kibibytes' },\n  { key: 'mebibytes', value: 'mebibytes' },\n  { key: 'gibibytes', value: 'gibibytes' },\n  { key: 'tebibytes', value: 'tebibytes' },\n];\n\nexport {\n  SelectOptions,\n  retentionTimeSelectOptions,\n  retentionSizeSelectOptions,\n};\n","import { useTranslation } from 'react-i18next';\n\nexport const useValidateTopic = (): {\n  validateName(name: string): string | undefined;\n} => {\n  const { t } = useTranslation();\n\n  return {\n    validateName: (name) => {\n      const legalNameChars = new RegExp('^[a-zA-Z0-9._-]+$');\n      if (name.length && !legalNameChars.test(name)) {\n        return t('topic.topic_name_helper_text');\n      } else if (name.length > 249) {\n        return t('topic.cannot_exceed_characters');\n      } else if (name === '.' || name === '..') {\n        return t('topic.invalid_name_with_dot');\n      }\n      return undefined;\n    },\n  };\n};\n"],"names":["exports","__esModule","CaretDownIconConfig","name","height","width","svgPath","yOffset","xOffset","CaretDownIcon","DropdownWithToggle","id","toggleId","items","value","ariaLabel","onSelectOption","menuAppendTo","isLabelAndValueNotSame","useState","isOpen","setIsOpen","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","filteredOption","filter","item","label","getSelectedValue","Dropdown","onSelect","e","currentTarget","textContent","target","toLowerCase","toggle","dropdownItems","options","map","option","key","DropdownItem","getItems","FormGroupWithPopover","children","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","validated","helperText","helperTextInvalid","isRequired","FormGroup","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","CustomRetentionMessage","selectOptions","topicData","setTopicData","handleTouchSpin","operator","fieldName","selectedRetention","Number","Flex","FlexItem","NumberInput","onMinus","onPlus","onChange","truncValue","Math","trunc","toString","onChangeTouchSpin","plusBtnProps","minusBtnProps","min","Select","variant","SelectVariant","_","selection","selectedRetentionTimeOption","onSelectRetentionUnit","selections","s","SelectOption","isPlaceholder","TopicAdvanceJumpLinks","t","useTranslation","SidebarPanel","JumpLinks","isVertical","scrollableSelector","style","position","offset","JumpLinksItem","href","CoreConfiguration","isCreate","fetchTopic","initialPartition","invalidText","setInvalidText","setTopicValidated","topicValidated","setWarning","warning","validateName","ValidatedOptions","partitionsValidated","setPartitionsValidated","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","useEffect","validationCheck","errorMessage","handleRetentionMessageSize","selectedRetentionSizeOption","handleRetentionMessageTime","numPartitions","partitionsWarnigCheck","retentionTimeInput","retentionSizeInput","FormSection","title","titleElement","TextContent","Text","component","TextVariants","TextInput","type","placeholder","TextWithLabelPopover","btnAriaLabel","fieldValue","popoverBody","popoverHeader","undefined","inputName","partitionValue","max","replicationFactor","Stack","hasGutter","Radio","isChecked","Message","Log","cleanupPolicyOptions","isDisabled","Replication","Cleanup","TopicAdvanceIndex","Flush","TopicAdvanceConfig","saveTopic","handleCancel","isLoadingSave","config","useContext","showModal","useModal","actionText","isLoading","setIsLoading","setInitialPartition","topicName","topicRes","partitions","length","code","response","data","PageSection","padding","default","Sidebar","SidebarContent","PageGroup","hasOverflowScroll","Form","ActionGroup","Button","ModalType","onSaveTopic","retentionTimeSelectOptions","retentionSizeSelectOptions","useValidateTopic","legalNameChars","RegExp","test"],"sourceRoot":""}