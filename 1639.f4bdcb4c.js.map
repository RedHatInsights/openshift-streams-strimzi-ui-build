{"version":3,"file":"1639.f4bdcb4c.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-styles/dist/esm/index.js","webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/components/ConsumerGroupsPopover.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/components/ConsumerGroupDetail/ConsumerGroupDetail.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/components/ConsumerGroupState.tsx"],"sourcesContent":["/** Joins args into a className string\n *\n * @param {any} args list of objects, string, or arrays to reduce\n */\nexport function css(...args) {\n    // Adapted from https://github.com/JedWatson/classnames/blob/master/index.js\n    const classes = [];\n    const hasOwn = {}.hasOwnProperty;\n    args.filter(Boolean).forEach((arg) => {\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n        }\n        else if (Array.isArray(arg) && arg.length) {\n            const inner = css(...arg);\n            if (inner) {\n                classes.push(inner);\n            }\n        }\n        else if (argType === 'object') {\n            for (const key in arg) {\n                if (hasOwn.call(arg, key) && arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    });\n    return classes.join(' ');\n}\n//# sourceMappingURL=index.js.map","import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData, RowWrapperProps } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (\n  rowWrapperProps: RowWrapperProps\n): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps || {};\n  const { isExpanded, originalData } = row || {};\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={typeof trRef === 'function' ? undefined : trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event) => onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\ntype ConsumerGroupPopoverProps = {\n  title: string;\n  description: string;\n};\n\nexport const ConsumerGroupPopover: React.FunctionComponent<\n  ConsumerGroupPopoverProps\n> = ({ title, description }) => {\n  return (\n    <Popover\n      aria-label='Consumer groups popover'\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{description}</div>}\n    >\n      <OutlinedQuestionCircleIcon />\n    </Popover>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Stack,\n} from '@patternfly/react-core';\nimport { TableVariant, wrappable, cellWidth } from '@patternfly/react-table';\nimport { ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { MASTable } from '@app/components';\nimport { ConsumerGroupPopover } from '@app/modules/ConsumerGroups/components';\nimport { ConsumerGroupState } from '../ConsumerGroupState';\n\nexport type ConsumerGroupDetailProps = {\n  consumerGroupDetail: ConsumerGroup | undefined;\n  consumerGroupByTopic: boolean;\n};\n\nconst ConsumerGroupDetail: React.FunctionComponent<\n  ConsumerGroupDetailProps\n> = ({ consumerGroupDetail, consumerGroupByTopic }) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const columns = consumerGroupByTopic\n    ? [\n        {\n          title: t('consumerGroup.partition'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.consumer_id'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.current_offset'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.log_end_offset'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.offset_lag'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: '',\n          dataLabel: t('common.action'),\n        },\n      ]\n    : [\n        { title: t('topic.topic'), transforms: [wrappable, cellWidth(20)] },\n        {\n          title: t('consumerGroup.partition'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.consumer_id'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.current_offset'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.log_end_offset'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: t('consumerGroup.offset_lag'),\n          transforms: [wrappable, cellWidth(20)],\n        },\n        {\n          title: '',\n          dataLabel: t('common.action'),\n        },\n      ];\n\n  const getRows = () => {\n    return (\n      (consumerGroupDetail &&\n        consumerGroupDetail.consumers.map((consumergroup) =>\n          consumerGroupByTopic\n            ? [\n                consumergroup.partition,\n                {\n                  title: consumergroup.memberId ? (\n                    consumergroup.groupId + '\\n' + consumergroup.memberId\n                  ) : (\n                    <i>{t('consumerGroup.unassigned')}</i>\n                  ),\n                },\n                consumergroup.offset,\n                consumergroup.logEndOffset,\n                consumergroup.lag,\n              ]\n            : [\n                consumergroup.topic,\n                consumergroup.partition,\n                {\n                  title: consumergroup.memberId ? (\n                    consumergroup.groupId + '\\n' + consumergroup.memberId\n                  ) : (\n                    <i>{t('consumerGroup.unassigned')}</i>\n                  ),\n                },\n                consumergroup.offset,\n                consumergroup.logEndOffset,\n                consumergroup.lag,\n              ]\n        )) ||\n      []\n    );\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Flex>\n          <FlexItem>\n            <Text component={TextVariants.h4} size={50}>\n              {t('consumerGroup.active_members')}{' '}\n            </Text>\n            <Text component={TextVariants.p}>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail?.metrics?.activeConsumers || 0}\n              </Text>\n            </Text>\n          </FlexItem>\n          <FlexItem>\n            <Text component={TextVariants.h4}>\n              {t('consumerGroup.partitions_with_lag')}{' '}\n              <ConsumerGroupPopover\n                title={t('consumerGroup.partitions_with_lag_name')}\n                description={t('consumerGroup.partitions_with_lag_description')}\n              />\n            </Text>\n            <Text component={TextVariants.p}>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail?.metrics?.laggingPartitions || 0}\n              </Text>\n            </Text>\n          </FlexItem>\n          <FlexItem>\n            <Text component={TextVariants.h4}>\n              {t('consumerGroup.state_label')}\n            </Text>\n            <Text component={TextVariants.p}>\n              <Text component={TextVariants.h2}>\n                <ConsumerGroupState state={consumerGroupDetail?.state} />\n              </Text>\n            </Text>\n          </FlexItem>\n        </Flex>\n      </TextContent>\n      <MASTable\n        tableProps={{\n          cells: columns,\n          rows: getRows(),\n          'aria-label': t('consumerGroup.consumer_group_info_table_aria'),\n          variant: TableVariant.compact,\n        }}\n      />\n    </Stack>\n  );\n};\n\nexport { ConsumerGroupDetail };\nexport default ConsumerGroupDetail;\n","import { VFC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ConsumerGroupState as ConsumerGroupStateEnum } from '@rhoas/kafka-instance-sdk';\n\nexport const ConsumerGroupState: VFC<{\n  state: ConsumerGroupStateEnum | undefined;\n}> = ({ state }) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  switch (state) {\n    case ConsumerGroupStateEnum.Stable:\n      return <>{t('consumerGroup.state.stable')}</>;\n    case ConsumerGroupStateEnum.Empty:\n      return <>{t('consumerGroup.state.empty')}</>;\n    case ConsumerGroupStateEnum.Dead:\n      return <>{t('consumerGroup.state.dead')}</>;\n    case ConsumerGroupStateEnum.CompletingRebalance:\n      return <>{t('consumerGroup.state.completing_rebalance')}</>;\n    case ConsumerGroupStateEnum.PreparingRebalance:\n      return <>{t('consumerGroup.state.preparing_rebalance')}</>;\n    case ConsumerGroupStateEnum.Unknown:\n      return <>{t('consumerGroup.state.unknown')}</>;\n    default:\n      return <></>;\n  }\n};\n"],"names":["css","args","classes","hasOwn","hasOwnProperty","filter","Boolean","forEach","arg","argType","push","Array","isArray","length","inner","key","call","join","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","rowDataTestId","useContext","trRef","className","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","undefined","rowId","hidden","onClick","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","children","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","ConsumerGroupPopover","title","description","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","ConsumerGroupDetail","consumerGroupDetail","consumerGroupByTopic","t","useTranslation","columns","transforms","wrappable","cellWidth","dataLabel","Stack","hasGutter","TextContent","Flex","FlexItem","Text","component","TextVariants","size","metrics","activeConsumers","laggingPartitions","ConsumerGroupState","state","consumers","map","consumergroup","partition","memberId","groupId","offset","logEndOffset","lag","topic","TableVariant"],"sourceRoot":""}