{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/code-branch-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack://kafka-ui/./src/i18n/locale/index.ts","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupData.ts","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/SearchConsumers.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList.tsx","webpack://kafka-ui/./src/Modules/AppNavigation/AppNavigation.tsx","webpack://kafka-ui/./src/Panels/Topics/TopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Components/TextWithLabelPopover/TextWithLabelPopover.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerDataByTopics.ts","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupDetailByTopics.ts","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsByTopicsDrawer.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/SearchConsumerGroupsByTopics.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopicHead.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/Panels/ConsumerGroups/ConsumerGroupsView.tsx","webpack://kafka-ui/./src/Components/ErrorBoundary/UnexpectedError.tsx","webpack://kafka-ui/./src/Components/ErrorBoundary/ErrorBoundary.tsx","webpack://kafka-ui/./src/Modules/AppNavigation/AppMastHead.tsx","webpack://kafka-ui/./src/i18n/index.ts","webpack://kafka-ui/./src/Bootstrap/bootstrap.tsx","webpack://kafka-ui/./src/Panels/MastHead/MastHead.tsx","webpack://kafka-ui/./src/Panels/Topics/DetailView.tsx","webpack://kafka-ui/./src/Panels/Topics/CreateView.tsx","webpack://kafka-ui/./src/Panels/Topics/UpdateView.tsx","webpack://kafka-ui/./src/Panels/ConsumerGroupsByTopic/ConsumerGroupsByTopic.tsx","webpack://kafka-ui/./src/Components/ServerAlertGroup/ServerAlertGroup.tsx","webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","resources","en","translation","de","consumerGroupData","id","members","partitions","state","SearchConsumers","setTableData","useState","search","setSearch","useEffect","trim","filterSearch","filter","consumersFiltered","includes","console","log","InputGroup","SearchInput","type","placeholder","value","onChange","row","toLowerCase","indexOf","onClear","ConsumerGroupsList","page","setPage","perPage","setPerPage","offset","setOffset","tableData","onSetPage","_event","pageNumber","onPerPageSelect","rowData","map","consumer","title","Label","color","icon","Card","Toolbar","ToolbarContent","ToolbarItem","variant","Pagination","itemCount","length","widgetId","Divider","Table","TableVariant","cells","rows","slice","TableHeader","TableBody","EmptySearch","AppNavigation","eventKey","activeTabKey","setActiveTabKey","history","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","PageSection","PageSectionVariants","Flex","FlexItem","align","default","Button","iconPosition","Title","headingLevel","padding","Tabs","activeKey","onSelect","event","tabIndex","Tab","TabTitleText","hidden","Page","TopicsList","onCreateTopic","push","Topics","TopicDetailHead","topicName","className","TextContent","Text","component","TextVariants","TextWithLabelPopover","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","unit","displayText","Number","style","fontWeight","display","Popover","headerContent","bodyContent","onClick","preventDefault","position","left","top","HelpIcon","noVerticalAlign","TopicDetailView","topic","deleteTopic","updateTopic","t","useTranslation","Grid","hasGutter","GridItem","span","JumpLinks","isVertical","label","scrollableSelector","JumpLinksItem","key","href","PageGroup","hasOverflowScroll","numPartitions","replicationFactor","preallocate","ConsumerGroupDataByTopics","mockConsumerGroupDetailByTopics","partition","currentOffset","logendOffset","offsetLag","ConsumerGroupsByTopicDrawer","isExpanded","consumerGroupDetail","consumergroup","DrawerPanelContent","widths","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","size","dataLabel","SearchConsumerGroupsByTopics","searchText","setSearchText","ButtonVariant","ConsumerGroupByTopicList","setIsExpanded","setConsumerGroupDetail","panelContent","ConsumerGroupByTopic","Drawer","DrawerContent","TopicDetailGroup","topicDetail","setTopicDetail","config","useContext","deleteModal","setDeleteModal","response","fetchTopicDetail","isBox","UpdateTopicHead","UpdateTopicView","store","updateBulkStore","setTopic","addAlert","topicRes","saveToStore","fetchTopic","advanceConfig","toString","forEach","configItem","patchConfig","previousTopic","item","Object","keys","TopicAdvanceConfig","isCreate","saveTopic","newConfig","topicSettings","AlertVariant","data","err","UpdateTopicPage","UnexpectedError","updateState","EmptyState","EmptyStateVariant","EmptyStateIcon","ExclamationCircleIcon","TitleSizes","EmptyStateBody","hasError","setState","getDerivedStateFromError","error","componentDidCatch","errorInfo","render","this","props","children","AppMastHead","isDropDownOpen","setIsDropDownOpen","userDropDownItems","DropdownItem","brandImgLogo","Brand","src","brandImg","alt","userDropDownToggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","userDropDown","Dropdown","toggle","isOpen","isPlain","dropdownItems","avatar","Avatar","HeaderTools","PageHeaderTools","PageHeader","logo","logoComponent","headerTools","initReactI18next","use","init","detection","order","caches","fallbackLng","debug","interpolation","escapeValue","basePath","getToken","mainContainerId","header","ErrorBoundary","Switch","Route","path","exact","useHistory","CreateTopicPage","setIsCreateTopic","goBack","document","getElementById","ServerAlertGroup","alerts","onCloseAlert","AlertGroup","isToast","message","Alert","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","onClose","AlertContext","createContext","AlertProvider","setAlerts","timers","setTimers","timersKeys","timer","timeOuts","alert","timeOut","setTimeout","hideAlert","clearTimeout","el","Provider","Date","getTime","initialState","TopicContext","TopicContextProvider","setStore","updateStore","getTopics","accessToken","getTopicsList","getTopicDetail","getTopic","convertTopicResponse","topicObj","p","replicas","reduce","previousValue","currentValue","updateTopicModel","status"],"mappings":"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","file":"69.67341845.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.CodeBranchIconConfig = {\n  name: 'CodeBranchIcon',\n  height: 512,\n  width: 384,\n  svgPath: 'M384 144c0-44.2-35.8-80-80-80s-80 35.8-80 80c0 36.4 24.3 67.1 57.5 76.8-.6 16.1-4.2 28.5-11 36.9-15.4 19.2-49.3 22.4-85.2 25.7-28.2 2.6-57.4 5.4-81.3 16.9v-144c32.5-10.2 56-40.5 56-76.3 0-44.2-35.8-80-80-80S0 35.8 0 80c0 35.8 23.5 66.1 56 76.3v199.3C23.5 365.9 0 396.2 0 432c0 44.2 35.8 80 80 80s80-35.8 80-80c0-34-21.2-63.1-51.2-74.6 3.1-5.2 7.8-9.8 14.9-13.4 16.2-8.2 40.4-10.4 66.1-12.8 42.2-3.9 90-8.4 118.2-43.4 14-17.4 21.1-39.8 21.6-67.9 31.6-10.8 54.4-40.7 54.4-75.9zM80 64c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16zm0 384c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm224-320c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CodeBranchIcon = require('../createIcon').createIcon(exports.CodeBranchIconConfig);\nexports[\"default\"] = exports.CodeBranchIcon;","\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","import en from './en.json';\nimport de from './de.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n","export const consumerGroupData = [\n  {\n    id: 'Custom_0',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_1',\n    members: 1,\n    partitions: 1,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_2',\n    members: 0,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_3',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_4',\n    members: 1,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_5',\n    members: 0,\n    partitions: 0,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_6',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_7',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_8',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_9',\n    members: 1,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_10',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\nimport { consumerGroupData } from './ConsumerGroupData';\n\nexport interface IConsumerGroupData {\n  id: string;\n  members: number;\n  partitions: number;\n  state: number;\n}\n\nexport interface ISearchConsumerGroupProps {\n  setTableData: (IConsumerGroupData) => void;\n}\n\nconst SearchConsumers: React.FunctionComponent<ISearchConsumerGroupProps> = ({\n  setTableData,\n}) => {\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    if (search && search.trim() != '') {\n      const filterSearch = consumerGroupData.filter((consumersFiltered) =>\n        consumersFiltered?.id.includes(search)\n      );\n      setTableData(filterSearch);\n      console.log(filterSearch);\n    } else {\n      setTableData(consumerGroupData);\n    }\n  }, [search]);\n\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n    setTableData(\n      consumerGroupData.filter(\n        (row) => row.id.toLowerCase().indexOf(search.toLowerCase()) > -1\n      )\n    );\n  };\n  const onClear = () => {\n    setSearch('');\n    setTableData(consumerGroupData);\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-consumers-input'\n        type='search'\n        aria-label='search input '\n        placeholder='Search'\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchConsumers };\n","import React, { useState } from 'react';\nimport {\n  Card,\n  Divider,\n  Label,\n  Pagination,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { SearchConsumers } from './SearchConsumers';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { CheckCircleIcon } from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { consumerGroupData } from './ConsumerGroupData';\nimport { EmptySearch } from '../../../Topics/TopicList/Components/EmptySearch';\nexport const ConsumerGroupsList: React.FunctionComponent = () => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState(0);\n  const [tableData, setTableData] = useState(consumerGroupData);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const tableColumns = [\n    { title: 'Consumer Group ID' },\n    { title: 'Active Members' },\n    { title: 'Unconsumed Partitions' },\n    { title: 'State' },\n  ];\n\n  //const rowData = model.consumersList.items.map((consumer) => [\n  const rowData = tableData.map((consumer) => [\n    consumer.id,\n    consumer.members,\n    consumer.partitions,\n    {\n      title: (\n        <Label\n          color={consumer.state === 'Stable' ? 'green' : 'red'}\n          icon={\n            consumer.state === 'Stable' ? (\n              <CheckCircleIcon />\n            ) : (\n              <ExclamationCircleIcon />\n            )\n          }\n        >\n          {consumer.state}\n        </Label>\n      ),\n    },\n  ]);\n\n  return (\n    <>\n      <Card>\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <SearchConsumers setTableData={setTableData} />\n            </ToolbarItem>\n            <ToolbarItem variant='pagination'>\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='consumer-group-pagination-top'\n                onPerPageSelect={onPerPageSelect}\n              />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n        <Divider />\n        <Table\n          aria-label='Compact Table'\n          variant={TableVariant.compact}\n          cells={tableColumns}\n          rows={\n            page != 1\n              ? rowData.slice(offset, offset + perPage)\n              : rowData.slice(0, perPage)\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n        {rowData.length < 1 ? (\n          <EmptySearch />\n        ) : (\n          <Pagination\n            itemCount={rowData.length}\n            perPage={perPage}\n            page={page}\n            onSetPage={onSetPage}\n            widgetId='consumer-group-pagination-bottom'\n            onPerPageSelect={onPerPageSelect}\n            offset={0}\n          />\n        )}\n      </Card>\n      <Divider />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Flex,\n  FlexItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Page,\n  Tabs,\n  Tab,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { TopicsListComponent } from '../Topics/TopicList/Components/TopicsList';\nimport { ConsumerGroupsList } from '../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/js/icons/code-branch-icon';\nimport { useHistory } from 'react-router';\ninterface ITabHeaderProps {\n  eventKey: number;\n}\nexport const AppNavigation: React.FunctionComponent<ITabHeaderProps> = ({\n  eventKey,\n}) => {\n  const [activeTabKey, setActiveTabKey] = useState(eventKey);\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n  const history = useHistory();\n\n  const onCreateTopic = () => {\n    history.push('/topics/create');\n  };\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='#'>OpenShift Streams</BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        MK Cluster Instance\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <section>{mainBreadcrumbs}</section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Flex>\n          <FlexItem align={{ default: 'alignRight' }}>\n            <Button\n              variant='link'\n              icon={<CodeBranchIcon />}\n              iconPosition='right'\n            >\n              Connect to this cluster\n            </Button>\n          </FlexItem>\n        </Flex>\n        <Title headingLevel='h1'>MK Cluster Instance</Title>\n      </PageSection>\n      <br />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs activeKey={activeTabKey} onSelect={handleTabClick}>\n          <Tab\n            title={<TabTitleText>Home</TabTitleText>}\n            eventKey={0}\n            id='home-tab-section'\n            aria-label='Home Tab'\n            hidden\n          >\n            <Title headingLevel='h4'>Home </Title>\n          </Tab>\n          <Tab\n            title={<TabTitleText>Topics</TabTitleText>}\n            eventKey={1}\n            id='topics-tab-section'\n            aria-label='Topics Tab'\n          >\n            <Page>\n              <PageSection>\n                <TopicsListComponent onCreateTopic={onCreateTopic} />\n              </PageSection>\n            </Page>\n          </Tab>\n          <Tab\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n            eventKey={2}\n            id='consumer-groups-tab-section'\n            aria-label='Consumer Groups Tab'\n          >\n            <Page>\n              <PageSection>\n                <ConsumerGroupsList />\n              </PageSection>\n            </Page>\n          </Tab>\n          <Tab\n            title={<TabTitleText>Metrics</TabTitleText>}\n            eventKey={3}\n            id='metrics-tab-section'\n            aria-label='Metrics Tab'\n          >\n            <Title headingLevel='h4'>Metrics </Title>\n          </Tab>\n        </Tabs>\n      </PageSection>\n    </PageSection>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { AppNavigation } from '../../Modules/AppNavigation/AppNavigation';\nconst Topics: FunctionComponent = () => {\n  return <AppNavigation eventKey={1} />;\n};\n\nexport { Topics };\n\nexport default Topics;\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n}) => {\n  return (\n    <section className='pf-c-page__main-breadcrumb'>\n      <Breadcrumb>\n        <BreadcrumbItem to='#/topics'>Topics</BreadcrumbItem>\n        <BreadcrumbItem to={`#/topic/${topicName}`}>{topicName}</BreadcrumbItem>\n      </Breadcrumb>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent className='header-padding'>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </section>\n  );\n};\n","import { Popover, TextContent, Text } from '@patternfly/react-core';\nimport React from 'react';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport bytes from 'bytes';\nimport humanizeDuration from 'humanize-duration';\n\nimport './TextWithLabelPopover.css';\n\nexport interface TextWithLabelPopoverProps {\n  /** Field label */\n  fieldLabel: string;\n  /** Field value */\n  fieldValue?: string;\n  /** Header text for popover label */\n  popoverHeader: string;\n  /** Body text for popover label */\n  popoverBody: string;\n  /** Aria label for popover button */\n  btnAriaLabel: string;\n  /** Unit (if exists) for the field */\n  unit?: string;\n}\n\nexport const TextWithLabelPopover: React.FC<TextWithLabelPopoverProps> = ({\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  unit,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  let displayText = '-';\n\n  if (fieldValue) {\n    if (unit) {\n      if (unit === 'ms') {\n        displayText = humanizeDuration(Number(fieldValue));\n      }\n      if (unit === 'bytes') {\n        displayText = bytes(Number(fieldValue));\n      }\n    } else {\n      displayText = fieldValue;\n    }\n  }\n\n  return (\n    <TextContent className='text-content-padding'>\n      <Text style={{ fontWeight: 700, display: 'inline' }}>{fieldLabel}</Text>\n      <Popover\n        headerContent={<div>{popoverHeader}</div>}\n        bodyContent={<div>{popoverBody}</div>}\n      >\n        <button\n          aria-label={btnAriaLabel}\n          onClick={preventButtonSubmit}\n          className='pf-c-form__group-label-help'\n          style={{ position: 'relative', left: '5px', top: '2px' }}\n        >\n          <HelpIcon noVerticalAlign />\n        </button>\n      </Popover>\n      <Text>{displayText}</Text>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={2} className='grid-item-padding'>\n        <JumpLinks\n          isVertical\n          label='JUMP TO SECTION'\n          scrollableSelector='#topic-detail-view'\n          style={{ position: 'absolute' }}\n        >\n          <JumpLinksItem key={0} href='#core-configuration'>\n            Core configuration\n          </JumpLinksItem>\n          <JumpLinksItem key={1} href='#messages'>\n            Messages\n          </JumpLinksItem>\n          <JumpLinksItem key={2} href='#log'>\n            Log\n          </JumpLinksItem>\n          <JumpLinksItem key={3} href='#replication'>\n            Replication\n          </JumpLinksItem>\n          <JumpLinksItem key={4} href='#cleanup'>\n            Cleanup\n          </JumpLinksItem>\n          <JumpLinksItem key={5} href='#index'>\n            Index\n          </JumpLinksItem>\n          <JumpLinksItem key={6} href='#flush'>\n            Flush\n          </JumpLinksItem>\n          <JumpLinksItem key={7} href='#delete'>\n            Delete\n          </JumpLinksItem>\n        </JumpLinks>\n      </GridItem>\n      <GridItem span={8} className='grid-item-padding'>\n        <PageGroup hasOverflowScroll id='topic-detail-view'>\n          <PageSection>\n            <TextContent>\n              <Text\n                component={TextVariants.h2}\n                tabIndex={-1}\n                id='core-configuration'\n              >\n                Core configuration\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.coreConfigInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail name'\n              fieldLabel='Name'\n              fieldValue={topic.name}\n              popoverBody={t('createTopic.topicNameLabelBody')}\n              popoverHeader={t('createTopic.topicNameLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail partition'\n              fieldLabel='Partitions'\n              fieldValue={topic.numPartitions}\n              popoverBody={t('createTopic.partitionsLabelBody')}\n              popoverHeader={t('createTopic.partitionsLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail replicas'\n              fieldLabel='Replicas'\n              fieldValue={topic.replicationFactor}\n              popoverBody={t('createTopic.replicasLabelBody')}\n              popoverHeader={t('createTopic.replicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min-in-sync replica'\n              fieldLabel='Minimum in-sync replicas'\n              fieldValue={topic['min.insync.replicas']}\n              popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n              popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention time'\n              fieldLabel='Retention Time'\n              fieldValue={topic['retention.ms']}\n              popoverBody={t('createTopic.retentionTimeLabelBody')}\n              popoverHeader={t('createTopic.retentionTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n                Messages\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.messageSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Maximum message bytes'\n              fieldValue={topic['max.message.bytes.message.bytes']}\n              popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n              popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp type'\n              fieldLabel='Message timestamp type'\n              fieldValue={topic['message.timestamp.type']}\n              popoverBody={t('createTopic.messageTimestampLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp difference'\n              fieldLabel='Maximum message timestamp difference'\n              fieldValue={topic['message.timestamp.difference.max.ms']}\n              popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampDiffLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail compression type'\n              fieldLabel='Compression type'\n              fieldValue={topic['compression.type']}\n              popoverBody={t('createTopic.compressionTypeLabelBody')}\n              popoverHeader={t('createTopic.compressionTypeLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                Log\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.logSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail cleanup policy'\n              fieldLabel='Cleanup policy'\n              fieldValue={topic['log.cleanup.policy']}\n              popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n              popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention bytes'\n              fieldLabel='Retention bytes'\n              fieldValue={topic['log.retention.bytes']}\n              popoverBody={t('createTopic.retentionBytesLabelBody')}\n              popoverHeader={t('createTopic.retentionBytesLabelHead')}\n              unit={'bytes'}\n            />\n\n            {/* TODO: Clarify the field from wireframes */}\n            {/* <TextWithLabelPopover\n                  btnAriaLabel='topic detail log segment types'\n                  fieldLabel='Log segment types'\n\n                  fieldValue={topic.}\n                  popoverBody={t('createTopic.compressionTypeLabelBody')}\n                  popoverHeader={t('createTopic.compressionTypeLabelHead')}\n                /> */}\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='replication'>\n                Replication\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.replicationSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail unclean leader election'\n              fieldLabel='Unclean leader election'\n              fieldValue={topic['unclean.leader.election.enable']}\n              popoverBody={t('createTopic.leaderElectionLabelBody')}\n              popoverHeader={t('createTopic.leaderElectionLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail throttled follower replicas'\n              fieldLabel='Follower replication throttled replicas'\n              fieldValue={topic['follower.replication.throttled.replicas']}\n              popoverBody={t('createTopic.followerReplicaLabelBody')}\n              popoverHeader={t('createTopic.followerReplicaLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail throttled leader replicas'\n              fieldLabel='Leader replication throttled replicas'\n              fieldValue={topic['leader.replication.throttled.replicas']}\n              popoverBody={t('createTopic.leaderReplicaLabelBody')}\n              popoverHeader={t('createTopic.leaderReplicaLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n                Cleanup\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.cleanupSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min cleanable dirty ratio'\n              fieldLabel='Minimum cleanable dirty ratio'\n              fieldValue={topic['min.cleanable.dirty.ratio']}\n              popoverBody={t('createTopic.minRatioLabelBody')}\n              popoverHeader={t('createTopic.minRatioLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min compaction lag time'\n              fieldLabel='Minimum compaction lag time'\n              fieldValue={topic['min.compaction.lag.ms']}\n              popoverBody={t('createTopic.minLagLabelBody')}\n              popoverHeader={t('createTopic.minLagLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment time'\n              fieldLabel='Segment time'\n              fieldValue={topic['segment.ms']}\n              popoverBody={t('createTopic.segementTimeLabelBody')}\n              popoverHeader={t('createTopic.segementTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment jitter time'\n              fieldLabel='Segment jitter time'\n              fieldValue={topic['segment.jitter.ms']}\n              popoverBody={t('createTopic.jitterTimeLabelBody')}\n              popoverHeader={t('createTopic.jitterTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='file delete delay'\n              fieldLabel='File delete delay'\n              fieldValue={topic['file.delete.delay.ms']}\n              popoverBody={t('createTopic.deleteDelayLabelBody')}\n              popoverHeader={t('createTopic.deleteDelayLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='preallocation log segment files'\n              fieldLabel='Preallocation log segment files'\n              fieldValue={topic.preallocate}\n              popoverBody={t('createTopic.preallocateLabelBody')}\n              popoverHeader={t('createTopic.preallocateLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                Index\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.indexSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='index interval size'\n              fieldLabel='Index interval size'\n              fieldValue={topic['index.interval.bytes']}\n              popoverBody={t('createTopic.indexIntervalLabelBody')}\n              popoverHeader={t('createTopic.indexIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment index size'\n              fieldLabel='Segment index size'\n              fieldValue={topic['segment.index.bytes']}\n              popoverBody={t('createTopic.segementIntervalLabelBody')}\n              popoverHeader={t('createTopic.segementIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                Flush\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.flushSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval messages'\n              fieldLabel='Flush interval messages'\n              fieldValue={topic['flush.messages']}\n              popoverBody={t('createTopic.intervalMessagesLabelBody')}\n              popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval time'\n              fieldLabel='Flush interval time'\n              fieldValue={topic['flush.ms']}\n              popoverBody={t('createTopic.intervalTimeLabelBody')}\n              popoverHeader={t('createTopic.intervalTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <Divider />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                Delete topic (irreversible)\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.deleteTopicInfo')}\n              </Text>\n            </TextContent>\n\n            <Button\n              variant='danger'\n              className='section-margin'\n              onClick={deleteTopic}\n            >\n              Delete topic\n            </Button>\n          </PageSection>\n        </PageGroup>\n      </GridItem>\n      <GridItem span={2} className='grid-item-padding'>\n        <Button variant='primary' onClick={updateTopic}>\n          Edit properties\n        </Button>\n      </GridItem>\n    </Grid>\n  );\n};\n","export const ConsumerGroupDataByTopics = [\n  {\n    id: 'Custom_0',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_1',\n    members: 1,\n    partitions: 1,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_2',\n    members: 0,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_3',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_4',\n    members: 1,\n    partitions: 0,\n    state: 'Stable',\n  },\n];\n","export const mockConsumerGroupDetailByTopics = [\n  {\n    partition: 0,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 2,\n    logendOffset: 0,\n    offsetLag: 1,\n  },\n  {\n    partition: 1,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 0,\n    logendOffset: 0,\n    offsetLag: 0,\n  },\n  {\n    partition: 2,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 0,\n    logendOffset: 0,\n    offsetLag: 0,\n  },\n];\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { mockConsumerGroupDetailByTopics } from './ConsumerGroupDetailByTopics';\nimport { IConsumerGroupByTopic } from './SearchConsumerGroupsByTopics.patternfly';\n\nexport interface ISearchTopicsConsumerListProps {\n  isExpanded: (value: boolean) => void;\n  consumerGroupDetail: IConsumerGroupByTopic | undefined;\n}\n\nexport const ConsumerGroupsByTopicDrawer: React.FunctionComponent<ISearchTopicsConsumerListProps> = ({\n  isExpanded,\n  consumerGroupDetail,\n}) => {\n  const columns = [\n    'Partition',\n    'Client ID + Customer ID',\n    'Current offset',\n    'Log end offset',\n    'Offset lag',\n    {\n      title: '',\n      dataLabel: 'Action',\n    },\n  ];\n\n  const rows = mockConsumerGroupDetailByTopics.map((consumergroup) => [\n    consumergroup.partition,\n    consumergroup.id,\n    consumergroup.currentOffset,\n    consumergroup.logendOffset,\n    consumergroup.offsetLag,\n    { title: <a href='#'>Reset offset</a> },\n  ]);\n\n  const onCloseClick = () => {\n    isExpanded(false);\n  };\n\n  return (\n    <DrawerPanelContent widths={{ default: 'width_50' }}>\n      <DrawerHead>\n        <span>\n          <TextContent>\n            <Text>Consumer group ID</Text>\n            <Text component={TextVariants.h1}>\n              {consumerGroupDetail && consumerGroupDetail.id}\n            </Text>\n          </TextContent>\n        </span>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onCloseClick} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <TextContent>\n          <Flex>\n            <FlexItem>\n              <Text component={TextVariants.h4} size={50}>\n                Active members\n              </Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.members}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>Unconsumed partitions</Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.partitions}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>State</Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.state}\n              </Text>\n            </FlexItem>\n          </Flex>\n        </TextContent>\n      </DrawerPanelBody>\n\n      <Table\n        aria-label='Compact Table'\n        variant={TableVariant.compact}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </DrawerPanelContent>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  InputGroup,\n  SearchInput,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { ConsumerGroupDataByTopics } from './ConsumerDataByTopics';\n\nexport interface IConsumerGroupByTopic {\n  id: string;\n  members: number;\n  partitions: number;\n  state: string;\n}\nexport interface ISearchConsumerGroupsByTopicsProps {\n  setTableData: (value: IConsumerGroupByTopic[]) => void;\n}\nexport const SearchConsumerGroupsByTopics: React.FunctionComponent<ISearchConsumerGroupsByTopicsProps> = ({\n  setTableData,\n}) => {\n  const [searchText, setSearchText] = useState('');\n\n  const onChangeInput = (value: string) => {\n    setSearchText(value);\n  };\n\n  const onConfirm = () => {\n    setTableData(\n      ConsumerGroupDataByTopics.filter(\n        (row) => row.id.toLowerCase().indexOf(searchText.toLowerCase()) > -1\n      )\n    );\n  };\n  const onClear = () => {\n    setSearchText('');\n    setTableData(ConsumerGroupDataByTopics);\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='searchText-consumer-groups-by-topic-input'\n        type='searchText'\n        aria-label='searchText input'\n        placeholder='Search'\n        value={searchText}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n      <Button\n        variant={ButtonVariant.control}\n        aria-label='searchText button for searchText input'\n        onClick={onConfirm}\n        id='searchText-consumer-groups-by-topic-button'\n      >\n        <SearchIcon />\n      </Button>\n    </InputGroup>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Label,\n  Card,\n  Divider,\n  Pagination,\n  Toolbar,\n  Button,\n  ToolbarContent,\n  Drawer,\n  DrawerContent,\n  ToolbarItem,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { ConsumerGroupDataByTopics } from './ConsumerDataByTopics';\nimport { ConsumerGroupsByTopicDrawer } from './ConsumerGroupsByTopicsDrawer.patternfly';\nimport {\n  SearchConsumerGroupsByTopics,\n  IConsumerGroupByTopic,\n} from './SearchConsumerGroupsByTopics.patternfly';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { EmptySearch } from '../../../TopicList/Components/EmptySearch';\n\nexport const ConsumerGroupByTopicList: React.FunctionComponent = () => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState(0);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [\n    consumerGroupDetail,\n    setConsumerGroupDetail,\n  ] = useState<IConsumerGroupByTopic>();\n  const [tableData, setTableData] = useState(ConsumerGroupDataByTopics);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const onClickConsumerGroup = (\n    id: string,\n    members: number,\n    partitions: number,\n    state: string\n  ) => {\n    const consumerDetail = { id, members, partitions, state };\n    setConsumerGroupDetail(consumerDetail);\n    setIsExpanded(true);\n  };\n  const panelContent = (\n    <ConsumerGroupsByTopicDrawer\n      consumerGroupDetail={consumerGroupDetail}\n      isExpanded={setIsExpanded}\n    />\n  );\n\n  const tableColumns = [\n    { title: 'Consumer group ID' },\n    { title: 'Active members for this topic' },\n    { title: 'Unconsumed partitions for this topic' },\n    { title: 'State' },\n  ];\n  const rowData = tableData.map((ConsumerGroupByTopic) => [\n    {\n      title: (\n        <Button\n          variant='link'\n          onClick={() =>\n            onClickConsumerGroup(\n              ConsumerGroupByTopic.id,\n              ConsumerGroupByTopic.members,\n              ConsumerGroupByTopic.partitions,\n              ConsumerGroupByTopic.state\n            )\n          }\n        >\n          {ConsumerGroupByTopic.id}\n        </Button>\n      ),\n    },\n    ConsumerGroupByTopic?.members,\n    ConsumerGroupByTopic?.partitions,\n    {\n      title: (\n        <Label\n          color={ConsumerGroupByTopic.state === 'Stable' ? 'green' : 'red'}\n          icon={\n            ConsumerGroupByTopic.state === 'Stable' ? (\n              <CheckCircleIcon />\n            ) : (\n              <ExclamationCircleIcon />\n            )\n          }\n        >\n          {ConsumerGroupByTopic.state}\n        </Label>\n      ),\n    },\n  ]);\n\n  return (\n    <>\n      <Card>\n        <Title headingLevel='h4'> </Title>\n        <Drawer isExpanded={isExpanded}>\n          <DrawerContent panelContent={panelContent}>\n            <Toolbar>\n              <ToolbarContent>\n                <ToolbarItem>\n                  <SearchConsumerGroupsByTopics setTableData={setTableData} />\n                </ToolbarItem>\n\n                <ToolbarItem variant='pagination'>\n                  <Pagination\n                    itemCount={rowData.length}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    widgetId='pagination-options-menu-top'\n                    onPerPageSelect={onPerPageSelect}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n            <Divider />\n\n            <Table\n              aria-label='Compact Table'\n              variant={TableVariant.compact}\n              cells={tableColumns}\n              rows={\n                page != 1\n                  ? rowData.slice(offset, offset + perPage)\n                  : rowData.slice(0, perPage)\n              }\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n\n            {rowData.length > 0 ? (\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='pagination-options-menu-top'\n                onPerPageSelect={onPerPageSelect}\n                offset={0}\n              />\n            ) : (\n              <EmptySearch />\n            )}\n          </DrawerContent>\n        </Drawer>\n      </Card>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic } from '../../../Contexts/Topic';\nimport {\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { useHistory, useParams } from 'react-router';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupByTopicList } from './Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\n\nexport type TopicDetailRouteParams = {\n  topicName: string;\n};\n\n// TODO: Remove this mock, fetch it from server.\nconst topic: AdvancedTopic = {\n  name: 'SampleTopic2345',\n  numPartitions: '52',\n  replicationFactor: '35',\n  'min.insync.replicas': '78',\n  'retention.ms': '78',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '50',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '4',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': 'Producer',\n  'log.cleanup.policy': 'Delete',\n  'log.retention.bytes': '-1',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '78',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': 'false',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '789',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '4',\n  'min.compaction.lag.ms': '58',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '6048000',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '0',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '6000',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: 'true',\n  'index.interval.bytes': '4096',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '10847560',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '783945',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '3894949',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicDetailGroup: React.FC = () => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(topic);\n  const { topicName } = useParams<TopicDetailRouteParams>();\n  const history = useHistory();\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const fetchTopicDetail = async (topicName: string) => {\n    const response = await getTopicDetail(topicName, config);\n    setTopicDetail(response);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const updateTopic = () => {\n    history.push(`/topics/update/${topicName}`);\n  };\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n\n  return (\n    <>\n      <TopicDetailHead topicName={topicName} />\n      <PageSection variant={PageSectionVariants.light}>\n        <Tabs\n          activeKey={1}\n          onSelect={() => {\n            return;\n          }}\n          isBox={false}\n          className='tab-padding'\n        >\n          <Tab\n            eventKey={0}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupByTopicList />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n            <TopicDetailView\n              topic={topicDetail}\n              deleteTopic={deleteTopic}\n              updateTopic={updateTopic}\n            />\n          </Tab>\n        </Tabs>\n        {deleteModal && (\n          <DeleteTopics\n            topicName={topicName}\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport { Title, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\n\nexport interface IUpdateTopicHeadProps {\n  topicName: string;\n}\n\nexport const UpdateTopicHead: React.FC<IUpdateTopicHeadProps> = ({\n  topicName,\n}) => {\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='/#/topics'>Topics</BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {topicName}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <section\n      className='pf-c-page__main-breadcrumb'\n      style={{ padding: '20px 20px' }}\n    >\n      {mainBreadcrumbs}\n      <br />\n      <br />\n      <Title headingLevel='h1' size='xl'>\n        {topicName}\n      </Title>\n    </section>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport '../../CreateTopic/Components/CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from '../../CreateTopic/Components/TopicAdvanceConfig';\nimport { useParams } from 'react-router';\nimport { getTopic, updateTopicModel } from '../../../../Services/index';\nimport { Topic, TopicSettings } from '../../../../OpenApi/api';\nimport { AdvancedTopic, TopicContext } from '../../../../Contexts/Topic';\nimport { ConfigContext } from '../../../../Contexts';\nimport { DeleteTopics } from '../../TopicList/Components/DeleteTopicsModal';\nimport { AlertContext } from '../../../../Contexts/Alert';\n\nexport const UpdateTopicView: React.FC = () => {\n  const { store, updateBulkStore } = React.useContext(TopicContext);\n  const { topicName } = useParams<any>();\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [topic, setTopic] = useState<Topic>();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n\n  const fetchTopic = async (topicName) => {\n    const topicRes = await getTopic(topicName, config);\n    setTopic(topicRes);\n    if (topicRes) saveToStore(topicRes);\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, []);\n\n  const saveToStore = (topic: Topic) => {\n    const advanceConfig: AdvancedTopic = store;\n    advanceConfig.numPartitions = topic?.partitions?.length.toString() || '0';\n    advanceConfig.name = topic.name || '';\n    topic.config?.forEach((configItem) => {\n      advanceConfig[configItem.key || ''] = configItem.value || '';\n    });\n    updateBulkStore(advanceConfig);\n  };\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n\n  const patchConfig = (previousTopic: Topic) => {\n    const updatedConfig = previousTopic.config?.length\n      ? previousTopic.config.filter((item) => {\n          if (item.key && store[item.key] != item.value)\n            return { key: item.key, value: store[item.key] };\n        })\n      : Object.keys(store).map((key) => {\n          return { key: key, value: store[key] };\n        });\n    return updatedConfig;\n  };\n\n  const saveTopic = async () => {\n    const newConfig = topic && (await patchConfig(topic));\n\n    const topicSettings: TopicSettings = {\n      numPartitions: Number(store.numPartitions),\n      replicationFactor: Number(store.replicationFactor),\n      config: newConfig,\n    };\n\n    try {\n      const updateStatus = await updateTopicModel(\n        store.name,\n        topicSettings,\n        config\n      );\n\n      if (updateStatus === 204) {\n        addAlert(\n          'The topic was successfully updated in the Kafka instance',\n          AlertVariant.success\n        );\n      }\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        deleteTopic={deleteTopic}\n      />\n      <br />\n      <br />\n      {deleteModal && (\n        <DeleteTopics\n          deleteModal={deleteModal}\n          setDeleteModal={setDeleteModal}\n          topicName={topicName}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ConsumerGroupByTopicList } from '../TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\nimport { UpdateTopicHead } from './Components/UpdateTopicHead';\nimport { UpdateTopicView } from './Components/UpdateTopicView';\nimport { useParams } from 'react-router';\n\nexport interface IUpdateTopicRouteParams {\n  topicName: string;\n}\n\nexport const UpdateTopicPage: React.FC = () => {\n  const { topicName } = useParams<IUpdateTopicRouteParams>();\n  return (\n    <>\n      <UpdateTopicHead topicName={topicName} />\n      <PageSection variant={PageSectionVariants.light}>\n        <Tabs\n          activeKey={1}\n          onSelect={() => {\n            return;\n          }}\n          isBox={false}\n          className='tab-padding'\n        >\n          <Tab\n            eventKey={0}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupByTopicList />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n            <UpdateTopicView />\n          </Tab>\n        </Tabs>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { ConsumerGroupsList } from '../../Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\n\nexport const ConsumerGroupsView: FunctionComponent = () => {\n  return <ConsumerGroupsList />;\n};\n\nexport default ConsumerGroupsView;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\ntype IUnexpectedErrorProps = {\n  updateState: (hasError: boolean) => void;\n};\n\nexport const UnexpectedError: React.FC<IUnexpectedErrorProps> = ({\n  updateState,\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const navigateToHome = () => {\n    updateState(false);\n    history.push('/');\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={ExclamationCircleIcon} />\n        <Title headingLevel='h1' size={TitleSizes.lg}>\n          {t('common.errorBoundaryTitle')}\n        </Title>\n        <EmptyStateBody>{t('common.unexpectedError')}</EmptyStateBody>\n        <Button variant={ButtonVariant.primary} onClick={navigateToHome}>\n          {t('common.returnToHome')}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React, { ErrorInfo } from 'react';\nimport { UnexpectedError } from './UnexpectedError';\n\ntype IErrorBoundaryProps = {\n  children: React.ReactNode;\n};\n\ntype IErrorBoundary = {\n  hasError: boolean;\n};\n\nexport class ErrorBoundary extends React.Component<\n  IErrorBoundaryProps,\n  IErrorBoundary\n> {\n  state: IErrorBoundary = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error: Error): IErrorBoundary {\n    console.error(error);\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    console.error('error:', error, errorInfo);\n  }\n\n  updateState = (hasError: boolean): void => {\n    this.setState({ hasError });\n  };\n\n  render(): React.ReactNode {\n    if (this.state.hasError) {\n      return <UnexpectedError updateState={this.updateState} />;\n    }\n    return this.props.children;\n  }\n}\n","import {\n  Avatar,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  PageHeader,\n  Brand,\n  PageHeaderTools,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport avatarImg from '../../Images/img_avatar.svg';\nimport brandImg from '../../Images/brandImg.png';\n\nexport const AppMastHead: React.FC = () => {\n  const [isDropDownOpen, setIsDropDownOpen] = useState<boolean>(false);\n  const handleUserDropDownSelect = () => {\n    setIsDropDownOpen(!isDropDownOpen);\n  };\n\n  const handleUserDropDownToggle = () => {\n    setIsDropDownOpen(!isDropDownOpen);\n  };\n\n  const userDropDownItems = [<DropdownItem key='logout'>Logout</DropdownItem>];\n  const brandImgLogo = <Brand src={brandImg} alt={'Red Hat logo'} />;\n\n  const userDropDownToggle = (\n    <DropdownToggle\n      id='user-dropdown-toggle'\n      onToggle={handleUserDropDownToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      Ned Username\n    </DropdownToggle>\n  );\n\n  const userDropDown = (\n    <Dropdown\n      onSelect={handleUserDropDownSelect}\n      toggle={userDropDownToggle}\n      isOpen={isDropDownOpen}\n      isPlain\n      dropdownItems={userDropDownItems}\n    />\n  );\n\n  const avatar = (\n    <React.Fragment>\n      <Avatar src={avatarImg} className='app-masthead-avatar' alt='avatar' />\n    </React.Fragment>\n  );\n\n  const HeaderTools = (\n    <PageHeaderTools>\n      {userDropDown}\n      {avatar}\n    </PageHeaderTools>\n  );\n\n  return (\n    <PageHeader\n      logo={brandImgLogo}\n      logoComponent='h1'\n      headerTools={HeaderTools}\n    />\n  );\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst init = (): void => {\n  i18n\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      detection: {\n        order: ['htmlTag', 'navigator'],\n        caches: [],\n      },\n      fallbackLng: 'en',\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      resources,\n    });\n};\n\nexport { init };\n","import { init } from '../i18n';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { ConfigContext } from '../Contexts';\nimport { Topics } from '../Panels/Topics';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport CreateTopic from '../Panels/Topics/CreateView';\nimport TopicDetail from '../Panels/Topics/DetailView';\nimport UpdateTopicView from '../Panels/Topics/UpdateView';\nimport { TopicContextProvider } from '../Contexts/Topic';\nimport { ConsumerGroupsView } from '../Panels/ConsumerGroups/ConsumerGroupsView';\nimport { ConsumerGroupsTopicsView } from '../Panels/ConsumerGroupsByTopic/ConsumerGroupsByTopic';\nimport { ErrorBoundary } from '../Components/ErrorBoundary/ErrorBoundary';\nimport { AlertProvider } from '../Contexts/Alert/Context';\nimport { MastHead } from '../Panels/MastHead/MastHead';\n\ninit(); //Bootstrap i18next support\nReactDOM.render(\n  <ConfigContext.Provider\n    value={{\n      basePath: 'http://localhost:8000/api/managed-services-strimzi-ui/v1/api',\n      getToken: async () => '',\n    }}\n  >\n    <TopicContextProvider>\n      <MastHead>\n        <Router>\n          <AlertProvider>\n            <ErrorBoundary>\n              <Switch>\n                <Route path='/' component={Topics} exact />\n                <Route path='/topics' component={Topics} exact />\n                <Route path='/topic/:topicName' component={TopicDetail} exact />\n                <Route path='/topics/create' component={CreateTopic} exact />\n                <Route\n                  path='/topics/update/:topicName'\n                  component={UpdateTopicView}\n                  exact\n                />\n                <Route\n                  path='/consumerGroups'\n                  component={ConsumerGroupsView}\n                  exact\n                />\n                <Route\n                  path='/topics/consumerGroups/:topicName'\n                  component={ConsumerGroupsTopicsView}\n                  exact\n                />\n              </Switch>\n            </ErrorBoundary>\n          </AlertProvider>\n        </Router>\n      </MastHead>\n    </TopicContextProvider>\n  </ConfigContext.Provider>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport { Page } from '@patternfly/react-core';\nimport { AppMastHead } from '../../Modules/AppNavigation/AppMastHead';\n\nexport type MastHeadProps = {\n  children: React.ReactNode;\n};\n\nexport const MastHead: React.FC<MastHeadProps> = ({ children }) => {\n  return (\n    <Page mainContainerId='main-container' header={<AppMastHead />}>\n      {children}\n    </Page>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { TopicDetailGroup } from '../../Modules/Topics/TopicDetails/TopicDetailPage';\n\nconst TopicDetail: FunctionComponent = () => {\n  return <TopicDetailGroup />;\n};\n\nexport { TopicDetail };\n\nexport default TopicDetail;\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { useHistory } from 'react-router-dom';\nimport { CreateTopicPage } from 'src/Modules/Topics/CreateTopic/CreateTopicPage';\n\nconst CreateTopic: FunctionComponent = () => {\n  const history = useHistory();\n\n  return (\n    <CreateTopicPage\n      setIsCreateTopic={(value) => {\n        if (!value) {\n          history.goBack();\n        }\n      }}\n    />\n  );\n};\n\nexport { CreateTopic };\n\nexport default CreateTopic;\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { UpdateTopicPage } from 'src/Modules/Topics/UpdateTopic/UpdateTopicPage';\n\nconst UpdateTopic: FunctionComponent = () => {\n  return <UpdateTopicPage />;\n};\n\nexport { UpdateTopic };\n\nexport default UpdateTopic;\n","import React, { FunctionComponent } from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { ConsumerGroupByTopicList } from '../../Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\n\nexport const ConsumerGroupsTopicsView: FunctionComponent = () => {\n  return <ConsumerGroupByTopicList />;\n};\n\nexport default ConsumerGroupsTopicsView;\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertGroup,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { AlertType } from '../../Contexts/Alert';\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport const ServerAlertGroup: React.FC<AlertToastGroupProps> = ({\n  alerts,\n  onCloseAlert,\n}) => {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, message }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=''\n          title={message}\n          actionClose={\n            <AlertActionCloseButton\n              title={message}\n              onClose={() => onCloseAlert(key)}\n            />\n          }\n        />\n      ))}\n    </AlertGroup>\n  );\n};\n","import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nconst initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.cleanup.policy': '',\n  'log.retention.bytes': '',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport { DefaultApi, Topic, TopicSettings, TopicsList } from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length;\n\n  topicObj.replicationFactor = topic?.partitions\n    ?.map((p) => p.replicas?.length)\n    .reduce(\n      (previousValue = 0, currentValue = 0) => previousValue + currentValue\n    );\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"sourceRoot":""}