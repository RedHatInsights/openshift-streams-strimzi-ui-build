{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/cubes-icon.js","webpack://kafka-ui/./src/Components/Loading/Loading.tsx","webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Hooks/useTimeOut.ts","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/EmptyConsumers.tsx","webpack://kafka-ui/./src/Services/ConsumerGroupsServices.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/SearchConsumers.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/DeleteConsumerGroup.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupDetail.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Utils/axios.ts","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/DeleteTopicsModal.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","Loading","Bullseye","Spinner","initialState","numPartitions","replicationFactor","preallocate","TopicContext","createContext","TopicContextProvider","children","useState","store","setStore","Provider","value","updateStore","toString","updateBulkStore","advanceConfig","useTimeout","callback","delay","savedCallback","useRef","useEffect","current","setTimeout","clearInterval","EmptyConsumers","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","getConsumerGroups","config","limit","offset","topic","getToken","accessToken","basePath","getConsumerGroupList","data","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","getConsumerGroupDetail","getConsumerGroupById","getConsumerGroupsByTopic","SearchConsumers","search","setSearch","InputGroup","SearchInput","id","type","placeholder","onChange","onClear","DeleteConsumerGroup","setDeleteModal","deleteModal","consumerName","onDeleteConsumer","verificationText","setVerificationText","addAlert","useContext","onClose","Modal","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","AlertVariant","response","err","key","isDisabled","toUpperCase","Text","htmlFor","TextInput","autoFocus","ConsumerGroupDetail","setIsExpanded","consumerDetail","rows","consumers","map","consumergroup","partition","groupId","memberId","logEndOffset","lag","DrawerPanelContent","widths","default","DrawerHead","TextContent","component","TextVariants","DrawerActions","DrawerCloseButton","DrawerPanelBody","Flex","FlexItem","length","reduce","prev","cur","Table","TableVariant","cells","dataLabel","TableHeader","TableBody","ConsumerGroupsList","onDeleteConsumerGroup","consumerGroupByTopic","page","setPage","perPage","setPerPage","setOffset","consumerGroups","setConsumerGroups","loading","setLoading","isExpanded","consumerGroupDetail","setConsumerGroupDetail","consumerGroupName","setConsumerGroupName","fetchConsumerGroups","consumerGroupsData","error","onSetPage","_event","pageNumber","onPerPageSelect","tableColumns","_","rowId","items","onDelete","panelContent","rowData","consumer","isInline","consumerData","fetchConsumerGroupDetail","Card","Drawer","DrawerContent","Toolbar","ToolbarContent","ToolbarItem","Pagination","itemCount","widgetId","Divider","slice","TopicDetailHead","topicName","getTopicListPath","onClickTopicList","className","Breadcrumb","BreadcrumbItem","e","preventDefault","to","PageSection","PageSectionVariants","deleteTopic","updateTopic","t","useTranslation","Sidebar","hasGutter","SidebarPanel","JumpLinks","isVertical","label","scrollableSelector","style","position","JumpLinksItem","href","SidebarContent","PageGroup","hasOverflowScroll","padding","Split","SplitItem","isFilled","tabIndex","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","popoverBody","popoverHeader","unit","TopicDetailGroup","onUpdateTopic","onDeleteTopic","onError","eventKey","topicDetail","setTopicDetail","activeTabKey","setActiveTabKey","history","undefined","code","status","fetchTopicDetail","Tabs","activeKey","onSelect","event","isBox","Tab","TabTitleText","push","DeleteTopics","getTopics","getTopicsList","getTopicDetail","getTopic","convertTopicResponse","topicObj","forEach","partitions","updateTopicModel","topicSettings","answer","p","replicas","previousValue","currentValue"],"mappings":"mGAEAA,EAAQ,GAAkB,CACxBC,KAAM,YACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,kmBACTC,QAAS,EACTC,QAAS,GAEXN,EAAQ,GAAY,mBAAoCA,EAAQ,IAChEA,EAAA,GAAqBA,EAAQ,I,0FCRhBO,EAAmC,WAAM,OACpD,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,S,6RCECC,EAA8B,CACzCT,KAAM,GACNU,cAAe,GACfC,kBAAmB,GACnB,sBAAuB,GACvB,eAAgB,IAChB,oBAAqB,OACrB,oBAAqB,GACrB,yBAA0B,QAC1B,yBAA0B,aAC1B,sCAAuC,GACvC,2CAA4C,eAC5C,mBAAoB,GACpB,6BAA8B,GAC9B,iBAAkB,GAClB,kBAAmB,KACnB,uBAAwB,QACxB,oBAAqB,GACrB,yBAA0B,QAC1B,iCAAkC,GAClC,0CAA2C,GAC3C,wCAAyC,GACzC,sBAAuB,GACvB,2BAA4B,eAC5B,4BAA6B,GAC7B,wBAAyB,GACzB,6BAA8B,eAC9B,aAAc,GACd,kBAAmB,eACnB,oBAAqB,GACrB,yBAA0B,eAC1B,uBAAwB,GACxB,4BAA6B,eAC7BC,YAAa,GACb,uBAAwB,GACxB,4BAA6B,QAC7B,sBAAuB,GACvB,2BAA4B,QAC5B,iBAAkB,GAClB,sBAAuB,eACvB,WAAY,GACZ,gBAAiB,gBAGNC,GAAe,IAAAC,eAAc,IAE7BC,EAAsD,SAAC,G,IAClEC,EAAQ,WAEF,GAAoB,IAAAC,UAAwBR,GAA3CS,EAAK,KAAEC,EAAQ,KAgBtB,OACE,kBAACN,EAAaO,SAAQ,CAACC,MAAO,CAAEH,MAAK,EAAEI,YAfrB,SAACtB,EAAcqB,G,MACjCF,EAAS,EAAD,KACHD,KAAK,MACPlB,GAAOqB,EAAME,WAAU,MAY0BC,gBAR9B,SAACC,GACvBN,EAAS,EAAD,KACHD,GACAO,OAMFT,K,2DCxEMU,EAAkB,SAACC,EAAeC,GAC7C,IAAMC,GAAgB,IAAAC,WAEtB,IAAAC,YAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,KAEJ,IAAAI,YAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAM,EAAKK,YAJb,WACEJ,EAAcG,YAGcJ,GAC5B,OAAO,WACLM,cAAc,OAIjB,CAACP,EAAUC,M,kGCVHO,EAA0C,WACrD,OACE,kBAAC,EAAAC,WAAU,CAACC,QAAS,EAAAC,kBAAA,IACnB,kBAAC,EAAAC,eAAc,CAACC,KAAM,OACtB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,OAAK,4BAGnC,kBAAC,EAAAC,eAAc,sC,i2CCXRC,EAAoB,SAC/BC,EACAC,EACAC,EACAC,GAAc,0C,wDAEM,SAAMH,aAAM,EAANA,EAAQI,Y,OAQiB,OAR7CC,EAAc,SAQ+B,GANvC,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGuCC,qBAC3DN,EACAC,EACAC,I,OAEF,MAAO,CAAP,EALmD,SAKnCK,cAGLC,EAAsB,SACjCC,EACAV,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQI,Y,OAQlC,OARMC,EAAc,SAQpB,GANY,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGZK,wBAAwBD,I,OAClC,OADA,SACA,YAEWE,EAAyB,SACpCF,EACAV,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQI,Y,OAQa,OARzCC,EAAc,SAQ2B,GANnC,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGmCO,qBACvDH,I,OAEF,MAAO,CAAP,EAH+C,SAG/BF,cAELM,EAA2B,SACtCd,EACAC,EACAC,EACAC,GAAa,0C,wDAEO,SAAMH,aAAM,EAANA,EAAQI,Y,OAQiB,OAR7CC,EAAc,SAQ+B,GANvC,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGuCC,qBAC3DN,EACAC,EACAC,I,OAEF,MAAO,CAAP,EALmD,SAKnCK,c,wCChEZO,EAAsE,SAAC,G,IAC3EC,EAAM,SACNC,EAAS,YAQT,OACE,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,YAAW,CACVjE,KAAK,aACLkE,GAAG,yBACHC,KAAK,SAAQ,aACF,gBACXC,YAAY,SACZ/C,MAAOyC,EACPO,SAfgB,SAAChD,GACrB0C,EAAU1C,IAeNiD,QAbU,WACdP,EAAU,SCLDQ,EAAgE,SAAC,G,IAC5EC,EAAc,iBACdC,EAAW,cACXC,EAAY,eACZC,EAAgB,mBAEV,GAA0C,IAAA1D,UAAiB,IAA1D2D,EAAgB,KAAEC,EAAmB,KACpCC,GAAa,IAAAC,YAAW,KAAa,SACvCC,EAAU,WACdR,GAAe,IAiBX1B,GAAS,IAAAiC,YAAW,KAM1B,OACE,kBAAC,EAAAE,MAAK,CACJ5C,QAAS,EAAA6C,aAAA,MACTC,OAAQV,EAAW,aACR,yBACXW,MAAM,yBACNC,iBAAiB,UACjBC,WAAW,EAAI,mBACE,gBACjBN,QAASA,EACTO,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLnD,QAAQ,SACRoD,QAjCS,kB,OAAA,E,OAAA,E,EAAA,W,wnCAEbf,EAAiB,GAAMnB,EAAoBmB,EAAc5B,IAAzD,M,OAAiB,S,wBACjBgC,EACE,uCAAuCJ,EACvC,EAAAgB,aAAA,S,+BAGFZ,EAAS,EAAIa,SAASrC,KAAKsC,IAAK,EAAAF,aAAA,Q,oBAElCf,IACAH,GAAe,G,qBAXA,K,+QAkCTqB,IAAK,EACLC,WAA8C,UAAlClB,EAAiBmB,eAAyB,UAIxD,kBAAC,EAAAP,OAAM,CAACnD,QAAQ,OAAOoD,QAAST,EAASa,IAAK,GAAC,YAKjD,kBAAC,EAAAG,KAAI,CAAC9B,GAAG,iBACP,2BAAIQ,G,oBAAmC,KAGzC,6BACA,2BAAOuB,QAAQ,qBAAmB,2BAClC,kBAAC,EAAAC,UAAS,CACR7E,MAAOuD,EACPV,GAAG,oBACHlE,KAAK,oBACLmE,KAAK,OACLE,SAvC+B,SAAChD,GACpCwD,EAAoBxD,IAuChB8E,WAAW,MC5DNC,EAA0E,SAAC,G,IACtFC,EAAa,gBACbC,EAAc,iBAcRC,EACJD,GACAA,EAAeE,UAAUC,KAAI,SAACC,GAAkB,OAC9CA,EAAcC,UACdD,EAAcE,QAAUF,EAAcG,SACtCH,EAAc1D,OACd0D,EAAcI,aACdJ,EAAcK,QAOlB,OACE,kBAAC,EAAAC,mBAAkB,CAACC,OAAQ,CAAEC,QAAS,aACrC,kBAAC,EAAAC,WAAU,KACT,8BACE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAApB,KAAI,0BACL,kBAAC,EAAAA,KAAI,CAACqB,UAAW,EAAAC,aAAA,IACdhB,GAAkBA,EAAepC,MAIxC,kBAAC,EAAAqD,cAAa,KACZ,kBAAC,EAAAC,kBAAiB,CAAC/B,QAhBN,WACnBY,GAAc,QAkBZ,kBAAC,EAAAoB,gBAAe,KACd,kBAAC,EAAAL,YAAW,KACV,kBAAC,EAAAM,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAA3B,KAAI,CAACqB,UAAW,EAAAC,aAAA,GAAiB3E,KAAM,IAAE,kBAG1C,kBAAC,EAAAqD,KAAI,CAACqB,UAAW,EAAAC,aAAA,IACdhB,GAAkBA,EAAeE,UAAUoB,SAGhD,kBAAC,EAAAD,SAAQ,KACP,kBAAC,EAAA3B,KAAI,CAACqB,UAAW,EAAAC,aAAA,IAAe,uBAChC,kBAAC,EAAAtB,KAAI,CAACqB,UAAW,EAAAC,aAAA,IACdhB,GACCA,EAAeE,UAAUqB,QAAO,SAAUC,EAAMC,GAC9C,OAAOD,EAAOC,EAAIhB,IAAM,EAAIe,EAAO,EAAI,IACtC,QAOf,kBAAC,EAAAE,MAAK,cACO,gBACX3F,QAAS,EAAA4F,aAAA,QACTC,MApEU,CACd,YACA,0BACA,iBACA,iBACA,aACA,CACE9C,MAAO,GACP+C,UAAW,WA6DT5B,KAAMA,GAEN,kBAAC,EAAA6B,YAAW,MACZ,kBAAC,EAAAC,UAAS,S,60CC9DLC,EAAmE,SAAC,G,IAC/EC,EAAqB,wBACrBC,EAAoB,uBACpBvF,EAAK,QAEC,GAAkB,IAAAhC,UAAiB,GAAlCwH,EAAI,KAAEC,EAAO,KACd,GAAwB,IAAAzH,UAAiB,IAAxC0H,EAAO,KAAEC,EAAU,KACpB,GAAsB,IAAA3H,UAAiB,GAAtC+B,EAAM,KAAE6F,EAAS,KAClB,GAAsC,IAAA5H,YAArC6H,EAAc,KAAEC,EAAiB,KAClC,GAAwB,IAAA9H,WAAkB,GAAzC+H,EAAO,KAAEC,EAAU,KACpB,GAA8B,IAAAhI,WAAkB,GAA/CiI,EAAU,KAAE7C,EAAa,KAC1B,GAAsB,IAAApF,UAAiB,IAAtC6C,EAAM,KAAEC,EAAS,KAClB,GAGF,IAAA9C,YAFFkI,EAAmB,KACnBC,EAAsB,KAElB,GAA4C,IAAAnI,YAA3CoI,EAAiB,KAAEC,EAAoB,KAGxC,GAAgC,IAAArI,WAAS,GAAxCwD,EAAW,KAAED,EAAc,KAE5B1B,GAAS,IAAAiC,YAAW,KAClBD,GAAa,IAAAC,YAAW,KAAa,SAEvCwE,EAAsB,qD,gEACtBf,IAAwBvF,EAAxB,Y,iBAE2B,O,sBAAA,GAAMW,EAC/Bd,EACA,IACAE,EACAC,I,cAJIuG,EAAqB,WAOzBT,EAAkBS,G,+BAGpB1E,EAAS,EAAIa,SAASrC,KAAKmG,MAAO,EAAA/D,aAAA,Q,oBAEpCuD,GAAW,G,aAGkB,O,sBAAA,GAAMpG,EAAkBC,I,cAA7C0G,EAAqB,WAEzBT,EAAkBS,G,+BAGpB1E,EAAS,EAAIa,SAASrC,KAAKmG,MAAO,EAAA/D,aAAA,Q,aAEpCuD,GAAW,G,mCAWf,IAPA,IAAAlH,YAAU,WACRkH,GAAW,GACXM,MACC,CAACzF,EAAQW,KAEZ,QAAW,WAAM,OAAA8E,MAAuB,KAEpCP,EACF,OAAO,kBAAC1I,EAAA,EAAO,MAGjB,IAAMoJ,GAAY,SAACC,EAAQC,GACzBlB,EAAQkB,GACRf,EAAUJ,EAAOE,IAGbkB,GAAkB,SAACF,EAAQhB,GAC/BC,EAAWD,IAGPmB,GAAe,CACnB,CAAE1E,MAAO,qBACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,wBASLG,GAAU,CAAC,CAAEH,MAAO,SAAUK,QAAS,SAACsE,EAAGC,GAAU,OAP1C,SAACA,IACZlB,aAAc,EAAdA,EAAgBmB,QAClBX,EAAqBR,EAAemB,MAAMD,GAAO9F,IAEnDM,GAAe,GAG0C0F,CAASF,MAiB9DG,GACJ,kBAAC/D,EAAmB,CAClBC,cAAeA,EACfC,eAAgB6C,IAGdiB,IACJtB,aAAc,EAAdA,EAAgBmB,MAAMxD,KAAI,SAAC4D,G,MAAa,OACtC,CACEjF,MACE,kBAAC,EAAAI,OAAM,CACLnD,QAAQ,OACRiI,UAAQ,EACR7E,QAAS,WAAM,OA5BQ,SAAO4D,GAAiB,0C,0DAEhC,O,sBAAA,GAAM3F,EACzB2F,EACAvG,I,cAFIyH,EAAe,WAKnBnB,EAAuBmB,G,+BAGzBzF,EAAS,EAAIa,SAASrC,KAAKmG,MAAO,EAAA/D,aAAA,Q,oBAEpCW,GAAc,G,WAgBSmE,CAAyBH,EAASnG,MAEhDmG,EAASnG,KAKE,QAAlB,EAAAmG,EAAS7D,iBAAS,eAAEoB,OACpByC,EAAS7D,UAAUqB,QAAO,SAAUC,EAAMC,GACxC,OAAOD,EAAOC,EAAIhB,IAAM,EAAIe,EAAO,EAAI,IACtC,SACC,GAER,OACE,oCACE,kBAAC,EAAA2C,KAAI,KACFhG,GACC,kBAACF,EAAmB,CAClBG,aAAc2E,EACd7E,eAAgBA,EAChBC,YAAaA,EACbE,iBAAkB4D,IAGtB,kBAAC,EAAAmC,OAAM,CAACxB,WAAYA,GAClB,kBAAC,EAAAyB,cAAa,CAACR,aAAcA,IAC3B,kBAAC,EAAAS,QAAO,KACN,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,YAAW,KACV,kBAACjH,EAAe,CAACC,OAAQA,EAAQC,UAAWA,KAE9C,kBAAC,EAAA+G,YAAW,CAACzI,QAAQ,cACnB,kBAAC,EAAA0I,WAAU,CACTC,UAAWZ,GAAQxC,OACnBe,QAASA,EACTF,KAAMA,EACNiB,UAAWA,GACXuB,SAAS,gCACTpB,gBAAiBA,QAKzB,kBAAC,EAAAqB,QAAO,MACP1C,EACC,kBAAC,EAAAR,MAAK,cACO,gBACX3F,QAAS,EAAA4F,aAAA,QACTC,MAAO4B,GACPvD,KACU,GAARkC,EACI2B,GAAQe,MAAMnI,EAAQA,EAAS2F,GAC/ByB,GAAQe,MAAM,EAAGxC,IAGvB,kBAAC,EAAAP,YAAW,MACZ,kBAAC,EAAAC,UAAS,OAGZ,kBAAC,EAAAL,MAAK,cACO,gBACX3F,QAAS,EAAA4F,aAAA,QACTC,MAAO4B,GACPvD,KACU,GAARkC,EACI2B,GAAQe,MAAMnI,EAAQA,EAAS2F,GAC/ByB,GAAQe,MAAM,EAAGxC,GAEvBpD,QAASA,IAET,kBAAC,EAAA6C,YAAW,MACZ,kBAAC,EAAAC,UAAS,OAGb+B,GAAQxC,OAAS,EAChB,kBAACzF,EAAc,MAEf,kBAAC,EAAA4I,WAAU,CACTC,UAAWZ,GAAQxC,OACnBe,QAASA,EACTF,KAAMA,EACNiB,UAAWA,GACXuB,SAAS,mCACTpB,gBAAiBA,GACjB7G,OAAQ,OAMlB,kBAAC,EAAAkI,QAAO,S,8ECnODE,G,QAAkD,SAAC,G,IAC9DC,EAAS,YACTC,EAAgB,mBAChBC,EAAgB,mBAEhB,OACE,oCACE,6BAASC,UAAU,8BACjB,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,CACbjG,QAAS,SAACkG,GACRA,EAAEC,iBACFL,KAEFM,GAAIP,KAAkB,UAIxB,kBAAC,EAAAI,eAAc,KAAEL,KAGrB,kBAAC,EAAAS,YAAW,CAACzJ,QAAS,EAAA0J,oBAAA,OACpB,kBAAC,EAAA3E,YAAW,KACV,kBAAC,EAAApB,KAAI,CAACqB,UAAW,EAAAC,aAAA,IAAkB+D,S,sHCVhC,EAAiE,SAAC,G,IAC7EpI,EAAK,QACL+I,EAAW,cACXC,EAAW,cAEHC,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAL,YAAW,CAACN,UAAU,gDACrB,kBAAC,EAAAY,QAAO,CAACC,WAAS,GAChB,kBAAC,EAAAC,aAAY,CAACjK,QAAQ,UACpB,kBAAC,EAAAkK,UAAS,CACRC,YAAU,EACVC,MAAM,kBACNC,mBAAmB,qBACnBC,MAAO,CAAEC,SAAU,aAEnB,kBAAC,EAAAC,cAAa,CAAChH,IAAK,EAAGiH,KAAK,uBAAqB,sBAGjD,kBAAC,EAAAD,cAAa,CAAChH,IAAK,EAAGiH,KAAK,aAAW,YAGvC,kBAAC,EAAAD,cAAa,CAAChH,IAAK,EAAGiH,KAAK,QAAM,OAGlC,kBAAC,EAAAD,cAAa,CAAChH,IAAK,EAAGiH,KAAK,gBAAc,eAG1C,kBAAC,EAAAD,cAAa,CAAChH,IAAK,EAAGiH,KAAK,YAAU,WAGtC,kBAAC,EAAAD,cAAa,CAAChH,IAAK,EAAGiH,KAAK,UAAQ,SAGpC,kBAAC,EAAAD,cAAa,CAAChH,IAAK,EAAGiH,KAAK,UAAQ,SAGpC,kBAAC,EAAAD,cAAa,CAAChH,IAAK,EAAGiH,KAAK,WAAS,YAKzC,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,UAAS,CAACC,mBAAiB,EAAC/I,GAAG,qBAC9B,kBAAC,EAAA4H,YAAW,CAACoB,QAAS,CAAEhG,QAAS,cAC/B,kBAAC,EAAAiG,MAAK,KACJ,kBAAC,EAAAC,UAAS,CAACC,UAAQ,GACjB,kBAAC,EAAAjG,YAAW,KACV,kBAAC,EAAApB,KAAI,CACHqB,UAAW,EAAAC,aAAA,GACXgG,UAAW,EACXpJ,GAAG,sBAAoB,sBAIzB,kBAAC,EAAA8B,KAAI,CAACqB,UAAW,EAAAC,aAAA,EAAgBkE,UAAU,gBACxCU,EAAE,gCAIP,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,oBACbC,WAAW,OACXC,WAAYzK,EAAMjD,KAClB2N,YAAazB,EAAE,kCACf0B,cAAe1B,EAAE,oCAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,yBACbC,WAAW,aACXC,WAAYzK,EAAMvC,cAClBiN,YAAazB,EAAE,mCACf0B,cAAe1B,EAAE,qCAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,wBACbC,WAAW,WACXC,WAAY,IACZC,YAAazB,EAAE,iCACf0B,cAAe1B,EAAE,mCAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,mCACbC,WAAW,2BACXC,WAAY,IACZC,YAAazB,EAAE,uCACf0B,cAAe1B,EAAE,yCAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,8BACbC,WAAW,iBACXC,WAAYzK,EAAM,gBAClB0K,YAAazB,EAAE,sCACf0B,cAAe1B,EAAE,sCACjB2B,KAAM,OAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,8BACbC,WAAW,iBACXC,WAAYzK,EAAM,mBAClB2K,cAAe1B,EAAE,uCACjByB,YAAazB,EAAE,uCACf2B,KAAM,UAGR,kBAAC,EAAAzG,YAAW,CAACoE,UAAU,kBACrB,kBAAC,EAAAxF,KAAI,CACHqB,UAAW,EAAAC,aAAA,GACXgG,UAAW,EACXpJ,GAAG,YAAU,YAIf,kBAAC,EAAA8B,KAAI,CAACqB,UAAW,EAAAC,aAAA,EAAgBkE,UAAU,gBACxCU,EAAE,oCAIP,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,iCACbC,WAAW,wBACXC,WAAY,UACZC,YAAazB,EAAE,uCACf0B,cAAe1B,EAAE,uCACjB2B,KAAM,UAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,sCACbC,WAAW,yBACXC,WAAY,aACZC,YAAazB,EAAE,yCACf0B,cAAe1B,EAAE,2CAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,4CACbC,WAAW,uCACXC,WAAY,sBACZC,YAAazB,EAAE,6CACf0B,cAAe1B,EACb,6CAEF2B,KAAM,OAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,gCACbC,WAAW,mBACXC,WAAW,WACXC,YAAazB,EAAE,wCACf0B,cAAe1B,EAAE,0CAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,sCACbC,WAAW,yBACXC,WAAW,UACXC,YAAazB,EAAE,sCACf0B,cAAe1B,EAAE,wCAGnB,kBAAC,EAAA9E,YAAW,CAACoE,UAAU,kBACrB,kBAAC,EAAAxF,KAAI,CAACqB,UAAW,EAAAC,aAAA,GAAiBgG,UAAW,EAAGpJ,GAAG,OAAK,OAGxD,kBAAC,EAAA8B,KAAI,CACHqB,UAAW,EAAAC,aAAA,EACXkE,UAAU,qBAETU,EAAE,+BAEL,kBAAC,EAAAlG,KAAI,CACHqB,UAAW,EAAAC,aAAA,MACXkE,UAAU,qBAETU,EAAE,oCAIP,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,8BACbC,WAAW,iBACXC,WAAYzK,EAAM,kBAClB0K,YAAazB,EAAE,sCACf0B,cAAe1B,EAAE,wCAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,+BACbC,WAAW,wBACXC,WAAY,WACZC,YAAazB,EAAE,wCACf0B,cAAe1B,EAAE,wCACjB2B,KAAM,OAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,yCACbC,WAAW,gCACXC,WAAY,MACZC,YAAazB,EAAE,iCACf0B,cAAe1B,EAAE,mCAGnB,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,uCACbC,WAAW,8BACXC,WAAY,IACZC,YAAazB,EAAE,+BACf0B,cAAe1B,EAAE,+BACjB2B,KAAM,OAGR,kBAAC,EAAAzG,YAAW,CAACoE,UAAU,kBACrB,kBAAC,EAAAxF,KAAI,CACHqB,UAAW,EAAAC,aAAA,GACXgG,UAAW,EACXpJ,GAAG,eAAa,eAIlB,kBAAC,EAAA8B,KAAI,CACHqB,UAAW,EAAAC,aAAA,EACXkE,UAAU,qBAETU,EAAE,uCAEL,kBAAC,EAAAlG,KAAI,CACHqB,UAAW,EAAAC,aAAA,MACXkE,UAAU,qBAETU,EAAE,4CAIP,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,uCACbC,WAAW,0BACXC,WAAY,WACZC,YAAazB,EAAE,uCACf0B,cAAe1B,EAAE,yCAGnB,kBAAC,EAAA9E,YAAW,CAACoE,UAAU,kBACrB,kBAAC,EAAAxF,KAAI,CACHqB,UAAW,EAAAC,aAAA,GACXgG,UAAW,EACXpJ,GAAG,WAAS,WAId,kBAAC,EAAA8B,KAAI,CAACqB,UAAW,EAAAC,aAAA,EAAgBkE,UAAU,gBACxCU,EAAE,oCAIP,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,iCACbC,WAAW,mBACXC,WAAY,aACZC,YAAazB,EAAE,mCACf0B,cAAe1B,EAAE,mCACjB2B,KAAM,UAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,eACbC,WAAW,eACXC,WAAY,YACZC,YAAazB,EAAE,qCACf0B,cAAe1B,EAAE,qCACjB2B,KAAM,OAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,sBACbC,WAAW,sBACXC,WAAY,IACZC,YAAazB,EAAE,mCACf0B,cAAe1B,EAAE,mCACjB2B,KAAM,OAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,oBACbC,WAAW,oBACXC,WAAY,QACZC,YAAazB,EAAE,oCACf0B,cAAe1B,EAAE,oCACjB2B,KAAM,OAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,kCACbC,WAAW,kCACXC,WAAY,WACZC,YAAazB,EAAE,oCACf0B,cAAe1B,EAAE,sCAGnB,kBAAC,EAAA9E,YAAW,CAACoE,UAAU,kBACrB,kBAAC,EAAAxF,KAAI,CAACqB,UAAW,EAAAC,aAAA,GAAiBgG,UAAW,EAAGpJ,GAAG,SAAO,SAG1D,kBAAC,EAAA8B,KAAI,CAACqB,UAAW,EAAAC,aAAA,EAAgBkE,UAAU,gBACxCU,EAAE,kCAIP,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,sBACbC,WAAW,sBACXC,WAAY,OACZC,YAAazB,EAAE,sCACf0B,cAAe1B,EAAE,sCACjB2B,KAAM,UAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,qBACbC,WAAW,qBACXC,WAAY,WACZC,YAAazB,EAAE,yCACf0B,cAAe1B,EAAE,yCACjB2B,KAAM,UAGR,kBAAC,EAAAzG,YAAW,CAACoE,UAAU,kBACrB,kBAAC,EAAAxF,KAAI,CAACqB,UAAW,EAAAC,aAAA,GAAiBgG,UAAW,EAAGpJ,GAAG,SAAO,SAG1D,kBAAC,EAAA8B,KAAI,CAACqB,UAAW,EAAAC,aAAA,EAAgBkE,UAAU,gBACxCU,EAAE,kCAIP,kBAACqB,EAAA,EAAoB,CACnBC,aAAa,0BACbC,WAAW,0BACXC,WAAY,sBACZC,YAAazB,EAAE,yCACf0B,cAAe1B,EAAE,yCACjB2B,KAAM,OAGR,kBAACN,EAAA,EAAoB,CACnBC,aAAa,sBACbC,WAAW,sBACXC,WAAY,sBACZC,YAAazB,EAAE,qCACf0B,cAAe1B,EAAE,qCACjB2B,KAAM,OAGR,kBAAC,EAAA3C,QAAO,MAER,kBAAC,EAAA9D,YAAW,CAACoE,UAAU,kBACrB,kBAAC,EAAAxF,KAAI,CAACqB,UAAW,EAAAC,aAAA,GAAiBgG,UAAW,EAAGpJ,GAAG,UAAQ,+BAG3D,kBAAC,EAAA8B,KAAI,CAACqB,UAAW,EAAAC,aAAA,EAAgBkE,UAAU,gBACxCU,EAAE,iCAIP,kBAAC,EAAA1G,OAAM,CACLnD,QAAQ,SACRmJ,UAAU,iBACV/F,QAASuG,GAAW,iBAKxB,kBAAC,EAAAoB,UAAS,KACR,kBAAC,EAAA5H,OAAM,CAACnD,QAAQ,UAAUoD,QAASwG,GAAW,2B,qEC9XnD6B,EAAoD,SAAC,G,IAChEzC,EAAS,YACT0C,EAAa,gBACbzC,EAAgB,mBAChBC,EAAgB,mBAChByC,EAAa,gBACbC,EAAO,UACPC,EAAQ,WAEF,GAAgC,IAAAjN,UAAwB,MAAvDkN,EAAW,KAAEC,EAAc,KAC5B,GAAkC,IAAAnN,UAASiN,GAA1CG,EAAY,KAAEC,EAAe,KAC9BxL,GAAS,IAAAiC,YAAW,KACpB,GAAgC,IAAA9D,WAAS,GAAxCwD,EAAW,KAAED,EAAc,KAC1BM,GAAa,IAAAC,YAAW,KAAa,SACvCwJ,GAAU,UAoChB,OAXA,IAAAxM,YAAU,YAxBe,SAAOsJ,G,mBAAiB,E,OAAA,E,EAAA,W,smCAC9B,IAAb6C,EAAA,Y,iBAEiB,O,sBAAA,IAAM,QAAe7C,EAAWvI,I,cAA3C6C,EAAW,SACjByI,EAAezI,G,yBC9CY6I,K,cDiDrBP,GACFA,EAAoB,QAAZ,IAAItI,gBAAQ,eAAErC,KAAKmL,KAAkB,QAAZ,IAAI9I,gBAAQ,eAAErC,KAAKmG,OAEzB,OAAb,QAAZ,IAAI9D,gBAAQ,eAAE+I,UAEhB5J,EAAS,SAASuG,EAAS,kBAAmB,EAAA3F,aAAA,QAC9C6F,M,wCAbuC,K,kQAyB/CoD,CAAiBtD,KAChB,CAACA,IAUF,oCACE,kBAACD,EAAA,EAAe,CACdC,UAAWA,EACXC,iBAAkBA,EAClBC,iBAAkBA,IAEpB,kBAAC,EAAAO,YAAW,CACVzJ,QAAS,EAAA0J,oBAAA,MACTmB,QAAS,CAAEhG,QAAS,cAEpB,kBAAC,EAAA0H,KAAI,CACHC,UAAWR,EACXS,SA7Be,SAACC,EAAOzB,GAC7BgB,EAAgBhB,IA6BV0B,OAAO,EACPxD,UAAU,yBAEV,kBAAC,EAAAyD,IAAG,CACFf,SAAU,EAAC,cACC,yBACZ9I,MAAO,kBAAC,EAAA8J,aAAY,yBAEpB,kBAAC,IAAkB,CACjB3G,sBA3Ba,WACvBgG,EAAQY,KAAK,oBA2BH3G,sBAAsB,EACtBvF,MAAOoI,KAGX,kBAAC,EAAA4D,IAAG,CACFf,SAAU,EACV9I,MAAO,kBAAC,EAAA8J,aAAY,mBAA0B,cAClC,2BAEZ,kBAAC,EAAApD,YAAW,CAACoB,QAAS,CAAEhG,QAAS,cAC/B,kBAAC,EAAe,CACdjE,MAAOkL,EACPnC,YA3CM,WAClBxH,GAAe,IA2CHyH,YAAa8B,OAKpBtJ,GACC,kBAAC,IAAY,CACX4G,UAAWA,EACX5G,YAAaA,EACbD,eAAgBA,EAChBwJ,cAAeA,Q,2GE7GdoB,EAAuD,SAAC,G,IACnE5K,EAAc,iBACdC,EAAW,cACX4G,EAAS,YACT2C,EAAa,gBAEP,GAA0C,IAAA/M,UAAiB,IAA1D2D,EAAgB,KAAEC,EAAmB,KACpCC,GAAa,IAAAC,YAAW,KAAa,SACvCC,EAAU,WACdR,GAAe,IAcX1B,GAAS,IAAAiC,YAAW,KAM1B,OACE,kBAAC,EAAAE,MAAK,CACJ5C,QAAS,EAAA6C,aAAA,MACTC,OAAQV,EAAW,aACR,gBACXW,MAAM,gBACNC,iBAAiB,UACjBC,WAAW,EAAI,mBACE,gBACjBN,QAASA,EACTO,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLnD,QAAQ,SACRoD,QA9BS,kB,OAAA,E,OAAA,E,EAAA,W,wnCAEb4F,EAAc,IAAM,QAAYA,EAAWvI,IAA3C,M,OAAc,S,wBACdgC,EAAS,8BAA8BuG,EAAa,EAAA3F,aAAA,S,+BAEpDZ,EAAS,EAAIa,SAASrC,KAAKmG,MAAO,EAAA/D,aAAA,Q,oBAEpCsI,IACAxJ,GAAe,G,qBARA,K,+QA+BTqB,IAAK,EAAC,cACM,gCACZC,WAA8C,UAAlClB,EAAiBmB,eAAyB,UAIxD,kBAAC,EAAAP,OAAM,CAACnD,QAAQ,OAAOoD,QAAST,EAASa,IAAK,GAAC,YAKjD,kBAAC,EAAAG,KAAI,CAAC9B,GAAG,iBACN,IACD,2BAAImH,G,oBAAgC,KAGtC,6BACA,2BAAOpF,QAAQ,qBAAmB,2BAClC,kBAAC,EAAAC,UAAS,CACR7E,MAAOuD,EACPV,GAAG,oBACHlE,KAAK,oBACLmE,KAAK,OACLE,SAzC+B,SAAChD,GACpCwD,EAAoBxD,IAyChB8E,WAAW,O,u7CCzENkJ,EAAY,SACvBvM,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQI,Y,OAQU,OARtCC,EAAc,SAQwB,GANhC,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGgCkM,iB,OACtD,MAAO,CAAP,EAD4C,SAC5BhM,cAGLiM,EAAiB,SAC5BlE,EACAvI,GAAkC,0C,0DAEd,SAAMA,aAAM,EAANA,EAAQI,Y,OAQjB,OARXC,EAAc,SAQH,GANL,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGKoM,SAASnE,I,OAEpC,OAFQ/H,EAAS,SAA6B,KAEvC,CAAP,EAAOmM,EAAqBnM,YAGxBmM,EAAuB,SAACxM,G,QACtByM,EAAgB,GAYtB,OAVAA,EAAS1P,KAAOiD,EAAMjD,KAEV,QAAZ,EAAAiD,EAAMH,cAAM,SAAE6M,SAAQ,SAAC7M,GACjBA,EAAO+C,MACT6J,EAAS5M,EAAO+C,KAAO/C,EAAOzB,UAIlCqO,EAAShP,eAAiC,QAAjB,EAAAuC,aAAK,EAALA,EAAO2M,kBAAU,eAAEhI,SAAU,EAE/C8H,GAGIG,EAAmB,SAC9BxE,EACAyE,EACAhN,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQI,Y,OAQK,OARjCC,EAAc,SAQmB,GAN3B,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAG2B6I,YAC/CZ,EACAyE,I,OAEF,MAAO,CAAP,EAJuC,SAIvBpB,gBAGLc,EAAW,SACtBnE,EACAvI,GAAkC,0C,kEAEd,SAAMA,aAAM,EAANA,EAAQI,Y,OAQjB,OARXC,EAAc,SAQH,GANL,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGKoM,SAASnE,I,OAapC,OAbM1F,EAAW,UAEXoK,EAASpK,EAASrC,MACjBR,OAASiN,EAAOjN,QAAW,GAClCiN,EAAOjN,OAAOqM,KAAK,CACjBtJ,IAAK,oBACLxE,MAIG,QAJI,EAAyB,QAAzB,EAAa,QAAb,EAAAsE,EAASrC,YAAI,eAAEsM,kBAAU,eAC5BnJ,KAAI,SAACuJ,GAAC,MAAK,OAAU,QAAV,EAAAA,EAAEC,gBAAQ,eAAErI,UACxBC,QACC,SAACqI,EAAmBC,GAAqB,YAAxC,IAAAD,MAAA,QAAmB,IAAAC,MAAA,GAAqBD,EAAgBC,YAC1D,eACC5O,aAEC,CAAP,EAAOoE,EAASrC,cAGL0I,EAAc,SACzBX,EACAvI,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQI,Y,OAQlC,OARMC,EAAc,SAQpB,GANY,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXC,SAAUN,aAAM,EAANA,EAAQM,YAGZ4I,YAAYX,I,OACtB,OADA,SACA","file":"545.bcddf095.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CubesIconConfig = {\n  name: 'CubesIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M488.6 250.2L392 214V105.5c0-15-9.3-28.4-23.4-33.7l-100-37.5c-8.1-3.1-17.1-3.1-25.3 0l-100 37.5c-14.1 5.3-23.4 18.7-23.4 33.7V214l-96.6 36.2C9.3 255.5 0 268.9 0 283.9V394c0 13.6 7.7 26.1 19.9 32.2l100 50c10.1 5.1 22.1 5.1 32.2 0l103.9-52 103.9 52c10.1 5.1 22.1 5.1 32.2 0l100-50c12.2-6.1 19.9-18.6 19.9-32.2V283.9c0-15-9.3-28.4-23.4-33.7zM358 214.8l-85 31.9v-68.2l85-37v73.3zM154 104.1l102-38.2 102 38.2v.6l-102 41.4-102-41.4v-.6zm84 291.1l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6zm240 112l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CubesIcon = require('../createIcon').createIcon(exports.CubesIconConfig);\nexports[\"default\"] = exports.CubesIcon;","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nexport const initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '7',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.message.format.version': '',\n  'cleanup.policy': '',\n  'retention.bytes': '-1',\n  'retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useTimeout: any = (callback: any, delay: number) => {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n};\n","import React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\n\nexport const EmptyConsumers: React.FunctionComponent = () => {\n  return (\n    <EmptyState variant={EmptyStateVariant.xl}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel='h5' size='4xl'>\n        No Consumer Groups Found\n      </Title>\n      <EmptyStateBody>You have No Consumer Groups</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { AxiosResponse } from 'axios';\n\nimport { DefaultApi, ConsumerGroupList, ConsumerGroup } from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  limit?: number,\n  offset?: number,\n  topic?: string\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> = await api.getConsumerGroupList(\n    limit,\n    offset,\n    topic\n  );\n  return response.data;\n};\n\nexport const deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\nexport const getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\nexport const getConsumerGroupsByTopic = async (\n  config: IConfiguration | undefined,\n  limit: number,\n  offset: number,\n  topic: string\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> = await api.getConsumerGroupList(\n    limit,\n    offset,\n    topic\n  );\n  return response.data;\n};\n","import React from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\n\nexport interface IConsumerGroupData {\n  id: string;\n  members: number;\n  partitions: number;\n  state: number;\n}\n\nexport interface ISearchConsumerGroupProps {\n  setSearch: (value: string) => void;\n  search: string;\n}\n\nconst SearchConsumers: React.FunctionComponent<ISearchConsumerGroupProps> = ({\n  search,\n  setSearch,\n}) => {\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n  };\n  const onClear = () => {\n    setSearch('');\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-consumers-input'\n        type='search'\n        aria-label='search input '\n        placeholder='Search'\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchConsumers };\n","import React, { useContext, useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteConsumerGroup } from '../../../../Services/ConsumerGroupsServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteConsumer {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  consumerName?: string;\n  onDeleteConsumer: () => void;\n}\nexport const DeleteConsumerGroup: React.FunctionComponent<IDeleteConsumer> = ({\n  setDeleteModal,\n  deleteModal,\n  consumerName,\n  onDeleteConsumer,\n}) => {\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useContext(AlertContext);\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      consumerName && (await deleteConsumerGroup(consumerName, config));\n      addAlert(\n        `Successfully deleted consumer group ${consumerName}`,\n        AlertVariant.success\n      );\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    onDeleteConsumer();\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Delete consumer group?'\n      title='Delete Consumer Group?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n        >\n          Delete\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        <b>{consumerName}</b> will be deleted.{' '}\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>Type DELETE to confirm:</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { ConsumerGroup } from '../../../../OpenApi';\n\nexport interface IConsumerGroupDetailProps {\n  setIsExpanded: (value: boolean) => void;\n  consumerDetail: ConsumerGroup | undefined;\n}\n\nexport const ConsumerGroupDetail: React.FunctionComponent<IConsumerGroupDetailProps> = ({\n  setIsExpanded,\n  consumerDetail,\n}) => {\n  const columns = [\n    'Partition',\n    'Client ID + Customer ID',\n    'Current offset',\n    'Log end offset',\n    'Offset lag',\n    {\n      title: '',\n      dataLabel: 'Action',\n    },\n  ];\n\n  const rows =\n    consumerDetail &&\n    consumerDetail.consumers.map((consumergroup) => [\n      consumergroup.partition,\n      consumergroup.groupId + consumergroup.memberId,\n      consumergroup.offset,\n      consumergroup.logEndOffset,\n      consumergroup.lag,\n    ]);\n\n  const onCloseClick = () => {\n    setIsExpanded(false);\n  };\n\n  return (\n    <DrawerPanelContent widths={{ default: 'width_66' }}>\n      <DrawerHead>\n        <span>\n          <TextContent>\n            <Text>Consumer group ID</Text>\n            <Text component={TextVariants.h1}>\n              {consumerDetail && consumerDetail.id}\n            </Text>\n          </TextContent>\n        </span>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onCloseClick} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <TextContent>\n          <Flex>\n            <FlexItem>\n              <Text component={TextVariants.h4} size={50}>\n                Active members\n              </Text>\n              <Text component={TextVariants.h2}>\n                {consumerDetail && consumerDetail.consumers.length}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>Partitions with lag</Text>\n              <Text component={TextVariants.h2}>\n                {consumerDetail &&\n                  consumerDetail.consumers.reduce(function (prev, cur) {\n                    return prev + cur.lag > 0 ? prev + 1 : 0;\n                  }, 0)}\n              </Text>\n            </FlexItem>\n          </Flex>\n        </TextContent>\n      </DrawerPanelBody>\n\n      <Table\n        aria-label='Compact Table'\n        variant={TableVariant.compact}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </DrawerPanelContent>\n  );\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport {\n  Card,\n  Divider,\n  Pagination,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  AlertVariant,\n  Button,\n  Drawer,\n  DrawerContent,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\n\nimport { EmptyConsumers } from './EmptyConsumers';\nimport {\n  getConsumerGroups,\n  getConsumerGroupDetail,\n  getConsumerGroupsByTopic,\n} from '../../../../Services/ConsumerGroupsServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { ConsumerGroupList, ConsumerGroup } from '../../../../OpenApi';\nimport { Loading } from '../../../../Components/Loading/Loading';\nimport { AlertContext } from '../../../../Contexts/Alert';\nimport { useTimeout } from '../../../../Hooks/useTimeOut';\nimport { SearchConsumers } from './SearchConsumers';\nimport { DeleteConsumerGroup } from './DeleteConsumerGroup';\nimport { ConsumerGroupDetail } from './ConsumerGroupDetail';\nexport interface IConsumerGroupsList {\n  onDeleteConsumerGroup: () => void;\n  consumerGroupByTopic: boolean;\n  topic?: string;\n}\n\nexport const ConsumerGroupsList: React.FunctionComponent<IConsumerGroupsList> = ({\n  onDeleteConsumerGroup,\n  consumerGroupByTopic,\n  topic,\n}) => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState<number>(0);\n  const [consumerGroups, setConsumerGroups] = useState<ConsumerGroupList>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>('');\n  const [\n    consumerGroupDetail,\n    setConsumerGroupDetail,\n  ] = useState<ConsumerGroup>();\n  const [consumerGroupName, setConsumerGroupName] = useState<\n    string | undefined\n  >();\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n\n  const fetchConsumerGroups = async () => {\n    if (consumerGroupByTopic && topic) {\n      try {\n        const consumerGroupsData = await getConsumerGroupsByTopic(\n          config,\n          100,\n          offset,\n          topic\n        );\n        if (consumerGroupsData) {\n          setConsumerGroups(consumerGroupsData);\n        }\n      } catch (err) {\n        addAlert(err.response.data.error, AlertVariant.danger);\n      }\n      setLoading(false);\n    } else {\n      try {\n        const consumerGroupsData = await getConsumerGroups(config);\n        if (consumerGroupsData) {\n          setConsumerGroups(consumerGroupsData);\n        }\n      } catch (err) {\n        addAlert(err.response.data.error, AlertVariant.danger);\n      }\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    fetchConsumerGroups();\n  }, [search, deleteModal]);\n\n  useTimeout(() => fetchConsumerGroups(), 5000);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const tableColumns = [\n    { title: 'Consumer Group ID' },\n    { title: 'Active Members' },\n    { title: 'Partitions with lag' },\n  ];\n  const onDelete = (rowId: any) => {\n    if (consumerGroups?.items) {\n      setConsumerGroupName(consumerGroups.items[rowId].id);\n    }\n    setDeleteModal(true);\n  };\n\n  const actions = [{ title: 'Delete', onClick: (_, rowId) => onDelete(rowId) }];\n\n  const fetchConsumerGroupDetail = async (consumerGroupName) => {\n    try {\n      const consumerData = await getConsumerGroupDetail(\n        consumerGroupName,\n        config\n      );\n      if (consumerData) {\n        setConsumerGroupDetail(consumerData);\n      }\n    } catch (err) {\n      addAlert(err.response.data.error, AlertVariant.danger);\n    }\n    setIsExpanded(true);\n  };\n\n  const panelContent = (\n    <ConsumerGroupDetail\n      setIsExpanded={setIsExpanded}\n      consumerDetail={consumerGroupDetail}\n    />\n  );\n  const rowData =\n    consumerGroups?.items.map((consumer) => [\n      {\n        title: (\n          <Button\n            variant='link'\n            isInline\n            onClick={() => fetchConsumerGroupDetail(consumer.id)}\n          >\n            {consumer.id}\n          </Button>\n        ),\n      },\n\n      consumer.consumers?.length,\n      consumer.consumers.reduce(function (prev, cur) {\n        return prev + cur.lag > 0 ? prev + 1 : 0;\n      }, 0),\n    ]) || [];\n\n  return (\n    <>\n      <Card>\n        {deleteModal && (\n          <DeleteConsumerGroup\n            consumerName={consumerGroupName}\n            setDeleteModal={setDeleteModal}\n            deleteModal={deleteModal}\n            onDeleteConsumer={onDeleteConsumerGroup}\n          />\n        )}\n        <Drawer isExpanded={isExpanded}>\n          <DrawerContent panelContent={panelContent}>\n            <Toolbar>\n              <ToolbarContent>\n                <ToolbarItem>\n                  <SearchConsumers search={search} setSearch={setSearch} />\n                </ToolbarItem>\n                <ToolbarItem variant='pagination'>\n                  <Pagination\n                    itemCount={rowData.length}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    widgetId='consumer-group-pagination-top'\n                    onPerPageSelect={onPerPageSelect}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n            <Divider />\n            {consumerGroupByTopic ? (\n              <Table\n                aria-label='Compact Table'\n                variant={TableVariant.compact}\n                cells={tableColumns}\n                rows={\n                  page != 1\n                    ? rowData.slice(offset, offset + perPage)\n                    : rowData.slice(0, perPage)\n                }\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            ) : (\n              <Table\n                aria-label='Compact Table'\n                variant={TableVariant.compact}\n                cells={tableColumns}\n                rows={\n                  page != 1\n                    ? rowData.slice(offset, offset + perPage)\n                    : rowData.slice(0, perPage)\n                }\n                actions={actions}\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            )}\n            {rowData.length < 1 ? (\n              <EmptyConsumers />\n            ) : (\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='consumer-group-pagination-bottom'\n                onPerPageSelect={onPerPageSelect}\n                offset={0}\n              />\n            )}\n          </DrawerContent>\n        </Drawer>\n      </Card>\n      <Divider />\n    </>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  getTopicListPath,\n  onClickTopicList,\n}) => {\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem\n            onClick={(e) => {\n              e.preventDefault();\n              onClickTopicList();\n            }}\n            to={getTopicListPath()}\n          >\n            Topics\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection className='kafka-ui--page__main-section--adjust-padding'>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='#topic-detail-view'\n            style={{ position: 'absolute' }}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n            <JumpLinksItem key={7} href='#delete'>\n              Delete\n            </JumpLinksItem>\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <PageGroup hasOverflowScroll id='topic-detail-view'>\n            <PageSection padding={{ default: 'noPadding' }}>\n              <Split>\n                <SplitItem isFilled>\n                  <TextContent>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='core-configuration'\n                    >\n                      Core configuration\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.coreConfigInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail name'\n                    fieldLabel='Name'\n                    fieldValue={topic.name}\n                    popoverBody={t('createTopic.topicNameLabelBody')}\n                    popoverHeader={t('createTopic.topicNameLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail partition'\n                    fieldLabel='Partitions'\n                    fieldValue={topic.numPartitions}\n                    popoverBody={t('createTopic.partitionsLabelBody')}\n                    popoverHeader={t('createTopic.partitionsLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail replicas'\n                    fieldLabel='Replicas'\n                    fieldValue={'3'}\n                    popoverBody={t('createTopic.replicasLabelBody')}\n                    popoverHeader={t('createTopic.replicasLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min-in-sync replica'\n                    fieldLabel='Minimum in-sync replicas'\n                    fieldValue={'2'}\n                    popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n                    popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention time'\n                    fieldLabel='Retention Time'\n                    fieldValue={topic['retention.ms']}\n                    popoverBody={t('createTopic.retentionTimeLabelBody')}\n                    popoverHeader={t('createTopic.retentionTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention size'\n                    fieldLabel='Retention Size'\n                    fieldValue={topic['retention.bytes']}\n                    popoverHeader={t('createTopic.retentionBytesLabelHead')}\n                    popoverBody={t('createTopic.retentionBytesLabelBody')}\n                    unit={'bytes'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='messages'\n                    >\n                      Messages\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.messageSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail max message bytes'\n                    fieldLabel='Maximum message bytes'\n                    fieldValue={'1048588'}\n                    popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n                    popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message timestamp type'\n                    fieldLabel='Message timestamp type'\n                    fieldValue={'CreateTime'}\n                    popoverBody={t('createTopic.messageTimestampLabelBody')}\n                    popoverHeader={t('createTopic.messageTimestampLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message timestamp difference'\n                    fieldLabel='Maximum message timestamp difference'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n                    popoverHeader={t(\n                      'createTopic.messageTimestampDiffLabelHead'\n                    )}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail compression type'\n                    fieldLabel='Compression type'\n                    fieldValue='Producer'\n                    popoverBody={t('createTopic.compressionTypeLabelBody')}\n                    popoverHeader={t('createTopic.compressionTypeLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message format version'\n                    fieldLabel='Message format version'\n                    fieldValue='2.7-IV2'\n                    popoverBody={t('createTopic.messageFormatLabelBody')}\n                    popoverHeader={t('createTopic.messageFormatLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                      Log\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('createTopic.logSectionInfo')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('createTopic.logSectionInfoNote')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail cleanup policy'\n                    fieldLabel='Cleanup policy'\n                    fieldValue={topic['cleanup.policy']}\n                    popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n                    popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention bytes'\n                    fieldLabel='Delete retention time'\n                    fieldValue={'86400000'}\n                    popoverBody={t('createTopic.deleteRetentionLabelBody')}\n                    popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min cleanable dirty ratio'\n                    fieldLabel='Minimum cleanable dirty ratio'\n                    fieldValue={'0.5'}\n                    popoverBody={t('createTopic.minRatioLabelBody')}\n                    popoverHeader={t('createTopic.minRatioLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min compaction lag time'\n                    fieldLabel='Minimum compaction lag time'\n                    fieldValue={'0'}\n                    popoverBody={t('createTopic.minLagLabelBody')}\n                    popoverHeader={t('createTopic.minLagLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='replication'\n                    >\n                      Replication\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('createTopic.replicationSectionInfo')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('createTopic.replicationSectionInfoNote')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail unclean leader election'\n                    fieldLabel='Unclean leader election'\n                    fieldValue={'Disabled'}\n                    popoverBody={t('createTopic.leaderElectionLabelBody')}\n                    popoverHeader={t('createTopic.leaderElectionLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='cleanup'\n                    >\n                      Cleanup\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.cleanupSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail max message bytes'\n                    fieldLabel='Log segment size'\n                    fieldValue={'1073741824'}\n                    popoverBody={t('createTopic.logSegmentLabelHead')}\n                    popoverHeader={t('createTopic.logSegmentLabelBody')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment time'\n                    fieldLabel='Segment time'\n                    fieldValue={'604800000'}\n                    popoverBody={t('createTopic.segementTimeLabelBody')}\n                    popoverHeader={t('createTopic.segementTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment jitter time'\n                    fieldLabel='Segment jitter time'\n                    fieldValue={'0'}\n                    popoverBody={t('createTopic.jitterTimeLabelBody')}\n                    popoverHeader={t('createTopic.jitterTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='file delete delay'\n                    fieldLabel='File delete delay'\n                    fieldValue={'60000'}\n                    popoverBody={t('createTopic.deleteDelayLabelBody')}\n                    popoverHeader={t('createTopic.deleteDelayLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='preallocation log segment files'\n                    fieldLabel='Preallocation log segment files'\n                    fieldValue={'Disabled'}\n                    popoverBody={t('createTopic.preallocateLabelBody')}\n                    popoverHeader={t('createTopic.preallocateLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                      Index\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.indexSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='index interval size'\n                    fieldLabel='Index interval size'\n                    fieldValue={'4096'}\n                    popoverBody={t('createTopic.indexIntervalLabelBody')}\n                    popoverHeader={t('createTopic.indexIntervalLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment index size'\n                    fieldLabel='Segment index size'\n                    fieldValue={'10485760'}\n                    popoverBody={t('createTopic.segementIntervalLabelBody')}\n                    popoverHeader={t('createTopic.segementIntervalLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                      Flush\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.flushSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='flush interval messages'\n                    fieldLabel='Flush interval messages'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.intervalMessagesLabelBody')}\n                    popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='flush interval time'\n                    fieldLabel='Flush interval time'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.intervalTimeLabelBody')}\n                    popoverHeader={t('createTopic.intervalTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <Divider />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                      Delete topic (irreversible)\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.deleteTopicInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <Button\n                    variant='danger'\n                    className='section-margin'\n                    onClick={deleteTopic}\n                  >\n                    Delete topic\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <Button variant='primary' onClick={updateTopic}>\n                    Edit properties\n                  </Button>\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic, initialState } from '../../../Contexts/Topic';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupsList } from '../../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\nimport { isAxiosError } from '../../../Utils/axios';\nimport { AlertContext } from '../../../Contexts/Alert';\nimport { useHistory } from 'react-router';\n\nexport type TopicDetailGroupProps = {\n  topicName: string;\n  onUpdateTopic: () => void;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onDeleteTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n  eventKey: number;\n};\n\nexport const TopicDetailGroup: React.FC<TopicDetailGroupProps> = ({\n  topicName,\n  onUpdateTopic,\n  getTopicListPath,\n  onClickTopicList,\n  onDeleteTopic,\n  onError,\n  eventKey,\n}) => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(initialState);\n  const [activeTabKey, setActiveTabKey] = useState(eventKey);\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const fetchTopicDetail = async (topicName: string) => {\n    if (eventKey === 2) {\n      try {\n        const response = await getTopicDetail(topicName, config);\n        setTopicDetail(response);\n      } catch (err) {\n        if (isAxiosError(err)) {\n          if (onError) {\n            onError(err.response?.data.code, err.response?.data.error);\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert(`Topic ${topicName} does not exist`, AlertVariant.danger);\n            onClickTopicList();\n          }\n        }\n      }\n    }\n  };\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n  const onDeleteConsumer = () => {\n    history.push('/consumerGroups');\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        getTopicListPath={getTopicListPath}\n        onClickTopicList={onClickTopicList}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          isBox={false}\n          className='kafka-ui--tab-padding'\n        >\n          <Tab\n            eventKey={1}\n            data-testid='pageTopic-tabConsumers'\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupsList\n              onDeleteConsumerGroup={onDeleteConsumer}\n              consumerGroupByTopic={true}\n              topic={topicName}\n            />\n          </Tab>\n          <Tab\n            eventKey={2}\n            title={<TabTitleText>Properties</TabTitleText>}\n            data-testid='pageTopic-tabProperties'\n          >\n            <PageSection padding={{ default: 'noPadding' }}>\n              <TopicDetailView\n                topic={topicDetail}\n                deleteTopic={deleteTopic}\n                updateTopic={onUpdateTopic}\n              />\n            </PageSection>\n          </Tab>\n        </Tabs>\n        {deleteModal && (\n          <DeleteTopics\n            topicName={topicName}\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n            onDeleteTopic={onDeleteTopic}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '../../../../Services/TopicServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteTopics {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  topicName?: string;\n  onDeleteTopic: () => void;\n}\nexport const DeleteTopics: React.FunctionComponent<IDeleteTopics> = ({\n  setDeleteModal,\n  deleteModal,\n  topicName,\n  onDeleteTopic,\n}) => {\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useContext(AlertContext);\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      topicName && (await deleteTopic(topicName, config));\n      addAlert(`Successfully deleted topic ${topicName}`, AlertVariant.success);\n    } catch (err) {\n      addAlert(err.response.data.error, AlertVariant.danger);\n    }\n    onDeleteTopic();\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Delete topic?'\n      title='Delete topic?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          data-testid='modalDeleteTopic-buttonDelete'\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n        >\n          Delete\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <b>{topicName}</b> will be deleted.{' '}\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>Type DELETE to confirm:</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport {\n  ConfigEntry,\n  DefaultApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length || 0;\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"sourceRoot":""}