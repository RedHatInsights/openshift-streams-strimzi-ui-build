{"version":3,"file":"89.1060f1f3.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/Cells.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SelectAccount.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/AllAccountsTable.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SelectedAccountsTable.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/EditExistingPermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateSelect.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateTypeahead.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/acls.ts","webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/ManagePermissions.tsx","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["import { FormGroup, Popover } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\ninterface IFormGroupWithPopoverProps {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel?: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n  validated?: 'default' | 'error' | 'success' | 'warning' | undefined;\n  helperText?: string;\n  helperTextInvalid?: string;\n  isRequired?: boolean;\n}\n\nexport const FormGroupWithPopover: React.FC<IFormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n  validated,\n  helperText,\n  helperTextInvalid,\n  isRequired,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      validated={validated}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      isRequired={isRequired}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    rowIndex: number,\n    row: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: React.ChangeEvent<HTMLInputElement>) =>\n        onRowClick && onRowClick(event, rowIndex, row)\n      }\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import { ICell } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { AclPatternType, AclPermissionType } from '@rhoas/kafka-instance-sdk';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { EnhancedAclBinding } from '@app/services/acls';\nimport React from 'react';\nimport { PrincipalType, usePrincipals } from '@bf2/ui-shared';\n\nexport type CellBuilder<T extends EnhancedAclBinding> = (\n  item: T,\n  row: number\n) => ICell | string;\n\nconst AllAccountsPrincipal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div>\n        {t('permission.table.all_accounts')} <InfoCircleIcon color='grey' />\n      </div>\n      <div className='pf-u-font-size-xs'>\n        {t('permission.table.all_accounts_help')}\n      </div>\n    </>\n  );\n};\n\ntype PrincipalWithTooltipProps = {\n  acl: EnhancedAclBinding;\n};\nconst PrincipalWithTooltip: React.FunctionComponent<PrincipalWithTooltipProps> =\n  ({ acl }) => {\n    const principals = usePrincipals().getAllPrincipals();\n\n    const locatedPrincipals = principals.filter(\n      (p) => p.id === acl.principalDisplay\n    );\n\n    if (locatedPrincipals.length === 1) {\n      if (locatedPrincipals[0].principalType === PrincipalType.ServiceAccount) {\n        return (\n          <Tooltip\n            content={\n              <div>\n                Type: {locatedPrincipals[0].principalType} <br />\n              </div>\n            }\n          >\n            <span tabIndex={0}>\n              {' '}\n              {acl.principalDisplay} <InfoCircleIcon color='grey' />\n            </span>\n          </Tooltip>\n        );\n      } else {\n        return (\n          <Tooltip\n            content={\n              <div>\n                Type: {locatedPrincipals[0].principalType} <br />\n                Name: {locatedPrincipals[0].displayName} <br />\n                Email: {locatedPrincipals[0].emailAddress}\n              </div>\n            }\n          >\n            <span tabIndex={0}>\n              {' '}\n              {acl.principalDisplay} <InfoCircleIcon color='grey' />\n            </span>\n          </Tooltip>\n        );\n      }\n    }\n    return <span> {acl.principalDisplay}</span>;\n  };\n\nexport const principalCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  switch (item.principal) {\n    case 'User:*':\n      return {\n        title: <AllAccountsPrincipal />,\n      };\n      break;\n    default:\n      return {\n        title: <PrincipalWithTooltip acl={item} />,\n      };\n      break;\n  }\n};\n\nexport const permissionCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  return item.permission === AclPermissionType.Deny\n    ? ({\n        title: (\n          <Label color={'red'} variant={'outline'}>\n            {item.permissionDisplay}\n          </Label>\n        ),\n      } as ICell)\n    : '';\n};\n\nexport const operationCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  return {\n    title: <Label color={item.operationColor}>{item.operationDisplay}</Label>,\n  };\n};\n\nexport const resourceCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  return {\n    title: (\n      <>\n        <div>\n          {item.resourceTypeDisplay}{' '}\n          {item.patternType === AclPatternType.Prefixed\n            ? 'name starts with'\n            : 'is'}\n        </div>\n        <div className='pf-u-font-size-lg'>{item.resourceName}</div>\n      </>\n    ),\n  };\n};\n","import React, { useState } from 'react';\nimport { Principal } from '@bf2/ui-shared';\nimport { useTranslation } from 'react-i18next';\nimport { sentenceCase } from 'sentence-case';\nimport { FormGroupWithPopover } from '@app/components';\nimport { Select as PFSelect } from '@patternfly/react-core/dist/js/components/Select/Select';\nimport { SelectVariant } from '@patternfly/react-core';\nimport { SelectOption as PFSelectOption } from '@patternfly/react-core/dist/js/components/Select/SelectOption';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\n\nexport type SelectAccountProps = {\n  id: Validated<string | undefined>;\n  setId: React.Dispatch<React.SetStateAction<Validated<string | undefined>>>;\n  initialOptions: Principal[];\n};\n\nexport const SelectAccount: React.FunctionComponent<SelectAccountProps> = ({\n  setId,\n  id,\n  initialOptions,\n}) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [options, setOptions] = useState<SelectOption<string>[]>(\n    initialOptions.map((o) => {\n      return {\n        value: o.id,\n        title: o.id,\n        description: `${sentenceCase(o.principalType.toString())} ${\n          o.displayName || ''\n        }`,\n      } as SelectOption<string>;\n    })\n  );\n\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const clearSelection = () => {\n    setId({ value: undefined });\n    setIsOpen(false);\n  };\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setId({ value: selection });\n      setIsOpen(false);\n    }\n  };\n\n  const onCreateOption = (newValue: string) => {\n    setOptions([...options, { value: newValue } as SelectOption<string>]);\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t('permission.manage_permissions_dialog.account_id_title')}\n      fieldId='kafka-instance-name'\n      fieldLabel={t('permission.manage_permissions_dialog.account_id_title')}\n      labelBody={t('permission.manage_permissions_dialog.account_id_help')}\n      buttonAriaLabel={t(\n        'permission.manage_permissions_dialog.account_id_aria'\n      )}\n      isRequired={true}\n      helperTextInvalid={id.errorMessage}\n      validated={id.invalid ? 'error' : undefined}\n    >\n      <PFSelect\n        variant={SelectVariant.typeahead}\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_aria'\n        )}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={id.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_placeholder'\n        )}\n        isCreatable={true}\n        onCreateOption={onCreateOption}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          />\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import React from 'react';\nimport { ICell, TableVariant } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport {\n  operationCell,\n  permissionCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport { FormGroup, GridItem } from '@patternfly/react-core';\nimport { MASTable } from '@app/components';\nimport { EnhancedAclBinding } from '@app/services/acls';\n\ntype AllAccountsTableProps = {\n  existingAcls: Array<EnhancedAclBinding>;\n};\n\nexport const AllAccountsTable: React.FunctionComponent<AllAccountsTableProps> =\n  ({ existingAcls }) => {\n    const tableColumns = [\n      { title: '' },\n      { title: '' },\n      { title: '' },\n      { title: '' },\n    ] as ICell[];\n    const { t } = useTranslation();\n    if (existingAcls.length === 0) {\n      return <></>;\n    }\n    const cells = [operationCell, permissionCell, resourceCell];\n    return (\n      <GridItem span={12}>\n        <FormGroup\n          fieldId='allAccounts'\n          label={t(\n            'permission.manage_permissions_dialog.edit_existing.all_accounts_title'\n          )}\n          helperText={t(\n            'permission.manage_permissions_dialog.edit_existing.all_accounts_help'\n          )}\n          isHelperTextBeforeField={true}\n        >\n          <MASTable\n            tableProps={{\n              cells: tableColumns,\n              rows: existingAcls.map((item, row) => {\n                return {\n                  cells: cells.map((f) => f(item, row)),\n                  originalData: item,\n                };\n              }),\n              'aria-label': t('permission.table.table.permission_list_table'),\n              shouldDefaultCustomRowWrapper: true,\n              variant: TableVariant.compact,\n              canSelectAll: false,\n            }}\n            rowDataTestId={'tablePermissions-row'}\n          />\n        </FormGroup>\n      </GridItem>\n    );\n  };\n","import { EnhancedAclBinding } from '@app/services/acls';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  CellBuilder,\n  operationCell,\n  permissionCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport { Button, FormGroup, GridItem } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { ICell, TableVariant } from '@patternfly/react-table';\nimport { MASTable } from '@app/components';\n\nexport type SelectedAccountTableProps = {\n  existingAcls: Array<EnhancedAclBinding>;\n  selectedAccountId?: string;\n};\n\nexport const SelectedAccountTable: React.FunctionComponent<SelectedAccountTableProps> =\n  ({ existingAcls, selectedAccountId }) => {\n    type RemovableEnhancedAclBinding = EnhancedAclBinding & {\n      removed: boolean;\n      index: number;\n    };\n\n    const { t } = useTranslation();\n    const [acls, setAcls] = useState<RemovableEnhancedAclBinding[]>([]);\n\n    useEffect(() => {\n      // Workaround as I can't work out how to pass initial state for an array\n      setAcls(\n        existingAcls.map((v, k) => {\n          const answer = v as RemovableEnhancedAclBinding;\n          answer.index = k;\n          return answer;\n        })\n      );\n    }, [existingAcls]);\n\n    const removeRow = (acl: RemovableEnhancedAclBinding) => {\n      setAcls(\n        acls.map((v) => {\n          if (v.hash() === acl.hash()) {\n            v.removed = true;\n          }\n          return v;\n        })\n      );\n    };\n\n    const removeCell: CellBuilder<RemovableEnhancedAclBinding> = (item) => {\n      return {\n        title: (\n          <Button\n            variant='link'\n            icon={<MinusCircleIcon />}\n            onClick={() => removeRow(item)}\n          >\n            Remove\n          </Button>\n        ),\n      };\n    };\n\n    const tableColumns = [\n      { title: '' },\n      { title: '' },\n      { title: '' },\n      { title: '' },\n    ] as ICell[];\n    const cells = [operationCell, permissionCell, resourceCell, removeCell];\n\n    if (acls.length === 0 || selectedAccountId === undefined) {\n      return <></>;\n    }\n\n    return (\n      <GridItem span={12}>\n        <FormGroup\n          fieldId='selectedAccount'\n          label={selectedAccountId}\n          helperText={t(\n            'permission.manage_permissions_dialog.edit_existing.selected_account_help'\n          )}\n          isHelperTextBeforeField={true}\n        >\n          <MASTable\n            tableProps={{\n              cells: tableColumns,\n              rows: acls\n                .filter((acl) => !acl.removed)\n                .map((item, row) => {\n                  return {\n                    cells: cells.map((f) => f(item, row)),\n                    originalData: item,\n                  };\n                }),\n              'aria-label': t('permission.table.table.permission_list_table'),\n              shouldDefaultCustomRowWrapper: true,\n              variant: TableVariant.compact,\n              canSelectAll: false,\n            }}\n            rowDataTestId={'tablePermissions-row'}\n          />\n        </FormGroup>\n      </GridItem>\n    );\n  };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AllAccountsTable } from '@app/modules/Permissions/components/ManagePermissionsDialog/AllAccountsTable';\nimport { SelectedAccountTable } from '@app/modules/Permissions/components/ManagePermissionsDialog/SelectedAccountsTable';\nimport { EnhancedAclBinding } from '@app/services/acls';\n\nexport type EditExistingProps = {\n  existingAcls: Array<EnhancedAclBinding>;\n  selectedAccountId?: string;\n};\n\nexport const EditExisting: React.FunctionComponent<EditExistingProps> = ({\n  existingAcls,\n  selectedAccountId,\n}) => {\n  const { t } = useTranslation();\n  const existingAclsForAllPrincipals = existingAcls.filter(\n    (i) => i.principal === 'User:*'\n  );\n  const existingAclsForSelectedPrincipal = existingAcls.filter(\n    (i) => i.principal === `User:${selectedAccountId}`\n  );\n\n  return (\n    <>\n      <h2>{t('permission.manage_permissions_dialog.edit_existing.title')}</h2>\n      <AllAccountsTable existingAcls={existingAclsForAllPrincipals} />\n      <SelectedAccountTable\n        existingAcls={existingAclsForSelectedPrincipal}\n        selectedAccountId={selectedAccountId}\n      />\n    </>\n  );\n};\n","import { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { useTranslation } from 'react-i18next';\nimport React, { useState } from 'react';\nimport { Select as PFSelect } from '@patternfly/react-core/dist/js/components/Select/Select';\nimport { SelectVariant } from '@patternfly/react-core';\nimport { SelectOption as PFSelectOption } from '@patternfly/react-core/dist/js/components/Select/SelectOption';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\n\nexport type CreateSelectProps<T> = {\n  id: string;\n  options: SelectOption<T>[];\n  selected: Validated<string | undefined>;\n  setSelected: (row: number, id: T | undefined) => void;\n  row: number;\n};\n\nexport const CreateSelect = <\n  T extends AclPermissionType | AclResourceType | AclPatternType | AclOperation\n>({\n  options,\n  setSelected,\n  selected,\n  row,\n  id,\n}: CreateSelectProps<T>): React.ReactElement => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const clearSelection = () => {\n    setSelected(row, undefined);\n    setIsOpen(false);\n  };\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(row, selection);\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.create_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.create_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.create_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={selected.errorMessage}\n      validated={selected.invalid ? 'error' : undefined}\n    >\n      <PFSelect\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={t(\n          'permission.manage_permissions_dialog.create_permissions.placeholder'\n        )}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          >\n            {option.title}\n          </PFSelectOption>\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { Select as PFSelect } from '@patternfly/react-core/dist/js/components/Select/Select';\nimport { SelectVariant } from '@patternfly/react-core';\nimport { SelectOption as PFSelectOption } from '@patternfly/react-core/dist/js/components/Select/SelectOption';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\n\nexport type CreateTypeaheadProps = {\n  row: number;\n  value: Validated<string | undefined>;\n  setValue: (row: number, id: string | undefined) => void;\n  initialOptions: () => string[];\n  id: string;\n};\n\nexport const CreateTypeahead: React.FunctionComponent<CreateTypeaheadProps> = ({\n  row,\n  setValue,\n  value,\n  initialOptions,\n  id,\n}) => {\n  const { t } = useTranslation();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [options, setOptions] = useState<SelectOption<string>[]>([]);\n\n  useEffect(() => {\n    setOptions(\n      initialOptions().map((o) => {\n        return { value: o } as SelectOption<string>;\n      })\n    );\n  }, [initialOptions]);\n\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const clearSelection = () => {\n    setValue(row, undefined);\n    setIsOpen(false);\n  };\n\n  const onSelect = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setValue(row, selection);\n      setIsOpen(false);\n    }\n  };\n\n  const onCreateOption = (newValue: string) => {\n    setOptions([...options, { value: newValue } as SelectOption<string>]);\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.create_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.create_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.create_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={value.errorMessage}\n      validated={value.invalid ? 'error' : undefined}\n    >\n      <PFSelect\n        variant={SelectVariant.typeahead}\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.create_permissions.resource_name_aria'\n        )}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={value.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={t(\n          'permission.manage_permissions_dialog.create_permissions.resource_name_typeahead_placeholder'\n        )}\n        isCreatable={true}\n        onCreateOption={onCreateOption}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          />\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { ConfigContext } from '@app/contexts';\nimport {\n  createPermissionsService,\n  getOperations,\n  getPatternTypes,\n  getPermissionsTypes,\n  getResourceTypes,\n} from '@app/services/acls';\nimport { ICell, IRowData, TableVariant } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { MASLoading, MASTable } from '@app/components';\nimport { Button, FormGroup, GridItem } from '@patternfly/react-core';\nimport { CreateSelect } from '@app/modules/Permissions/components/ManagePermissionsDialog/CreateSelect';\nimport { sentenceCase } from 'sentence-case';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { snakeCase } from 'snake-case';\nimport { CreateTypeahead } from '@app/modules/Permissions/components/ManagePermissionsDialog/CreateTypeahead';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\nimport {\n  createEmptyNewAcl,\n  NewAcl,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\n\nexport type CreatePermissionsProps = {\n  topicNames: string[];\n  consumerGroupIds: string[];\n  acls: NewAcl[];\n  setAcls: React.Dispatch<React.SetStateAction<NewAcl[]>>;\n};\n\nexport const CreatePermissions: React.FunctionComponent<CreatePermissionsProps> =\n  ({ acls, setAcls, topicNames, consumerGroupIds }) => {\n    const config = useContext(ConfigContext);\n    const [resourceOperations, setResourceOperations] = useState<\n      { [key: string]: Array<string> } | undefined\n    >();\n    const permissionsService = createPermissionsService(config);\n    useEffect(() => {\n      const fetchResourceOperations = async () => {\n        const resourceOperations =\n          await permissionsService.getResourceOperations();\n        setResourceOperations(resourceOperations);\n      };\n      fetchResourceOperations();\n    }, []);\n\n    const tableColumns = [\n      { title: '' },\n      { title: '' },\n      { title: '' },\n      { title: '' },\n      { title: '' },\n      { title: '' },\n      { title: '' },\n    ] as ICell[];\n    const { t } = useTranslation();\n\n    const setPermissionType = (row: number, value?: AclPermissionType) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.permission = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setOperation = (row: number, value?: AclOperation) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.operation = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setResourceType = (row: number, value?: AclResourceType) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.resourceType = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setPatternType = (row: number, value?: AclPatternType) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.patternType = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const setResource = (row: number, value?: string) => {\n      setAcls((prevState) =>\n        prevState.map((v, k) => {\n          if (k === row) {\n            v.resource = { value };\n          }\n          return v;\n        })\n      );\n    };\n\n    const addRow = () => {\n      setAcls((prevState) => [...prevState, createEmptyNewAcl()]);\n    };\n\n    const removeRow = (row: number) => {\n      setAcls((prevState) => prevState.filter((v, k) => k !== row));\n    };\n\n    if (resourceOperations === undefined) {\n      return <MASLoading />;\n    }\n\n    return (\n      <GridItem span={12}>\n        <FormGroup\n          fieldId='createPermissions'\n          label={t(\n            'permission.manage_permissions_dialog.create_permissions.title'\n          )}\n          helperText={t(\n            'permission.manage_permissions_dialog.create_permissions.help'\n          )}\n          isHelperTextBeforeField={true}\n        >\n          <MASTable\n            tableProps={{\n              cells: tableColumns,\n              rows: acls.map((acl, row) => {\n                return {\n                  cells: [\n                    {\n                      title: (\n                        <CreateSelect\n                          options={getPermissionsTypes().map((value) => {\n                            return {\n                              value,\n                              title: sentenceCase(value),\n                            } as SelectOption<AclPermissionType>;\n                          })}\n                          selected={acl.permission}\n                          setSelected={setPermissionType}\n                          row={row}\n                          id='permission-type'\n                        />\n                      ),\n                    },\n                    {\n                      title: (\n                        <CreateSelect\n                          options={getOperations()\n                            .filter(() => {\n                              return true;\n                            })\n                            .map((value) => {\n                              return {\n                                value,\n                                title: sentenceCase(value),\n                              } as SelectOption<AclOperation>;\n                            })}\n                          selected={acl.operation}\n                          setSelected={setOperation}\n                          row={row}\n                          id='operation'\n                        />\n                      ),\n                    },\n                    {\n                      title: (\n                        <CreateSelect\n                          options={getResourceTypes()\n                            .filter((value) => {\n                              if (\n                                acl.operation.value === undefined ||\n                                acl.operation.value.toString() === ''\n                              ) {\n                                return true;\n                              }\n                              const aclOperation = snakeCase(\n                                acl.operation.value.toString()\n                              );\n                              const operations =\n                                resourceOperations[\n                                  snakeCase(value.toString())\n                                ] || [];\n                              return operations.some(\n                                (operation) => aclOperation === operation\n                              );\n                            })\n                            .map((value) => {\n                              return {\n                                value,\n                                title: sentenceCase(value),\n                              } as SelectOption<AclResourceType>;\n                            })}\n                          selected={acl.resourceType}\n                          setSelected={setResourceType}\n                          row={row}\n                          id='resource-type'\n                        />\n                      ),\n                    },\n                    {\n                      title: (\n                        <CreateSelect\n                          options={getPatternTypes().map((value) => {\n                            return {\n                              value,\n                              title:\n                                value === AclPatternType.Prefixed\n                                  ? 'Starts with'\n                                  : 'Is',\n                            } as SelectOption<AclPatternType>;\n                          })}\n                          selected={acl.patternType}\n                          setSelected={setPatternType}\n                          row={row}\n                          id='pattern-type'\n                        />\n                      ),\n                    },\n                    {\n                      title: (\n                        <CreateTypeahead\n                          row={row}\n                          value={acl.resource}\n                          setValue={setResource}\n                          id='resource'\n                          initialOptions={() => {\n                            if (\n                              acl.resourceType.value === AclResourceType.Topic\n                            ) {\n                              return topicNames;\n                            }\n                            if (\n                              acl.resourceType.value === AclResourceType.Group\n                            ) {\n                              return consumerGroupIds;\n                            }\n                            return [];\n                          }}\n                        />\n                      ),\n                    },\n                    {\n                      title: (\n                        <Button\n                          variant='link'\n                          icon={<MinusCircleIcon />}\n                          onClick={() => removeRow(row)}\n                        >\n                          Remove\n                        </Button>\n                      ),\n                    },\n                  ],\n                } as IRowData;\n              }),\n              'aria-label': t('permission.table.table.permission_list_table'),\n              shouldDefaultCustomRowWrapper: true,\n              variant: TableVariant.compact,\n              canSelectAll: false,\n            }}\n            rowDataTestId={'tablePermissions-row'}\n          />\n          <Button variant='link' icon={<PlusCircleIcon />} onClick={addRow}>\n            Add permission\n          </Button>\n        </FormGroup>\n      </GridItem>\n    );\n  };\n","import { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\n\nexport type NewAcl = {\n  permission: Validated<AclPermissionType | undefined>;\n  operation: Validated<AclOperation | undefined>;\n  resourceType: Validated<AclResourceType | undefined>;\n  patternType: Validated<AclPatternType | undefined>;\n  resource: Validated<string | undefined>;\n};\n\nexport const createEmptyNewAcl = (): NewAcl => {\n  return {\n    permission: {\n      value: undefined,\n    },\n    operation: {\n      value: undefined,\n    },\n    resourceType: {\n      value: undefined,\n    },\n    patternType: {\n      value: undefined,\n    },\n    resource: {\n      value: undefined,\n    },\n  } as NewAcl;\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  Modal,\n  ModalVariant,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  createPermissionsService,\n  EnhancedAclBinding,\n} from '@app/services/acls';\nimport { ConfigContext } from '@app/contexts';\nimport { usePrincipals } from '@bf2/ui-shared';\nimport { BaseModalProps } from '@app/components/KafkaModal/ModalTypes';\nimport { SelectAccount } from '@app/modules/Permissions/components/ManagePermissionsDialog/SelectAccount';\nimport { EditExisting } from '@app/modules/Permissions/components/ManagePermissionsDialog/EditExistingPermissions';\nimport { CreatePermissions } from '@app/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  createEmptyNewAcl,\n  NewAcl,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\n\nexport type ManagePermissionsProps = {\n  onSave?: () => Promise<void>;\n  kafkaName?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n  selectedAccountId?: string;\n  acls: Array<EnhancedAclBinding>;\n};\n\nexport const ManagePermissions: React.FC<\n  ManagePermissionsProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n}) => {\n  const { t } = useTranslation();\n\n  const [selectedAccount, setSelectedAccount] = useState<\n    Validated<string | undefined>\n  >({ value: selectedAccountId });\n  const [newAcls, setNewAcls] = useState<NewAcl[]>([createEmptyNewAcl()]);\n\n  const principals = usePrincipals();\n\n  const config = useContext(ConfigContext);\n  const permissionsService = createPermissionsService(config);\n\n  const save = async () => {\n    let valid = true;\n    if (selectedAccount.value === undefined) {\n      setSelectedAccount((v) => {\n        return {\n          ...v,\n          invalid: true,\n          errorMessage: t(\n            'permission.manage_permissions_dialog.must_select_account_error'\n          ),\n        };\n      });\n      valid = false;\n    }\n    setNewAcls((prevState) => {\n      return prevState.map((value) => {\n        if (\n          value.resource.value !== undefined ||\n          value.patternType.value !== undefined ||\n          value.permission.value !== undefined ||\n          value.resourceType.value !== undefined ||\n          value.operation.value !== undefined\n        ) {\n          const answer = Object.assign({}, value);\n          if (value.resource.value === undefined) {\n            answer.resource.invalid = true;\n            answer.resource.errorMessage = t(\n              'permission.manage_permissions_dialog.create_permissions.must_select_resource_error'\n            );\n            valid = false;\n          }\n          if (value.patternType.value === undefined) {\n            answer.patternType.invalid = true;\n            answer.patternType.errorMessage = t(\n              'permission.manage_permissions_dialog.create_permissions.must_select_pattern_type_error'\n            );\n            valid = false;\n          }\n          if (value.permission.value === undefined) {\n            answer.permission.invalid = true;\n            answer.permission.errorMessage = t(\n              'permission.manage_permissions_dialog.create_permissions.must_select_permission_error'\n            );\n            valid = false;\n          }\n          if (value.resourceType.value === undefined) {\n            answer.resourceType.invalid = true;\n            answer.resourceType.errorMessage = t(\n              'permission.manage_permissions_dialog.create_permissions.must_select_resource_type_error'\n            );\n            valid = false;\n          }\n          if (value.operation.value === undefined) {\n            answer.operation.invalid = true;\n            answer.operation.errorMessage = t(\n              'permission.manage_permissions_dialog.create_permissions.must_select_operation_error'\n            );\n            valid = false;\n          }\n          return answer;\n        }\n        return value;\n      });\n    });\n    if (valid) {\n      for (const value1 of newAcls.filter(\n        (value) =>\n          value.resource.value !== undefined ||\n          value.patternType.value !== undefined ||\n          value.permission.value !== undefined ||\n          value.resourceType.value !== undefined ||\n          value.operation.value !== undefined\n      )) {\n        if (value1.resource.value === undefined) {\n          throw Error('resource must not be undefined');\n        }\n        if (value1.patternType.value === undefined) {\n          throw Error('patternType must not be undefined');\n        }\n        if (value1.permission.value === undefined) {\n          throw Error('permission must not be undefined');\n        }\n        if (value1.resourceType.value === undefined) {\n          throw Error('resourceType must not be undefined');\n        }\n        if (value1.operation.value === undefined) {\n          throw Error('operation must not be undefined');\n        }\n        await permissionsService.addPermission({\n          resourceName: value1.resource.value,\n          patternType: value1.patternType.value,\n          permission: value1.permission.value,\n          resourceType: value1.resourceType.value,\n          operation: value1.operation.value,\n          principal: `User:${selectedAccount.value}`,\n        });\n      }\n      onSave && (await onSave());\n      hideModal();\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      isOpen={true}\n      aria-label={t('permission.manage_permissions_dialog.aria_label')}\n      title={t('permission.manage_permissions_dialog.title')}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={hideModal}\n      actions={[\n        <Button variant='primary' onClick={save} key={1}>\n          {t('permission.manage_permissions_dialog.update_button')}\n        </Button>,\n        <Button variant='link' onClick={hideModal} key={2}>\n          {t('permission.manage_permissions_dialog.cancel_button')}\n        </Button>,\n      ]}\n    >\n      {t('permission.manage_permissions_dialog.main_help')}\n      <Form>\n        <Grid hasGutter md={6}>\n          <GridItem span={12}>\n            <FormGroup\n              fieldId='kafka-instance-name'\n              label={t(\n                'permission.manage_permissions_dialog.kafka_instance_title'\n              )}\n            >\n              {kafkaName}\n            </FormGroup>\n          </GridItem>\n          <GridItem span={12}>\n            <SelectAccount\n              id={selectedAccount}\n              setId={setSelectedAccount}\n              initialOptions={principals.getAllPrincipals()}\n            />\n          </GridItem>\n        </Grid>\n        <EditExisting\n          existingAcls={acls}\n          selectedAccountId={selectedAccount.value}\n        />\n        <CreatePermissions\n          acls={newAcls}\n          setAcls={setNewAcls}\n          topicNames={topicNames}\n          consumerGroupIds={consumerGroupIds}\n        />\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ManagePermissions;\n","import { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { sentenceCase } from 'sentence-case';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type OperationColor =\n  | 'blue'\n  | 'cyan'\n  | 'green'\n  | 'orange'\n  | 'purple'\n  | 'red'\n  | 'grey';\n\nexport type EnhancedAclBinding = AclBinding & {\n  operationColor: OperationColor;\n  operationDisplay: string;\n  resourceTypeDisplay: string;\n  permissionDisplay: string;\n  principalDisplay: string;\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const createPermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = async (\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage> => {\n    const accessToken = await config?.getToken();\n\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n      filter.resourceType,\n      filter.resourceName,\n      filter.patternType,\n      filter.principal,\n      filter.operation,\n      filter.permissionType,\n      page,\n      size\n    );\n    return enhanceAclBindingListPage(response);\n  };\n\n  const addPermission = async (acl: AclBinding) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.createAcl(acl);\n  };\n\n  const deletePermission = async (acl: AclFilter) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.deleteAcls(\n      acl.resourceType,\n      acl.resourceName,\n      acl.patternType,\n      acl.principal,\n      acl.operation,\n      acl.permissionType\n    );\n  };\n\n  const getResourceOperations = async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return await api\n      .getAclResourceOperations()\n      .then((response) => response.data);\n  };\n\n  return {\n    getPermissions,\n    addPermission,\n    deletePermission,\n    getResourceOperations,\n  } as PermissionsService;\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        let operationColor: string | undefined;\n        let resourceTypeDisplay: string | undefined;\n        switch (item.resourceType) {\n          case AclResourceType.Group:\n            operationColor = 'green';\n            resourceTypeDisplay = 'Consumer group';\n            break;\n          case AclResourceType.Topic:\n            operationColor = 'blue';\n            resourceTypeDisplay = 'Topic';\n            break;\n          case AclResourceType.Cluster:\n            resourceTypeDisplay = 'Kafka Instance';\n            operationColor = 'grey';\n            break;\n          case AclResourceType.TransactionalId:\n            resourceTypeDisplay = 'Transactional id';\n            operationColor = 'orange';\n            break;\n          default:\n            operationColor = undefined;\n            resourceTypeDisplay = sentenceCase(item.resourceType);\n            break;\n        }\n        return {\n          operationColor,\n          operationDisplay: sentenceCase(item.operation),\n          resourceTypeDisplay,\n          permissionDisplay: sentenceCase(item.permission),\n          // Strip out the \"User:\" prefix\n          principalDisplay: item.principal.substring(5),\n          ...item,\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["FormGroupWithPopover","children","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","validated","helperText","helperTextInvalid","isRequired","FormGroup","label","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","rowDataTestId","trRef","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","css","rowId","hidden","undefined","MASTable","tableProps","tableHeaderProps","tableBodyProps","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","AllAccountsPrincipal","t","useTranslation","InfoCircleIcon","color","PrincipalWithTooltip","acl","locatedPrincipals","usePrincipals","getAllPrincipals","filter","p","id","principalDisplay","length","principalType","PrincipalType","Tooltip","content","displayName","emailAddress","principalCell","item","principal","title","permissionCell","permission","AclPermissionType","Label","permissionDisplay","operationCell","operationColor","operationDisplay","resourceCell","resourceTypeDisplay","patternType","AclPatternType","resourceName","SelectAccount","setId","initialOptions","useState","isOpen","setIsOpen","map","o","description","sentenceCase","toString","options","setOptions","clearSelection","errorMessage","invalid","P","SelectVariant","typeAheadAriaLabel","onToggle","onSelect","selection","isPlaceholder","onClear","selections","isInputValuePersisted","placeholderText","isCreatable","onCreateOption","newValue","option","index","isDisabled","disabled","key","AllAccountsTable","existingAcls","GridItem","span","isHelperTextBeforeField","f","TableVariant","canSelectAll","SelectedAccountTable","selectedAccountId","acls","setAcls","useEffect","v","k","answer","Button","icon","MinusCircleIcon","hash","removed","EditExisting","existingAclsForAllPrincipals","i","existingAclsForSelectedPrincipal","CreateSelect","setSelected","selected","CreateTypeahead","setValue","CreatePermissions","topicNames","consumerGroupIds","config","resourceOperations","setResourceOperations","permissionsService","getResourceOperations","setPermissionType","prevState","setOperation","operation","setResourceType","resourceType","setPatternType","setResource","resource","MASLoading","aclOperation","snakeCase","some","AclResourceType","removeRow","ManagePermissions","hideModal","onSave","kafkaName","selectedAccount","setSelectedAccount","newAcls","setNewAcls","principals","Modal","ModalVariant","showClose","onClose","actions","valid","Object","assign","value1","Error","addPermission","Form","Grid","hasGutter","md","convertEnum","entries","find","createPermissionsService","getPermissions","size","page","Promise","getToken","accessToken","AclsApi","Configuration","basePath","getAcls","permissionType","response","enhanceAclBindingListPage","createAcl","deletePermission","deleteAcls","getAclResourceOperations","then","data","total","items","substring","sort","a","b","localeCompare","getPermissionsTypes","values","getOperations","AclOperation","getResourceTypes","getPatternTypes"],"sourceRoot":""}