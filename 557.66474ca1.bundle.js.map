{"version":3,"sources":["webpack://kafka-ui/./src/modules/Topics/pages/MainView/MainView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/MainView/MainViewFederated.tsx"],"names":["Topics","lazy","ConsumerGroups","MainView","onCreateTopic","onEditTopic","activeTab","t","useTranslation","kafkaPageLink","kafkaName","handleInstanceDrawer","setIsOpenDeleteInstanceModal","showMetrics","useState","activeTabKey","setActiveTabKey","contentRefConsumerGroups","contentRefTopics","contentRefDashboard","isOpen","setIsOpen","onSelectKebabOption","dropdownItems","DropdownItem","key","onClick","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Level","Title","headingLevel","Dropdown","onSelect","toggle","KebabToggle","onToggle","id","isPlain","position","DropdownPosition","fallback","MASLoading","padding","default","Tabs","activeKey","_event","tabIndex","Tab","title","TabTitleText","eventKey","tabContentRef","tabContentId","isFilled","TabContent","ref","hidden","consumerGroupByTopic","getToken","apiBasePath","onError","onConnectToRoute","getConnectToRoutePath","dispatchKafkaAction","BrowserRouter","I18nextProvider","i18n","value","basePath","RootModal","topicName"],"mappings":"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","file":"557.66474ca1.bundle.js","sourcesContent":["import React, { useState, lazy } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Tabs,\n  Level,\n  Tab,\n  TabTitleText,\n  TabContent,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n  DropdownItem,\n} from '@patternfly/react-core';\nimport { TopicsProps } from '@app/modules/Topics/Topics';\nimport { useFederated } from '@app/contexts';\nimport { MASLoading } from '@app/components';\nimport '../style.css';\n\nconst Topics = lazy(() => import('@app/modules/Topics/Topics'));\nconst ConsumerGroups = lazy(\n  () => import('@app/modules/ConsumerGroups/ConsumerGroups')\n);\n\nexport type MainViewProps = TopicsProps & {\n  activeTab?: number;\n};\n\nexport const MainView: React.FC<MainViewProps> = ({\n  onCreateTopic,\n  onEditTopic,\n  activeTab,\n}) => {\n  const { t } = useTranslation();\n  const {\n    kafkaPageLink,\n    kafkaName,\n    handleInstanceDrawer,\n    setIsOpenDeleteInstanceModal,\n    showMetrics,\n  } = useFederated();\n\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n  const contentRefConsumerGroups = React.createRef<HTMLElement>();\n  const contentRefTopics = React.createRef<HTMLElement>();\n  const contentRefDashboard = React.createRef<HTMLElement>();\n\n  const handleTabClick = (_event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelectKebabOption = (activeTab: string) => {\n    handleInstanceDrawer && handleInstanceDrawer(true, activeTab);\n  };\n\n  const onDeleteInstance = () => {\n    setIsOpenDeleteInstanceModal && setIsOpenDeleteInstanceModal(true);\n  };\n\n  const dropdownItems = [\n    <DropdownItem\n      key='view-kafka'\n      onClick={() => onSelectKebabOption('details')}\n    >\n      {t('common.view_instance')}\n    </DropdownItem>,\n    <DropdownItem\n      key='connect-kafka'\n      onClick={() => onSelectKebabOption('connection')}\n    >\n      {t('common.view_connection')}\n    </DropdownItem>,\n    <DropdownItem key='delete-kafka' onClick={onDeleteInstance}>\n      {t('common.delete_instance')}\n    </DropdownItem>,\n  ];\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>\n        {t('common.kafka_instance')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <Title headingLevel='h1'>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </Title>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id='toggle-data-plane' />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          />\n        </Level>\n      </PageSection>\n      <React.Suspense fallback={<MASLoading />}>\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n          className='pf-c-page__main-tabs'\n        >\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n            data-testid='pageKafka-tabProperties'\n            className='pf-m-page-insets'\n          >\n            <Tab\n              title={<TabTitleText>{t('dashboard.dashboard')}</TabTitleText>}\n              eventKey={1}\n              data-testid='pageKafka-tabDashboard'\n              id='dashboard-tab-section'\n              aria-label={t('dashboard.dashboard')}\n              tabContentRef={contentRefDashboard}\n              tabContentId='kafka-ui-TabcontentDashboard'\n              // className=\"kafka-ui-m-full-height\"\n            />\n            <Tab\n              title={<TabTitleText>{t('topic.topics')}</TabTitleText>}\n              eventKey={2}\n              data-testid='pageKafka-tabTopics'\n              id='topics-tab-section'\n              aria-label={t('topic.topics')}\n              tabContentRef={contentRefTopics}\n              tabContentId='kafka-ui-TabcontentTopicsList'\n              // className=\"kafka-ui-m-full-height\"\n            />\n            <Tab\n              title={\n                <TabTitleText>\n                  {t('consumerGroup.consumer_groups')}\n                </TabTitleText>\n              }\n              eventKey={3}\n              data-testid='pageKafka-tabConsumers'\n              id='consumer-groups-tab-section'\n              aria-label={t('consumerGroup.consumer_groups')}\n              tabContentRef={contentRefConsumerGroups}\n              tabContentId='kafka-ui-TabcontentConsumersList'\n              // className='kafka-ui-m-full-height'\n            />\n          </Tabs>\n        </PageSection>\n        <PageSection isFilled>\n          <TabContent\n            eventKey={1}\n            ref={contentRefDashboard}\n            id='kafka-ui-TabcontentDashboard'\n            className='kafka-ui-m-full-height'\n            aria-label={t('dashboard.dashboard')}\n          >\n            {showMetrics}\n          </TabContent>\n          <TabContent\n            eventKey={2}\n            ref={contentRefTopics}\n            id='kafka-ui-TabcontentTopicsList'\n            className='kafka-ui-m-full-height'\n            aria-label={t('topic.topics')}\n            hidden\n          >\n            <Topics onCreateTopic={onCreateTopic} onEditTopic={onEditTopic} />\n          </TabContent>\n          <TabContent\n            eventKey={3}\n            ref={contentRefConsumerGroups}\n            id='kafka-ui-TabcontentConsumersList'\n            className='kafka-ui-m-full-height'\n            aria-label={t('consumerGroup.consumer_groups')}\n            hidden\n          >\n            <ConsumerGroups consumerGroupByTopic={false} />\n          </TabContent>\n        </PageSection>\n      </React.Suspense>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { I18nextProvider } from 'react-i18next';\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\nimport kafkai18n from '@app/i18n';\nimport { MainView } from './MainView';\nimport { KafkaActions } from '@app/utils';\nimport { RootModal } from '@app/components/RootModal';\n\nexport type MainViewFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst MainViewFederated: FunctionComponent<MainViewFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  onError,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  handleInstanceDrawer,\n  setIsOpenDeleteInstanceModal,\n  dispatchKafkaAction,\n  showMetrics\n\n}) => {\n  const onCreateTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.CreateTopic);\n  };\n\n  const onEditTopic = (topicName?: string | undefined) => {\n    dispatchKafkaAction &&\n      dispatchKafkaAction(KafkaActions.UpdateTopic, topicName);\n  };\n\n  return (\n    // TODO don't add BrowserRouter here - see  https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/74\n    <BrowserRouter>\n      <I18nextProvider i18n={kafkai18n}>\n        <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n          <FederatedContext.Provider\n            value={{\n              kafkaName,\n              kafkaPageLink,\n              onError,\n              onConnectToRoute,\n              getConnectToRoutePath,\n              handleInstanceDrawer,\n              setIsOpenDeleteInstanceModal,\n              dispatchKafkaAction,\n              showMetrics\n            }}\n          >\n            <RootModal>\n              <MainView\n                onCreateTopic={onCreateTopic}\n                onEditTopic={onEditTopic}\n                activeTab={1}\n              />\n            </RootModal>\n          </FederatedContext.Provider>\n        </ConfigContext.Provider>\n      </I18nextProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default MainViewFederated;\n"],"sourceRoot":""}