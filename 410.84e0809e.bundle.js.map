{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicHead.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepTopicName.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepPartitions.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepMessageRetention.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepReplicas.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicWizard.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/CreateTopicPage.tsx"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","Divider","StepTopicName","topicNameInput","setTopicNameInput","Stack","hasGutter","TextContent","Text","component","TextVariants","Form","onSubmit","event","preventDefault","FormGroup","fieldId","helperText","isRequired","TextInput","type","name","value","placeholder","StepPartitions","partitionTouchspinValue","setPartitionTouchspinValue","NumberInput","onPlus","onMinus","inputName","Number","target","widthChars","StepMessageRetention","RetentionTimeOption","RetentionSizeOption","setMsgRetentionValue","currentPeriod","currentSize","setCurrentPeriod","setCurrentSize","setRetentionSize","useState","retentionTimeTouchspinValue","setRetentionTimeTouchspinValue","retentionSizeTouchspinValue","setRetentionSizeTouchspinValue","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","selectedTime","setSelectedTime","selectedSize","setSelectedSize","retentionTimeFactor","setRetentionTimeFactor","retentionSizeFactor","setRetentionSizeFactor","useEffect","DAY","WEEK","UNLIMITED","CUSTOM","handleMessageRetention","checked","Radio","Flex","FlexItem","Select","SelectVariant","onToggle","onSelect","selection","MILLISECOND","SECOND","MINUTE","HOUR","selections","isOpen","SelectOption","key","isPlaceholder","BYTE","KILOBYTE","MEGABYTE","GIGABYTE","TERABYTE","StepReplicas","replicationFactor","minInSyncReplica","t","useTranslation","Alert","isInline","title","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","toString","popoverBody","popoverHeader","setIsCreateTopic","config","useContext","history","addAlert","msgRetentionValue","retentionSize","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","store","closeWizard","saveTopic","topic","settings","numPartitions","basePath","accessToken","getToken","createTopic","then","res","status","AlertVariant","catch","err","response","data","steps","enableNext","trim","canJumpTo","nextButtonText","TopicAdvanceConfig","isCreate","handleCancel","push","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","CreateTopicPage"],"mappings":"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","file":"410.84e0809e.bundle.js","sourcesContent":["import {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Divider,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nexport interface ICreateTopicProps {\n  isSwitchChecked: boolean;\n  setIsSwitchChecked: (value: boolean) => void;\n}\n\nexport const CreateTopichead: React.FC<ICreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n}) => {\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='/openshiftstreams'>\n        Red Hat OpenShift Streams for Apache Kafka\n      </BreadcrumbItem>\n      <BreadcrumbItem to='/openshiftstreams'>\n        MK Cluster Instance\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        Create topic\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          Create topic\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label='Show all available options'\n          labelOff='Show all available options'\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n      <Divider />\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Form,\n  FormGroup,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepTopicName {\n  topicNameInput: string;\n  setTopicNameInput: (value: string) => void;\n}\n\nexport const StepTopicName: React.FC<IStepTopicName> = ({\n  topicNameInput,\n  setTopicNameInput,\n}) => {\n  const handleTopicNameChange = (topicNameInput) => {\n    setTopicNameInput(topicNameInput);\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Topic name</Text>\n        <Text component={TextVariants.p}>\n          Unique name used to recognize your topic\n        </Text>\n        <Text component={TextVariants.small}>\n          The topic name is also used by your producers and consumers as part of\n          the connection information, so make it something easy to recognize.\n        </Text>\n      </TextContent>\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          label='Topic name'\n          fieldId='step-topic-name-form'\n          helperText='Must be letters (Aa-Zz), numbers, underscores( _ ), or hyphens ( - ).'\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            aria-describedby='step-topic-name-helper'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder='Enter topic name'\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepPartitions {\n  setPartitionTouchspinValue: (value: number) => void;\n  partitionTouchspinValue: number;\n}\n\nexport const StepPartitions: React.FC<IStepPartitions> = ({\n  partitionTouchspinValue,\n  setPartitionTouchspinValue,\n}) => {\n  const handleOnPlus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue + 1);\n  };\n  const handleOnMinus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue - 1);\n  };\n  const handlePartitionTouchspinChange = (event) => {\n    setPartitionTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Partitions</Text>\n        <Text component={TextVariants.p}>An ordered list of messages</Text>\n        <Text component={TextVariants.small}>\n          One or more partitions make up a topic. Partitions are distributed\n          across the brokers to increase the salability of your topic. You can\n          also use them to distribute messages across the members of the\n          consumer group.\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText='One partition is sufficient for getting started, but production systems often have more.'\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={partitionTouchspinValue}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepMessageRetention {\n  setMsgRetentionValue: (value: number) => void;\n  currentPeriod: string | number;\n  currentSize: string | number;\n  setCurrentPeriod: (value: string | number) => void;\n  setCurrentSize: (value: string | number) => void;\n  setRetentionSize: (value: number) => void;\n}\n\nexport const StepMessageRetention: React.FC<IStepMessageRetention> = ({\n  setMsgRetentionValue,\n  currentPeriod,\n  currentSize,\n  setCurrentPeriod,\n  setCurrentSize,\n  setRetentionSize,\n}) => {\n  enum RetentionTimeOption {\n    MILLISECOND = 1,\n    SECOND = 1000,\n    MINUTE = 60000,\n    HOUR = 3600000,\n    DAY = 86400000,\n    WEEK = 604800000,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n\n  enum RetentionSizeOption {\n    BYTE = 1,\n    KILOBYTE = 1000,\n    MEGABYTE = 1000000,\n    GIGABYTE = 1000000000,\n    TERABYTE = 1000000000000,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n  const [\n    retentionTimeTouchspinValue,\n    setRetentionTimeTouchspinValue,\n  ] = useState(7);\n  const [\n    retentionSizeTouchspinValue,\n    setRetentionSizeTouchspinValue,\n  ] = useState(1);\n  const [isRetentionTimeSelectOpen, setIsRetentionTimeSelectOpen] = useState(\n    false\n  );\n  const [isRetentionSizeSelectOpen, setIsRetentionSizeSelectOpen] = useState(\n    false\n  );\n  const [selectedTime, setSelectedTime] = useState(false);\n  const [selectedSize, setSelectedSize] = useState(false);\n  const [retentionTimeFactor, setRetentionTimeFactor] = useState(1);\n  const [retentionSizeFactor, setRetentionSizeFactor] = useState(1);\n\n  useEffect(() => {\n    if (currentPeriod === RetentionTimeOption.DAY) {\n      setMsgRetentionValue(RetentionTimeOption.DAY);\n    } else if (currentPeriod === RetentionTimeOption.WEEK) {\n      setMsgRetentionValue(RetentionTimeOption.WEEK);\n    } else if (currentPeriod === RetentionTimeOption.UNLIMITED) {\n      setMsgRetentionValue(RetentionTimeOption.UNLIMITED);\n    } else if (currentPeriod === RetentionTimeOption.CUSTOM) {\n      setMsgRetentionValue(retentionTimeFactor * retentionTimeTouchspinValue);\n    }\n\n    if (currentSize === RetentionSizeOption.UNLIMITED) {\n      setRetentionSize(RetentionSizeOption.UNLIMITED);\n    } else if (currentSize === RetentionSizeOption.CUSTOM) {\n      setRetentionSize(retentionSizeFactor * retentionSizeTouchspinValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    currentPeriod,\n    currentSize,\n    retentionTimeTouchspinValue,\n    retentionSizeTouchspinValue,\n    retentionTimeFactor,\n    retentionSizeFactor,\n  ]);\n\n  const handleMessageRetention = (checked, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radioDay') {\n      setCurrentPeriod(RetentionTimeOption.DAY);\n    } else if (name === 'radioWeek') {\n      setCurrentPeriod(RetentionTimeOption.WEEK);\n    } else if (name === 'radioUnlimitedTime') {\n      setCurrentPeriod(RetentionTimeOption.UNLIMITED);\n    } else if (name === 'radioCustomTime') {\n      setCurrentPeriod(RetentionTimeOption.CUSTOM);\n    }\n\n    if (name === 'radioCustomSize') {\n      setCurrentSize(RetentionSizeOption.CUSTOM);\n    } else if (name === 'radioUnlimitedSize') {\n      setCurrentSize(RetentionSizeOption.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isRetentionTimeSelectOpen) => {\n    setIsRetentionTimeSelectOpen(isRetentionTimeSelectOpen);\n  };\n\n  const onRetentionSizeToggle = (isRetentionSizeSelectOpen) => {\n    setIsRetentionSizeSelectOpen(isRetentionSizeSelectOpen);\n  };\n\n  const onRetentionTimeSelect = (event, selection) => {\n    if (selection === 'days') {\n      setRetentionTimeFactor(RetentionTimeOption.DAY);\n    } else if (selection === 'unlimited') {\n      setRetentionTimeFactor(RetentionTimeOption.UNLIMITED);\n    } else if (selection === 'milliseconds') {\n      setRetentionTimeFactor(RetentionTimeOption.MILLISECOND);\n    } else if (selection === 'seconds') {\n      setRetentionTimeFactor(RetentionTimeOption.SECOND);\n    } else if (selection === 'minutes') {\n      setRetentionTimeFactor(RetentionTimeOption.MINUTE);\n    } else if (selection === 'hours') {\n      setRetentionTimeFactor(RetentionTimeOption.HOUR);\n    }\n    setSelectedTime(selection);\n    setIsRetentionTimeSelectOpen(false);\n  };\n\n  const onRetentionSizeSelect = (event, selection) => {\n    if (selection === 'unlimited') {\n      setRetentionSizeFactor(RetentionSizeOption.UNLIMITED);\n    } else if (selection === 'bytes') {\n      setRetentionSizeFactor(RetentionSizeOption.BYTE);\n    } else if (selection === 'kilobytes') {\n      setRetentionSizeFactor(RetentionSizeOption.KILOBYTE);\n    } else if (selection === 'megabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.MEGABYTE);\n    } else if (selection === 'gigabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.GIGABYTE);\n    } else if (selection === 'terabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.TERABYTE);\n    }\n    setSelectedSize(selection);\n    setIsRetentionSizeSelectOpen(false);\n  };\n\n  const handleRetentionTimePlusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue + 1);\n  };\n\n  const handleRetentionTimeMinusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue - 1);\n  };\n\n  const handleRetentionTimeTouchSpinChange = (event) => {\n    setRetentionTimeTouchspinValue(Number(event.target.value));\n  };\n\n  const handleRetentionSizePlusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue + 1);\n  };\n\n  const handleRetentionSizeMinusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue - 1);\n  };\n\n  const handleRetentionSizeTouchSpinChange = (event) => {\n    setRetentionSizeTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n        <TextContent>\n          <Text component={TextVariants.h2}>Message retention</Text>\n          <Text component={TextVariants.p}>\n            How long messages are retained and the maximum total size of all log\n            segments in a partition before they are deleted to free up space\n          </Text>\n          <Text component={TextVariants.small}>\n            Messages that aren't read by a consumer within this time will be\n            missed. By default, a limit is only applied to retention time.\n          </Text>\n        </TextContent>\n\n        <Form onSubmit={preventFormSubmit}>\n          <FormGroup\n            fieldId='form-group-retention-time-in-wizard'\n            label='Retention time'\n            // className='form-group-radio'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.DAY}\n                name='radioDay'\n                onChange={handleMessageRetention}\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value='day'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.WEEK}\n                name='radioWeek'\n                onChange={handleMessageRetention}\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value='week'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.CUSTOM}\n                name='radioCustomTime'\n                onChange={handleMessageRetention}\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionTimeMinusClick}\n                      onPlus={handleRetentionTimePlusClick}\n                      value={retentionTimeTouchspinValue}\n                      onChange={handleRetentionTimeTouchSpinChange}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onRetentionTimeToggle}\n                      onSelect={onRetentionTimeSelect}\n                      selections={selectedTime}\n                      isOpen={isRetentionTimeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption\n                        key={0}\n                        value='milliseconds'\n                        isPlaceholder\n                      />\n                      <SelectOption key={1} value='seconds' />\n                      <SelectOption key={2} value='minutes' />\n                      <SelectOption key={3} value='hours' />\n                      <SelectOption key={4} value='days' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.UNLIMITED}\n                name='radioUnlimitedTime'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-3'\n                value='unlimited'\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId='form-group-retention-size-in-wizard'\n            label='Retention size'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.CUSTOM}\n                name='radioCustomSize'\n                onChange={handleMessageRetention}\n                label='Custom size'\n                aria-label='custom input'\n                id='radio-controlled-5'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionSizeMinusClick}\n                      onPlus={handleRetentionSizePlusClick}\n                      value={retentionSizeTouchspinValue}\n                      onChange={handleRetentionSizeTouchSpinChange}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onRetentionSizeToggle}\n                      onSelect={onRetentionSizeSelect}\n                      selections={selectedSize}\n                      isOpen={isRetentionSizeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={5} value='bytes' isPlaceholder />\n                      <SelectOption key={6} value='kilobytes' />\n                      <SelectOption key={7} value='megabytes' />\n                      <SelectOption key={8} value='gigabytes' />\n                      <SelectOption key={9} value='terabytes' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.UNLIMITED}\n                name='radioUnlimitedSize'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-6'\n                value='unlimited'\n              />\n            </Stack>\n          </FormGroup>\n        </Form>\n      </Stack>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Alert,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IStepReplicas {\n  replicationFactor: number;\n  minInSyncReplica: number;\n}\n\nexport const StepReplicas: React.FC<IStepReplicas> = ({\n  replicationFactor,\n  minInSyncReplica,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Replicas</Text>\n        <Text component={TextVariants.p}>\n          How many copies of a topic will be made for high availability.\n        </Text>\n        <Text component={TextVariants.small}>\n          The partitions of each topic can be replicated across a configurable\n          number of brokers.\n        </Text>\n      </TextContent>\n      <Alert\n        variant='info'\n        isInline\n        title='Streams for Apache Kafka only supports 3 replicas and a minimum in-sync replica factor of 2.'\n      />\n      <TextWithLabelPopover\n        btnAriaLabel='topic detail replicas'\n        fieldLabel='Replicas'\n        fieldValue={replicationFactor.toString()}\n        popoverBody={t('createTopic.replicasLabelBody')}\n        popoverHeader={t('createTopic.replicasLabelHead')}\n      />\n\n      <TextWithLabelPopover\n        btnAriaLabel='topic detail min-in-sync replica'\n        fieldLabel='Minimum in-sync replicas'\n        fieldValue={minInSyncReplica.toString()}\n        popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n        popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n      />\n    </Stack>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { StepTopicName } from './StepTopicName';\nimport { StepPartitions } from './StepPartitions';\nimport { StepMessageRetention } from './StepMessageRetention';\nimport { StepReplicas } from './StepReplicas';\nimport './CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from './TopicAdvanceConfig';\nimport { DefaultApi, NewTopicInput } from '../../../../OpenApi/api';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { convertUnits, formatTopicRequest } from '../utils';\nimport { ConfigContext } from '../../../../Contexts';\nimport { Configuration } from '../../../../OpenApi';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nimport { useHistory } from 'react-router';\n\ninterface ICreateTopicWizard {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n}\n\nexport const CreateTopicWizard: React.FC<ICreateTopicWizard> = ({\n  setIsCreateTopic,\n  isSwitchChecked,\n}) => {\n  const config = useContext(ConfigContext);\n  const history = useHistory();\n  const { addAlert } = useContext(AlertContext);\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [retentionSize, setRetentionSize] = useState(1);\n  const [topicNameInput, setTopicNameInput] = useState('');\n  const [partitionTouchspinValue, setPartitionTouchspinValue] = useState(1);\n  const [replicationFactorTouchspinValue] = useState(3);\n  const [minInSyncReplicaTouchspinValue] = useState(2);\n\n  const [currentPeriod, setCurrentPeriod] = React.useState<string | number>(\n    86400000\n  );\n  const [currentSize, setCurrentSize] = React.useState<string | number>(\n    'custom'\n  );\n  const { store } = React.useContext(TopicContext);\n\n  const closeWizard = () => {\n    if (setIsCreateTopic) {\n      setIsCreateTopic(false);\n    }\n  };\n\n  const saveTopic = () => {\n    //Object may change based on schema\n\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(store))\n      : {\n          name: topicNameInput,\n          settings: {\n            numPartitions: partitionTouchspinValue,\n            config: [\n              {\n                key: 'retention.ms',\n                value: msgRetentionValue.toString(),\n              },\n              { key: 'log.retention.bytes', value: retentionSize.toString() },\n            ],\n          },\n        };\n\n    new DefaultApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then((res) => {\n        if (res.status === 200) {\n          addAlert(\n            'The topic was successfully created in the Kafka instance',\n            AlertVariant.success\n          );\n        }\n        closeWizard();\n      })\n      .catch((err) => {\n        addAlert(err.response.data.err, AlertVariant.danger);\n        closeWizard();\n      });\n  };\n\n  const handleCancel = () => {\n    history.push('/topics');\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: 'Topic name',\n      enableNext: topicNameInput.trim() !== '',\n      component: (\n        <StepTopicName\n          topicNameInput={topicNameInput}\n          setTopicNameInput={setTopicNameInput}\n        />\n      ),\n    },\n    {\n      name: 'Partitions',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepPartitions\n          partitionTouchspinValue={partitionTouchspinValue}\n          setPartitionTouchspinValue={setPartitionTouchspinValue}\n        />\n      ),\n    },\n    {\n      name: 'Message retention',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepMessageRetention\n          setMsgRetentionValue={setMsgRetentionValue}\n          currentPeriod={currentPeriod}\n          currentSize={currentSize}\n          setCurrentPeriod={setCurrentPeriod}\n          setCurrentSize={setCurrentSize}\n          setRetentionSize={setRetentionSize}\n        />\n      ),\n    },\n    {\n      name: 'Replicas',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepReplicas\n          replicationFactor={replicationFactorTouchspinValue}\n          minInSyncReplica={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: 'Finish',\n    },\n  ];\n\n  const title = 'Create topics wizard';\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={handleCancel}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { CreateTopichead } from './Components/CreateTopicHead';\nimport { CreateTopicWizard } from './Components/CreateTopicWizard';\n\ninterface ICreateTopicPageProps {\n  setIsCreateTopic?: (value: boolean) => void;\n}\n\nexport const CreateTopicPage: React.FC<ICreateTopicPageProps> = ({\n  setIsCreateTopic,\n}) => {\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        setIsCreateTopic={setIsCreateTopic}\n      />\n    </>\n  );\n};\n"],"sourceRoot":""}