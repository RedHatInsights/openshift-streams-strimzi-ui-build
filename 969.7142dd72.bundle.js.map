{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/createIcon.js","webpack://kafka-ui/./src/Contexts/Api/Context.tsx","webpack://kafka-ui/./src/OpenApi/base.ts","webpack://kafka-ui/./src/OpenApi/api.ts","webpack://kafka-ui/./src/OpenApi/configuration.ts","webpack://kafka-ui/./src/i18n/locale/index.ts","webpack://kafka-ui/./src/i18n/index.ts","webpack://kafka-ui/./node_modules/tslib/tslib.es6.js"],"names":["Object","defineProperty","exports","value","createIcon","getSize","IconSize","tslib_1","React","__importStar","size","sm","md","lg","xl","currentId","name","xOffset","yOffset","width","height","svgPath","_a","Component","super","arguments","this","id","props","color","title","noVerticalAlign","__rest","hasTitle","Boolean","heightWidth","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","createElement","assign","fill","role","d","displayName","defaultProps","ConfigContext","undefined","BASE_PATH","replace","field","msg","Error","DefaultApiAxiosParamCreator","configuration","createTopic","newTopicInput","options","RequiredError","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","key","queryParameters","URLSearchParams","search","set","query","toString","headersFromBaseOptions","headers","needsSerialization","nonString","isJsonMime","data","JSON","stringify","url","pathname","hash","deleteConsumerGroupById","consumerGroupId","localVarPath","encodeURIComponent","String","deleteGroup","groupName","deleteTopic","topicName","getConsumerGroupById","topic","getConsumerGroupList","limit","offset","getGroup","getGroupsList","getTopic","getTopicsList","filter","order","metrics","openApi","resetConsumerGroupOffset","updateTopic","topicSettings","DefaultApiFp","localVarAxiosArgs","axios","basePath","axiosRequestArgs","request","then","param","apiKey","username","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","resources","en","translation","de","kafkai18n","use","initReactI18next","init","detection","caches","fallbackLng","debug","interpolation","escapeValue","extendStatics","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","t","s","i","n","length","call","apply","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","__createBinding","o","m","k","k2","__exportStar","__values","__read","ar","error","__spread","concat","__spreadArrays","il","a","j","jl","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","mod","__esModule","default","__importDefault","__classPrivateFieldGet","receiver","privateMap","has","get","__classPrivateFieldSet"],"mappings":"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","file":"969.7142dd72.bundle.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIcon = exports.getSize = exports.IconSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nvar IconSize;\n(function (IconSize) {\n    IconSize[\"sm\"] = \"sm\";\n    IconSize[\"md\"] = \"md\";\n    IconSize[\"lg\"] = \"lg\";\n    IconSize[\"xl\"] = \"xl\";\n})(IconSize = exports.IconSize || (exports.IconSize = {}));\nexports.getSize = (size) => {\n    switch (size) {\n        case IconSize.sm:\n            return '1em';\n        case IconSize.md:\n            return '1.5em';\n        case IconSize.lg:\n            return '2em';\n        case IconSize.xl:\n            return '3em';\n        default:\n            return '1em';\n    }\n};\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\nfunction createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {\n    var _a;\n    return _a = class SVGIcon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.id = `icon-title-${currentId++}`;\n            }\n            render() {\n                const _a = this.props, { size, color, title, noVerticalAlign } = _a, props = tslib_1.__rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n                const hasTitle = Boolean(title);\n                const heightWidth = exports.getSize(size);\n                const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n                const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n                const viewBox = [xOffset, yOffset, width, height].join(' ');\n                return (React.createElement(\"svg\", Object.assign({ style: style, fill: color, height: heightWidth, width: heightWidth, viewBox: viewBox, \"aria-labelledby\": hasTitle ? this.id : null, \"aria-hidden\": hasTitle ? null : true, role: \"img\" }, props),\n                    hasTitle && React.createElement(\"title\", { id: this.id }, title),\n                    React.createElement(\"path\", { d: svgPath })));\n            }\n        },\n        _a.displayName = name,\n        _a.defaultProps = {\n            color: 'currentColor',\n            size: IconSize.sm,\n            noVerticalAlign: false\n        },\n        _a;\n}\nexports.createIcon = createIcon;\n//# sourceMappingURL=createIcon.js.map","import React from 'react';\n\nexport type IConfiguration = {\n  basePath: string;\n  getToken: () => Promise<string>;\n};\n\nexport const ConfigContext = React.createContext<IConfiguration | undefined>(\n  undefined\n);\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Admin REST API\n * An API to provide REST endpoints for query Kafka for admin operations\n *\n * The version of the OpenAPI document: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = 'https://api.openshift.com'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Admin REST API\n * An API to provide REST endpoints for query Kafka for admin operations\n *\n * The version of the OpenAPI document: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  BASE_PATH,\n  COLLECTION_FORMATS,\n  RequestArgs,\n  BaseAPI,\n  RequiredError,\n} from './base';\n\n/**\n * Key value pair indicating possible configuration options for a topic.\n * @export\n * @interface ConfigEntry\n */\nexport interface ConfigEntry {\n  /**\n   * The key indicating what configuration entry you would like to set for the topic.\n   * @type {string}\n   * @memberof ConfigEntry\n   */\n  key?: string;\n  /**\n   * Value to indicate the setting on the topic configuration entry.\n   * @type {string}\n   * @memberof ConfigEntry\n   */\n  value?: string;\n}\n/**\n * A Kafka consumer is responsible for reading records from one or more topics and one or more partitions of a topic.\n * @export\n * @interface Consumer\n */\nexport interface Consumer {\n  /**\n   * Unique identifier for the consumer group to which this consumer belongs.\n   * @type {string}\n   * @memberof Consumer\n   */\n  groupId: string;\n  /**\n   * The unique topic name to which this consumer belongs\n   * @type {string}\n   * @memberof Consumer\n   */\n  topic: string;\n  /**\n   * The partition number to which this consumer group is assigned to.\n   * @type {number}\n   * @memberof Consumer\n   */\n  partition: number;\n  /**\n   * Offset denotes the position of the consumer in a partition.\n   * @type {number}\n   * @memberof Consumer\n   */\n  offset: number;\n  /**\n   * The log end offset is the offset of the last message written to a log.\n   * @type {number}\n   * @memberof Consumer\n   */\n  logEndOffset?: number;\n  /**\n   * Offset Lag is the delta between the last produced message and the last consumer\\'s committed offset.\n   * @type {number}\n   * @memberof Consumer\n   */\n  lag: number;\n  /**\n   * The member ID is a unique identifier given to a consumer by the coordinator upon initially joining the group.\n   * @type {string}\n   * @memberof Consumer\n   */\n  memberId?: string;\n}\n/**\n * A group of Kafka consumers\n * @export\n * @interface ConsumerGroup\n */\nexport interface ConsumerGroup {\n  /**\n   * Unique identifier for the consumer group\n   * @type {string}\n   * @memberof ConsumerGroup\n   */\n  id: string;\n  /**\n   * The list of consumers associated with this consumer group\n   * @type {Array<Consumer>}\n   * @memberof ConsumerGroup\n   */\n  consumers: Array<Consumer>;\n}\n/**\n * A list of consumer groups\n * @export\n * @interface ConsumerGroupList\n */\nexport interface ConsumerGroupList {\n  /**\n   * Consumer group list items\n   * @type {Array<ConsumerGroup>}\n   * @memberof ConsumerGroupList\n   */\n  items: Array<ConsumerGroup>;\n  /**\n   * The total number of consumer groups.\n   * @type {number}\n   * @memberof ConsumerGroupList\n   */\n  count: number;\n  /**\n   * The number of consumer groups per page.\n   * @type {number}\n   * @memberof ConsumerGroupList\n   */\n  limit: number;\n  /**\n   * The page offset\n   * @type {number}\n   * @memberof ConsumerGroupList\n   */\n  offset: number;\n}\n/**\n * Input object to create a new topic.\n * @export\n * @interface NewTopicInput\n */\nexport interface NewTopicInput {\n  /**\n   * The topic name, this value must be unique.\n   * @type {string}\n   * @memberof NewTopicInput\n   */\n  name: string;\n  /**\n   *\n   * @type {TopicSettings}\n   * @memberof NewTopicInput\n   */\n  settings?: TopicSettings;\n}\n/**\n * Kafka topic partition\n * @export\n * @interface Partition\n */\nexport interface Partition {\n  /**\n   * Uniquie id for the partition\n   * @type {number}\n   * @memberof Partition\n   */\n  id: number;\n  /**\n   * List of replicas for the partition\n   * @type {Array<object>}\n   * @memberof Partition\n   */\n  replicas?: Array<object>;\n  /**\n   * List isync-replicas for this partition.\n   * @type {Array<object>}\n   * @memberof Partition\n   */\n  isr?: Array<object>;\n  /**\n   * Kafka server / broker.\n   * @type {object}\n   * @memberof Partition\n   */\n  leader?: object;\n}\n/**\n * Kafka Topic (A feed where records are stored and published)\n * @export\n * @interface Topic\n */\nexport interface Topic {\n  /**\n   * The name of the topic.\n   * @type {string}\n   * @memberof Topic\n   */\n  name?: string;\n  /**\n   * Topic configuration entry.\n   * @type {Array<ConfigEntry>}\n   * @memberof Topic\n   */\n  config?: Array<ConfigEntry>;\n  /**\n   * Partitions for this topic.\n   * @type {Array<Partition>}\n   * @memberof Topic\n   */\n  partitions?: Array<Partition>;\n}\n/**\n * Kafka Topic (A feed where records are stored and published)\n * @export\n * @interface TopicSettings\n */\nexport interface TopicSettings {\n  /**\n   * Number of partitions for this topic.\n   * @type {number}\n   * @memberof TopicSettings\n   */\n  numPartitions?: number;\n  /**\n   * Topic configuration entry.\n   * @type {Array<ConfigEntry>}\n   * @memberof TopicSettings\n   */\n  config?: Array<ConfigEntry>;\n}\n/**\n * A list of topics.\n * @export\n * @interface TopicsList\n */\nexport interface TopicsList {\n  /**\n   * The page offset\n   * @type {number}\n   * @memberof TopicsList\n   */\n  offset: number;\n  /**\n   * number of entries per page\n   * @type {number}\n   * @memberof TopicsList\n   */\n  limit: number;\n  /**\n   * Total number of topics\n   * @type {number}\n   * @memberof TopicsList\n   */\n  count: number;\n  /**\n   * List of topics\n   * @type {Array<Topic>}\n   * @memberof TopicsList\n   */\n  items: Array<Topic>;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (\n  configuration?: Configuration\n) {\n  return {\n    /**\n     * Creates a new topic for Kafka.\n     * @summary Creates a new topic\n     * @param {NewTopicInput} newTopicInput Topic to create.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTopic: async (\n      newTopicInput: NewTopicInput,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'newTopicInput' is not null or undefined\n      if (newTopicInput === null || newTopicInput === undefined) {\n        throw new RequiredError(\n          'newTopicInput',\n          'Required parameter newTopicInput was null or undefined when calling createTopic.'\n        );\n      }\n      const localVarPath = `/topics`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      const nonString = typeof newTopicInput !== 'string';\n      const needsSerialization =\n        nonString && configuration && configuration.isJsonMime\n          ? configuration.isJsonMime(\n              localVarRequestOptions.headers['Content-Type']\n            )\n          : nonString;\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(newTopicInput !== undefined ? newTopicInput : {})\n        : newTopicInput || '';\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Delete a consumer group, along with its consumers.\n     * @summary Delete a consumer group.\n     * @param {string} consumerGroupId The unique name of the topic.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteConsumerGroupById: async (\n      consumerGroupId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'consumerGroupId' is not null or undefined\n      if (consumerGroupId === null || consumerGroupId === undefined) {\n        throw new RequiredError(\n          'consumerGroupId',\n          'Required parameter consumerGroupId was null or undefined when calling deleteConsumerGroupById.'\n        );\n      }\n      const localVarPath = `/consumer-groups/{consumerGroupId}`.replace(\n        `{${'consumerGroupId'}}`,\n        encodeURIComponent(String(consumerGroupId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @param {string} groupName Consumer group identificator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteGroup: async (\n      groupName: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'groupName' is not null or undefined\n      if (groupName === null || groupName === undefined) {\n        throw new RequiredError(\n          'groupName',\n          'Required parameter groupName was null or undefined when calling deleteGroup.'\n        );\n      }\n      const localVarPath = `/groups/{groupName}`.replace(\n        `{${'groupName'}}`,\n        encodeURIComponent(String(groupName))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Deletes the topic with the specified name.\n     * @summary Deletes a  topic\n     * @param {string} topicName The topic name to delete.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteTopic: async (\n      topicName: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'topicName' is not null or undefined\n      if (topicName === null || topicName === undefined) {\n        throw new RequiredError(\n          'topicName',\n          'Required parameter topicName was null or undefined when calling deleteTopic.'\n        );\n      }\n      const localVarPath = `/topics/{topicName}`.replace(\n        `{${'topicName'}}`,\n        encodeURIComponent(String(topicName))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'DELETE',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a single consumer group by its unique ID.\n     * @param {string} consumerGroupId The unique ID of the consumer group\n     * @param {string} [topic] Filter consumer groups for a specific topic\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConsumerGroupById: async (\n      consumerGroupId: string,\n      topic?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'consumerGroupId' is not null or undefined\n      if (consumerGroupId === null || consumerGroupId === undefined) {\n        throw new RequiredError(\n          'consumerGroupId',\n          'Required parameter consumerGroupId was null or undefined when calling getConsumerGroupById.'\n        );\n      }\n      const localVarPath = `/consumer-groups/{consumerGroupId}`.replace(\n        `{${'consumerGroupId'}}`,\n        encodeURIComponent(String(consumerGroupId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (topic !== undefined) {\n        localVarQueryParameter['topic'] = topic;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Returns a list of all consumer groups for a particular Kafka instance.\n     * @summary List of consumer groups in the Kafka instance.\n     * @param {number} [limit] Maximum number of consumer groups to returnd\n     * @param {number} [offset] The page offset when returning the list of consumer groups\n     * @param {string} [topic] Filter to apply when returning the list of consumer groups\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConsumerGroupList: async (\n      limit?: number,\n      offset?: number,\n      topic?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/consumer-groups`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (limit !== undefined) {\n        localVarQueryParameter['limit'] = limit;\n      }\n\n      if (offset !== undefined) {\n        localVarQueryParameter['offset'] = offset;\n      }\n\n      if (topic !== undefined) {\n        localVarQueryParameter['topic'] = topic;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @param {string} groupName Consumer group identificator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getGroup: async (\n      groupName: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'groupName' is not null or undefined\n      if (groupName === null || groupName === undefined) {\n        throw new RequiredError(\n          'groupName',\n          'Required parameter groupName was null or undefined when calling getGroup.'\n        );\n      }\n      const localVarPath = `/groups/{groupName}`.replace(\n        `{${'groupName'}}`,\n        encodeURIComponent(String(groupName))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getGroupsList: async (options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/groups`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Topic\n     * @summary Retrieves the topic with the specified name.\n     * @param {string} topicName The topic name to retrieve.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTopic: async (\n      topicName: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'topicName' is not null or undefined\n      if (topicName === null || topicName === undefined) {\n        throw new RequiredError(\n          'topicName',\n          'Required parameter topicName was null or undefined when calling getTopic.'\n        );\n      }\n      const localVarPath = `/topics/{topicName}`.replace(\n        `{${'topicName'}}`,\n        encodeURIComponent(String(topicName))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.\n     * @summary List of topics\n     * @param {number} [limit] Maximum number of topics to return\n     * @param {string} [filter] Filter to apply when returning the list of topics\n     * @param {number} [offset] The page offset when returning  the limit of requested topics.\n     * @param {string} [order] Order of the items sorting. If \\&quot;asc\\&quot; is set as a value, ascending order is used, descending otherwise.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTopicsList: async (\n      limit?: number,\n      filter?: string,\n      offset?: number,\n      order?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/topics`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      if (limit !== undefined) {\n        localVarQueryParameter['limit'] = limit;\n      }\n\n      if (filter !== undefined) {\n        localVarQueryParameter['filter'] = filter;\n      }\n\n      if (offset !== undefined) {\n        localVarQueryParameter['offset'] = offset;\n      }\n\n      if (order !== undefined) {\n        localVarQueryParameter['order'] = order;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Admin server metrics\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metrics: async (options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/metrics`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    openApi: async (options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'GET',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * Reset the offset for a particular consumer group.\n     * @summary Reset the offset for a consumer group.\n     * @param {string} consumerGroupId The ID of the consumer group.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resetConsumerGroupOffset: async (\n      consumerGroupId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'consumerGroupId' is not null or undefined\n      if (consumerGroupId === null || consumerGroupId === undefined) {\n        throw new RequiredError(\n          'consumerGroupId',\n          'Required parameter consumerGroupId was null or undefined when calling resetConsumerGroupOffset.'\n        );\n      }\n      const localVarPath = `/consumer-groups/{consumerGroupId}/reset-offset`.replace(\n        `{${'consumerGroupId'}}`,\n        encodeURIComponent(String(consumerGroupId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'POST',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * updates the topic with the new data.\n     * @summary Updates the topic with the specified name.\n     * @param {string} topicName The topic name which is its unique id.\n     * @param {TopicSettings} topicSettings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateTopic: async (\n      topicName: string,\n      topicSettings: TopicSettings,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'topicName' is not null or undefined\n      if (topicName === null || topicName === undefined) {\n        throw new RequiredError(\n          'topicName',\n          'Required parameter topicName was null or undefined when calling updateTopic.'\n        );\n      }\n      // verify required parameter 'topicSettings' is not null or undefined\n      if (topicSettings === null || topicSettings === undefined) {\n        throw new RequiredError(\n          'topicSettings',\n          'Required parameter topicSettings was null or undefined when calling updateTopic.'\n        );\n      }\n      const localVarPath = `/topics/{topicName}`.replace(\n        `{${'topicName'}}`,\n        encodeURIComponent(String(topicName))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = {\n        method: 'PATCH',\n        ...baseOptions,\n        ...options,\n      };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      if (configuration && configuration.accessToken) {\n        const accessToken =\n          typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        localVarHeaderParameter['Authorization'] = 'Bearer ' + accessToken;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      const queryParameters = new URLSearchParams(localVarUrlObj.search);\n      for (const key in localVarQueryParameter) {\n        queryParameters.set(key, localVarQueryParameter[key]);\n      }\n      for (const key in options.query) {\n        queryParameters.set(key, options.query[key]);\n      }\n      localVarUrlObj.search = new URLSearchParams(queryParameters).toString();\n      let headersFromBaseOptions =\n        baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = {\n        ...localVarHeaderParameter,\n        ...headersFromBaseOptions,\n        ...options.headers,\n      };\n      const nonString = typeof topicSettings !== 'string';\n      const needsSerialization =\n        nonString && configuration && configuration.isJsonMime\n          ? configuration.isJsonMime(\n              localVarRequestOptions.headers['Content-Type']\n            )\n          : nonString;\n      localVarRequestOptions.data = needsSerialization\n        ? JSON.stringify(topicSettings !== undefined ? topicSettings : {})\n        : topicSettings || '';\n\n      return {\n        url:\n          localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * Creates a new topic for Kafka.\n     * @summary Creates a new topic\n     * @param {NewTopicInput} newTopicInput Topic to create.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async createTopic(\n      newTopicInput: NewTopicInput,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).createTopic(newTopicInput, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Delete a consumer group, along with its consumers.\n     * @summary Delete a consumer group.\n     * @param {string} consumerGroupId The unique name of the topic.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteConsumerGroupById(\n      consumerGroupId: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).deleteConsumerGroupById(consumerGroupId, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @param {string} groupName Consumer group identificator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteGroup(\n      groupName: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).deleteGroup(groupName, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Deletes the topic with the specified name.\n     * @summary Deletes a  topic\n     * @param {string} topicName The topic name to delete.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async deleteTopic(\n      topicName: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).deleteTopic(topicName, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Get a single consumer group by its unique ID.\n     * @param {string} consumerGroupId The unique ID of the consumer group\n     * @param {string} [topic] Filter consumer groups for a specific topic\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConsumerGroupById(\n      consumerGroupId: string,\n      topic?: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumerGroup>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).getConsumerGroupById(consumerGroupId, topic, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Returns a list of all consumer groups for a particular Kafka instance.\n     * @summary List of consumer groups in the Kafka instance.\n     * @param {number} [limit] Maximum number of consumer groups to returnd\n     * @param {number} [offset] The page offset when returning the list of consumer groups\n     * @param {string} [topic] Filter to apply when returning the list of consumer groups\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getConsumerGroupList(\n      limit?: number,\n      offset?: number,\n      topic?: string,\n      options?: any\n    ): Promise<\n      (\n        axios?: AxiosInstance,\n        basePath?: string\n      ) => AxiosPromise<ConsumerGroupList>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).getConsumerGroupList(limit, offset, topic, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @param {string} groupName Consumer group identificator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getGroup(\n      groupName: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).getGroup(groupName, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getGroupsList(\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).getGroupsList(options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Topic\n     * @summary Retrieves the topic with the specified name.\n     * @param {string} topicName The topic name to retrieve.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getTopic(\n      topicName: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).getTopic(topicName, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.\n     * @summary List of topics\n     * @param {number} [limit] Maximum number of topics to return\n     * @param {string} [filter] Filter to apply when returning the list of topics\n     * @param {number} [offset] The page offset when returning  the limit of requested topics.\n     * @param {string} [order] Order of the items sorting. If \\&quot;asc\\&quot; is set as a value, ascending order is used, descending otherwise.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async getTopicsList(\n      limit?: number,\n      filter?: string,\n      offset?: number,\n      order?: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopicsList>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).getTopicsList(limit, filter, offset, order, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @summary Admin server metrics\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async metrics(\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).metrics(options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async openApi(\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).openApi(options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * Reset the offset for a particular consumer group.\n     * @summary Reset the offset for a consumer group.\n     * @param {string} consumerGroupId The ID of the consumer group.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async resetConsumerGroupOffset(\n      consumerGroupId: string,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsumerGroup>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).resetConsumerGroupOffset(consumerGroupId, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n    /**\n     * updates the topic with the new data.\n     * @summary Updates the topic with the specified name.\n     * @param {string} topicName The topic name which is its unique id.\n     * @param {TopicSettings} topicSettings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async updateTopic(\n      topicName: string,\n      topicSettings: TopicSettings,\n      options?: any\n    ): Promise<\n      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic>\n    > {\n      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(\n        configuration\n      ).updateTopic(topicName, topicSettings, options);\n      return (\n        axios: AxiosInstance = globalAxios,\n        basePath: string = BASE_PATH\n      ) => {\n        const axiosRequestArgs = {\n          ...localVarAxiosArgs.options,\n          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url,\n        };\n        return axios.request(axiosRequestArgs);\n      };\n    },\n  };\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (\n  configuration?: Configuration,\n  basePath?: string,\n  axios?: AxiosInstance\n) {\n  return {\n    /**\n     * Creates a new topic for Kafka.\n     * @summary Creates a new topic\n     * @param {NewTopicInput} newTopicInput Topic to create.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTopic(\n      newTopicInput: NewTopicInput,\n      options?: any\n    ): AxiosPromise<Topic> {\n      return DefaultApiFp(configuration)\n        .createTopic(newTopicInput, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Delete a consumer group, along with its consumers.\n     * @summary Delete a consumer group.\n     * @param {string} consumerGroupId The unique name of the topic.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteConsumerGroupById(\n      consumerGroupId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return DefaultApiFp(configuration)\n        .deleteConsumerGroupById(consumerGroupId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @param {string} groupName Consumer group identificator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteGroup(groupName: string, options?: any): AxiosPromise<void> {\n      return DefaultApiFp(configuration)\n        .deleteGroup(groupName, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Deletes the topic with the specified name.\n     * @summary Deletes a  topic\n     * @param {string} topicName The topic name to delete.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteTopic(topicName: string, options?: any): AxiosPromise<void> {\n      return DefaultApiFp(configuration)\n        .deleteTopic(topicName, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a single consumer group by its unique ID.\n     * @param {string} consumerGroupId The unique ID of the consumer group\n     * @param {string} [topic] Filter consumer groups for a specific topic\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConsumerGroupById(\n      consumerGroupId: string,\n      topic?: string,\n      options?: any\n    ): AxiosPromise<ConsumerGroup> {\n      return DefaultApiFp(configuration)\n        .getConsumerGroupById(consumerGroupId, topic, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Returns a list of all consumer groups for a particular Kafka instance.\n     * @summary List of consumer groups in the Kafka instance.\n     * @param {number} [limit] Maximum number of consumer groups to returnd\n     * @param {number} [offset] The page offset when returning the list of consumer groups\n     * @param {string} [topic] Filter to apply when returning the list of consumer groups\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getConsumerGroupList(\n      limit?: number,\n      offset?: number,\n      topic?: string,\n      options?: any\n    ): AxiosPromise<ConsumerGroupList> {\n      return DefaultApiFp(configuration)\n        .getConsumerGroupList(limit, offset, topic, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @param {string} groupName Consumer group identificator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getGroup(groupName: string, options?: any): AxiosPromise<void> {\n      return DefaultApiFp(configuration)\n        .getGroup(groupName, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getGroupsList(options?: any): AxiosPromise<void> {\n      return DefaultApiFp(configuration)\n        .getGroupsList(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Topic\n     * @summary Retrieves the topic with the specified name.\n     * @param {string} topicName The topic name to retrieve.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTopic(topicName: string, options?: any): AxiosPromise<Topic> {\n      return DefaultApiFp(configuration)\n        .getTopic(topicName, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.\n     * @summary List of topics\n     * @param {number} [limit] Maximum number of topics to return\n     * @param {string} [filter] Filter to apply when returning the list of topics\n     * @param {number} [offset] The page offset when returning  the limit of requested topics.\n     * @param {string} [order] Order of the items sorting. If \\&quot;asc\\&quot; is set as a value, ascending order is used, descending otherwise.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTopicsList(\n      limit?: number,\n      filter?: string,\n      offset?: number,\n      order?: string,\n      options?: any\n    ): AxiosPromise<TopicsList> {\n      return DefaultApiFp(configuration)\n        .getTopicsList(limit, filter, offset, order, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Admin server metrics\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    metrics(options?: any): AxiosPromise<void> {\n      return DefaultApiFp(configuration)\n        .metrics(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    openApi(options?: any): AxiosPromise<void> {\n      return DefaultApiFp(configuration)\n        .openApi(options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * Reset the offset for a particular consumer group.\n     * @summary Reset the offset for a consumer group.\n     * @param {string} consumerGroupId The ID of the consumer group.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    resetConsumerGroupOffset(\n      consumerGroupId: string,\n      options?: any\n    ): AxiosPromise<ConsumerGroup> {\n      return DefaultApiFp(configuration)\n        .resetConsumerGroupOffset(consumerGroupId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     * updates the topic with the new data.\n     * @summary Updates the topic with the specified name.\n     * @param {string} topicName The topic name which is its unique id.\n     * @param {TopicSettings} topicSettings\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateTopic(\n      topicName: string,\n      topicSettings: TopicSettings,\n      options?: any\n    ): AxiosPromise<Topic> {\n      return DefaultApiFp(configuration)\n        .updateTopic(topicName, topicSettings, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n  /**\n   * Creates a new topic for Kafka.\n   * @summary Creates a new topic\n   * @param {NewTopicInput} newTopicInput Topic to create.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  createTopic(newTopicInput: NewTopicInput, options?: any): AxiosPromise<Topic>;\n\n  /**\n   * Delete a consumer group, along with its consumers.\n   * @summary Delete a consumer group.\n   * @param {string} consumerGroupId The unique name of the topic.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  deleteConsumerGroupById(\n    consumerGroupId: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @param {string} groupName Consumer group identificator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  deleteGroup(groupName: string, options?: any): AxiosPromise<void>;\n\n  /**\n   * Deletes the topic with the specified name.\n   * @summary Deletes a  topic\n   * @param {string} topicName The topic name to delete.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  deleteTopic(topicName: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a single consumer group by its unique ID.\n   * @param {string} consumerGroupId The unique ID of the consumer group\n   * @param {string} [topic] Filter consumer groups for a specific topic\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  getConsumerGroupById(\n    consumerGroupId: string,\n    topic?: string,\n    options?: any\n  ): AxiosPromise<ConsumerGroup>;\n\n  /**\n   * Returns a list of all consumer groups for a particular Kafka instance.\n   * @summary List of consumer groups in the Kafka instance.\n   * @param {number} [limit] Maximum number of consumer groups to returnd\n   * @param {number} [offset] The page offset when returning the list of consumer groups\n   * @param {string} [topic] Filter to apply when returning the list of consumer groups\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  getConsumerGroupList(\n    limit?: number,\n    offset?: number,\n    topic?: string,\n    options?: any\n  ): AxiosPromise<ConsumerGroupList>;\n\n  /**\n   *\n   * @param {string} groupName Consumer group identificator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  getGroup(groupName: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  getGroupsList(options?: any): AxiosPromise<void>;\n\n  /**\n   * Topic\n   * @summary Retrieves the topic with the specified name.\n   * @param {string} topicName The topic name to retrieve.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  getTopic(topicName: string, options?: any): AxiosPromise<Topic>;\n\n  /**\n   * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.\n   * @summary List of topics\n   * @param {number} [limit] Maximum number of topics to return\n   * @param {string} [filter] Filter to apply when returning the list of topics\n   * @param {number} [offset] The page offset when returning  the limit of requested topics.\n   * @param {string} [order] Order of the items sorting. If \\&quot;asc\\&quot; is set as a value, ascending order is used, descending otherwise.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  getTopicsList(\n    limit?: number,\n    filter?: string,\n    offset?: number,\n    order?: string,\n    options?: any\n  ): AxiosPromise<TopicsList>;\n\n  /**\n   *\n   * @summary Admin server metrics\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  metrics(options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  openApi(options?: any): AxiosPromise<void>;\n\n  /**\n   * Reset the offset for a particular consumer group.\n   * @summary Reset the offset for a consumer group.\n   * @param {string} consumerGroupId The ID of the consumer group.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  resetConsumerGroupOffset(\n    consumerGroupId: string,\n    options?: any\n  ): AxiosPromise<ConsumerGroup>;\n\n  /**\n   * updates the topic with the new data.\n   * @summary Updates the topic with the specified name.\n   * @param {string} topicName The topic name which is its unique id.\n   * @param {TopicSettings} topicSettings\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  updateTopic(\n    topicName: string,\n    topicSettings: TopicSettings,\n    options?: any\n  ): AxiosPromise<Topic>;\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n  /**\n   * Creates a new topic for Kafka.\n   * @summary Creates a new topic\n   * @param {NewTopicInput} newTopicInput Topic to create.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public createTopic(newTopicInput: NewTopicInput, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .createTopic(newTopicInput, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Delete a consumer group, along with its consumers.\n   * @summary Delete a consumer group.\n   * @param {string} consumerGroupId The unique name of the topic.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public deleteConsumerGroupById(consumerGroupId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .deleteConsumerGroupById(consumerGroupId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @param {string} groupName Consumer group identificator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public deleteGroup(groupName: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .deleteGroup(groupName, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Deletes the topic with the specified name.\n   * @summary Deletes a  topic\n   * @param {string} topicName The topic name to delete.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public deleteTopic(topicName: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .deleteTopic(topicName, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a single consumer group by its unique ID.\n   * @param {string} consumerGroupId The unique ID of the consumer group\n   * @param {string} [topic] Filter consumer groups for a specific topic\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getConsumerGroupById(\n    consumerGroupId: string,\n    topic?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .getConsumerGroupById(consumerGroupId, topic, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Returns a list of all consumer groups for a particular Kafka instance.\n   * @summary List of consumer groups in the Kafka instance.\n   * @param {number} [limit] Maximum number of consumer groups to returnd\n   * @param {number} [offset] The page offset when returning the list of consumer groups\n   * @param {string} [topic] Filter to apply when returning the list of consumer groups\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getConsumerGroupList(\n    limit?: number,\n    offset?: number,\n    topic?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .getConsumerGroupList(limit, offset, topic, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @param {string} groupName Consumer group identificator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getGroup(groupName: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .getGroup(groupName, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getGroupsList(options?: any) {\n    return DefaultApiFp(this.configuration)\n      .getGroupsList(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Topic\n   * @summary Retrieves the topic with the specified name.\n   * @param {string} topicName The topic name to retrieve.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getTopic(topicName: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .getTopic(topicName, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.\n   * @summary List of topics\n   * @param {number} [limit] Maximum number of topics to return\n   * @param {string} [filter] Filter to apply when returning the list of topics\n   * @param {number} [offset] The page offset when returning  the limit of requested topics.\n   * @param {string} [order] Order of the items sorting. If \\&quot;asc\\&quot; is set as a value, ascending order is used, descending otherwise.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public getTopicsList(\n    limit?: number,\n    filter?: string,\n    offset?: number,\n    order?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .getTopicsList(limit, filter, offset, order, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Admin server metrics\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public metrics(options?: any) {\n    return DefaultApiFp(this.configuration)\n      .metrics(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public openApi(options?: any) {\n    return DefaultApiFp(this.configuration)\n      .openApi(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * Reset the offset for a particular consumer group.\n   * @summary Reset the offset for a consumer group.\n   * @param {string} consumerGroupId The ID of the consumer group.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public resetConsumerGroupOffset(consumerGroupId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .resetConsumerGroupOffset(consumerGroupId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * updates the topic with the new data.\n   * @summary Updates the topic with the specified name.\n   * @param {string} topicName The topic name which is its unique id.\n   * @param {TopicSettings} topicSettings\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public updateTopic(\n    topicName: string,\n    topicSettings: TopicSettings,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .updateTopic(topicName, topicSettings, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Admin REST API\n * An API to provide REST endpoints for query Kafka for admin operations\n *\n * The version of the OpenAPI document: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?:\n    | string\n    | Promise<string>\n    | ((name: string) => string)\n    | ((name: string) => Promise<string>);\n  username?: string;\n  password?: string;\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  basePath?: string;\n  baseOptions?: any;\n  formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?:\n    | string\n    | Promise<string>\n    | ((name: string) => string)\n    | ((name: string) => Promise<string>);\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string;\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string;\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string;\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  baseOptions?: any;\n  /**\n   * The FormData constructor that will be used to create multipart form data\n   * requests. You can inject this here so that execution environments that\n   * do not support the FormData class can still run the generated client.\n   *\n   * @type {new () => FormData}\n   */\n  formDataCtor?: new () => any;\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.accessToken = param.accessToken;\n    this.basePath = param.basePath;\n    this.baseOptions = param.baseOptions;\n    this.formDataCtor = param.formDataCtor;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp(\n      '^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$',\n      'i'\n    );\n    return (\n      mime !== null &&\n      (jsonMime.test(mime) ||\n        mime.toLowerCase() === 'application/json-patch+json')\n    );\n  }\n}\n","import en from './en.json';\nimport de from './de.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst kafkai18n = i18n.createInstance();\n\nkafkai18n\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    detection: {\n      order: ['htmlTag', 'navigator'],\n      caches: [],\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    resources,\n  });\n\nexport default kafkai18n;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n"],"sourceRoot":""}