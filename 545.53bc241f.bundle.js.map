{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Utils/axios.ts"],"names":["initialState","name","numPartitions","replicationFactor","preallocate","TopicContext","createContext","TopicContextProvider","children","useState","store","setStore","Provider","value","updateStore","toString","updateBulkStore","advanceConfig","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","topic","deleteTopic","updateTopic","t","useTranslation","Sidebar","hasGutter","SidebarPanel","JumpLinks","isVertical","label","scrollableSelector","offset","style","position","JumpLinksItem","key","href","SidebarContent","PageGroup","hasOverflowScroll","id","padding","default","Split","SplitItem","isFilled","tabIndex","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","popoverBody","popoverHeader","unit","showUnlimited","Divider","Button","onClick","TopicDetailGroup","onUpdateTopic","onClickTopicList","onDeleteTopic","onError","eventKey","topicDetail","setTopicDetail","activeTabKey","setActiveTabKey","config","useContext","deleteModal","setDeleteModal","addAlert","history","useEffect","response","undefined","data","code","error_message","status","AlertVariant","fetchTopicDetail","Tabs","activeKey","onSelect","event","isBox","Tab","title","TabTitleText","onDeleteConsumerGroup","push","consumerGroupByTopic","rowDataId","detailsDataId"],"mappings":"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","file":"545.53bc241f.bundle.js","sourcesContent":["import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nexport const initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '7',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.message.format.version': '',\n  'cleanup.policy': '',\n  'retention.bytes': '-1',\n  'retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n            Kafka Instances\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink ? kafkaInstanceLink : '#'}>\n            {kafkaName ? kafkaName : 'Kafka Instance Name'}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection className='kafka-ui--page__main-section--adjust-padding'>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='.pf-c-page__main:first-of-type'\n            offset={-164} // for header\n            style={{ position: 'sticky' }}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n            <JumpLinksItem key={7} href='#delete'>\n              Delete\n            </JumpLinksItem>\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <PageGroup hasOverflowScroll id='topic-detail-view'>\n            <PageSection padding={{ default: 'noPadding' }}>\n              <Split>\n                <SplitItem isFilled>\n                  <TextContent>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='core-configuration'\n                    >\n                      Core configuration\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.coreConfigInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail name'\n                    fieldLabel='Name'\n                    fieldValue={topic.name}\n                    popoverBody={t('createTopic.topicNameLabelBody')}\n                    popoverHeader={t('createTopic.topicNameLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail partition'\n                    fieldLabel='Partitions'\n                    fieldValue={topic.numPartitions}\n                    popoverBody={t('createTopic.partitionsLabelBody')}\n                    popoverHeader={t('createTopic.partitionsLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail replicas'\n                    fieldLabel='Replicas'\n                    fieldValue={'3'}\n                    popoverBody={t('createTopic.replicasLabelBody')}\n                    popoverHeader={t('createTopic.replicasLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min-in-sync replica'\n                    fieldLabel='Minimum in-sync replicas'\n                    fieldValue={'2'}\n                    popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n                    popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention time'\n                    fieldLabel='Retention Time'\n                    fieldValue={topic['retention.ms']}\n                    popoverBody={t('createTopic.retentionTimeLabelBody')}\n                    popoverHeader={t('createTopic.retentionTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention size'\n                    fieldLabel='Retention Size'\n                    fieldValue={topic['retention.bytes']}\n                    popoverHeader={t('createTopic.retentionBytesLabelHead')}\n                    popoverBody={t('createTopic.retentionBytesLabelBody')}\n                    unit={'bytes'}\n                    showUnlimited={true}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='messages'\n                    >\n                      Messages\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.messageSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail max message bytes'\n                    fieldLabel='Maximum message bytes'\n                    fieldValue={'1048588'}\n                    popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n                    popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message timestamp type'\n                    fieldLabel='Message timestamp type'\n                    fieldValue={'CreateTime'}\n                    popoverBody={t('createTopic.messageTimestampLabelBody')}\n                    popoverHeader={t('createTopic.messageTimestampLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message timestamp difference'\n                    fieldLabel='Maximum message timestamp difference'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n                    popoverHeader={t(\n                      'createTopic.messageTimestampDiffLabelHead'\n                    )}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail compression type'\n                    fieldLabel='Compression type'\n                    fieldValue='Producer'\n                    popoverBody={t('createTopic.compressionTypeLabelBody')}\n                    popoverHeader={t('createTopic.compressionTypeLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message format version'\n                    fieldLabel='Message format version'\n                    fieldValue='2.7-IV2'\n                    popoverBody={t('createTopic.messageFormatLabelBody')}\n                    popoverHeader={t('createTopic.messageFormatLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                      Log\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('createTopic.logSectionInfo')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('createTopic.logSectionInfoNote')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail cleanup policy'\n                    fieldLabel='Cleanup policy'\n                    fieldValue={topic['cleanup.policy']}\n                    popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n                    popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention bytes'\n                    fieldLabel='Delete retention time'\n                    fieldValue={'86400000'}\n                    popoverBody={t('createTopic.deleteRetentionLabelBody')}\n                    popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min cleanable dirty ratio'\n                    fieldLabel='Minimum cleanable dirty ratio'\n                    fieldValue={'0.5'}\n                    popoverBody={t('createTopic.minRatioLabelBody')}\n                    popoverHeader={t('createTopic.minRatioLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min compaction lag time'\n                    fieldLabel='Minimum compaction lag time'\n                    fieldValue={'0'}\n                    popoverBody={t('createTopic.minLagLabelBody')}\n                    popoverHeader={t('createTopic.minLagLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='replication'\n                    >\n                      Replication\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('createTopic.replicationSectionInfo')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('createTopic.replicationSectionInfoNote')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail unclean leader election'\n                    fieldLabel='Unclean leader election'\n                    fieldValue={'Disabled'}\n                    popoverBody={t('createTopic.leaderElectionLabelBody')}\n                    popoverHeader={t('createTopic.leaderElectionLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='cleanup'\n                    >\n                      Cleanup\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.cleanupSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail max message bytes'\n                    fieldLabel='Log segment size'\n                    fieldValue={'1073741824'}\n                    popoverBody={t('createTopic.logSegmentLabelHead')}\n                    popoverHeader={t('createTopic.logSegmentLabelBody')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment time'\n                    fieldLabel='Segment time'\n                    fieldValue={'604800000'}\n                    popoverBody={t('createTopic.segementTimeLabelBody')}\n                    popoverHeader={t('createTopic.segementTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment jitter time'\n                    fieldLabel='Segment jitter time'\n                    fieldValue={'0'}\n                    popoverBody={t('createTopic.jitterTimeLabelBody')}\n                    popoverHeader={t('createTopic.jitterTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='file delete delay'\n                    fieldLabel='File delete delay'\n                    fieldValue={'60000'}\n                    popoverBody={t('createTopic.deleteDelayLabelBody')}\n                    popoverHeader={t('createTopic.deleteDelayLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='preallocation log segment files'\n                    fieldLabel='Preallocation log segment files'\n                    fieldValue={'Disabled'}\n                    popoverBody={t('createTopic.preallocateLabelBody')}\n                    popoverHeader={t('createTopic.preallocateLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                      Index\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.indexSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='index interval size'\n                    fieldLabel='Index interval size'\n                    fieldValue={'4096'}\n                    popoverBody={t('createTopic.indexIntervalLabelBody')}\n                    popoverHeader={t('createTopic.indexIntervalLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment index size'\n                    fieldLabel='Segment index size'\n                    fieldValue={'10485760'}\n                    popoverBody={t('createTopic.segementIntervalLabelBody')}\n                    popoverHeader={t('createTopic.segementIntervalLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                      Flush\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.flushSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='flush interval messages'\n                    fieldLabel='Flush interval messages'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.intervalMessagesLabelBody')}\n                    popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='flush interval time'\n                    fieldLabel='Flush interval time'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.intervalTimeLabelBody')}\n                    popoverHeader={t('createTopic.intervalTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <Divider />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                      Delete topic (irreversible)\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.deleteTopicInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <Button\n                    variant='danger'\n                    className='section-margin'\n                    onClick={deleteTopic}\n                    data-testid='tabProperties-actionDelete'\n                  >\n                    Delete topic\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant='primary'\n                    onClick={updateTopic}\n                    data-testid='tabProperties-actionEdit'\n                  >\n                    Edit properties\n                  </Button>\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic, initialState } from '../../../Contexts/Topic';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupsList } from '../../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\nimport { isAxiosError } from '../../../Utils/axios';\nimport { AlertContext } from '../../../Contexts/Alert';\nimport { useHistory } from 'react-router';\n\nexport type TopicDetailGroupProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onUpdateTopic: () => void;\n  onClickTopicList: () => void;\n  onDeleteTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n  eventKey: number;\n};\n\nexport const TopicDetailGroup: React.FC<TopicDetailGroupProps> = ({\n  topicName,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onUpdateTopic,\n  onClickTopicList,\n  onDeleteTopic,\n  onError,\n  eventKey,\n}) => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(initialState);\n  const [activeTabKey, setActiveTabKey] = useState(eventKey);\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const fetchTopicDetail = async (topicName: string) => {\n    if (eventKey === 2) {\n      try {\n        const response = await getTopicDetail(topicName, config);\n        setTopicDetail(response);\n      } catch (err) {\n        if (isAxiosError(err)) {\n          if (onError) {\n            onError(err.response?.data.code, err.response?.data.error_message);\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert(`Topic ${topicName} does not exist`, AlertVariant.danger);\n            onClickTopicList();\n          }\n        }\n      }\n    }\n  };\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n  const onDeleteConsumer = () => {\n    history.push('/consumerGroups');\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          isBox={false}\n          className='kafka-ui--tab-padding'\n        >\n          <Tab\n            eventKey={1}\n            data-testid='pageTopic-tabConsumers'\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n            className={activeTabKey === 1 ? 'kafka-ui--consumer-content':''}\n          >\n            <ConsumerGroupsList\n              onDeleteConsumerGroup={onDeleteConsumer}\n              consumerGroupByTopic={true}\n              topic={topicName}\n              rowDataId='tableTopicConsumers-row'\n              detailsDataId='tableTopicConsumers-actionDetails'\n            />\n          </Tab>\n          <Tab\n            eventKey={2}\n            title={<TabTitleText>Properties</TabTitleText>}\n            data-testid='pageTopic-tabProperties'\n          >\n            <PageSection padding={{ default: 'noPadding' }}>\n              <TopicDetailView\n                topic={topicDetail}\n                deleteTopic={deleteTopic}\n                updateTopic={onUpdateTopic}\n              />\n            </PageSection>\n          </Tab>\n        </Tabs>\n        {deleteModal && (\n          <DeleteTopics\n            topicName={topicName}\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n            onDeleteTopic={onDeleteTopic}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"sourceRoot":""}