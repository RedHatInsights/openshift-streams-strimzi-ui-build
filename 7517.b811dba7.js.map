{"version":3,"file":"7517.b811dba7.js","mappings":"0JAsBaA,E,MAAmB,sBAC9BC,GAEWC,EAAe,WAC1B,WAAAC,YAAWH,K,8ECNAI,G,SAAkD,SAAC,G,IAC9DC,EAAS,YACTC,EAAS,YACTC,EAAiB,oBACjBC,EAAa,gBAELC,GAAM,IAAAC,gBAAe,CAAC,wBAAuB,EAErD,OACE,oCACE,6BAASC,UAAU,8BACjB,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,CAACC,GAAIN,GAAiB,KAClCC,EAAE,0BAEL,kBAAC,EAAAI,eAAc,CAACC,GAAIP,GAAqB,KACtCD,GAAaG,EAAE,+BAElB,kBAAC,EAAAI,eAAc,KAAER,KAGrB,kBAAC,EAAAU,YAAW,CAACC,QAAS,EAAAC,oBAAA,OACpB,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,IAAkBhB,S,kuDCrBhCiB,EAAiE,SAAC,G,IAC7EjB,EAAS,YACTkB,EAAW,cACXC,EAAO,UAECf,GAAM,IAAAC,gBAAe,CAAC,wBAAuB,EAC/Ce,GAAS,IAAAtB,YAAW,KAClBuB,IAAa,IAAAC,aAAc,CACjCD,SAAU,eAGX,SACKE,GAAU,IAAAC,cAEVC,GAAWC,IADO,IAAAC,gBAAiB,CAAED,YAAa,WAAM,YAAI,eAG5DE,EAAe,CACnBC,KAAM7B,EACN8B,cAAe,GACf,eAAgB,IAChB,oBAAqB,OACrB,kBAAmB,IACnB,uBAAwB,QACxB,iBAAkB,GAClBC,0BAA0B,EAC1BC,0BAA0B,GAGtB,GAA4B,IAAAC,UAAyBL,GAApDM,EAAS,KAAEC,EAAY,KACxB,GAA4B,IAAAF,WAAkB,GAA7CG,EAAS,KAAEC,EAAY,KAExBC,EAAsB,WAC1Bf,EAAQgB,KAAK,UAAGd,EAAQ,mBAAWzB,MAyCrC,IAAAwC,YAAU,YAtCS,SAAOxC,GAAS,mC,kEAE/B,O,sBAAA,IAAM,QAASA,EAAWoB,GAAQqB,MAAK,SAACC,G,QAChCC,GAAoB,QAAiBD,GAE3CP,EAAa,EAAD,OACPD,GACAS,GAAiB,CACpBb,eAAmC,QAApB,EAAAY,MAAAA,OAAQ,EAARA,EAAUE,kBAAU,eAAEC,OAAOC,aAAc,GAC1DC,mBACGL,MAAAA,OAAQ,EAARA,EAAUE,cACuB,QAAhC,EAAAF,MAAAA,OAAQ,EAARA,EAAUE,WAAW,GAAGI,gBAAQ,eAAEH,OAAOC,aAC3C,U,cAVN,S,gCAcI,OAAa,KACXG,OAAO,EACPC,OAAI,EACJ,IAAO,OAAa,KACtBA,EAAmB,QAAZ,IAAIC,gBAAQ,eAAEC,KAAKF,KAC1BD,EAAsB,QAAZ,IAAIE,gBAAQ,eAAEC,KAAKC,eAE3BlC,GACFA,EAAQ+B,IAAS,EAAGD,GAAW,IAEJ,OAAb,QAAZ,IAAIE,gBAAQ,eAAEG,UAEhBjC,EAAS,CACPV,QAAS,EAAA4C,aAAA,OACTC,MAAO,gBAASxD,EAAS,qBAE3BsC,GAAuBA,M,8BAO7BmB,CAAWzD,KACV,CAACA,IAiCJ,OACE,oCACE,kBAAC0D,EAAA,EAAkB,CACjBC,UAAU,EACVC,UAnCY,qD,sEACV,GAAqB,QAAe1B,EAAW,CAAC,mBAA9CL,EAAI,OAAEgC,EAAQ,WACtBxB,GAAa,G,iBAGX,O,sBAAA,IAAM,QAAiBR,EAAMgC,EAAUzC,GAAQqB,MAAK,WAClDpB,EAAS,CACPmC,MAAOpD,EAAE,oCACTO,QAAS,EAAA4C,aAAA,UAEXlB,GAAa,GACbnB,Q,cANF,S,+BASI+B,OAAO,EACPC,OAAI,EACJ,IAAO,OAAa,KACtBA,EAAmB,QAAZ,IAAIC,gBAAQ,eAAEC,KAAKF,KAC1BD,EAAsB,QAAZ,IAAIE,gBAAQ,eAAEC,KAAKC,eAE3BlC,GACFA,EAAQ+B,IAAS,EAAGD,GAAW,IAEjCZ,GAAa,GACbhB,EAAS,CACPmC,MAAOP,GAAW,GAClBtC,QAAS,EAAA4C,aAAA,S,+BAUTO,aAAcxB,EACdJ,UAAWA,EACXC,aAAcA,EACd4B,cAAe3B,IAEjB,6BACA,+B,WCzHO4B,G,SAA2C,WAC9C,IAAA5D,GAAM,IAAAC,gBAAe,CAAC,wBAAuB,EAC/CkB,GAAU,IAAAC,cAEVC,GAAWC,IADO,IAAAC,gBAAiB,CAAED,YAAa,WAAM,YAAI,eAE1D1B,GAAc,IAAAiE,aAAkC,UAClD,GAMF,UAAkB,GALpBhE,EAAS,YACTE,EAAa,gBACbD,EAAiB,oBACjBiB,EAAO,UACP,IAAA+C,UAAAA,OAAS,IAAG,IAAC,EAET,GAAkC,IAAAjC,UAASiC,GAA1CC,EAAY,KAAEC,EAAe,KAE9BC,EAA0B,gBAC1BC,EAAuB,gBAc7B,OACE,oCACE,kBAACvE,EAAA,EAAe,CACdC,UAAWA,EACXC,UAAWA,EACXE,cAAeA,EACfD,kBAAmBA,IAErB,kBAAC,EAAAQ,YAAW,CACVC,QAAS,EAAAC,oBAAA,MACTN,UAAU,uBACViE,QAAS,CAAEC,QAAS,cAEpB,kBAAC,EAAAC,KAAI,CACHC,SAlBe,SAACC,EAAOC,GAC7BR,EAAgBQ,IAkBVC,UAAWV,EACXW,OAAO,EACPxE,UAAU,oBAEV,kBAAC,EAAAyE,IAAG,CACFC,SAAU,EACVxB,MACE,kBAAC,EAAAyB,aAAY,KAAE7E,EAAE,kCAEnB8E,aAAa,oCACbC,cAAed,IAEjB,kBAAC,EAAAU,IAAG,CACFC,SAAU,EACVxB,MAAO,kBAAC,EAAAyB,aAAY,KAAE7E,EAAE,sBACxB8E,aAAa,gCACbC,cAAeb,MAIrB,kBAAC,EAAA5D,YAAW,CACVC,QACmB,IAAjBwD,EACI,EAAAvD,oBAAA,MACA,EAAAA,oBAAA,SAGN,kBAAC,EAAAwE,WAAU,CACTJ,SAAU,EACVK,GAAG,oCACHC,IAAKjB,EACL/D,UAAU,yBAAwB,aACvB,mBACXiF,OAAsB,IAAdrB,GAER,kBAACsB,EAAA,EAAc,CAACC,MAAOzF,EAAW0F,sBAAsB,KAE1D,kBAAC,EAAAN,WAAU,CACTJ,SAAU,EACVK,GAAG,gCACHC,IAAKhB,EACLhE,UAAU,yBAAwB,aACvB,mBACXiF,OAAsB,IAAdrB,GAER,kBAACjD,EAAe,CACdjB,UAAWA,EACX2F,cA1EY,WACpBpE,EAAQgB,KAAKd,IA0ELP,YAvEU,WAClBK,EAAQgB,KAAK,UAAGd,EAAQ,mBAAWzB,KAuE3BmB,QAASA,S,sBCrErB,QA7B2E,SAAC,G,IAC1EyE,EAAQ,WACRC,EAAW,cACX5F,EAAS,YACTE,EAAa,gBACbD,EAAiB,oBACjBiB,EAAO,UAEP,OACE,kBAAC,aAAsB,CAAC2E,MAAO,CAAEC,SAAUF,EAAaD,SAAQ,IAC9D,kBAAC,aAAyB,CACxBE,MAAO,CACL5B,UAAW,EACXjE,UAAS,EACTE,cAAa,EACbD,kBAAiB,EACjBiB,QAAO,EACP6E,MAAO,KAGT,kBAAC,EAAAC,cAAa,KACZ,kBAACjC,EAAe,MAChB,kBAAC,IAAgB","sources":["webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { DeleteInstanceProps } from '@rhoas/app-services-ui-shared';\n\nexport type FederatedProps = Pick<DeleteInstanceProps, 'kafka'> & {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n  showSchemas?: JSX.Element | undefined;\n  redirectAfterDeleteInstance?: () => void;\n  onDeleteInstance?: () => void;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n            {kafkaName || t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { TopicAdvanceConfig } from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport {\n  serializeTopic,\n  deserializeTopic,\n  IAdvancedTopic,\n} from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n    isRetentionTimeUnlimited: false,\n    isRetentionSizeUnlimited: true,\n  };\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onCancelUpdateTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const fetchTopic = async (topicName) => {\n    try {\n      await getTopic(topicName, config).then((topicRes) => {\n        const deserializedTopic = deserializeTopic(topicRes);\n\n        setTopicData({\n          ...topicData,\n          ...deserializedTopic,\n          numPartitions: topicRes?.partitions?.length.toString() || '',\n          replicationFactor:\n            (topicRes?.partitions &&\n              topicRes?.partitions[0].replicas?.length.toString()) ||\n            '',\n        });\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        let message: string | undefined;\n        let code: number | undefined;\n        if (err && isAxiosError(err)) {\n          code = err.response?.data.code;\n          message = err.response?.data.error_message;\n        }\n        if (onError) {\n          onError(code || -1, message || '');\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert({\n            variant: AlertVariant.danger,\n            title: `Topic ${topicName} does not exist`,\n          });\n          onCancelUpdateTopic && onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, settings } = serializeTopic(topicData, ['cleanup.policy']);\n    setIsLoading(true);\n\n    try {\n      await updateTopicModel(name, settings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      let message: string | undefined;\n      let code: number | undefined;\n      if (err && isAxiosError(err)) {\n        code = err.response?.data.code;\n        message = err.response?.data.error_message;\n      }\n      if (onError) {\n        onError(code || -1, message || '');\n      }\n      setIsLoading(false);\n      addAlert({\n        title: message || '',\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useBasename } from '@rhoas/app-services-ui-shared';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const UpdateTopicPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n  const { topicName } = useParams<{ topicName: string }>();\n  const {\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 1,\n  } = useFederated() || {};\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const onDeleteTopic = () => {\n    history.push(basename);\n  };\n\n  const onSaveTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { UpdateTopicPage } from '@app/modules/Topics/pages/UpdateTopic';\nimport {\n  ConfigContext,\n  FederatedContext,\n  FederatedProps,\n  IConfiguration,\n} from '@app/contexts';\nimport { KafkaModalLoader } from '@app/components/KafkaModal';\nimport { ModalProvider } from '@rhoas/app-services-ui-components';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n}) => {\n  return (\n    <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n      <FederatedContext.Provider\n        value={{\n          activeTab: 1,\n          kafkaName,\n          kafkaPageLink,\n          kafkaInstanceLink,\n          onError,\n          kafka: {},\n        }}\n      >\n        <ModalProvider>\n          <UpdateTopicPage />\n          <KafkaModalLoader />\n        </ModalProvider>\n      </FederatedContext.Provider>\n    </ConfigContext.Provider>\n  );\n};\n\nexport default UpdateTopicFederated;\n"],"names":["FederatedContext","undefined","useFederated","useContext","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onSaveTopic","onError","config","addAlert","useAlert","history","useHistory","basename","getBasename","useBasename","initialState","name","numPartitions","isRetentionTimeUnlimited","isRetentionSizeUnlimited","useState","topicData","setTopicData","isLoading","setIsLoading","onCancelUpdateTopic","push","useEffect","then","topicRes","deserializedTopic","partitions","length","toString","replicationFactor","replicas","message","code","response","data","error_message","status","AlertVariant","title","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","settings","handleCancel","isLoadingSave","UpdateTopicPage","useParams","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","onDeleteTopic","getToken","apiBasePath","value","basePath","kafka","ModalProvider"],"sourceRoot":""}