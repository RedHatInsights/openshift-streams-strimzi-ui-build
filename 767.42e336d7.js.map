{"version":3,"file":"767.42e336d7.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack://kafka-ui/./src/components/DropdownWithToggle/DropdownWithToggle.tsx","webpack://kafka-ui/./src/components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/components/TextWithLabelPopover/TextWithLabelPopover.tsx","webpack://kafka-ui/./src/constant/constants.ts","webpack://kafka-ui/./src/components/SizeTimeFormGroup/SizeTimeFormGroup.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicAdvanceConfig/TopicAdvanceConfig.tsx","webpack://kafka-ui/./src/modules/Topics/utils/utils.ts","webpack://kafka-ui/./src/services/topics.ts","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n  menuAppendTo,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value = e.currentTarget.textContent;\n    if (onSelectOption) {\n      e.target.name = name;\n      onSelectOption(value, e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {value}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n      menuAppendTo={menuAppendTo}\n    />\n  );\n};\n","import { FormGroup, Popover } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\ninterface IFormGroupWithPopoverProps {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel?: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n  validated?: 'default' | 'error' | 'success' | 'warning' | undefined;\n  helperText?: string;\n  helperTextInvalid?: string;\n  isRequired?: boolean;\n}\n\nexport const FormGroupWithPopover: React.FC<IFormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n  validated,\n  helperText,\n  helperTextInvalid,\n  isRequired,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      validated={validated}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      isRequired={isRequired}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import { Popover, FormGroup, TextInput } from '@patternfly/react-core';\nimport React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\n\nimport './TextWithLabelPopover.css';\n\nexport interface TextWithLabelPopoverProps {\n  /** Field id */\n  fieldId: string;\n  /** Field label */\n  fieldLabel: string;\n  /** Field value */\n  fieldValue?: string;\n  /** Header text for popover label */\n  popoverHeader: string;\n  /** Body text for popover label */\n  popoverBody: string;\n  /** Aria label for popover button */\n  btnAriaLabel: string;\n  /** Indicates if unlimited should be shown for negative numbers */\n  showUnlimited?: boolean;\n}\n\nexport const TextWithLabelPopover: React.FC<TextWithLabelPopoverProps> = ({\n  fieldId,\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  showUnlimited,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  let displayText = '-';\n\n  if (\n    showUnlimited === true &&\n    fieldValue !== undefined &&\n    parseInt(fieldValue) < 0\n  ) {\n    displayText = 'Unlimited';\n  } else if (fieldValue) {\n    displayText = fieldValue;\n  }\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      className='kafka-ui-form-group--readonly'\n      labelIcon={\n        <Popover\n          headerContent={<div>{popoverHeader}</div>}\n          bodyContent={<div>{popoverBody}</div>}\n        >\n          <button\n            aria-label={btnAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      <TextInput\n        isReadOnly\n        type='text'\n        id={fieldId}\n        name={fieldId}\n        value={displayText}\n      />\n    </FormGroup>\n  );\n};\n","export const DEFAULT_REPLICAS = '3';\nexport const DEFAULT_MIN_CLEANBLE_RATIO = '0.5';\nexport const DEFAULT_MIN_INSYNC_REPLICAS = '2';\nexport const DEFAULT_SEGMENT_TIME = '604800000 milliseconds (7 days)';\nexport const DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF =\n  '9223372036854775807 milliseconds';\nexport const DEFAULT_SEGMENT_INDEX_SIZE = '10485760 bytes (10 mebibytes)';\nexport const DEFAULT_INDEX_INTERVAL_SIZE = '4096 bytes (4 kibibytes)';\nexport const DEFAULT_LOG_SEGMENT_SIZE = '1073741824 bytes (1 gibibyte)';\nexport const DEFAULT_DELETE_RETENTION_TIME = '86400000 milliseconds (1 day)';\nexport const DEFAULT_SEGMENT_JITTER_TIME = '0 milliseconds';\nexport const DEFAULT_FILE_DELETE_DELAY = '60000 milliseconds (1 minute)';\nexport const DEFAULT_MAXIMUM_MESSAGE_BYTES = '1048588 bytes';\nexport const DEFAULT_MESSAGE_TIMESTAMP_TYPE = 'CreateTime';\nexport const DEFAULT_MINIMUM_COMPACTION_LAG_TIME = '0 milliseconds';\nexport const DEFAULT_FLUSH_INTERVAL_MESSAGES = '9223372036854775807 messages';\nexport const DEFAULT_FLUSH_INTERVAL_TIME = '9223372036854775807 milliseconds';\nexport const MIN_PARTITIONS = 1;\nexport const MAX_PARTITIONS = 100;\n","import React from 'react';\nimport {\n  Flex,\n  FlexItem,\n  NumberInput,\n  NumberInputProps,\n} from '@patternfly/react-core';\nimport { DropdownWithToggle, IDropdownOption } from '@app/components';\n\nexport type SizeTimeFormGroup = NumberInputProps & {\n  /** id of dropdown element */\n  id: string;\n  /** id of dropdown toggle button */\n  toggleId: string;\n  /** id of dropdown element */\n  dropdownValue?: string;\n  /** name attribute of dropdown element */\n  name: string;\n  /** handler method of dropdown */\n  onSelectOption?: (value: string, event) => void;\n  /** aria label for dropdown element */\n  ariaLabel?: string;\n  /** determines whether to display memory units or time units */\n  type: string;\n};\n\nexport const SizeTimeFormGroup: React.FC<SizeTimeFormGroup> = ({\n  id,\n  toggleId,\n  dropdownValue,\n  ariaLabel,\n  onSelectOption,\n  name,\n  inputName,\n  onChange,\n  onPlus,\n  onMinus,\n  value,\n  plusBtnProps,\n  minusBtnProps,\n  type,\n  min,\n}) => {\n  const timeUnits: IDropdownOption[] = [\n    { key: 'milliseconds', value: 'milliseconds', isDisabled: false },\n    { key: 'seconds', value: 'seconds', isDisabled: false },\n    { key: 'days', value: 'days', isDisabled: false },\n    { key: 'months', value: 'months', isDisabled: false },\n    { key: 'years', value: 'years', isDisabled: false },\n  ];\n\n  const memoryUnits: IDropdownOption[] = [\n    { key: 'bytes', value: 'bytes', isDisabled: false },\n    { key: 'kibibytes', value: 'kibibytes', isDisabled: false },\n    { key: 'mebibytes', value: 'mebibytes', isDisabled: false },\n    { key: 'gibibytes', value: 'gibibytes', isDisabled: false },\n    { key: 'tebibytes', value: 'tebibytes', isDisabled: false },\n  ];\n\n  const getItemsForType = (type: string) => {\n    switch (type) {\n      case 'time':\n        return timeUnits;\n      case 'memory':\n        return memoryUnits;\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem grow={{ default: 'grow' }}>\n        <NumberInput\n          inputName={inputName}\n          onChange={onChange}\n          onPlus={onPlus}\n          onMinus={onMinus}\n          value={value}\n          plusBtnProps={plusBtnProps}\n          minusBtnProps={minusBtnProps}\n          min={min}\n          widthChars={10}\n        />\n      </FlexItem>\n      <FlexItem>\n        <DropdownWithToggle\n          id={id}\n          toggleId={toggleId}\n          ariaLabel={ariaLabel}\n          onSelectOption={onSelectOption}\n          items={getItemsForType(type)}\n          name={name}\n          value={dropdownValue || ''}\n        />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ActionGroup,\n  Button,\n  JumpLinks,\n  JumpLinksItem,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  Stack,\n  FormSection,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  NumberInput,\n  Form,\n  Radio,\n  PageSection,\n  PageGroup,\n} from '@patternfly/react-core';\nimport {\n  DEFAULT_MESSAGE_TIMESTAMP_TYPE,\n  DEFAULT_DELETE_RETENTION_TIME,\n  DEFAULT_FILE_DELETE_DELAY,\n  DEFAULT_INDEX_INTERVAL_SIZE,\n  DEFAULT_LOG_SEGMENT_SIZE,\n  DEFAULT_MAXIMUM_MESSAGE_BYTES,\n  DEFAULT_MINIMUM_COMPACTION_LAG_TIME,\n  DEFAULT_MIN_CLEANBLE_RATIO,\n  DEFAULT_MIN_INSYNC_REPLICAS,\n  DEFAULT_REPLICAS,\n  DEFAULT_SEGMENT_INDEX_SIZE,\n  DEFAULT_SEGMENT_JITTER_TIME,\n  DEFAULT_SEGMENT_TIME,\n  DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF,\n  DEFAULT_FLUSH_INTERVAL_MESSAGES,\n  DEFAULT_FLUSH_INTERVAL_TIME,\n  MAX_PARTITIONS,\n} from '@app/constant';\nimport {\n  TextWithLabelPopover,\n  FormGroupWithPopover,\n  SizeTimeFormGroup,\n  DropdownWithToggle,\n  IDropdownOption,\n  useModal,\n  ModalType,\n} from '@app/components';\nimport { kebabToCamel, kebabToDotSeparated } from '@app/modules/Topics/utils';\nimport { IAdvancedTopic } from '@app/modules/Topics/components';\nimport { getTopic } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\nimport { isAxiosError } from '@app/utils/axios';\n\nexport type TopicAdvanceConfigProps = {\n  isCreate: boolean;\n  saveTopic: () => void;\n  handleCancel?: () => void;\n  topicData: IAdvancedTopic;\n  setTopicData: (val: IAdvancedTopic) => void;\n  isLoadingSave?: boolean;\n};\n\nexport const TopicAdvanceConfig: React.FunctionComponent<TopicAdvanceConfigProps> =\n  ({\n    isCreate,\n    saveTopic,\n    handleCancel,\n    topicData,\n    setTopicData,\n    isLoadingSave,\n  }) => {\n    const [topicValidated, setTopicValidated] = useState<'error' | 'default'>(\n      'default'\n    );\n    const [invalidText, setInvalidText] = useState('');\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [partitionsValidated, setPartitionsValidated] = useState<\n      'warning' | 'default'\n    >('default');\n    const [warning, setWarning] = useState<boolean>(false);\n    const [initialPartition, setInitialPartition] = useState<\n      number | undefined\n    >(Number(topicData.numPartitions));\n    const { showModal } = useModal<ModalType.KafkaUpdatePartitions>();\n    const { t } = useTranslation();\n\n    const [isCustomRetentionTimeSelected, setIsCustomRetentionTimeSelected] =\n      useState<boolean>(true);\n    const [isCustomRetentionSizeSelected, setIsCustomRetentionSizeSelected] =\n      useState<boolean>(false);\n\n    const [customRetentionTime, setCustomRetentionTime] = useState<number>(7);\n    const [customRetentionTimeUnit, setCustomRetentionTimeUnit] =\n      useState<string>('days');\n    const [customRetentionSize, setCustomRetentionSize] = useState<number>(1);\n    const [customRetentionSizeUnit, setCustomRetentionSizeUnit] =\n      useState<string>('bytes');\n    const actionText = isCreate ? t('topic.create_topic') : t('common.save');\n\n    const clearOptions: IDropdownOption[] = [\n      {\n        key: 'compact',\n        value: 'compact',\n        label: t('common.compact'),\n        isDisabled: false,\n      },\n      {\n        key: 'delete',\n        value: 'delete',\n        label: t('common.delete'),\n        isDisabled: false,\n      },\n      {\n        key: 'compact-delete',\n        value: 'compact, delete',\n        label: `${t('common.compact')}, ${t('common.delete')}`,\n        isDisabled: false,\n      },\n    ];\n\n    const config = useContext(ConfigContext);\n    const fetchTopic = async (topicName) => {\n      try {\n        const topicRes = await getTopic(topicName, config);\n        if (topicRes) {\n          if (isCreate) {\n            setInvalidText(t('topic.already_exists', { name: topicName }));\n            setTopicValidated('error');\n            setIsLoading(false);\n          } else {\n            setInitialPartition(topicRes?.partitions?.length);\n          }\n        }\n      } catch (err) {\n        let code: number | undefined;\n        if (err && isAxiosError(err)) {\n          code = err.response?.data.code;\n        }\n        if (isCreate && code === 404) {\n          setTopicValidated('default');\n          setIsLoading(false);\n          saveTopic();\n        }\n      }\n    };\n\n    useEffect(() => {\n      if (!isCreate) {\n        fetchTopic(topicData.name);\n      }\n      validationCheck(topicData.name);\n      setCustomRetentionTimeUnit('milliseconds');\n    }, []);\n\n    useEffect(() => {\n      if (!isCreate) {\n        if (topicData['retention.bytes'] === '-1') {\n          setIsCustomRetentionSizeSelected(false);\n        } else {\n          setIsCustomRetentionSizeSelected(true);\n          setCustomRetentionSize(Number(topicData['retention.bytes']));\n        }\n        if (topicData['retention.ms'] === '-1') {\n          setIsCustomRetentionTimeSelected(false);\n        } else {\n          setIsCustomRetentionTimeSelected(true);\n          setCustomRetentionTime(Number(topicData['retention.ms']));\n        }\n      }\n    }, [topicData['retention.bytes'], topicData['retention.ms']]);\n\n    const validationCheck = (value: string) => {\n      const legalNameChars = new RegExp('^[a-zA-Z0-9._-]+$');\n\n      if (value.length && !legalNameChars.test(value)) {\n        setInvalidText(t('topic.topic_name_helper_text'));\n        setTopicValidated('error');\n      } else if (value.length > 249) {\n        setTopicValidated('error');\n        setInvalidText(t('topic.cannot_exceed_characters'));\n      } else if (value === '.' || value === '..') {\n        setTopicValidated('error');\n        setInvalidText(t('topic.invalid_name_with_dot'));\n      } else setTopicValidated('default');\n    };\n\n    const partitionsWarnigCheckPlus = () => {\n      if (\n        initialPartition &&\n        Number(topicData.numPartitions + 1) > initialPartition\n      ) {\n        setPartitionsValidated('warning');\n        setWarning(true);\n      } else {\n        setPartitionsValidated('default');\n        setWarning(false);\n      }\n    };\n\n    const handleTextInputChange = (\n      value: string,\n      event: React.FormEvent<HTMLInputElement>\n    ) => {\n      validationCheck(value);\n      const { name: fieldName } = event.currentTarget;\n      setTopicData({ ...topicData, [kebabToCamel(fieldName)]: value });\n    };\n\n    const onDropdownChange = (value: string, event) => {\n      const { name } = event.target;\n\n      if (name === 'custom-retention-time-unit') {\n        setCustomRetentionTimeUnit(value);\n        isCustomRetentionTimeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.ms.unit': value,\n          });\n      }\n      if (name === 'custom-retention-size-unit') {\n        setCustomRetentionSizeUnit(value);\n        isCustomRetentionSizeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.bytes.unit': value,\n          });\n      }\n    };\n\n    const onPartitionsChange = (event: React.FormEvent<HTMLInputElement>) => {\n      const { name: fieldName, value } = event.currentTarget;\n      let partitionValue = Number(value);\n      if (initialPartition) {\n        if (partitionValue > initialPartition) {\n          setPartitionsValidated('warning');\n          setWarning(true);\n        }\n\n        if (partitionValue < initialPartition) {\n          partitionValue = initialPartition;\n          setPartitionsValidated('default');\n          setWarning(false);\n        } else if (partitionValue > MAX_PARTITIONS) {\n          partitionValue = MAX_PARTITIONS;\n        }\n      }\n      setTopicData({ ...topicData, [kebabToCamel(fieldName)]: partitionValue });\n    };\n\n    const handleTouchSpinPlusCamelCase = (event) => {\n      const { name } = event.currentTarget;\n      const fieldName = kebabToCamel(name);\n      setTopicData({\n        ...topicData,\n        [fieldName]: Number(topicData[fieldName]) + 1,\n      });\n      if (!isCreate) {\n        partitionsWarnigCheckPlus();\n      }\n    };\n    const partitionsWarningCheckMinus = () => {\n      if (\n        initialPartition &&\n        Number(topicData.numPartitions + -1) > initialPartition\n      ) {\n        setPartitionsValidated('warning');\n        setWarning(true);\n      } else {\n        setPartitionsValidated('default');\n        setWarning(false);\n      }\n    };\n\n    const handleTouchSpinMinusCamelCase = (event) => {\n      const { name } = event.currentTarget;\n      const fieldName = kebabToCamel(name);\n      setTopicData({\n        ...topicData,\n        [fieldName]: Number(topicData[fieldName]) - 1,\n      });\n      if (!isCreate) {\n        partitionsWarningCheckMinus();\n      }\n    };\n\n    const handleTouchSpinInputChange = (\n      event: React.FormEvent<HTMLInputElement>\n    ) => {\n      const { name, value } = event.currentTarget;\n\n      if (name === 'custom-retention-time') {\n        setCustomRetentionTime(Number(value));\n        isCustomRetentionTimeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.ms': value,\n          });\n      } else if (name === 'custom-retention-size') {\n        setCustomRetentionSize(Number(value));\n        isCustomRetentionSizeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.bytes': value,\n          });\n      }\n    };\n\n    const handleTouchSpinPlus = (event) => {\n      const { name } = event.currentTarget;\n      if (name === 'custom-retention-time') {\n        const updatedRetentionTime = customRetentionTime + 1;\n        setCustomRetentionTime(updatedRetentionTime);\n        isCustomRetentionTimeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.ms': updatedRetentionTime.toString(),\n          });\n      } else if (name === 'custom-retention-size') {\n        const updatedRetentionSize = customRetentionSize + 1;\n        setCustomRetentionSize(updatedRetentionSize);\n        isCustomRetentionSizeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.bytes': updatedRetentionSize.toString(),\n          });\n      }\n    };\n\n    const handleTouchSpinMinus = (event) => {\n      const { name } = event.currentTarget;\n      if (name === 'custom-retention-time') {\n        const updatedRetentionTime = customRetentionTime - 1;\n        setCustomRetentionTime(updatedRetentionTime);\n        isCustomRetentionTimeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.ms': updatedRetentionTime.toString(),\n          });\n      } else if (name === 'custom-retention-size') {\n        const updatedRetentionSize = customRetentionSize - 1;\n        setCustomRetentionSize(updatedRetentionSize);\n        isCustomRetentionSizeSelected &&\n          setTopicData({\n            ...topicData,\n            'retention.bytes': updatedRetentionSize.toString(),\n          });\n      }\n    };\n\n    const onDropdownChangeDotSeparated = (value: string, event) => {\n      const { name: fieldName } = event.target;\n      setTopicData({ ...topicData, [kebabToDotSeparated(fieldName)]: value });\n    };\n    const onConfirm = () => {\n      if (!isCreate) {\n        if (warning) {\n          showModal(ModalType.KafkaUpdatePartitions, {\n            onSaveTopic: saveTopic,\n          });\n        } else {\n          saveTopic();\n        }\n      } else {\n        if (topicData.name.length < 1) {\n          setInvalidText(t('topic.required'));\n          setTopicValidated('error');\n        } else {\n          setIsLoading(true);\n          fetchTopic(topicData.name);\n        }\n      }\n    };\n\n    const handleRadioChange = (_, event) => {\n      const { name } = event.target;\n\n      switch (name) {\n        case 'custom-retention-time':\n          setIsCustomRetentionTimeSelected(true);\n          setTopicData({\n            ...topicData,\n            'retention.ms': customRetentionTime.toString(),\n            'retention.ms.unit': customRetentionTimeUnit,\n          });\n          break;\n        case 'unlimited-retention-time':\n          setIsCustomRetentionTimeSelected(false);\n          setTopicData({\n            ...topicData,\n            'retention.ms': '-1',\n            'retention.ms.unit': 'milliseconds',\n          });\n          break;\n        case 'custom-retention-size':\n          setIsCustomRetentionSizeSelected(true);\n          setTopicData({\n            ...topicData,\n            'retention.bytes': customRetentionSize.toString(),\n            'retention.bytes.unit': customRetentionSizeUnit,\n          });\n          break;\n        case 'unlimited-retention-size':\n          setIsCustomRetentionSizeSelected(false);\n          setTopicData({\n            ...topicData,\n            'retention.bytes': '-1',\n            'retention.bytes.unit': 'bytes',\n          });\n          break;\n      }\n    };\n\n    const retentionTimeInput = (\n      <SizeTimeFormGroup\n        inputName='custom-retention-time'\n        onChange={handleTouchSpinInputChange}\n        onPlus={handleTouchSpinPlus}\n        onMinus={handleTouchSpinMinus}\n        value={customRetentionTime}\n        plusBtnProps={{ name: 'custom-retention-time' }}\n        minusBtnProps={{ name: 'custom-retention-time' }}\n        id='core-config-retention-time-unit'\n        toggleId='core-config-retention-dropdowntoggle'\n        name='custom-retention-time-unit'\n        dropdownValue={customRetentionTimeUnit}\n        ariaLabel={t('common.select_unit')}\n        onSelectOption={onDropdownChange}\n        min={0}\n        type='time'\n      />\n    );\n\n    const retentionSizeInput = (\n      <SizeTimeFormGroup\n        inputName='custom-retention-size'\n        onChange={handleTouchSpinInputChange}\n        onPlus={handleTouchSpinPlus}\n        onMinus={handleTouchSpinMinus}\n        value={customRetentionSize}\n        plusBtnProps={{ name: 'custom-retention-size' }}\n        minusBtnProps={{ name: 'custom-retention-size' }}\n        id='core-config-retention-size-unit'\n        toggleId='core-config-retention-size-dropdowntoggle'\n        name='custom-retention-size-unit'\n        dropdownValue={customRetentionSizeUnit}\n        ariaLabel={t('common.select_unit')}\n        onSelectOption={onDropdownChange}\n        min={0}\n        type='memory'\n      />\n    );\n\n    return (\n      <PageSection padding={{ default: 'noPadding' }}>\n        <Sidebar hasGutter>\n          <SidebarPanel variant='sticky'>\n            <JumpLinks\n              isVertical\n              label={t('topic.jump_to_section')}\n              scrollableSelector='.app-services-ui--u-display-contents > div:nth-child(1) > div:nth-child(1) > div:nth-child(1)'\n              style={{ position: 'sticky' }}\n              offset={-164} // for header\n            >\n              <JumpLinksItem key={0} href='#core-configuration'>\n                {t('topic.core_configuration')}\n              </JumpLinksItem>\n              <JumpLinksItem key={1} href='#messages'>\n                {t('topic.messages')}\n              </JumpLinksItem>\n              <JumpLinksItem key={2} href='#log'>\n                {t('topic.log')}\n              </JumpLinksItem>\n              <JumpLinksItem key={3} href='#replication'>\n                {t('topic.replication')}\n              </JumpLinksItem>\n              <JumpLinksItem key={4} href='#cleanup'>\n                {t('common.cleanup')}\n              </JumpLinksItem>\n              <JumpLinksItem key={5} href='#index'>\n                {t('topic.index')}\n              </JumpLinksItem>\n              <JumpLinksItem key={6} href='#flush'>\n                {t('topic.flush')}\n              </JumpLinksItem>\n            </JumpLinks>\n          </SidebarPanel>\n          <SidebarContent>\n            <PageGroup hasOverflowScroll id='topic-detail-view'>\n              <PageSection padding={{ default: 'noPadding' }}>\n                <Form>\n                  <FormSection\n                    title={t('topic.core_configuration')}\n                    id='core-configuration'\n                    titleElement={'h2'}\n                  >\n                    <TextContent>\n                      <Text component={TextVariants.p} className='section-info'>\n                        {t('topic.core_config_info')}\n                      </Text>\n                    </TextContent>\n                    {isCreate ? (\n                      <FormGroupWithPopover\n                        labelHead={t('topic.topic_name')}\n                        fieldId='create-topic-name'\n                        fieldLabel={t('topic.topic_name')}\n                        labelBody={t('topic.topic_name_description')}\n                        buttonAriaLabel='More info for topic name field'\n                        helperTextInvalid={invalidText}\n                        validated={topicValidated}\n                        isRequired={true}\n                        helperText={t('topic.topic_name_helper_text')}\n                      >\n                        <TextInput\n                          isRequired\n                          type='text'\n                          id='create-topic-name'\n                          name='name'\n                          value={topicData.name}\n                          onChange={handleTextInputChange}\n                          label={t('topic.topic_name')}\n                          placeholder={t('topic.enter_name')}\n                          validated={topicValidated}\n                        />\n                      </FormGroupWithPopover>\n                    ) : (\n                      <TextWithLabelPopover\n                        fieldId='topic-name'\n                        btnAriaLabel='topic detail name'\n                        fieldLabel='Name'\n                        fieldValue={topicData.name}\n                        popoverBody={t('topic.topic_name_description')}\n                        popoverHeader={t('topic.topic_name')}\n                      />\n                    )}\n\n                    <FormGroupWithPopover\n                      fieldId='create-topic-partitions'\n                      fieldLabel='Partitions'\n                      labelHead={t('topic.partitions')}\n                      labelBody={t('topic.partitions_description')}\n                      buttonAriaLabel='More info for partitions field'\n                      validated={partitionsValidated}\n                      helperText={\n                        warning ? t('topic.partitions_warning') : undefined\n                      }\n                    >\n                      <NumberInput\n                        id='create-topic-partitions'\n                        inputName='num-partitions'\n                        onChange={onPartitionsChange}\n                        onPlus={handleTouchSpinPlusCamelCase}\n                        onMinus={handleTouchSpinMinusCamelCase}\n                        value={Number(topicData.numPartitions)}\n                        plusBtnProps={{ name: 'num-partitions' }}\n                        minusBtnProps={{ name: 'num-partitions' }}\n                        min={initialPartition}\n                        max={MAX_PARTITIONS}\n                      />\n                    </FormGroupWithPopover>\n\n                    <TextWithLabelPopover\n                      fieldId='replicas'\n                      btnAriaLabel={t('topic.replicas')}\n                      fieldLabel={t('topic.replicas')}\n                      fieldValue={\n                        isCreate\n                          ? DEFAULT_REPLICAS\n                          : topicData.replicationFactor\n                      }\n                      popoverBody={t('topic.replicas_description')}\n                      popoverHeader={t('topic.replicas')}\n                    />\n                    <TextWithLabelPopover\n                      fieldId='min-insync-replicas'\n                      btnAriaLabel='topic detail min-in-sync replica'\n                      fieldLabel='Minimum in-sync replicas'\n                      fieldValue={DEFAULT_MIN_INSYNC_REPLICAS}\n                      popoverBody={t('topic.min_insync_replicas_description')}\n                      popoverHeader={t('topic.min_insync_replicas')}\n                    />\n                    <FormGroupWithPopover\n                      fieldId='retention'\n                      fieldLabel='Retention time'\n                      labelHead={t('topic.retention_time')}\n                      labelBody={t('topic.retention_time_description')}\n                      buttonAriaLabel='More info for retention time field'\n                    >\n                      <Stack hasGutter>\n                        <Radio\n                          isChecked={isCustomRetentionTimeSelected}\n                          name='custom-retention-time'\n                          onChange={handleRadioChange}\n                          label={retentionTimeInput}\n                          className='kafka-ui--radio-label__number-input'\n                          aria-label='custom duration'\n                          id='custom-retention-time'\n                          value='custom'\n                        />\n                        <Radio\n                          isChecked={!isCustomRetentionTimeSelected}\n                          name='unlimited-retention-time'\n                          onChange={handleRadioChange}\n                          label='Unlimited'\n                          aria-label='Unlimited'\n                          id='unlimited-retention-time'\n                          value='unlimited'\n                        />\n                      </Stack>\n                    </FormGroupWithPopover>\n                    <FormGroupWithPopover\n                      fieldId='retention-size'\n                      fieldLabel='Retention size'\n                      labelHead={t('topic.retention_size')}\n                      labelBody={t('topic.retention_size_description')}\n                      buttonAriaLabel='More info for retention size field'\n                    >\n                      <Stack hasGutter>\n                        <Radio\n                          isChecked={isCustomRetentionSizeSelected}\n                          name='custom-retention-size'\n                          onChange={handleRadioChange}\n                          label={retentionSizeInput}\n                          className='kafka-ui--radio-label__number-input'\n                          aria-label='custom size'\n                          id='custom-retention-size'\n                          value='custom'\n                        />\n                        <Radio\n                          isChecked={!isCustomRetentionSizeSelected}\n                          name='unlimited-retention-size'\n                          onChange={handleRadioChange}\n                          label='Unlimited'\n                          aria-label='Unlimited'\n                          id='unlimited-retention-size'\n                          value='unlimited'\n                        />\n                      </Stack>\n                    </FormGroupWithPopover>\n                  </FormSection>\n                  <FormSection\n                    title={t('topic.messages')}\n                    id='messages'\n                    titleElement={'h2'}\n                  >\n                    <TextContent>\n                      <Text component={TextVariants.p} className='section-info'>\n                        {t('topic.message_section_info')}\n                      </Text>\n                    </TextContent>\n\n                    <TextWithLabelPopover\n                      fieldId='max-message-size'\n                      btnAriaLabel={t('topic.max_message_size')}\n                      fieldLabel={t('topic.max_message_size')}\n                      fieldValue={DEFAULT_MAXIMUM_MESSAGE_BYTES}\n                      popoverBody={t('topic.max_message_size_description')}\n                      popoverHeader={t('topic.max_message_size')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='message-timestamp-type'\n                      btnAriaLabel={t('topic.message_timestamp_type')}\n                      fieldLabel={t('topic.message_timestamp_type')}\n                      fieldValue={DEFAULT_MESSAGE_TIMESTAMP_TYPE}\n                      popoverBody={t(\n                        'topic.message_timestamp_type_description'\n                      )}\n                      popoverHeader={t('topic.message_timestamp_type')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='max-message-timestamp-diff'\n                      btnAriaLabel={t('topic.max_message_timestamp_diff')}\n                      fieldLabel={t('topic.max_message_timestamp_diff')}\n                      fieldValue={DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF}\n                      popoverBody={t(\n                        'topic.max_message_timestamp_diff_description'\n                      )}\n                      popoverHeader={t('topic.max_message_timestamp_diff')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='compression-type'\n                      btnAriaLabel={t('topic.compression_type')}\n                      fieldLabel={t('topic.compression_type')}\n                      fieldValue={'Producer'}\n                      popoverBody={t('topic.compression_type_description')}\n                      popoverHeader={t('topic.compression_type')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='message-format'\n                      btnAriaLabel={t('topic.message_format')}\n                      fieldLabel={t('topic.message_format')}\n                      fieldValue={'2.7-IV2'}\n                      popoverBody={t('topic.message_format_description')}\n                      popoverHeader={t('topic.message_format')}\n                    />\n                  </FormSection>\n\n                  <FormSection\n                    title={t('topic.log')}\n                    id='log'\n                    titleElement={'h2'}\n                  >\n                    <TextContent>\n                      <Text component={TextVariants.p}>\n                        {t('topic.log_section_info')}\n                      </Text>\n                      <Text component={TextVariants.small}>\n                        {t('topic.log_section_info_note')}\n                      </Text>\n                    </TextContent>\n\n                    <FormGroupWithPopover\n                      fieldId='cleanup-policy'\n                      fieldLabel={t('topic.cleanup_policy')}\n                      labelHead={t('topic.cleanup_policy')}\n                      labelBody={t('topic.cleanup_policy_description')}\n                      buttonAriaLabel={t('topic.cleanup_policy')}\n                    >\n                      <DropdownWithToggle\n                        id='log-section-policy-type-dropdown'\n                        toggleId='log-section-policy-type-dropdowntoggle'\n                        ariaLabel={t('common.select_policy')}\n                        onSelectOption={onDropdownChangeDotSeparated}\n                        items={clearOptions}\n                        name='cleanup-policy'\n                        value={topicData['cleanup.policy'] || ''}\n                      />\n                    </FormGroupWithPopover>\n\n                    <TextWithLabelPopover\n                      fieldId='delete-retention-time'\n                      btnAriaLabel={t('topic.delete_retention_time')}\n                      fieldLabel={t('topic.delete_retention_time')}\n                      fieldValue={DEFAULT_DELETE_RETENTION_TIME}\n                      popoverBody={t('topic.delete_retention_time_description')}\n                      popoverHeader={t('topic.delete_retention_time')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='min-cleanable-ratio'\n                      btnAriaLabel={t('topic.min_cleanable_ratio')}\n                      fieldLabel={t('topic.min_cleanable_ratio')}\n                      fieldValue={DEFAULT_MIN_CLEANBLE_RATIO}\n                      popoverBody={t('topic.min_cleanable_ratio_description')}\n                      popoverHeader={t('topic.min_cleanable_ratio')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='min-compaction-lag-time-description'\n                      btnAriaLabel={t('topic.min_compaction_lag_time')}\n                      fieldLabel={t('topic.min_compaction_lag_time')}\n                      fieldValue={DEFAULT_MINIMUM_COMPACTION_LAG_TIME}\n                      popoverBody={t(\n                        'topic.min_compaction_lag_time_description'\n                      )}\n                      popoverHeader={t('topic.min_compaction_lag_time')}\n                    />\n                  </FormSection>\n\n                  <FormSection\n                    title={t('topic.replication')}\n                    id='replication'\n                    titleElement={'h2'}\n                  >\n                    <TextContent>\n                      <Text component={TextVariants.p}>\n                        {t('topic.replication_section_info')}\n                        <Text component={TextVariants.small}>\n                          {t('topic.replication_section_info_note')}\n                        </Text>\n                      </Text>\n                    </TextContent>\n\n                    <TextWithLabelPopover\n                      fieldId='unclean-leader-election'\n                      btnAriaLabel={t('topic.unclean_leader_election')}\n                      fieldLabel={t('topic.unclean_leader_election')}\n                      fieldValue={t('common.disabled')}\n                      popoverBody={t(\n                        'topic.unclean_leader_election_description'\n                      )}\n                      popoverHeader={t('topic.unclean_leader_election')}\n                    />\n                  </FormSection>\n\n                  <FormSection\n                    title={t('common.cleanup')}\n                    id='cleanup'\n                    titleElement={'h2'}\n                  >\n                    <TextContent>\n                      <Text component={TextVariants.p} className='section-info'>\n                        {t('topic.cleanup_section_info')}\n                      </Text>\n                    </TextContent>\n\n                    <TextWithLabelPopover\n                      fieldId='log-segment-size'\n                      btnAriaLabel={t('topic.log_segment_size')}\n                      fieldLabel={t('topic.log_segment_size')}\n                      fieldValue={DEFAULT_LOG_SEGMENT_SIZE}\n                      popoverBody={t('topic.log_segment_size')}\n                      popoverHeader={t('topic.log_segment_size_description')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='segement-time'\n                      btnAriaLabel={t('topic.segement_time')}\n                      fieldLabel={t('topic.segement_time')}\n                      fieldValue={DEFAULT_SEGMENT_TIME}\n                      popoverBody={t('topic.segement_time_description')}\n                      popoverHeader={t('topic.segement_time')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='segment-jitter-time'\n                      btnAriaLabel={t('topic.segment_jitter_time')}\n                      fieldLabel={t('topic.segment_jitter_time')}\n                      fieldValue={DEFAULT_SEGMENT_JITTER_TIME}\n                      popoverBody={t('topic.segment_jitter_time_description')}\n                      popoverHeader={t('topic.segment_jitter_time')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='file-delete-delay'\n                      btnAriaLabel={t('topic.file_delete_delay')}\n                      fieldLabel={t('topic.file_delete_delay')}\n                      fieldValue={DEFAULT_FILE_DELETE_DELAY}\n                      popoverBody={t('topic.file_delete_delay_description')}\n                      popoverHeader={t('topic.file_delete_delay')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='preallocate-log-segment-files'\n                      btnAriaLabel={t('topic.preallocate_log_segment_files')}\n                      fieldLabel={t('topic.preallocate_log_segment_files')}\n                      fieldValue={t('common.disabled')}\n                      popoverBody={t(\n                        'topic.preallocate_log_segment_files_description'\n                      )}\n                      popoverHeader={t('topic.preallocate_log_segment_files')}\n                    />\n                  </FormSection>\n\n                  <FormSection\n                    title={t('topic.index')}\n                    id='index'\n                    titleElement={'h2'}\n                  >\n                    <TextContent>\n                      <Text component={TextVariants.p} className='section-info'>\n                        {t('topic.index_section_info')}\n                      </Text>\n                    </TextContent>\n\n                    <TextWithLabelPopover\n                      fieldId='index-interval-size'\n                      btnAriaLabel={t('topic.index_interval_size')}\n                      fieldLabel={t('topic.index_interval_size')}\n                      fieldValue={DEFAULT_INDEX_INTERVAL_SIZE}\n                      popoverBody={t('topic.index_interval_size_description')}\n                      popoverHeader={t('topic.index_interval_size')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='segment-index-size'\n                      btnAriaLabel={t('topic.segment_index_size')}\n                      fieldLabel={t('topic.segment_index_size')}\n                      fieldValue={DEFAULT_SEGMENT_INDEX_SIZE}\n                      popoverBody={t('topic.segment_index_size_description')}\n                      popoverHeader={t('topic.segment_index_size')}\n                    />\n                  </FormSection>\n\n                  <FormSection\n                    title={t('topic.flush')}\n                    id='flush'\n                    titleElement={'h2'}\n                  >\n                    <TextContent>\n                      <Text component={TextVariants.p} className='section-info'>\n                        {t('topic.flush_section_info')}\n                      </Text>\n                    </TextContent>\n\n                    <TextWithLabelPopover\n                      fieldId='flush-interval-messages'\n                      btnAriaLabel={t('topic.flush_interval_messages')}\n                      fieldLabel={t('topic.flush_interval_messages')}\n                      fieldValue={DEFAULT_FLUSH_INTERVAL_MESSAGES}\n                      popoverBody={t(\n                        'topic.flush_interval_messages_description'\n                      )}\n                      popoverHeader={t('topic.flush_interval_messages')}\n                    />\n\n                    <TextWithLabelPopover\n                      fieldId='flush-interval-time'\n                      btnAriaLabel={t('topic.flush_interval_time')}\n                      fieldLabel={t('topic.flush_interval_time')}\n                      fieldValue={DEFAULT_FLUSH_INTERVAL_TIME}\n                      popoverBody={t('topic.flush_interval_time_description')}\n                      popoverHeader={t('topic.flush_interval_time')}\n                    />\n                  </FormSection>\n                </Form>\n                <ActionGroup className='kafka-ui--sticky-footer'>\n                  <Button\n                    isLoading={isLoading || isLoadingSave}\n                    onClick={onConfirm}\n                    variant='primary'\n                    data-testid={\n                      isCreate\n                        ? 'topicAdvanceCreate-actionCreate'\n                        : 'tabProperties-actionSave'\n                    }\n                    isDisabled={topicValidated === 'default' ? false : true}\n                  >\n                    {actionText}\n                  </Button>\n                  <Button\n                    onClick={handleCancel}\n                    variant='link'\n                    data-testid={\n                      isCreate\n                        ? 'topicAdvanceCreate-actionCancel'\n                        : 'tabProperties-actionCancel'\n                    }\n                  >\n                    {t('common.cancel')}\n                  </Button>\n                </ActionGroup>\n              </PageSection>\n            </PageGroup>\n          </SidebarContent>\n        </Sidebar>\n      </PageSection>\n    );\n  };\n","import { ConfigEntry, NewTopicInput } from '@rhoas/kafka-instance-sdk';\nimport { IAdvancedTopic } from '@app/modules/Topics/components/CreateTopicWizard';\n\nconst capitalizeText = (text: string) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nexport const kebabToCamel = function (kebabCase: string): string {\n  const words: string[] = kebabCase.split('-');\n\n  const camelCased: string[] = words.map((word: string, index: number) => {\n    return index > 0 ? capitalizeText(word) : word;\n  });\n\n  return camelCased.join('');\n};\n\nexport const kebabToDotSeparated = (val: string): string => {\n  return val.replaceAll('-', '.');\n};\n\nconst unitsToBytes = {\n  bytes: 1,\n  kibibytes: 1024,\n  mebibytes: 1048576,\n  gibibytes: 1073741824,\n  tebibytes: 1.0995116e12,\n};\n\nconst unitsToMilliSecond = {\n  milliseconds: 1,\n  seconds: 1000,\n  days: 86400000,\n  months: 2592000000,\n  years: 31536000000,\n};\n\nexport const convertUnits = (topicData: IAdvancedTopic): IAdvancedTopic => {\n  const topic = { ...topicData };\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'ms') {\n      topic[key] = String(\n        Number(topic[key]) *\n          unitsToMilliSecond[topic[`${key}.unit`] || 'milliseconds']\n      );\n    }\n    if (key.split('.').pop() === 'bytes') {\n      topic[key] = String(\n        Number(topic[key]) * unitsToBytes[topic[`${key}.unit`] || 'bytes']\n      );\n    }\n  }\n\n  if (topic['flush.messages']) {\n    topic['flush.messages'] = String(\n      Number(topic['flush.messages']) *\n        unitsToMilliSecond[topic['flush.messages.unit'] || 'milliseconds']\n    );\n  }\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'unit') {\n      delete topic[key];\n    }\n  }\n\n  return topic;\n};\n\nexport const formatTopicRequest = (topic: IAdvancedTopic): NewTopicInput => {\n  const { name, numPartitions, ...configEntries } = topic;\n\n  const config: ConfigEntry[] = [];\n\n  for (const key in configEntries) {\n    if (key) {\n      config.push({\n        key,\n        value: configEntries[key].toString(),\n      });\n    }\n  }\n\n  return {\n    name,\n    settings: {\n      numPartitions: Number(numPartitions),\n      config,\n    },\n  };\n};\n","import { AxiosResponse } from 'axios';\nimport {\n  ConfigEntry,\n  TopicsApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { IAdvancedTopic } from '@app/modules/Topics/components/CreateTopicWizard/CreateTopicWizard';\nimport { SortByDirection } from '@patternfly/react-table';\n\nexport enum OrderKey {\n  name = 'name',\n  partitions = 'partitions',\n  retentionMs = 'retention.ms',\n  retentionSize = 'retention.bytes',\n}\n\nexport const getTopics = async (\n  config: IConfiguration | undefined,\n  limit?: number,\n  size?: number,\n  filter?: string,\n  offset?: number | undefined,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: OrderKey\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopics(\n    offset,\n    limit,\n    size,\n    filter,\n    undefined,\n    order,\n    orderKey\n  );\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<IAdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): IAdvancedTopic => {\n  const topicObj: IAdvancedTopic = { name: '', numPartitions: '0' };\n  if (topic && topic.name) topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length.toString() || '0';\n\n  topicObj.replicationFactor =\n    (topic?.partitions && topic?.partitions[0].replicas?.length.toString()) ||\n    '0';\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n","import { AxiosError } from 'axios';\n\nexport type ErrorData = {\n  code: number;\n  error_message: string;\n};\n\nexport const isAxiosError = (\n  error: unknown\n): error is AxiosError<ErrorData> => {\n  return (error as AxiosError<ErrorData>) !== undefined;\n};\n"],"names":["exports","__esModule","CaretDownIconConfig","name","height","width","svgPath","yOffset","xOffset","CaretDownIcon","DropdownWithToggle","id","toggleId","items","value","ariaLabel","onSelectOption","menuAppendTo","useState","isOpen","setIsOpen","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","Dropdown","onSelect","e","currentTarget","textContent","target","toggle","dropdownItems","options","map","option","key","label","DropdownItem","getItems","FormGroupWithPopover","children","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","validated","helperText","helperTextInvalid","isRequired","FormGroup","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","TextWithLabelPopover","btnAriaLabel","fieldValue","popoverBody","popoverHeader","displayText","undefined","parseInt","TextInput","isReadOnly","type","DEFAULT_REPLICAS","DEFAULT_MIN_CLEANBLE_RATIO","DEFAULT_MIN_INSYNC_REPLICAS","DEFAULT_SEGMENT_TIME","DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF","DEFAULT_SEGMENT_INDEX_SIZE","DEFAULT_INDEX_INTERVAL_SIZE","DEFAULT_LOG_SEGMENT_SIZE","DEFAULT_DELETE_RETENTION_TIME","DEFAULT_SEGMENT_JITTER_TIME","DEFAULT_FILE_DELETE_DELAY","DEFAULT_MAXIMUM_MESSAGE_BYTES","DEFAULT_MESSAGE_TIMESTAMP_TYPE","DEFAULT_MINIMUM_COMPACTION_LAG_TIME","DEFAULT_FLUSH_INTERVAL_MESSAGES","DEFAULT_FLUSH_INTERVAL_TIME","MIN_PARTITIONS","MAX_PARTITIONS","SizeTimeFormGroup","dropdownValue","inputName","onChange","onPlus","onMinus","plusBtnProps","minusBtnProps","min","timeUnits","isDisabled","memoryUnits","Flex","FlexItem","grow","default","NumberInput","widthChars","getItemsForType","TopicAdvanceConfig","isCreate","saveTopic","handleCancel","topicData","setTopicData","isLoadingSave","topicValidated","setTopicValidated","invalidText","setInvalidText","isLoading","setIsLoading","partitionsValidated","setPartitionsValidated","warning","setWarning","Number","numPartitions","initialPartition","setInitialPartition","showModal","t","useTranslation","isCustomRetentionTimeSelected","setIsCustomRetentionTimeSelected","isCustomRetentionSizeSelected","setIsCustomRetentionSizeSelected","customRetentionTime","setCustomRetentionTime","customRetentionTimeUnit","setCustomRetentionTimeUnit","customRetentionSize","setCustomRetentionSize","customRetentionSizeUnit","setCustomRetentionSizeUnit","actionText","clearOptions","config","useContext","fetchTopic","topicName","topicRes","partitions","length","code","response","data","useEffect","validationCheck","legalNameChars","RegExp","test","onDropdownChange","handleTouchSpinInputChange","handleTouchSpinPlus","updatedRetentionTime","toString","updatedRetentionSize","handleTouchSpinMinus","handleRadioChange","_","retentionTimeInput","retentionSizeInput","PageSection","padding","Sidebar","hasGutter","SidebarPanel","variant","JumpLinks","isVertical","scrollableSelector","style","position","offset","JumpLinksItem","href","SidebarContent","PageGroup","hasOverflowScroll","Form","FormSection","title","titleElement","TextContent","Text","component","TextVariants","fieldName","placeholder","partitionValue","max","replicationFactor","Stack","Radio","isChecked","ActionGroup","Button","onSaveTopic","kebabToCamel","kebabCase","split","word","index","text","charAt","toUpperCase","slice","join","kebabToDotSeparated","val","replaceAll","unitsToBytes","bytes","kibibytes","mebibytes","gibibytes","tebibytes","unitsToMilliSecond","milliseconds","seconds","days","months","years","convertUnits","topic","pop","String","formatTopicRequest","configEntries","push","settings","OrderKey","getTopics","limit","size","filter","order","orderKey","SortByDirection","Promise","getToken","accessToken","TopicsApi","Configuration","basePath","getTopicDetail","getTopic","convertTopicResponse","topicObj","forEach","replicas","updateTopicModel","topicSettings","updateTopic","status","answer","p","reduce","previousValue","currentValue","deleteTopic","isAxiosError","error"],"sourceRoot":""}