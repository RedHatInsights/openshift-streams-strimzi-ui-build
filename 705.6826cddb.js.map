{"version":3,"file":"705.6826cddb.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/MASDrawer/MASDrawer.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/ConsumerGroups.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n  Dropdown,\n  KebabToggle,\n  DropdownPosition,\n  DropdownItem,\n} from '@patternfly/react-core';\nimport { MASLoading, ModalType, useModal } from '@app/components';\nimport './MASDrawer.css';\nimport { EllipsisVIcon } from '@patternfly/react-icons';\nimport { ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { useTranslation } from 'react-i18next';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading?: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: React.ReactNode;\n  refreshConsumerGroups?: () => void;\n  consumerGroupDetail: ConsumerGroup | undefined;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = false,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n  inlineAlertMessage,\n  refreshConsumerGroups,\n  consumerGroupDetail\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } =\n    drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n  const { t } = useTranslation();\n  const { showModal } = useModal<ModalType.DeleteConsumerGroup>();\n  const { showModal: showResetOffsetModal } = useModal<ModalType.ConsumerGroupResetOffset>();\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelectDeleteConsumerGroup = () => {\n    showModal(ModalType.DeleteConsumerGroup, {\n      consumerName: title?.value || \"\",\n      refreshConsumerGroups,\n    });\n    onClose();\n  };\n  const onSelectResetOffsetConsumerGroup =  ()=> {\n    showResetOffsetModal(ModalType.ConsumerGroupResetOffset, {\n      refreshConsumerGroups,\n      consumerGroupData: consumerGroupDetail\n    });\n  };\n\n  const dropdownItems = [\n    <DropdownItem\n      key='reset offset'\n      onClick={onSelectResetOffsetConsumerGroup}\n    >\n      {t('consumerGroup.reset_offset')}\n    </DropdownItem>,\n    <DropdownItem\n      key='delete'\n      onClick={onSelectDeleteConsumerGroup}\n    >\n      {t('common.delete')}\n    </DropdownItem>,\n\n  ];\n\n  const panelContent = (\n    <DrawerPanelContent\n      widths={widths || { default: 'width_50' }}\n      {...restDrawerPanelContentProps}\n    >\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text\n                  component={text?.component || TextVariants.small}\n                  className={\n                    text?.className || 'kafka-ui-mas-drawer__top-label'\n                  }\n                >\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'kafka-ui-mas-drawer__title'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <Dropdown onSelect={onSelect}\n                toggle={<KebabToggle onToggle={onToggle} id='toggle-data-plane' />}\n                isOpen={isOpen}\n                isPlain\n                dropdownItems={dropdownItems}\n                position={DropdownPosition.right}>\n                {<EllipsisVIcon />}\n              </Dropdown>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      onExpand={onExpand}\n      data-ouia-app-id={dataOuiaAppId}\n    >\n      <DrawerContent\n        panelContent={panelContent}\n        className={\n          notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''\n        }\n      >\n        <DrawerContentBody className='kafka-ui-mas-drawer__drawer-content-body'>\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useContext, useState, useEffect, lazy, Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport {\n  EmptyState,\n  MASEmptyStateVariant,\n  MASLoading,\n  MASDrawer,\n} from '@app/components';\nimport { getConsumerGroups } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { ConsumerGroupList, ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { useTimeout } from '@app/hooks/useTimeOut';\nimport { ISortBy, OnSort, SortByDirection } from '@patternfly/react-table';\n\nconst ConsumerGroupDetail = lazy(\n  () => import('./components/ConsumerGroupDetail/ConsumerGroupDetail')\n);\nconst ConsumerGroupsTable = lazy(\n  () => import('./components/ConsumerGroupsTable/ConsumerGroupsTable')\n);\n\nexport type ConsumerGroupsProps = {\n  consumerGroupByTopic: boolean;\n  topic?: string;\n  rowDataTestId?: string;\n};\n\nconst ConsumerGroups: React.FunctionComponent<ConsumerGroupsProps> = ({\n  consumerGroupByTopic,\n  topic,\n  rowDataTestId,\n}) => {\n  const [offset, setOffset] = useState<number>(0);\n  const [order, setOrder] = useState<SortByDirection>();\n  const [orderKey, setOrderKey] = useState<'name' | undefined>();\n  const [sortBy, setSortBy] = useState<ISortBy>({\n    index: undefined,\n    direction: 'asc',\n  });\n  const [consumerGroups, setConsumerGroups] = useState<ConsumerGroupList>();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>('');\n  const [consumerGroupDetail, setConsumerGroupDetail] =\n    useState<ConsumerGroup>();\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  useEffect(() => {\n    setOffset(perPage * (page - 1));\n  }, [page, perPage]);\n\n  const onSort: OnSort = (_event, index, direction) => {\n    setOrder(direction);\n    setOrderKey('name');\n    setSortBy({ index, direction });\n  };\n\n  const fetchConsumerGroups = async () => {\n    const limit = 100;\n    try {\n      await getConsumerGroups(\n        config,\n        offset,\n        limit,\n        perPage,\n        page,\n        topic,\n        search,\n        order,\n        orderKey\n      ).then((response) => {\n        setConsumerGroups(response);\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  useEffect(() => {\n    fetchConsumerGroups();\n  }, [search, order]);\n\n  useTimeout(() => fetchConsumerGroups(), 5000);\n\n  const panelBodyContent = (\n    <ConsumerGroupDetail\n      consumerGroupDetail={consumerGroupDetail}\n      consumerGroupByTopic={consumerGroupByTopic}\n    />\n  );\n\n  const onClose = () => {\n    setIsExpanded(false);\n  };\n\n  const onViewConsumerGroup = (consumerGroup) => {\n    setIsExpanded(true);\n    setConsumerGroupDetail(consumerGroup);\n  };\n\n  const renderConsumerTable = () => {\n    if (consumerGroups === undefined) {\n      return (\n        <PageSection\n          className='kafka-ui-m-full-height'\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (\n      (!consumerGroups?.items?.length || consumerGroups?.items?.length < 1) &&\n      search.length < 1\n    ) {\n      return (\n        <EmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoConsumerGroups,\n          }}\n          titleProps={{\n            title: t('consumerGroup.empty_consumer_title'),\n          }}\n          emptyStateBodyProps={{\n            body: t('consumerGroup.empty_consumer_body'),\n          }}\n        />\n      );\n    } else if (consumerGroups) {\n      return (\n        <ConsumerGroupsTable\n          consumerGroups={consumerGroups?.items?.slice(\n            offset,\n            offset + perPage\n          )}\n          total={consumerGroups?.items?.length || 0}\n          page={page}\n          perPage={perPage}\n          search={search}\n          setSearch={setSearch}\n          rowDataTestId={rowDataTestId}\n          onViewConsumerGroup={onViewConsumerGroup}\n          isDrawerOpen={isExpanded}\n          refreshConsumerGroups={fetchConsumerGroups}\n          consumerGroupByTopic={consumerGroupByTopic}\n          onSort={onSort}\n          sortBy={sortBy}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <Suspense fallback={<MASLoading />}>\n      <MASDrawer\n        isExpanded={isExpanded}\n        onClose={onClose}\n        panelBodyContent={panelBodyContent}\n        drawerHeaderProps={{\n          text: { label: t('consumerGroup.consumer_group_id') },\n          title: { value: consumerGroupDetail?.groupId, headingLevel: 'h1' },\n        }}\n        data-ouia-app-id='dataPlane-consumerGroupDetails'\n        refreshConsumerGroups={fetchConsumerGroups}\n        consumerGroupDetail={consumerGroupDetail}\n      >\n        {renderConsumerTable()}\n      </MASDrawer>\n    </Suspense>\n  );\n};\n\nexport { ConsumerGroups };\nexport default ConsumerGroups;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  GroupsApi,\n  ConsumerGroupList,\n  ConsumerGroup,\n  ConsumerGroupResetOffsetParametersOffsetEnum,\n  ConsumerGroupResetOffsetResult,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nconst consumerGroupResetOffset = async (\n  config: IConfiguration | undefined,\n  consumerGroupId: string,\n  offset: ConsumerGroupResetOffsetParametersOffsetEnum,\n  topic: string,\n  partitions: number[],\n  value?: string,\n): Promise<AxiosResponse<ConsumerGroupResetOffsetResult>> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupResetOffsetResult> = await api.resetConsumerGroupOffset(\n    consumerGroupId,\n    { value, offset, topics: [{ topic, partitions }]}\n  );\n  return response;\n};\n\nexport { getConsumerGroups, deleteConsumerGroup, getConsumerGroupDetail, consumerGroupResetOffset };\n"],"names":["MASDrawer","onClose","isLoading","drawerPanelContentProps","drawerHeaderProps","isExpanded","children","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","refreshConsumerGroups","consumerGroupDetail","widths","restDrawerPanelContentProps","text","title","t","useTranslation","showModal","showResetOffsetModal","useState","isOpen","setIsOpen","dropdownItems","DropdownItem","key","onClick","consumerGroupData","consumerName","value","panelContent","DrawerPanelContent","default","MASLoading","DrawerHead","TextContent","label","Text","component","TextVariants","className","Title","headingLevel","size","TitleSizes","DrawerActions","Dropdown","onSelect","toggle","KebabToggle","onToggle","id","isPlain","position","DropdownPosition","EllipsisVIcon","DrawerCloseButton","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","ConsumerGroupDetail","lazy","ConsumerGroupsTable","ConsumerGroups","consumerGroupByTopic","topic","rowDataTestId","offset","setOffset","order","setOrder","orderKey","setOrderKey","index","undefined","direction","sortBy","setSortBy","consumerGroups","setConsumerGroups","setIsExpanded","search","setSearch","setConsumerGroupDetail","config","useContext","location","useLocation","searchParams","URLSearchParams","page","parseInt","get","perPage","useEffect","onSort","_event","fetchConsumerGroups","limit","then","response","onViewConsumerGroup","consumerGroup","Suspense","fallback","groupId","PageSection","variant","PageSectionVariants","padding","items","length","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","slice","total","isDrawerOpen","renderConsumerTable","getConsumerGroups","groupIdFilter","SortByDirection","Promise","getToken","accessToken","GroupsApi","Configuration","basePath","data","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","consumerGroupResetOffset","partitions","resetConsumerGroupOffset","topics"],"sourceRoot":""}