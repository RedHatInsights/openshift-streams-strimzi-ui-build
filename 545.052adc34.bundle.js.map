{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Utils/axios.ts"],"names":["topic","deleteTopic","updateTopic","t","useTranslation","Grid","hasGutter","GridItem","span","className","JumpLinks","isVertical","label","scrollableSelector","style","position","JumpLinksItem","key","href","PageGroup","hasOverflowScroll","id","PageSection","TextContent","Text","component","TextVariants","tabIndex","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","name","popoverBody","popoverHeader","numPartitions","replicationFactor","unit","preallocate","Divider","Button","variant","onClick","TopicDetailGroup","topicName","onUpdateTopic","getTopicListPath","onClickTopicList","onDeleteTopic","useState","topicDetail","setTopicDetail","config","useContext","deleteModal","setDeleteModal","addAlert","useEffect","response","undefined","status","AlertVariant","fetchTopicDetail","TopicDetailHead","PageSectionVariants","Tabs","activeKey","onSelect","isBox","Tab","eventKey","title","TabTitleText"],"mappings":"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","file":"545.052adc34.bundle.js","sourcesContent":["import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={2} className='grid-item-padding'>\n        <JumpLinks\n          isVertical\n          label='JUMP TO SECTION'\n          scrollableSelector='#topic-detail-view'\n          style={{ position: 'absolute' }}\n        >\n          <JumpLinksItem key={0} href='#core-configuration'>\n            Core configuration\n          </JumpLinksItem>\n          <JumpLinksItem key={1} href='#messages'>\n            Messages\n          </JumpLinksItem>\n          <JumpLinksItem key={2} href='#log'>\n            Log\n          </JumpLinksItem>\n          <JumpLinksItem key={3} href='#replication'>\n            Replication\n          </JumpLinksItem>\n          <JumpLinksItem key={4} href='#cleanup'>\n            Cleanup\n          </JumpLinksItem>\n          <JumpLinksItem key={5} href='#index'>\n            Index\n          </JumpLinksItem>\n          <JumpLinksItem key={6} href='#flush'>\n            Flush\n          </JumpLinksItem>\n          <JumpLinksItem key={7} href='#delete'>\n            Delete\n          </JumpLinksItem>\n        </JumpLinks>\n      </GridItem>\n      <GridItem span={8} className='grid-item-padding'>\n        <PageGroup hasOverflowScroll id='topic-detail-view'>\n          <PageSection>\n            <TextContent>\n              <Text\n                component={TextVariants.h2}\n                tabIndex={-1}\n                id='core-configuration'\n              >\n                Core configuration\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.coreConfigInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail name'\n              fieldLabel='Name'\n              fieldValue={topic.name}\n              popoverBody={t('createTopic.topicNameLabelBody')}\n              popoverHeader={t('createTopic.topicNameLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail partition'\n              fieldLabel='Partitions'\n              fieldValue={topic.numPartitions}\n              popoverBody={t('createTopic.partitionsLabelBody')}\n              popoverHeader={t('createTopic.partitionsLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail replicas'\n              fieldLabel='Replicas'\n              fieldValue={topic.replicationFactor}\n              popoverBody={t('createTopic.replicasLabelBody')}\n              popoverHeader={t('createTopic.replicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min-in-sync replica'\n              fieldLabel='Minimum in-sync replicas'\n              fieldValue={topic['min.insync.replicas']}\n              popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n              popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention time'\n              fieldLabel='Retention Time'\n              fieldValue={topic['retention.ms']}\n              popoverBody={t('createTopic.retentionTimeLabelBody')}\n              popoverHeader={t('createTopic.retentionTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n                Messages\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.messageSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Maximum message bytes'\n              fieldValue={topic['max.message.bytes']}\n              popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n              popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp type'\n              fieldLabel='Message timestamp type'\n              fieldValue={topic['message.timestamp.type']}\n              popoverBody={t('createTopic.messageTimestampLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp difference'\n              fieldLabel='Maximum message timestamp difference'\n              fieldValue={topic['message.timestamp.difference.max.ms']}\n              popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampDiffLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail compression type'\n              fieldLabel='Compression type'\n              fieldValue={topic['compression.type']}\n              popoverBody={t('createTopic.compressionTypeLabelBody')}\n              popoverHeader={t('createTopic.compressionTypeLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message format version'\n              fieldLabel='Message format version'\n              fieldValue={topic['log.message.format.version']}\n              popoverBody={t('createTopic.messageFormatLabelBody')}\n              popoverHeader={t('createTopic.messageFormatLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                Log\n              </Text>\n              <Text component={TextVariants.p} className='section-info-head'>\n                {t('createTopic.logSectionInfo')}\n              </Text>\n              <Text\n                component={TextVariants.small}\n                className='section-info-note'\n              >\n                {t('createTopic.logSectionInfoNote')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail cleanup policy'\n              fieldLabel='Cleanup policy'\n              fieldValue={topic['log.cleanup.policy']}\n              popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n              popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention bytes'\n              fieldLabel='Delete retention time'\n              fieldValue={topic['delete.retention.ms']}\n              popoverBody={t('createTopic.deleteRetentionLabelBody')}\n              popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n              unit={'time'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min cleanable dirty ratio'\n              fieldLabel='Minimum cleanable dirty ratio'\n              fieldValue={topic['min.cleanable.dirty.ratio']}\n              popoverBody={t('createTopic.minRatioLabelBody')}\n              popoverHeader={t('createTopic.minRatioLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min compaction lag time'\n              fieldLabel='Minimum compaction lag time'\n              fieldValue={topic['min.compaction.lag.ms']}\n              popoverBody={t('createTopic.minLagLabelBody')}\n              popoverHeader={t('createTopic.minLagLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='replication'>\n                Replication\n              </Text>\n              <Text component={TextVariants.p} className='section-info-head'>\n                {t('createTopic.replicationSectionInfo')}\n              </Text>\n              <Text\n                component={TextVariants.small}\n                className='section-info-note'\n              >\n                {t('createTopic.replicationSectionInfoNote')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail unclean leader election'\n              fieldLabel='Unclean leader election'\n              fieldValue={topic['unclean.leader.election.enable']}\n              popoverBody={t('createTopic.leaderElectionLabelBody')}\n              popoverHeader={t('createTopic.leaderElectionLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n                Cleanup\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.cleanupSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Log segment size'\n              fieldValue={topic['log.segment.bytes']}\n              popoverBody={t('createTopic.logSegmentLabelHead')}\n              popoverHeader={t('createTopic.logSegmentLabelBody')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment time'\n              fieldLabel='Segment time'\n              fieldValue={topic['segment.ms']}\n              popoverBody={t('createTopic.segementTimeLabelBody')}\n              popoverHeader={t('createTopic.segementTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment jitter time'\n              fieldLabel='Segment jitter time'\n              fieldValue={topic['segment.jitter.ms']}\n              popoverBody={t('createTopic.jitterTimeLabelBody')}\n              popoverHeader={t('createTopic.jitterTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='file delete delay'\n              fieldLabel='File delete delay'\n              fieldValue={topic['file.delete.delay.ms']}\n              popoverBody={t('createTopic.deleteDelayLabelBody')}\n              popoverHeader={t('createTopic.deleteDelayLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='preallocation log segment files'\n              fieldLabel='Preallocation log segment files'\n              fieldValue={topic.preallocate}\n              popoverBody={t('createTopic.preallocateLabelBody')}\n              popoverHeader={t('createTopic.preallocateLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                Index\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.indexSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='index interval size'\n              fieldLabel='Index interval size'\n              fieldValue={topic['index.interval.bytes']}\n              popoverBody={t('createTopic.indexIntervalLabelBody')}\n              popoverHeader={t('createTopic.indexIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment index size'\n              fieldLabel='Segment index size'\n              fieldValue={topic['segment.index.bytes']}\n              popoverBody={t('createTopic.segementIntervalLabelBody')}\n              popoverHeader={t('createTopic.segementIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                Flush\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.flushSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval messages'\n              fieldLabel='Flush interval messages'\n              fieldValue={topic['flush.messages']}\n              popoverBody={t('createTopic.intervalMessagesLabelBody')}\n              popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval time'\n              fieldLabel='Flush interval time'\n              fieldValue={topic['flush.ms']}\n              popoverBody={t('createTopic.intervalTimeLabelBody')}\n              popoverHeader={t('createTopic.intervalTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <Divider />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                Delete topic (irreversible)\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.deleteTopicInfo')}\n              </Text>\n            </TextContent>\n\n            <Button\n              variant='danger'\n              className='section-margin'\n              onClick={deleteTopic}\n            >\n              Delete topic\n            </Button>\n          </PageSection>\n        </PageGroup>\n      </GridItem>\n      <GridItem span={2} className='grid-item-padding'>\n        <Button variant='primary' onClick={updateTopic}>\n          Edit properties\n        </Button>\n      </GridItem>\n    </Grid>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic } from '../../../Contexts/Topic';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupByTopicList } from './Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\nimport { isAxiosError } from '../../../Utils/axios';\nimport { AlertContext } from '../../../Contexts/Alert';\n\nexport type TopicDetailGroupProps = {\n  topicName: string;\n  onUpdateTopic: () => void;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onDeleteTopic: () => void;\n};\n\n// TODO: Remove this mock, fetch it from server.\nconst topic: AdvancedTopic = {\n  name: 'SampleTopic2345',\n  numPartitions: '52',\n  replicationFactor: '35',\n  'min.insync.replicas': '78',\n  'retention.ms': '78',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '50',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '4',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': 'Producer',\n  'log.cleanup.policy': 'Delete',\n  'log.retention.bytes': '-1',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '78',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': 'false',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '789',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '4',\n  'min.compaction.lag.ms': '58',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '6048000',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '0',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '6000',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: 'true',\n  'index.interval.bytes': '4096',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '10847560',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '783945',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '3894949',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicDetailGroup: React.FC<TopicDetailGroupProps> = ({\n  topicName,\n  onUpdateTopic,\n  getTopicListPath,\n  onClickTopicList,\n  onDeleteTopic,\n}) => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(topic);\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const { addAlert } = useContext(AlertContext);\n\n  const fetchTopicDetail = async (topicName: string) => {\n    try {\n      const response = await getTopicDetail(topicName, config);\n      setTopicDetail(response);\n    } catch (e) {\n      if (isAxiosError(e)) {\n        if (e.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert(`Topic ${topicName} does not exist`, AlertVariant.danger);\n          onClickTopicList();\n        }\n      }\n    }\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        getTopicListPath={getTopicListPath}\n        onClickTopicList={onClickTopicList}\n      />\n      <PageSection variant={PageSectionVariants.light}>\n        <Tabs\n          activeKey={1}\n          onSelect={() => {\n            return;\n          }}\n          isBox={false}\n          className='tab-padding'\n        >\n          <Tab\n            eventKey={0}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupByTopicList />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n            <TopicDetailView\n              topic={topicDetail}\n              deleteTopic={deleteTopic}\n              updateTopic={onUpdateTopic}\n            />\n          </Tab>\n        </Tabs>\n        {deleteModal && (\n          <DeleteTopics\n            topicName={topicName}\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n            onDeleteTopic={onDeleteTopic}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"sourceRoot":""}