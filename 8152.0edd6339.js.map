{"version":3,"file":"8152.0edd6339.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-styles/dist/esm/index.js","webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/components/MASToolbar/MASToolbar.tsx","webpack://kafka-ui/./src/components/MainViewHeader/MainViewHeader.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SolidLabel.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/Cells.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsToolbar.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTable.tsx","webpack://kafka-ui/./src/modules/Permissions/pages/PermissionsTable/PermissionsTableView.tsx","webpack://kafka-ui/./src/modules/Permissions/utils.ts","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["/** Joins args into a className string\n *\n * @param {any} args list of objects, string, or arrays to reduce\n */\nexport function css(...args) {\n    // Adapted from https://github.com/JedWatson/classnames/blob/master/index.js\n    const classes = [];\n    const hasOwn = {}.hasOwnProperty;\n    args.filter(Boolean).forEach((arg) => {\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n        }\n        else if (Array.isArray(arg) && arg.length) {\n            const inner = css(...arg);\n            if (inner) {\n                classes.push(inner);\n            }\n        }\n        else if (argType === 'object') {\n            for (const key in arg) {\n                if (hasOwn.call(arg, key) && arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    });\n    return classes.join(' ');\n}\n//# sourceMappingURL=index.js.map","import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData, RowWrapperProps } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (\n  rowWrapperProps: RowWrapperProps\n): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps || {};\n  const { isExpanded, originalData } = row || {};\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={typeof trRef === 'function' ? undefined : trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event) => onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: React.ReactElement;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: React.ReactNode;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const {\n    id,\n    clearAllFilters,\n    collapseListedFiltersBreakpoint = 'md',\n    inset,\n    ...restToolbarProps\n  } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          {toggleGroupProps && (\n            <ToolbarToggleGroup\n              {...toggleGroupProps}\n              toggleIcon={toggleGroupProps.toggleIcon}\n            >\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const {\n              key = 'mas',\n              variant,\n              className,\n              id,\n              alignment,\n              item,\n              ...restItemProps\n            } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  KebabToggle,\n  Level,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabsProps,\n  TabTitleText,\n  Title,\n} from '@patternfly/react-core';\nimport { useFederated } from '@app/contexts';\n\nexport type MainViewHeaderProps = {\n  activeTabKey: number;\n};\n\nconst MainViewHeader: React.FC<MainViewHeaderProps> = ({ activeTabKey }) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const history = useHistory();\n\n  const { kafkaPageLink, kafkaName, handleInstanceDrawer, onDeleteInstance } =\n    useFederated() || {};\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelectKebabOption = (activeTab: string) => {\n    handleInstanceDrawer && handleInstanceDrawer(true, activeTab);\n  };\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelectTab: TabsProps['onSelect'] = (_, tabKey: string | number) => {\n    let redirectPath;\n    switch (tabKey) {\n      case 1:\n        redirectPath = 'dashboard';\n        break;\n      case 2:\n        redirectPath = 'topics';\n        break;\n      case 3:\n        redirectPath = 'consumer-groups';\n        break;\n      case 4:\n        redirectPath = 'acls';\n        break;\n      default:\n        redirectPath = 'dashboard';\n        break;\n    }\n\n    history.push(redirectPath);\n  };\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>\n        {t('common.kafka_instance')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      key='view-kafka'\n      onClick={() => onSelectKebabOption('details')}\n    >\n      {t('common.view_instance')}\n    </DropdownItem>,\n    <DropdownItem\n      key='connect-kafka'\n      onClick={() => onSelectKebabOption('connection')}\n    >\n      {t('common.view_connection')}\n    </DropdownItem>,\n    <DropdownItem key='delete-kafka' onClick={onDeleteInstance}>\n      {t('common.delete_instance')}\n    </DropdownItem>,\n  ];\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <Title headingLevel='h1'>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </Title>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id='toggle-data-plane' />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          />\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n        className='pf-c-page__main-tabs'\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={onSelectTab}\n          data-testid='pageKafka-tabProperties'\n          className='pf-m-page-insets'\n        >\n          <Tab\n            title={<TabTitleText>{t('dashboard.dashboard')}</TabTitleText>}\n            eventKey={1}\n            data-testid='pageKafka-tabDashboard'\n            id='dashboard-tab-section'\n            aria-label={t('dashboard.dashboard')}\n            tabContentId='kafka-ui-TabcontentDashboard'\n          />\n          <Tab\n            title={<TabTitleText>{t('topic.topics')}</TabTitleText>}\n            eventKey={2}\n            data-testid='pageKafka-tabTopics'\n            id='topics-tab-section'\n            aria-label={t('topic.topics')}\n            tabContentId='kafka-ui-TabcontentTopicsList'\n          />\n          <Tab\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            eventKey={3}\n            data-testid='pageKafka-tabConsumers'\n            id='consumer-groups-tab-section'\n            aria-label={t('consumerGroup.consumer_groups')}\n            tabContentId='kafka-ui-TabcontentConsumersList'\n          />\n          <Tab\n            title={<TabTitleText>{t('permission.tab.label')}</TabTitleText>}\n            eventKey={4}\n            data-testid='pageKafka-tabPermissions'\n            id='permissions-tab-section'\n            aria-label={t('permission.tab.label')}\n            tabContentId='kafka-ui-TabcontentPermissions'\n          />\n        </Tabs>\n      </PageSection>\n    </>\n  );\n};\n\nexport { MainViewHeader };\n","import React from 'react';\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelProps } from '@patternfly/react-core';\nimport './SolidLabel.css';\n\nexport type SolidLabelProps = {\n  variant: AclResourceType;\n};\n\nexport const SolidLabel: React.VFC<SolidLabelProps> = ({ variant }) => {\n  const variantSwitch = (): {\n    labelColor: LabelProps['color'];\n    content: string;\n  } => {\n    switch (variant) {\n      case AclResourceType.Group:\n        return { labelColor: 'green', content: 'G' };\n      case AclResourceType.Cluster:\n        return { labelColor: 'grey', content: 'KI' };\n      case AclResourceType.Topic:\n        return { labelColor: 'blue', content: 'T' };\n      case AclResourceType.TransactionalId:\n        return { labelColor: 'orange', content: 'TI' };\n    }\n  };\n  const { labelColor, content } = variantSwitch();\n  return (\n    <Label color={labelColor} className={`mas-m-solid`}>\n      {content}\n    </Label>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { ICell } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport {\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelGroup, Tooltip } from '@patternfly/react-core';\nimport { EnhancedAclBinding } from '@app/services/acls';\nimport {\n  PrincipalType,\n  usePrincipals,\n  useAuth,\n} from '@rhoas/app-services-ui-shared';\nimport { sentenceCase } from 'sentence-case';\nimport { displayName } from '@app/modules/Permissions/utils';\nimport { useFederated } from '@app/contexts';\nimport { SolidLabel } from '@app/modules/Permissions/components/ManagePermissionsDialog/SolidLabel';\n\nexport type CellBuilder<T extends EnhancedAclBinding> = (\n  item: T,\n  row: number\n) => ICell | string;\n\nconst AllAccountsPrincipal: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  return (\n    <div>\n      <Label variant='outline'>{t('permission.table.all_accounts')}</Label>\n    </div>\n  );\n};\n\ntype PrincipalWithTooltipProps = {\n  acl: EnhancedAclBinding;\n};\nconst PrincipalWithTooltip: React.FunctionComponent<\n  PrincipalWithTooltipProps\n> = ({ acl }) => {\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n  const auth = useAuth();\n  const { kafka } = useFederated() || {};\n\n  const principals = usePrincipals()\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const locatedPrincipals = principals.filter((p) => p.id === acl.principal);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  if (locatedPrincipals.length === 1) {\n    if (locatedPrincipals[0].principalType === PrincipalType.ServiceAccount) {\n      return (\n        <Tooltip\n          content={\n            <div>\n              Type: {locatedPrincipals[0].principalType} <br />\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {' '}\n            {acl.principal} <InfoCircleIcon color='grey' />\n          </span>\n        </Tooltip>\n      );\n    } else {\n      return (\n        <Tooltip\n          content={\n            <div>\n              Type: {locatedPrincipals[0].principalType} <br />\n              Name: {locatedPrincipals[0].displayName} <br />\n              Email: {locatedPrincipals[0].emailAddress}\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {' '}\n            {acl.principal} <InfoCircleIcon color='grey' />\n          </span>\n        </Tooltip>\n      );\n    }\n  }\n  return <span> {acl.principal}</span>;\n};\n\nexport const principalCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  if (item.principal === '*') {\n    return {\n      title: <AllAccountsPrincipal />,\n      props: {},\n    };\n  } else {\n    return {\n      title: <PrincipalWithTooltip acl={item} />,\n      props: {},\n    };\n  }\n};\n\nexport const permissionOperationCell: CellBuilder<EnhancedAclBinding> = (\n  item\n) => {\n  return {\n    title: (\n      <LabelGroup>\n        {item.permission && (\n          <Label\n            variant='outline'\n            color={\n              item.permission === AclPermissionType.Deny ? 'red' : undefined\n            }\n          >\n            {sentenceCase(item.permission)}\n          </Label>\n        )}\n        {item.operation && (\n          <Label variant='outline'>{sentenceCase(item.operation)}</Label>\n        )}\n      </LabelGroup>\n    ),\n    props: {},\n  } as ICell;\n};\n\nexport const resourceCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  const PatternType: React.FunctionComponent = () => {\n    const { t } = useTranslation(['kafkaTemporaryFixMe']);\n    if (item.patternType === AclPatternType.Prefixed) {\n      return t('permission.cells.pattern_type_prefixed');\n    } else {\n      return t('permission.cells.pattern_type_literal');\n    }\n  };\n  if (item.resourceType === AclResourceType.Cluster) {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)}\n        </div>\n      ),\n    };\n  } else {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)} <PatternType /> \"{item.resourceName}\"\n        </div>\n      ),\n    };\n  }\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  KebabToggleProps,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/components';\n\ntype PermissionsToolbarKebabProps = {\n  onDeleteSelected: () => void;\n  deleteSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbarKebab: React.FunctionComponent<\n  PermissionsToolbarKebabProps\n> = ({ deleteSelectedEnabled, onDeleteSelected }) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle: KebabToggleProps['onToggle'] = (v) => {\n    setIsOpen(v);\n  };\n\n  const onSelect = () => {\n    setIsOpen((prevState) => !prevState);\n    onFocus();\n  };\n\n  const onFocus = () => {\n    const element = document.getElementById('permissions-toolbar-kebab-toggle');\n    element?.focus();\n  };\n\n  const dropdownItems = [\n    <DropdownItem\n      key='delete_selected'\n      onClick={onDeleteSelected}\n      isDisabled={!deleteSelectedEnabled}\n    >\n      {t('permission.table.delete_selected')}\n    </DropdownItem>,\n  ];\n  return (\n    <Dropdown\n      onSelect={onSelect}\n      toggle={\n        <KebabToggle\n          onToggle={onToggle}\n          id='permissions-toolbar-kebab-toggle'\n        />\n      }\n      isOpen={isOpen}\n      isPlain\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nexport type PermissionsToolbarProps = {\n  total: number;\n  page: number;\n  perPage: number;\n  setFilteredValue: (value: string) => void;\n  filteredValue: string;\n  openManagePermissions?: () => void;\n  onDeleteSelected: () => void;\n  deletedSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbar: React.FC<PermissionsToolbarProps> = ({\n  total = 0,\n  page,\n  perPage,\n  setFilteredValue,\n  openManagePermissions,\n  onDeleteSelected,\n  deletedSelectedEnabled,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const onClear = () => {\n    setFilteredValue('');\n  };\n\n  const toggleGroupItems = <></>;\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          id='permissions-toolbar-manage-permissions-button'\n          data-testid='actionManagePermissions'\n          onClick={openManagePermissions}\n        >\n          {t('permission.table.manage_button')}\n        </Button>\n      ),\n    },\n    {\n      item: (\n        <PermissionsToolbarKebab\n          deleteSelectedEnabled={deletedSelectedEnabled}\n          onDeleteSelected={onDeleteSelected}\n        />\n      ),\n    },\n  ];\n\n  if (total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='permissions-pagination-options-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.minimal_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n          isCompact={true}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: '', breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { PermissionsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EmptyState, MASEmptyStateVariant } from '@app/components';\n\nexport type PermissionsTableEmptyStateProps = {\n  openManagePermissions?: () => void;\n};\nexport const PermissionsTableEmptyState: React.FunctionComponent<\n  PermissionsTableEmptyStateProps\n> = ({ openManagePermissions }) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  return (\n    <EmptyState\n      emptyStateProps={{\n        variant: MASEmptyStateVariant.NoResult,\n      }}\n      titleProps={{\n        title: t('permission.table.no_results_title'),\n      }}\n      emptyStateBodyProps={{\n        body: t('permission.table.no_results_body'),\n      }}\n      buttonProps={{\n        title: t('permission.table.manage_permissions_button'),\n        onClick: openManagePermissions,\n        'data-testid': 'actionManagePermissions',\n      }}\n    />\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PaginationVariant } from '@patternfly/react-core';\nimport {\n  IActionsResolver,\n  ICell,\n  OnSelect,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { PermissionsToolbar } from './PermissionsToolbar';\nimport {\n  AclFilter,\n  convertEnum,\n  EnhancedAclBinding,\n  EnhancedAclBindingListPage,\n  PermissionsService,\n} from '@app/services/acls';\nimport { useTimeout } from '@app/hooks';\nimport {\n  permissionOperationCell,\n  principalCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport { PermissionsTableEmptyState } from '@app/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState';\nimport {\n  AclOperationFilter,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\nimport { ModalType, useModal } from '@rhoas/app-services-ui-shared';\nimport { MASPagination, MASTable, usePaginationParams } from '@app/components';\n\nexport type PermissionsTableProps = {\n  permissionsService: PermissionsService;\n  kafkaName?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n};\n\nconst PermissionsTable: React.FC<PermissionsTableProps> = ({\n  permissionsService,\n  kafkaName,\n  topicNames,\n  consumerGroupIds,\n}) => {\n  type SelectableEnhancedAclBinding = EnhancedAclBinding & {\n    selected: boolean;\n  };\n\n  type SelectableEnhancedAclBindingListPage = Omit<\n    EnhancedAclBindingListPage,\n    'items'\n  > & {\n    items?: SelectableEnhancedAclBinding[];\n  };\n\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [filteredValue, setFilteredValue] = useState<string>('');\n  const { showModal } = useModal<ModalType.KafkaManagePermissions>() || {};\n  const [aclPage, setAclPage] = useState<\n    SelectableEnhancedAclBindingListPage | undefined\n  >();\n  const { page, perPage } = usePaginationParams() || {};\n\n  const fetchPermissions = useCallback(async () => {\n    try {\n      const response = await permissionsService.getPermissions(\n        {\n          resourceName: filteredValue !== '' ? filteredValue : undefined,\n        } as AclFilter,\n        perPage,\n        page\n      );\n      setAclPage((prevState) => {\n        return {\n          items: response.items?.map((value) => {\n            const found = prevState?.items?.filter(\n              (p) => p.hash() === value.hash()\n            );\n            const selected =\n              (found?.length !== 0 && found?.every((p) => p.selected)) || false;\n            return {\n              selected,\n              ...value,\n            };\n          }),\n          page: response.page,\n          size: response.size,\n          total: response.total,\n        };\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  }, [filteredValue, page, perPage, permissionsService]);\n\n  useEffect(() => {\n    fetchPermissions();\n  }, [fetchPermissions]);\n\n  useEffect(() => {\n    fetchPermissions();\n  }, [fetchPermissions, page, perPage]);\n\n  useTimeout(() => fetchPermissions(), 5000);\n\n  const tableColumns = [\n    { title: t('permission.table.account_column_title') },\n    { title: t('permission.table.permissions_column_title') },\n    { title: t('permission.table.resource_column_title') },\n    { title: '' },\n  ] as ICell[];\n\n  const cells = [principalCell, permissionOperationCell, resourceCell];\n\n  const onSelect: OnSelect = (_, isSelected, rowIndex) => {\n    if (rowIndex === -1) {\n      setAclPage((prevState) => {\n        if (prevState) {\n          return {\n            items: prevState?.items?.map((p) => {\n              p.selected = isSelected;\n              return p;\n            }),\n            ...prevState,\n          };\n        }\n        return;\n      });\n    } else {\n      setAclPage((prevState) => {\n        if (prevState) {\n          const items = prevState?.items;\n          if (items !== undefined) {\n            items[rowIndex].selected = isSelected;\n          }\n          return {\n            items,\n            ...prevState,\n          };\n        }\n        return;\n      });\n    }\n  };\n\n  const openManagePermissions = (selectedAccountId?: string) => {\n    const onSave = async () => {\n      await fetchPermissions();\n    };\n\n    showModal &&\n      showModal(ModalType.KafkaManagePermissions, {\n        selectedAccountId,\n        kafkaName,\n        acls: aclPage?.items || [],\n        topicNames,\n        consumerGroupIds,\n        onSave,\n      });\n  };\n\n  const onDeleteSelected = () => {\n    aclPage?.items\n      ?.filter((item) => item.selected)\n      .forEach((value) => {\n        permissionsService\n          .deletePermission({\n            resourceName: value.resourceName,\n            patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n            permissionType: convertEnum(\n              value.permission,\n              AclPermissionTypeFilter\n            ),\n            resourceType: convertEnum(\n              value.resourceType,\n              AclResourceTypeFilter\n            ),\n            operation: convertEnum(value.operation, AclOperationFilter),\n            principal: `User:${value.principal}`,\n          })\n          .then(() => fetchPermissions());\n      });\n    fetchPermissions();\n  };\n\n  const onDelete = (rowIndex?: number) => {\n    if (rowIndex !== undefined && aclPage?.items !== undefined) {\n      const value = aclPage.items[rowIndex];\n      permissionsService\n        .deletePermission({\n          resourceName: value.resourceName,\n          patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n          permissionType: convertEnum(\n            value.permission,\n            AclPermissionTypeFilter\n          ),\n          resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n          operation: convertEnum(value.operation, AclOperationFilter),\n          principal: `User:${value.principal}`,\n        })\n        .then(() => fetchPermissions());\n    }\n  };\n\n  const actionResolver: IActionsResolver = (_, { rowIndex }) => {\n    const resolver = [\n      {\n        title: t('permission.table.row_kebab.manage'),\n        ['data-testid']: 'permission-table-row-manage',\n        onClick: () => {\n          if (aclPage?.items !== undefined && rowIndex !== undefined) {\n            openManagePermissions(aclPage.items[rowIndex].principal);\n          }\n        },\n      },\n      {\n        title: t('permission.table.row_kebab.delete'),\n        ['data-testid']: 'permission-table-row-delete',\n        onClick: () => onDelete(rowIndex),\n      },\n    ];\n    return resolver;\n  };\n\n  if (\n    aclPage === undefined ||\n    aclPage.items === undefined ||\n    aclPage.items.length === 0\n  ) {\n    return (\n      <PermissionsTableEmptyState\n        openManagePermissions={() => openManagePermissions()}\n      />\n    );\n  }\n\n  return (\n    <>\n      <PermissionsToolbar\n        total={aclPage.total || 0}\n        page={aclPage.page || 1}\n        perPage={aclPage.size || 10}\n        openManagePermissions={() => openManagePermissions()}\n        setFilteredValue={setFilteredValue}\n        filteredValue={filteredValue}\n        deletedSelectedEnabled={aclPage.items.some((item) => item.selected)}\n        onDeleteSelected={onDeleteSelected}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: aclPage.items.map((item, row) => {\n            return {\n              cells: cells.map((f) => f(item, row)),\n              selected: item.selected,\n              originalData: item,\n            };\n          }),\n          'aria-label': t('permission.table.permission_list_table'),\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          onSelect,\n          actionResolver,\n          canSelectAll: false,\n        }}\n        rowDataTestId={'tablePermissions-row'}\n      />\n      <MASPagination\n        widgetId='permissions-pagination-options-menu-bottom'\n        itemCount={aclPage.total || 0}\n        variant={PaginationVariant.bottom}\n        page={aclPage.page}\n        perPage={aclPage.size}\n        titles={{\n          paginationTitle: t('common.full_pagination'),\n          perPageSuffix: t('common.per_page_suffix'),\n          toFirstPage: t('common.to_first_page'),\n          toPreviousPage: t('common.to_previous_page'),\n          toLastPage: t('common.to_last_page'),\n          toNextPage: t('common.to_next_page'),\n          optionsToggle: t('common.options_toggle'),\n          currPage: t('common.curr_page'),\n        }}\n      />\n    </>\n  );\n};\nexport { PermissionsTable };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { usePermissionsService } from '@app/services/acls';\nimport { PermissionsTable } from '@app/modules/Permissions/components/PermissionsTable';\nimport { ConfigContext } from '@app/contexts';\nimport { getConsumerGroups, getTopics } from '@app/services';\n\nexport type PermissionsTableViewProps = {\n  kafkaName?: string;\n};\nexport const PermissionsTableView: React.FunctionComponent<\n  PermissionsTableViewProps\n> = ({ kafkaName }) => {\n  const config = useContext(ConfigContext);\n\n  const permissionsService = usePermissionsService(config);\n  const [topicNames, setTopicNames] = useState<string[]>([]);\n  const [consumerGroupIds, setConsumerGroupNames] = useState<string[]>([]);\n\n  useEffect(() => {\n    const fetchTopicNames = async () => {\n      const response = await getTopics(config);\n      const topicNames = response.items?.map((topic) => topic.name || '');\n      setTopicNames(topicNames || []);\n    };\n    fetchTopicNames();\n  }, [config]);\n\n  useEffect(() => {\n    const fetchConsumerGroupNames = async () => {\n      const response = await getConsumerGroups(config);\n      const consumerGroupNames = response.items?.map(\n        (consumerGroup) => consumerGroup.groupId || ''\n      );\n      setConsumerGroupNames(consumerGroupNames || []);\n    };\n    fetchConsumerGroupNames();\n  }, [config]);\n\n  //const permissionsService = createMockPermissionsService();\n\n  return (\n    <PermissionsTable\n      permissionsService={permissionsService}\n      kafkaName={kafkaName}\n      topicNames={topicNames}\n      consumerGroupIds={consumerGroupIds}\n    />\n  );\n};\n\nexport default PermissionsTableView;\n","import { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { sentenceCase } from 'sentence-case';\n\nexport const displayName = (resourceType: AclResourceType): string => {\n  switch (resourceType) {\n    case AclResourceType.Group:\n      return 'Consumer group';\n      break;\n    case AclResourceType.Topic:\n      return 'Topic';\n      break;\n    case AclResourceType.Cluster:\n      return 'Kafka instance';\n      break;\n    case AclResourceType.TransactionalId:\n      return 'Transactional ID';\n      break;\n    default:\n      return sentenceCase(resourceType);\n      break;\n  }\n};\n","import { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type EnhancedAclBinding = AclBinding & {\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const usePermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = async (\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage> => {\n    const accessToken = await config?.getToken();\n\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n      filter.resourceType,\n      filter.resourceName,\n      filter.patternType,\n      filter.principal,\n      filter.operation,\n      filter.permissionType,\n      page,\n      size\n    );\n    return enhanceAclBindingListPage(response);\n  };\n\n  const addPermission = async (acl: AclBinding) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.createAcl(acl);\n  };\n\n  const deletePermission = async (acl: AclFilter) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.deleteAcls(\n      acl.resourceType,\n      acl.resourceName,\n      acl.patternType,\n      acl.principal,\n      acl.operation,\n      acl.permissionType\n    );\n  };\n\n  const getResourceOperations = async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return await api\n      .getAclResourceOperations()\n      .then((response) => response.data);\n  };\n\n  return {\n    getPermissions,\n    addPermission,\n    deletePermission,\n    getResourceOperations,\n  } as PermissionsService;\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        return {\n          ...item,\n          // Strip out the \"User:\" prefix\n          principal: item.principal.substring(5),\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["css","args","classes","hasOwn","hasOwnProperty","filter","Boolean","forEach","arg","argType","push","Array","isArray","length","inner","key","call","join","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","rowDataTestId","useContext","trRef","className","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","undefined","rowId","hidden","onClick","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","children","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","id","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","map","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","MainViewHeader","activeTabKey","useTranslation","history","useHistory","kafkaPageLink","kafkaName","handleInstanceDrawer","onDeleteInstance","isOpen","setIsOpen","useState","onSelectKebabOption","activeTab","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","t","isActive","dropdownItems","DropdownItem","PageSection","PageSectionVariants","Level","Title","headingLevel","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","DropdownPosition","padding","default","Tabs","activeKey","_","tabKey","redirectPath","Tab","title","TabTitleText","eventKey","tabContentId","SolidLabel","labelColor","content","AclResourceType","variantSwitch","Label","color","AllAccountsPrincipal","PrincipalWithTooltip","acl","currentlyLoggedInuser","setCurrentlyLoggedInuser","auth","useAuth","kafka","locatedPrincipals","usePrincipals","getAllPrincipals","p","owner","principal","useEffect","username","getUsername","principalType","PrincipalType","Tooltip","InfoCircleIcon","displayName","emailAddress","principalCell","permissionOperationCell","LabelGroup","permission","AclPermissionType","sentenceCase","operation","resourceCell","PatternType","patternType","AclPatternType","resourceType","resourceName","PermissionsToolbarKebab","deleteSelectedEnabled","onDeleteSelected","onFocus","element","document","getElementById","focus","isDisabled","prevState","v","PermissionsToolbar","total","page","perPage","setFilteredValue","openManagePermissions","deletedSelectedEnabled","Button","MASPagination","widgetId","itemCount","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","isCompact","xl","breakpoint","PermissionsTableEmptyState","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","buttonProps","PermissionsTable","permissionsService","topicNames","consumerGroupIds","filteredValue","showModal","useModal","aclPage","setAclPage","fetchPermissions","useCallback","response","getPermissions","items","found","hash","selected","every","size","err","tableColumns","selectedAccountId","ModalType","acls","onSave","some","deletePermission","AclPatternTypeFilter","permissionType","AclPermissionTypeFilter","AclResourceTypeFilter","AclOperationFilter","then","f","TableVariant","isSelected","resolver","onDelete","canSelectAll","PaginationVariant","PermissionsTableView","config","setTopicNames","setConsumerGroupNames","topic","name","consumerGroupNames","consumerGroup","groupId","convertEnum","Object","entries","find","toString","usePermissionsService","accessToken","getToken","api","AclsApi","Configuration","basePath","getAcls","enhanceAclBindingListPage","addPermission","createAcl","deleteAcls","getResourceOperations","getAclResourceOperations","data","substring","sort","a","b","localeCompare","getPermissionsTypes","values","getOperations","AclOperation","getResourceTypes","getPatternTypes"],"sourceRoot":""}