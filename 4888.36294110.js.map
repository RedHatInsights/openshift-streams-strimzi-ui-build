{"version":3,"file":"4888.36294110.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SolidLabel.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/Cells.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SelectAccount.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/acls.ts","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateSelect.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/OperationCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/PermissionTypeCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/ResourceType.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/PatternTypeCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreateTypeahead.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/ResourceCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/RemoveButtonCell.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/ExistingAclTable.tsx","webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/PreCancelModal.tsx","webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/ManagePermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/utils.ts","webpack://kafka-ui/./src/modules/Topics/utils/topicNameValidation.ts","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["import { FormGroup, Popover, ValidatedOptions } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\nexport type FormGroupWithPopoverProps = {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel?: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n  validated?: ValidatedOptions;\n  helperText?: string;\n  helperTextInvalid?: string;\n  isRequired?: boolean;\n};\n\nexport const FormGroupWithPopover: React.FC<FormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n  validated,\n  helperText,\n  helperTextInvalid,\n  isRequired,\n}) => {\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      validated={validated}\n      helperText={helperText}\n      helperTextInvalid={helperTextInvalid}\n      isRequired={isRequired}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={(event) => event.preventDefault()}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData, RowWrapperProps } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (\n  rowWrapperProps: RowWrapperProps\n): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps || {};\n  const { isExpanded, originalData } = row || {};\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={typeof trRef === 'function' ? undefined : trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event) => onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n  ouiaId?: string;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n  ouiaId,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n        ouiaId={ouiaId}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelProps } from '@patternfly/react-core';\nimport './SolidLabel.css';\n\nexport type SolidLabelProps = {\n  variant: AclResourceType;\n};\n\nexport const SolidLabel: React.VFC<SolidLabelProps> = ({ variant }) => {\n  const variantSwitch = (): {\n    labelColor: LabelProps['color'];\n    content: string;\n  } => {\n    switch (variant) {\n      case AclResourceType.Group:\n        return { labelColor: 'green', content: 'G' };\n      case AclResourceType.Cluster:\n        return { labelColor: 'grey', content: 'KI' };\n      case AclResourceType.Topic:\n        return { labelColor: 'blue', content: 'T' };\n      case AclResourceType.TransactionalId:\n        return { labelColor: 'orange', content: 'TI' };\n    }\n  };\n  const { labelColor, content } = variantSwitch();\n  return (\n    <Label color={labelColor} className={`mas-m-solid`}>\n      {content}\n    </Label>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { ICell } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport {\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelGroup, Tooltip } from '@patternfly/react-core';\nimport { EnhancedAclBinding } from '@app/services/acls';\nimport {\n  PrincipalType,\n  usePrincipals,\n  useAuth,\n} from '@rhoas/app-services-ui-shared';\nimport { sentenceCase } from 'sentence-case';\nimport { displayName } from '@app/modules/Permissions/utils';\nimport { useFederated } from '@app/contexts';\nimport { SolidLabel } from '@app/modules/Permissions/components/ManagePermissionsDialog/SolidLabel';\n\nexport type CellBuilder<T extends EnhancedAclBinding> = (\n  item: T,\n  row: number\n) => ICell | string;\n\nconst AllAccountsPrincipal: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  return (\n    <div>\n      <Label variant='outline'>{t('permission.table.all_accounts')}</Label>\n    </div>\n  );\n};\n\ntype PrincipalWithTooltipProps = {\n  acl: EnhancedAclBinding;\n};\nconst PrincipalWithTooltip: React.FunctionComponent<\n  PrincipalWithTooltipProps\n> = ({ acl }) => {\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n  const auth = useAuth();\n  const { kafka } = useFederated() || {};\n\n  const principals = usePrincipals()\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const locatedPrincipals = principals.filter((p) => p.id === acl.principal);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  if (locatedPrincipals.length === 1) {\n    if (locatedPrincipals[0].principalType === PrincipalType.ServiceAccount) {\n      return (\n        <Tooltip\n          content={\n            <div>\n              Type: {locatedPrincipals[0].principalType} <br />\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {' '}\n            {acl.principal} <InfoCircleIcon color='grey' />\n          </span>\n        </Tooltip>\n      );\n    } else {\n      return (\n        <Tooltip\n          content={\n            <div>\n              Type: {locatedPrincipals[0].principalType} <br />\n              Name: {locatedPrincipals[0].displayName} <br />\n              Email: {locatedPrincipals[0].emailAddress}\n            </div>\n          }\n        >\n          <span tabIndex={0}>\n            {' '}\n            {acl.principal} <InfoCircleIcon color='grey' />\n          </span>\n        </Tooltip>\n      );\n    }\n  }\n  return <span> {acl.principal}</span>;\n};\n\nexport const principalCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  if (item.principal === '*') {\n    return {\n      title: <AllAccountsPrincipal />,\n      props: {},\n    };\n  } else {\n    return {\n      title: <PrincipalWithTooltip acl={item} />,\n      props: {},\n    };\n  }\n};\n\nexport const permissionOperationCell: CellBuilder<EnhancedAclBinding> = (\n  item\n) => {\n  return {\n    title: (\n      <LabelGroup>\n        {item.permission && (\n          <Label\n            variant='outline'\n            color={\n              item.permission === AclPermissionType.Deny ? 'red' : undefined\n            }\n          >\n            {sentenceCase(item.permission)}\n          </Label>\n        )}\n        {item.operation && (\n          <Label variant='outline'>{sentenceCase(item.operation)}</Label>\n        )}\n      </LabelGroup>\n    ),\n    props: {},\n  } as ICell;\n};\n\nexport const resourceCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  const PatternType: React.FunctionComponent = () => {\n    const { t } = useTranslation(['kafkaTemporaryFixMe']);\n    if (item.patternType === AclPatternType.Prefixed) {\n      return t('permission.cells.pattern_type_prefixed');\n    } else {\n      return t('permission.cells.pattern_type_literal');\n    }\n  };\n  if (item.resourceType === AclResourceType.Cluster) {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)}\n        </div>\n      ),\n    };\n  } else {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)} <PatternType /> \"{item.resourceName}\"\n        </div>\n      ),\n    };\n  }\n};\n","import React, { useState } from 'react';\nimport { Principal, PrincipalType } from '@rhoas/app-services-ui-shared';\nimport { useTranslation } from 'react-i18next';\nimport { FormGroupWithPopover } from '@app/components';\nimport {\n  Divider,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectProps,\n  SelectVariant,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\n\nexport type SelectAccountProps = {\n  id: Validated<string | undefined>;\n  setId: React.Dispatch<React.SetStateAction<Validated<string | undefined>>>;\n  initialOptions: Principal[];\n  setEscapeClosesModal: (closes: boolean) => void;\n};\n\nexport const SelectAccount: React.VFC<SelectAccountProps> = ({\n  setId,\n  id,\n  initialOptions,\n  setEscapeClosesModal,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle: SelectProps['onToggle'] = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setId({ value: undefined, validated: undefined });\n    setIsOpen(false);\n  };\n\n  const onSelect: SelectProps['onSelect'] = (_, selection, isPlaceholder) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setId(() => {\n        if (selection === '') {\n          return {\n            value: selection as string,\n            validated: ValidatedOptions.error,\n            errorMessage: t(\n              'permission.manage_permissions_dialog.must_select_account_error'\n            ),\n          };\n        } else {\n          return {\n            validated: ValidatedOptions.default,\n            value: selection as string,\n          };\n        }\n      });\n    }\n    setIsOpen(false);\n  };\n\n  const options = [\n    <SelectGroup key='all_accounts_group'>\n      <SelectOption\n        key='*'\n        value='*'\n        description={t(\n          'permission.manage_permissions_dialog.all_accounts_description'\n        )}\n      >\n        {t('permission.manage_permissions_dialog.all_accounts_title')}\n      </SelectOption>\n    </SelectGroup>,\n    <Divider key='divider' />,\n    <SelectGroup\n      label={t(\n        'permission.manage_permissions_dialog.all_accounts_service_account_group'\n      )}\n      key='service_accounts_group'\n    >\n      {initialOptions\n        .filter(\n          (principal) =>\n            principal.principalType === PrincipalType.ServiceAccount\n        )\n        .sort((a, b) =>\n          a.displayName && b.displayName\n            ? a.displayName.localeCompare(b.displayName)\n            : -1\n        )\n        .map((principal, index) => (\n          <SelectOption\n            key={index}\n            value={principal.id}\n            description={principal.displayName}\n          >\n            {principal.id}\n          </SelectOption>\n        ))}\n    </SelectGroup>,\n    <Divider key='divider' />,\n    <SelectGroup\n      label={t(\n        'permission.manage_permissions_dialog.all_accounts_user_account_group'\n      )}\n      key='user_accounts_group'\n    >\n      {initialOptions\n        .filter(\n          (principal) => principal.principalType === PrincipalType.UserAccount\n        )\n        .map((principal, index) => (\n          <SelectOption\n            key={index}\n            value={principal.id}\n            description={principal.displayName}\n          >\n            {principal.id}\n          </SelectOption>\n        ))}\n    </SelectGroup>,\n  ];\n\n  const customFilter: SelectProps['onFilter'] = (_, value) => {\n    if (!value) {\n      return options;\n    }\n\n    const input = new RegExp(value, 'i');\n    return options\n      .filter((accounts) => Array.isArray(accounts.props.children))\n      .map((account) =>\n        account.props.children.filter(\n          (allAccounts: any) =>\n            input.test(allAccounts.props.value) ||\n            input.test(allAccounts.props.description)\n        )\n      );\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t('permission.manage_permissions_dialog.account_id_title')}\n      fieldId='kafka-instance-name'\n      fieldLabel={t('permission.manage_permissions_dialog.account_id_title')}\n      labelBody={t('permission.manage_permissions_dialog.account_id_help')}\n      buttonAriaLabel={t(\n        'permission.manage_permissions_dialog.account_id_aria'\n      )}\n      isRequired={true}\n      helperTextInvalid={id.errorMessage}\n      validated={id.validated || ValidatedOptions.default}\n    >\n      <Select\n        variant={SelectVariant.typeahead}\n        className='kafka-ui--select--limit-height'\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_aria'\n        )}\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={id.value}\n        onFilter={customFilter}\n        isOpen={isOpen}\n        // isInputValuePersisted={true}\n        placeholderText={t(\n          'permission.manage_permissions_dialog.account_id_typeahead_placeholder'\n        )}\n        isCreatable={false}\n        menuAppendTo='parent'\n        validated={id.validated || ValidatedOptions.default}\n        isGrouped={true}\n      >\n        {options}\n      </Select>\n    </FormGroupWithPopover>\n  );\n};\n","import { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\n\nexport const AllAccountsId = '*';\n\nexport const isNewAclModified = (value: NewAcls): boolean => {\n  const emptyAcl = createEmptyNewAcl();\n  const newAcls = Array.isArray(value) ? value : [value];\n  return newAcls.some((v) => {\n    if (v.aclShortcutType === AclShortcutType.ManageAccess) {\n      return true;\n    } else if (v.aclShortcutType) {\n      return !(\n        v.patternType.value === emptyAcl.patternType.value &&\n        v.resource.value === emptyAcl.resource.value\n      );\n    }\n    return !(\n      v.permission.value === emptyAcl.permission.value &&\n      v.patternType.value === emptyAcl.patternType.value &&\n      v.resourceType.value === emptyAcl.resourceType.value &&\n      v.resource.value === emptyAcl.resource.value &&\n      v.operation.value === emptyAcl.operation.value\n    );\n  });\n};\n\nexport enum AclShortcutType {\n  ConsumeTopic = 'ConsumeTopic',\n  ProduceTopic = 'ProduceTopic',\n  ManageAccess = 'ManageAccess',\n}\n\nexport type NewAcl = {\n  permission: Validated<AclPermissionType | undefined>;\n  operation: Validated<AclOperation | undefined>;\n  resourceType: Validated<AclResourceType | undefined>;\n  patternType: Validated<AclPatternType | undefined>;\n  resource: Validated<string | undefined>;\n  aclShortcutType: AclShortcutType | undefined;\n  operations?: AclOperation[];\n  metaData?: {\n    title: string;\n    popoverHeader: string;\n    popoverBody: string;\n    ariaLabel: string;\n  };\n};\n\nexport type NewAcls = NewAcl | NewAcl[];\n\nexport const createEmptyNewAcl = (): NewAcl => {\n  return {\n    permission: {\n      value: AclPermissionType.Allow,\n    },\n    operation: {\n      value: undefined,\n    },\n    resourceType: {\n      value: undefined,\n    },\n    patternType: {\n      value: AclPatternType.Prefixed,\n    },\n    resource: {\n      value: undefined,\n    },\n    aclShortcutType: undefined,\n  } as NewAcl;\n};\n\nexport type CellProps = {\n  acl: NewAcl;\n  row: number;\n  childRow?: number;\n};\n\nexport type AclCellProps = CellProps & {\n  setAcls: React.Dispatch<React.SetStateAction<NewAcls[]>>;\n  setEscapeClosesModal: (closes: boolean) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n};\n\nexport const update2DArrayAcls = (\n  prevAcls: NewAcls[],\n  newAcl: NewAcl,\n  row: number,\n  childRow = 0\n) => {\n  const el = prevAcls[row];\n  if (Array.isArray(el) && childRow !== undefined) {\n    el[childRow] = newAcl;\n  } else {\n    prevAcls[row] = newAcl;\n  }\n  return prevAcls;\n};\n\nexport const handle2DArrayAcls = (\n  acls: NewAcls[],\n  row: number,\n  childRow = 0\n): NewAcl => {\n  const el = acls[row];\n  const newAcls = Array.isArray(el) ? el[childRow] : el;\n  return newAcls;\n};\n","import { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { useTranslation } from 'react-i18next';\nimport React, { useState } from 'react';\nimport { Select as PFSelect } from '@patternfly/react-core/dist/js/components/Select/Select';\nimport { SelectProps, SelectVariant } from '@patternfly/react-core';\nimport { SelectOption as PFSelectOption } from '@patternfly/react-core/dist/js/components/Select/SelectOption';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport { ValidatedOptions } from '@patternfly/react-core';\n\nexport type CreateSelectProps<T> = {\n  id: string;\n  options: SelectOption<T>[];\n  selected: Validated<string | undefined>;\n  setSelected: (row: number, id: T | undefined, childRow?: number) => void;\n  row: number;\n  childRow?: number;\n  placeholder?: string;\n  setEscapeClosesModal: (closes: boolean) => void;\n  onSelect: (value: string) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n  onClear: () => T | undefined;\n};\n\nexport const CreateSelect = <\n  T extends AclPermissionType | AclResourceType | AclPatternType | AclOperation\n>({\n  options,\n  setSelected,\n  selected,\n  row,\n  id,\n  placeholder,\n  setEscapeClosesModal,\n  onSelect,\n  menuAppendTo,\n  onClear,\n  childRow,\n}: CreateSelectProps<T>): React.ReactElement => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const onToggle: SelectProps['onToggle'] = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setSelected(row, onClear(), childRow);\n    setIsOpen(false);\n  };\n\n  const select: SelectProps['onSelect'] = (_, selection, isPlaceholder) => {\n    const value = selection === '' ? undefined : (selection as T);\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(row, value, childRow);\n      setIsOpen(false);\n      if (value) {\n        onSelect(value);\n      }\n    }\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.assign_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={selected.errorMessage}\n      validated={selected.validated || ValidatedOptions.default}\n    >\n      <PFSelect\n        variant={SelectVariant.single}\n        onToggle={onToggle}\n        onSelect={select}\n        selections={selected.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={placeholder}\n        validated={selected.validated || ValidatedOptions.default}\n        menuAppendTo={menuAppendTo}\n        maxHeight={200}\n        direction={'up'}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          >\n            {option.title}\n          </PFSelectOption>\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions } from '@patternfly/react-core';\nimport { sentenceCase } from 'sentence-case';\nimport { snakeCase } from 'snake-case';\n\nimport { AclOperation } from '@rhoas/kafka-instance-sdk';\nimport {\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getOperations } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\n\ntype OperationCellProps = AclCellProps & {\n  resourceOperations: { [key: string]: Array<string> };\n};\n\nconst OperationCell: React.VFC<OperationCellProps> = ({\n  acl,\n  row,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n  resourceOperations,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const setOperation = (\n    row: number,\n    value?: AclOperation,\n    childRow?: number\n  ) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].operation = { value };\n            }\n          } else {\n            v.operation = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateSelect\n      options={getOperations()\n        .filter((value) => {\n          if (\n            acl.resourceType.value === undefined ||\n            acl.resourceType.value.toString() === ''\n          ) {\n            return true;\n          }\n          const resourceType = snakeCase(acl.resourceType.value.toString());\n          const operationType = snakeCase(value);\n          return resourceOperations[resourceType].some(\n            (p) => p === operationType\n          );\n        })\n        .map((value) => {\n          return {\n            value,\n            title: sentenceCase(value),\n          } as SelectOption<AclOperation>;\n        })}\n      selected={acl.operation}\n      setSelected={setOperation}\n      row={row}\n      id='operation'\n      placeholder={t(\n        'permission.manage_permissions_dialog.assign_permissions.operation_placeholder'\n      )}\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().operation.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            newPrevState.operation.validated = ValidatedOptions.error;\n            newPrevState.operation.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_operation_error'\n            );\n          } else {\n            newPrevState.operation.validated = ValidatedOptions.default;\n          }\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { OperationCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions, LabelGroup, Label } from '@patternfly/react-core';\nimport { sentenceCase } from 'sentence-case';\n\nimport { AclPermissionType } from '@rhoas/kafka-instance-sdk';\n\nimport {\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getPermissionsTypes } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\n\ntype PermissionTypeCellProps = AclCellProps;\n\nconst PermissionTypeCell: React.VFC<PermissionTypeCellProps> = ({\n  acl,\n  row,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const setPermissionType = (\n    row: number,\n    value?: AclPermissionType,\n    childRow?: number\n  ) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].permission = { value };\n            }\n          } else {\n            v.permission = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  if (acl.aclShortcutType) {\n    return (\n      <>\n        {Array.isArray(acl?.operations) && (\n          <LabelGroup numLabels={4}>\n            <Label\n              variant='outline'\n              color={\n                acl.permission.value === AclPermissionType.Deny\n                  ? 'red'\n                  : undefined\n              }\n            >\n              {sentenceCase(acl.permission.value || '')}\n            </Label>\n            {acl?.operations?.map((operation) => (\n              <Label variant='outline' key={operation}>\n                {sentenceCase(operation)}\n              </Label>\n            ))}\n          </LabelGroup>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <CreateSelect\n      options={getPermissionsTypes().map((value) => {\n        return {\n          value,\n          title: sentenceCase(value),\n        } as SelectOption<AclPermissionType>;\n      })}\n      selected={acl.permission}\n      setSelected={setPermissionType}\n      row={row}\n      id='permission-type'\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().permission.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            newPrevState.permission.validated = ValidatedOptions.error;\n            newPrevState.permission.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_permission_error'\n            );\n          } else {\n            newPrevState.permission.validated = ValidatedOptions.default;\n          }\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { PermissionTypeCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport {\n  AclShortcutType,\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getResourceTypes } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport { SolidLabel } from './SolidLabel';\nimport { displayName } from '@app/modules/Permissions/utils';\n\ntype ResourceTypeProps = AclCellProps & {\n  kafkaName: string | undefined;\n};\n\nconst ResourceType: React.VFC<ResourceTypeProps> = ({\n  row,\n  acl,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n  kafkaName,\n}) => {\n  const { resourceType } = acl;\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  if (\n    (acl.aclShortcutType === AclShortcutType.ConsumeTopic ||\n      acl.aclShortcutType === AclShortcutType.ProduceTopic) &&\n    resourceType?.value\n  ) {\n    return (\n      <>\n        <SolidLabel variant={resourceType.value} />{' '}\n        {displayName(resourceType.value)}\n      </>\n    );\n  } else if (acl.aclShortcutType === AclShortcutType.ManageAccess) {\n    return (\n      <>\n        <SolidLabel variant={AclResourceType.Cluster} />{' '}\n        {displayName(AclResourceType.Cluster)} is \"{kafkaName}\"\n      </>\n    );\n  }\n\n  const setResourceType = (row: number, value?: AclResourceType) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            v[row].resourceType = { value };\n          } else {\n            v.resourceType = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateSelect\n      options={getResourceTypes().map((value) => {\n        return {\n          value,\n          title: displayName(value),\n        } as SelectOption<AclResourceType>;\n      })}\n      selected={acl.resourceType}\n      setSelected={setResourceType}\n      row={row}\n      id='resource-type'\n      placeholder={t(\n        'permission.manage_permissions_dialog.assign_permissions.resource_type_placeholder'\n      )}\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().resourceType.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n            // newPrevState.validated = ValidatedOptions.error;\n            // newPrevState.errorMessage = t(\n            //   'permission.manage_permissions_dialog.assign_permissions.must_select_resource_type_error'\n            // );\n          } else {\n            // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n            // newPrevState.validated = ValidatedOptions.default;\n          }\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { ResourceType };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions } from '@patternfly/react-core';\n\nimport { AclPatternType, AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport {\n  AclShortcutType,\n  createEmptyNewAcl,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateSelect } from './CreateSelect';\nimport { getPatternTypes } from '@app/services/acls';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\n\ntype PatternTypeCellProps = AclCellProps;\n\nconst PatternTypeCell: React.VFC<PatternTypeCellProps> = ({\n  acl,\n  row,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  if (\n    acl.resourceType.value === AclResourceType.Cluster ||\n    acl.aclShortcutType === AclShortcutType.ManageAccess\n  ) {\n    return <></>;\n  }\n\n  const setPatternType = (\n    row: number,\n    value?: AclPatternType,\n    childRow?: number\n  ) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].patternType = { value };\n            }\n          } else {\n            v.patternType = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateSelect\n      options={getPatternTypes()\n        ?.map((value) => {\n          return {\n            value,\n            title:\n              value === AclPatternType.Prefixed\n                ? t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_prefixed'\n                  )\n                : t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_literal'\n                  ),\n            description:\n              value === AclPatternType.Prefixed\n                ? t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_prefixed_help'\n                  )\n                : t(\n                    'permission.manage_permissions_dialog.assign_permissions.pattern_type_literal_help'\n                  ),\n          } as SelectOption<AclPatternType>;\n        })\n        .sort((a, b) => b.value.localeCompare(a.value))}\n      selected={acl.patternType}\n      setSelected={setPatternType}\n      row={row}\n      childRow={childRow}\n      id='pattern-type'\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      onClear={() => createEmptyNewAcl().patternType.value}\n      onSelect={(value) => {\n        setAcls((prevState) => {\n          const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n          if (value === undefined) {\n            newPrevState.patternType.validated = ValidatedOptions.error;\n            newPrevState.patternType.validated = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_pattern_type_error'\n            );\n          } else {\n            newPrevState.patternType.validated = ValidatedOptions.default;\n          }\n\n          return update2DArrayAcls(prevState, newPrevState, row, childRow);\n        });\n      }}\n    />\n  );\n};\n\nexport { PatternTypeCell };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { SelectOption } from '@app/modules/Permissions/components/ManagePermissionsDialog/select';\nimport {\n  SelectVariant,\n  ValidatedOptions,\n  Select as PFSelect,\n  SelectOption as PFSelectOption,\n  SelectProps,\n} from '@patternfly/react-core';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport { FormGroupWithPopover } from '@app/components';\n\nexport type CreateTypeaheadProps = {\n  row: number;\n  childRow?: number;\n  value: Validated<string | undefined>;\n  setValue: (row: number, id: string | undefined, childRow?: number) => void;\n  initialOptions: () => string[];\n  id: string;\n  placeholder?: string;\n  onSelect: (value: string) => void;\n  setEscapeClosesModal: (closes: boolean) => void;\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n};\n\nexport const CreateTypeahead: React.VFC<CreateTypeaheadProps> = ({\n  row,\n  setValue,\n  value,\n  initialOptions,\n  id,\n  placeholder,\n  onSelect,\n  setEscapeClosesModal,\n  menuAppendTo,\n  childRow,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [options, setOptions] = useState<SelectOption<string>[]>([]);\n\n  useEffect(() => {\n    setOptions(\n      initialOptions().map((o) => {\n        return { value: o } as SelectOption<string>;\n      })\n    );\n  }, [initialOptions]);\n\n  const onToggle: SelectProps['onToggle'] = (newState) => {\n    if (newState) {\n      setEscapeClosesModal(false);\n    } else {\n      setEscapeClosesModal(true);\n    }\n    setIsOpen(newState);\n  };\n\n  const clearSelection = () => {\n    setValue(row, undefined, childRow);\n    setIsOpen(false);\n  };\n\n  const select: SelectProps['onSelect'] = (_, selection, isPlaceholder) => {\n    const value = selection === '' ? undefined : (selection as string);\n    if (isPlaceholder) clearSelection();\n    else {\n      setValue(row, value, childRow);\n      setIsOpen(false);\n      onSelect(value || '');\n    }\n  };\n\n  const onCreateOption = (newValue: string) => {\n    setOptions([...options, { value: newValue } as SelectOption<string>]);\n  };\n\n  return (\n    <FormGroupWithPopover\n      labelHead={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_head`\n      )}\n      fieldId={id}\n      labelBody={t(\n        `permission.manage_permissions_dialog.assign_permissions.${id}.popover_label`\n      )}\n      buttonAriaLabel={t(\n        '`permission.manage_permissions_dialog.assign_permissions.${id}.aria`'\n      )}\n      isRequired={true}\n      helperTextInvalid={value.errorMessage}\n      validated={value.validated || ValidatedOptions.default}\n    >\n      <PFSelect\n        variant={SelectVariant.typeahead}\n        typeAheadAriaLabel={t(\n          'permission.manage_permissions_dialog.assign_permissions.resource_name_aria'\n        )}\n        onToggle={onToggle}\n        className='pf-u-pr-lg-on-lg'\n        onSelect={select}\n        onClear={clearSelection}\n        selections={value.value}\n        isOpen={isOpen}\n        isInputValuePersisted={true}\n        placeholderText={placeholder}\n        isCreatable={true}\n        onCreateOption={onCreateOption}\n        createText={t(\n          'permission.manage_permissions_dialog.assign_permissions.resource_name_typeahead_create_text'\n        )}\n        validated={value.validated || ValidatedOptions.default}\n        menuAppendTo={menuAppendTo}\n        maxHeight={200}\n        direction={'up'}\n      >\n        {options.map((option, index) => (\n          <PFSelectOption\n            isDisabled={option.disabled}\n            key={index}\n            value={option.value}\n            {...(option.description && { description: option.description })}\n          />\n        ))}\n      </PFSelect>\n    </FormGroupWithPopover>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ValidatedOptions } from '@patternfly/react-core';\n\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport {\n  AclShortcutType,\n  update2DArrayAcls,\n  handle2DArrayAcls,\n  AclCellProps,\n} from './acls';\nimport { CreateTypeahead } from './CreateTypeahead';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\n\ntype ResourceCellProps = AclCellProps & {\n  topicNames: string[];\n  consumerGroupIds: string[];\n};\n\nconst ResourceCell: React.VFC<ResourceCellProps> = ({\n  row,\n  acl,\n  childRow = 0,\n  setAcls,\n  setEscapeClosesModal,\n  menuAppendTo,\n  topicNames,\n  consumerGroupIds,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { validateName } = useValidateTopic();\n\n  if (\n    acl.resourceType.value === AclResourceType.Cluster ||\n    acl.aclShortcutType === AclShortcutType.ManageAccess\n  ) {\n    return <></>;\n  }\n\n  const setResource = (row: number, value?: string, childRow?: number) => {\n    setAcls((prevState) =>\n      prevState.map((v, k) => {\n        if (k === row) {\n          if (Array.isArray(v)) {\n            if (childRow !== undefined) {\n              v[childRow].resource = { value };\n            }\n          } else {\n            v.resource = { value };\n          }\n        }\n        return v;\n      })\n    );\n  };\n\n  return (\n    <CreateTypeahead\n      row={row}\n      childRow={childRow}\n      value={acl.resource}\n      setValue={setResource}\n      id='resource'\n      placeholder={t(\n        `permission.manage_permissions_dialog.assign_permissions.pattern_type_${\n          acl.patternType.value?.toLowerCase() || 'prefixed'\n        }_placeholder`\n      )}\n      setEscapeClosesModal={setEscapeClosesModal}\n      menuAppendTo={menuAppendTo}\n      initialOptions={() => {\n        if (acl.resourceType.value === AclResourceType.Topic) {\n          return topicNames;\n        }\n        if (acl.resourceType.value === AclResourceType.Group) {\n          return consumerGroupIds;\n        }\n        return [];\n      }}\n      onSelect={(value) => {\n        if (value === '*') {\n          setAcls((prevState) => {\n            const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n            newPrevState.resource.validated = ValidatedOptions.default;\n            return update2DArrayAcls(prevState, newPrevState, row, childRow);\n          });\n        } else {\n          const errorMessage = validateName(value);\n          if (errorMessage !== undefined) {\n            setAcls((prevState) => {\n              const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n              // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n              // newPrevState.validated = ValidatedOptions.error;\n              // newPrevState.errorMessage = errorMessage;\n              return update2DArrayAcls(prevState, newPrevState, row, childRow);\n            });\n          } else if (value !== undefined) {\n            setAcls((prevState) => {\n              const newPrevState = handle2DArrayAcls(prevState, row, childRow);\n              // TS fix: not sure about this commented out area, it doesn't seem to be read anywhere\n              // newPrevState.validated = ValidatedOptions.default;\n              return update2DArrayAcls(prevState, newPrevState, row, childRow);\n            });\n          }\n        }\n      }}\n    />\n  );\n};\n\nexport { ResourceCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Tooltip, Button } from '@patternfly/react-core';\nimport TrashIcon from '@patternfly/react-icons/dist/js/icons/trash-icon';\nimport { CellProps } from './acls';\n\ntype RemoveButtonCellProps = CellProps & {\n  removeRow: (row: number) => void;\n};\n\nconst RemoveButtonCell: React.VFC<RemoveButtonCellProps> = ({\n  row,\n  removeRow,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <div className='pf-u-display-flex pf-u-justify-content-flex-end'>\n      <Tooltip\n        content={t(\n          'permission.manage_permissions_dialog.assign_permissions.remove_row_help'\n        )}\n      >\n        <Button\n          variant='link'\n          icon={<TrashIcon />}\n          onClick={() => removeRow(row)}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nexport { RemoveButtonCell };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  ActionList,\n  ActionListItem,\n  Button,\n  Text,\n  TextContent,\n  TextVariants,\n  Popover,\n  ButtonVariant,\n} from '@patternfly/react-core';\n\nimport {\n  PermissionsDropdown,\n  PermissionsDropdownProps,\n} from '@rhoas/app-services-ui-components';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  cellWidth,\n  ICell,\n} from '@patternfly/react-table';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport { OperationCell } from './OperationCell';\nimport { PermissionTypeCell } from './PermissionTypeCell';\nimport { ResourceType } from './ResourceType';\nimport { PatternTypeCell } from './PatternTypeCell';\nimport { ResourceCell } from './ResourceCell';\nimport { RemoveButtonCell } from './RemoveButtonCell';\nimport {\n  createEmptyNewAcl,\n  NewAcls,\n  AclShortcutType,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\nimport {\n  AclOperation,\n  AclPatternType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport './CreatePermissions.css';\n\nexport type CreatePermissionsProps = {\n  selectedAccount?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n  acls: NewAcls[] | undefined;\n  setAcls: React.Dispatch<React.SetStateAction<NewAcls[]>>;\n  setEscapeClosesModal: (closes: boolean) => void;\n  resourceOperations: { [key: string]: Array<string> };\n  menuAppendTo:\n    | HTMLElement\n    | (() => HTMLElement)\n    | 'parent'\n    | 'inline'\n    | undefined;\n  kafkaName: string | undefined;\n};\n\nexport const CreatePermissions: React.FunctionComponent<\n  CreatePermissionsProps\n> = ({\n  acls,\n  setAcls,\n  topicNames,\n  consumerGroupIds,\n  selectedAccount,\n  setEscapeClosesModal,\n  resourceOperations,\n  menuAppendTo,\n  kafkaName,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const tableColumns = [\n    {\n      title: t('permission.table.resource_column_title'),\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: t('permission.table.permissions_column_title'),\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(10)],\n    },\n  ] as ICell[];\n\n  const removeRow = (row: number) => {\n    setAcls((prevState) => {\n      return prevState.filter((_, k) => k !== row);\n    });\n  };\n\n  const formGroupHelperText = () => {\n    if (selectedAccount === '*') {\n      return t(\n        'permission.manage_permissions_dialog.assign_permissions.help_all_accounts'\n      );\n    }\n    return t('permission.manage_permissions_dialog.assign_permissions.help', {\n      account_id: selectedAccount,\n    });\n  };\n\n  const onAddPermission: PermissionsDropdownProps['onAddPermission'] = (() => {\n    setAcls((prevState) => [...prevState, createEmptyNewAcl()]);\n  }) as PermissionsDropdownProps['onAddPermission'];\n\n  const onShortcutConsumeTopic = () => {\n    const newState = [\n      {\n        ...createEmptyNewAcl(),\n        aclShortcutType: AclShortcutType.ConsumeTopic,\n        resourceType: {\n          value: AclResourceType.Topic,\n        },\n        metaData: {\n          title: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic'\n          ),\n          popoverHeader: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic'\n          ),\n          popoverBody: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic_description'\n          ),\n          ariaLabel: t(\n            'permission.manage_permissions_dialog.assign_permissions.shortcut_consume_topic'\n          ),\n        },\n        operations: [AclOperation.Read, AclOperation.Describe],\n      },\n      {\n        ...createEmptyNewAcl(),\n        aclShortcutType: AclShortcutType.ConsumeTopic,\n        resourceType: {\n          value: AclResourceType.Group,\n        },\n        operations: [AclOperation.Read],\n      },\n    ];\n\n    setAcls((prevState) => [...prevState, newState]);\n  };\n\n  const onShortcutProduceTopic = () => {\n    const newState = {\n      ...createEmptyNewAcl(),\n      aclShortcutType: AclShortcutType.ProduceTopic,\n      resourceType: {\n        value: AclResourceType.Topic,\n      },\n      metaData: {\n        title: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic'\n        ),\n        popoverHeader: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic'\n        ),\n        popoverBody: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic_description'\n        ),\n        ariaLabel: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_produce_topic'\n        ),\n      },\n      operations: [\n        AclOperation.Write,\n        AclOperation.Create,\n        AclOperation.Describe,\n      ],\n    };\n    setAcls((prevState) => [...prevState, newState]);\n  };\n\n  const onShortcutManageAccess = () => {\n    const newState = {\n      ...createEmptyNewAcl(),\n      aclShortcutType: AclShortcutType.ManageAccess,\n      resource: { value: 'kafka-cluster' },\n      resourceType: {\n        value: AclResourceType.Cluster,\n      },\n      patternType: { value: AclPatternType.Literal },\n      metaData: {\n        title: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access'\n        ),\n        popoverHeader: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access'\n        ),\n        popoverBody: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access_description'\n        ),\n        ariaLabel: t(\n          'permission.manage_permissions_dialog.assign_permissions.shortcut_manage_access'\n        ),\n      },\n      operations: [AclOperation.Alter],\n    };\n\n    setAcls((prevState) => [...prevState, newState]);\n  };\n\n  const preparedRows = (acl: NewAcls, row: number) => {\n    const newAcl = Array.isArray(acl) ? acl : [acl];\n    return newAcl.map((acl, childRow) => {\n      return (\n        <>\n          {acl.aclShortcutType && childRow === 0 && (\n            <Tr style={{ borderBottom: 'none' }}>\n              <Td colSpan={5}>\n                <TextContent>\n                  <Text component={TextVariants.h6}>\n                    {acl?.metaData?.title}\n                    <Popover\n                      headerContent={<div>{acl.metaData?.popoverHeader}</div>}\n                      bodyContent={<div>{acl.metaData?.popoverBody}</div>}\n                    >\n                      <Button\n                        variant={ButtonVariant.plain}\n                        aria-label={acl.metaData?.ariaLabel}\n                      >\n                        <HelpIcon />\n                      </Button>\n                    </Popover>\n                  </Text>\n                </TextContent>\n              </Td>\n              <Td>\n                <RemoveButtonCell acl={acl} row={row} removeRow={removeRow} />\n              </Td>\n            </Tr>\n          )}\n          <Tr\n            key={row}\n            style={{\n              borderBottom: newAcl.length > 1 && childRow === 0 ? 'none' : '',\n            }}\n          >\n            <Td\n              width={\n                acl.aclShortcutType === AclShortcutType.ManageAccess ? 50 : 20\n              }\n              colSpan={\n                acl.aclShortcutType === AclShortcutType.ManageAccess ? 3 : 0\n              }\n              noPadding\n            >\n              <ResourceType\n                row={row}\n                acl={acl}\n                childRow={childRow}\n                setAcls={setAcls}\n                menuAppendTo={menuAppendTo}\n                setEscapeClosesModal={setEscapeClosesModal}\n                kafkaName={kafkaName}\n              />\n            </Td>\n            {acl.aclShortcutType !== AclShortcutType.ManageAccess && (\n              <>\n                <Td width={15} noPadding>\n                  <PatternTypeCell\n                    row={row}\n                    acl={acl}\n                    childRow={childRow}\n                    setAcls={setAcls}\n                    menuAppendTo={menuAppendTo}\n                    setEscapeClosesModal={setEscapeClosesModal}\n                  />\n                </Td>\n                <Td width={25} noPadding>\n                  <ResourceCell\n                    acl={acl}\n                    row={row}\n                    childRow={childRow}\n                    setAcls={setAcls}\n                    menuAppendTo={menuAppendTo}\n                    setEscapeClosesModal={setEscapeClosesModal}\n                    topicNames={topicNames}\n                    consumerGroupIds={consumerGroupIds}\n                  />\n                </Td>\n              </>\n            )}\n            <Td\n              width={acl.aclShortcutType ? 40 : 15}\n              colSpan={acl.aclShortcutType ? 3 : 0}\n              noPadding\n            >\n              <PermissionTypeCell\n                acl={acl}\n                row={row}\n                childRow={childRow}\n                setAcls={setAcls}\n                menuAppendTo={menuAppendTo}\n                setEscapeClosesModal={setEscapeClosesModal}\n              />\n            </Td>\n            {!acl.aclShortcutType && (\n              <>\n                <Td width={15} noPadding>\n                  <OperationCell\n                    acl={acl}\n                    row={row}\n                    childRow={childRow}\n                    setAcls={setAcls}\n                    menuAppendTo={menuAppendTo}\n                    setEscapeClosesModal={setEscapeClosesModal}\n                    resourceOperations={resourceOperations}\n                  />\n                </Td>\n                <Td width={10}>\n                  <RemoveButtonCell acl={acl} row={row} removeRow={removeRow} />\n                </Td>\n              </>\n            )}\n          </Tr>\n        </>\n      );\n    });\n  };\n\n  return (\n    <div>\n      <TextContent>\n        <Text component={TextVariants.h2}>\n          {t('permission.manage_permissions_dialog.assign_permissions.title')}\n        </Text>\n        <Text component={TextVariants.small}>{formGroupHelperText()}</Text>\n        {acls && acls.length > 0 && (\n          <Text component={TextVariants.small}>\n            {t(\n              'permission.manage_permissions_dialog.assign_permissions.all_fields_are_required'\n            )}\n          </Text>\n        )}\n      </TextContent>\n      {acls && acls.length > 0 && (\n        <TableComposable variant='compact'>\n          <Thead noWrap>\n            <Tr>\n              {tableColumns?.map((col, index) => (\n                <Th key={index}>{col.title}</Th>\n              ))}\n            </Tr>\n          </Thead>\n          <Tbody>{acls?.map((acl, row) => preparedRows(acl, row))}</Tbody>\n        </TableComposable>\n      )}\n      <ActionList>\n        <ActionListItem className='appServices-action-list__action-list-item'>\n          <PermissionsDropdown\n            onAddPermission={onAddPermission}\n            onShortcutProduceTopic={onShortcutProduceTopic}\n            onShortcutConsumeTopic={onShortcutConsumeTopic}\n            onShortcutManageAccess={onShortcutManageAccess}\n          />\n        </ActionListItem>\n      </ActionList>\n    </div>\n  );\n};\n","import { EnhancedAclBinding } from '@app/services/acls';\nimport React, { useEffect, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport {\n  CellBuilder,\n  permissionOperationCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport {\n  Button,\n  Label,\n  Text,\n  TextContent,\n  TextVariants,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { TrashIcon } from '@patternfly/react-icons';\nimport { cellWidth, ICell, TableVariant } from '@patternfly/react-table';\nimport { MASTable } from '@app/components';\nimport { AclBinding } from '@rhoas/kafka-instance-sdk';\n\nexport type ExistingAclTableProps = {\n  existingAcls: Array<AclBinding>;\n  selectedAccountId?: string;\n  onRemove: (acl: EnhancedAclBinding) => void;\n};\n\nexport const ExistingAclTable: React.FunctionComponent<\n  ExistingAclTableProps\n> = ({ existingAcls, selectedAccountId, onRemove }) => {\n  type RemovableEnhancedAclBinding = EnhancedAclBinding & {\n    removed: boolean;\n    index: number;\n  };\n\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [acls, setAcls] = useState<RemovableEnhancedAclBinding[]>([]);\n\n  useEffect(() => {\n    // Workaround as I can't work out how to pass initial state for an array\n    setAcls(\n      existingAcls.map((v, k) => {\n        const answer = v as RemovableEnhancedAclBinding;\n        answer.index = k;\n        return answer;\n      })\n    );\n  }, [existingAcls]);\n\n  const removeRow = (acl: RemovableEnhancedAclBinding) => {\n    setAcls(\n      acls.map((v) => {\n        if (v.hash() === acl.hash()) {\n          v.removed = true;\n        }\n        return v;\n      })\n    );\n    onRemove(acl);\n  };\n\n  const tableColumns = [\n    {\n      title: t('permission.table.resource_column_title'),\n      columnTransforms: [cellWidth(60)],\n    },\n    {\n      title: t('permission.table.permissions_column_title'),\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: '',\n      columnTransforms: [cellWidth(20)],\n    },\n  ] as ICell[];\n\n  const principalCell: CellBuilder<RemovableEnhancedAclBinding> = (item) => {\n    const RemoveButton: React.FunctionComponent = () => (\n      <Tooltip\n        content={t(\n          'permission.manage_permissions_dialog.assign_permissions.remove_row_help'\n        )}\n      >\n        <Button\n          variant='link'\n          icon={<TrashIcon />}\n          onClick={() => removeRow(item)}\n        />\n      </Tooltip>\n    );\n\n    const AllAccountsLabel: React.FunctionComponent = () => (\n      <Label variant='outline'>{t('permission.table.all_accounts')}</Label>\n    );\n\n    if (selectedAccountId === '*' && item.principal === '*') {\n      return {\n        title: (\n          <div className='pf-u-display-flex pf-u-justify-content-space-between pf-u-justify-content-flex-end-on-lg'>\n            <AllAccountsLabel /> <RemoveButton />\n          </div>\n        ),\n        props: {},\n      };\n    } else if (item.principal === '*') {\n      return {\n        title: (\n          <div className='pf-u-display-flex pf-u-justify-content-flex-end-on-lg'>\n            <AllAccountsLabel />\n          </div>\n        ),\n        props: {},\n      };\n    } else {\n      return {\n        title: (\n          <div className='pf-u-display-flex pf-u-justify-content-flex-end'>\n            <RemoveButton />\n          </div>\n        ),\n        props: {},\n      };\n    }\n  };\n\n  const cells = [resourceCell, permissionOperationCell, principalCell];\n\n  if (selectedAccountId === undefined || acls.length === 0) {\n    return <></>;\n  }\n\n  const HelperText: React.FunctionComponent = () => {\n    if (selectedAccountId === '*') {\n      return t(\n        'permission.manage_permissions_dialog.edit_existing.all_accounts_help'\n      );\n    }\n    return (\n      <Trans\n        ns={['kafkaTemporaryFixMe']}\n        i18nKey='permission.manage_permissions_dialog.edit_existing.help'\n      >\n        Review the list of existing permissions for the selected account. The\n        list includes account-specific permissions and permissions applied to\n        all accounts within this Kafka instance. Permissions labeled\n        <strong>All accounts</strong> cannot be removed when an individual\n        account ID is selected.\n      </Trans>\n    );\n  };\n\n  return (\n    <div>\n      <TextContent>\n        <Text component={TextVariants.h2}>\n          {t('permission.manage_permissions_dialog.edit_existing.title')}\n        </Text>\n        <Text component={TextVariants.small}>\n          <HelperText />\n        </Text>\n      </TextContent>\n\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: [\n            ...acls\n              .filter((acl) => !acl.removed)\n              .map((item, row) => {\n                return {\n                  cells: cells.map((f) => f(item, row)),\n                  originalData: item,\n                };\n              }),\n          ],\n          'aria-label': t('permission.table.table.permission_list_table'),\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          canSelectAll: false,\n          // TODO: gridBreakPoint: 'grid-lg' NOTE: This is needed so that the table doesn't overrun a narrow screen, but it currently breaks the first header because it's messing with :before of the first cell and so is the mas--[streams-]table-view__table\n        }}\n        rowDataTestId={'tablePermissions-row'}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\n\nexport type PreCancelModalProps = {\n  isOpen: boolean;\n  closeModal: () => void;\n  resumeEditing: () => void;\n};\n\nconst PreCancelModal: React.FC<PreCancelModalProps> = ({\n  isOpen,\n  closeModal,\n  resumeEditing,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <Modal\n      id='manage-permissions-precancel-modal'\n      variant={ModalVariant.small}\n      isOpen={isOpen}\n      aria-label={t(\n        'permission.manage_permissions_pre_cancel_dialog.aria_label'\n      )}\n      title={`${t(\n        'permission.manage_permissions_pre_cancel_dialog.discard_changes'\n      )}?`}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={closeModal}\n      onEscapePress={closeModal}\n      actions={[\n        <Button onClick={closeModal} key={1} variant={ButtonVariant.primary}>\n          {t('permission.manage_permissions_pre_cancel_dialog.discard_changes')}\n        </Button>,\n        <Button\n          onClick={resumeEditing}\n          key={2}\n          variant={ButtonVariant.secondary}\n        >\n          {t('permission.manage_permissions_pre_cancel_dialog.resume_editing')}\n        </Button>,\n      ]}\n    >\n      {t('permission.manage_permissions_pre_cancel_dialog.modal_description')}\n    </Modal>\n  );\n};\n\nexport { PreCancelModal };\n","import { AclBinding } from '@rhoas/app-services-ui-shared/dist/esm/contexts/modals/kafka-modals';\nimport React, {\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n  VoidFunctionComponent,\n} from 'react';\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Alert,\n  FormAlert,\n  Modal,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  convertEnum,\n  EnhancedAclBinding,\n  usePermissionsService,\n} from '@app/services/acls';\nimport { ConfigContext, useFederated } from '@app/contexts';\nimport {\n  BaseModalProps,\n  ManagePermissionsModalProps,\n  ManagePermissionsProps,\n  usePrincipals,\n  useAuth,\n} from '@rhoas/app-services-ui-shared';\nimport { SelectAccount } from '@app/modules/Permissions/components/ManagePermissionsDialog/SelectAccount';\nimport {\n  CreatePermissions,\n  CreatePermissionsProps,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/CreatePermissions';\nimport { Validated } from '@app/modules/Permissions/components/ManagePermissionsDialog/validated';\nimport {\n  AclShortcutType,\n  isNewAclModified,\n  NewAcl,\n  NewAcls,\n} from '@app/modules/Permissions/components/ManagePermissionsDialog/acls';\nimport { FormGroupWithPopover } from '@app/components';\nimport { useValidateTopic } from '@app/modules/Topics/utils';\nimport { ExistingAclTable } from '@app/modules/Permissions/components/ManagePermissionsDialog/ExistingAclTable';\nimport {\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\nimport { PreCancelModal } from './PreCancelModal';\nimport './ManagePermissions.css';\n\nexport const ManagePermissions: React.VFC<\n  ManagePermissionsProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  title,\n  variant,\n}) => {\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n  const { getResourceOperations } = permissionsService;\n  const [resourceOperations, setResourceOperations] = useState<\n    { [key: string]: Array<string> } | undefined\n  >();\n\n  useEffect(() => {\n    const fetchResourceOperations = async () => {\n      const answer = await getResourceOperations();\n      setResourceOperations(answer);\n    };\n    fetchResourceOperations();\n  }, [getResourceOperations]);\n\n  return (\n    <ManagePermissionsModal\n      topicNames={topicNames}\n      consumerGroupIds={consumerGroupIds}\n      acls={acls}\n      resourceOperations={resourceOperations}\n      hideModal={hideModal}\n      selectedAccountId={selectedAccountId}\n      onSave={onSave}\n      kafkaName={kafkaName}\n      variant={variant}\n      title={title}\n    />\n  );\n};\n\nexport const ManagePermissionsModal: React.FC<\n  ManagePermissionsModalProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  resourceOperations,\n  title,\n  variant,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const { kafka } = useFederated() || {};\n  const auth = useAuth();\n\n  const [selectedAccount, setSelectedAccount] = useState<\n    Validated<string | undefined>\n  >({ value: selectedAccountId, validated: undefined });\n  const [step, setStep] = useState<number>(\n    selectedAccountId === undefined ? 1 : 2\n  );\n  const [newAcls, setNewAcls] = useState<NewAcls[]>([]);\n  const [removeAcls, setRemoveAcls] = useState<EnhancedAclBinding[]>([]);\n  const [isOpenPreCancelModal, setIsOpenPreCancelModal] =\n    useState<boolean>(false);\n\n  const escapeClosesModal = useRef<boolean>(true);\n  const { validateName } = useValidateTopic();\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n\n  const principals = usePrincipals();\n\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  const setValidationAcls = (acls: NewAcls[]) => {\n    return acls?.map((value) => {\n      if (Array.isArray(value)) {\n        setValidationAcls(value);\n      }\n\n      if (!Array.isArray(value)) {\n        if (value.aclShortcutType === AclShortcutType.ManageAccess) {\n          return value;\n        }\n\n        const answer = Object.assign({}, value);\n\n        if (!value.aclShortcutType) {\n          if (value.operation.value === undefined) {\n            answer.operation.validated = ValidatedOptions.error;\n            answer.operation.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_operation_error'\n            );\n          } else {\n            answer.operation.validated = ValidatedOptions.default;\n          }\n\n          if (value.permission.value === undefined) {\n            answer.permission.validated = ValidatedOptions.error;\n            answer.permission.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_permission_error'\n            );\n          } else {\n            answer.permission.validated = ValidatedOptions.default;\n          }\n        }\n\n        if (value.resourceType.value === undefined) {\n          answer.resourceType.validated = ValidatedOptions.error;\n          answer.resourceType.errorMessage = t(\n            'permission.manage_permissions_dialog.assign_permissions.must_select_resource_type_error'\n          );\n        } else {\n          answer.resourceType.validated = ValidatedOptions.default;\n        }\n\n        if (value.resourceType.value !== AclResourceType.Cluster) {\n          if (value.resource.value === undefined) {\n            answer.resource.validated = ValidatedOptions.error;\n            answer.resource.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_resource_error'\n            );\n          } else if (value.resource.value === '*') {\n            answer.resource.validated = ValidatedOptions.default;\n          } else {\n            const errorMessage = validateName(value.resource.value);\n            if (errorMessage !== undefined) {\n              answer.resource.validated = ValidatedOptions.error;\n              answer.resource.errorMessage = errorMessage;\n            } else {\n              answer.resource.validated = ValidatedOptions.default;\n            }\n          }\n\n          if (value.patternType.value === undefined) {\n            answer.patternType.validated = ValidatedOptions.error;\n            answer.patternType.errorMessage = t(\n              'permission.manage_permissions_dialog.assign_permissions.must_select_pattern_type_error'\n            );\n          } else {\n            answer.patternType.validated = ValidatedOptions.default;\n          }\n        }\n\n        return answer;\n      } else {\n        return value;\n      }\n    });\n  };\n\n  const validateAcls = async (acls: NewAcls[]) => {\n    if (acls) {\n      for (let value of acls.filter((value) => isNewAclModified(value))) {\n        value = Array.isArray(value) ? value : [value];\n        value.forEach((acl: NewAcl) => {\n          if (acl.resourceType.value === undefined) {\n            throw Error('resourceType must not be undefined');\n          }\n          if (acl.resourceType.value !== AclResourceType.Cluster) {\n            if (acl.resource.value === undefined) {\n              throw Error('resource must not be undefined');\n            }\n            if (acl.patternType.value === undefined) {\n              throw Error('patternType must not be undefined');\n            }\n          } else {\n            acl.resource.value = 'kafka-cluster';\n            acl.patternType.value = AclPatternType.Literal;\n          }\n          if (acl.permission.value === undefined) {\n            throw Error('permission must not be undefined');\n          }\n\n          if (acl.operation.value === undefined && !acl.aclShortcutType) {\n            throw Error('operation must not be undefined');\n          }\n\n          if (acl.operations) {\n            acl.operations?.forEach((operation) => {\n              acl.operation.value = operation;\n              saveAcl(acl);\n            });\n          } else {\n            saveAcl(acl);\n          }\n        });\n      }\n\n      await deleteAcls();\n\n      onSave && (await onSave());\n      hideModal();\n    }\n  };\n\n  const save = async () => {\n    let valid = true;\n    if (selectedAccount.value === undefined) {\n      setSelectedAccount((v) => {\n        return {\n          ...v,\n          validated: ValidatedOptions.error,\n          errorMessage: t(\n            'permission.manage_permissions_dialog.must_select_account_error'\n          ),\n        };\n      });\n      valid = false;\n    } else {\n      setSelectedAccount((v) => {\n        return {\n          ...v,\n          validated: ValidatedOptions.default,\n        };\n      });\n    }\n\n    const validatedAcls = setValidationAcls(newAcls);\n    const isInvalid = isFormInvalid(validatedAcls);\n    if (!isInvalid && valid) {\n      validateAcls(validatedAcls);\n    }\n\n    setNewAcls(validatedAcls);\n  };\n\n  const saveAcl = async (acl: NewAcls) => {\n    if (!Array.isArray(acl)) {\n      const { resource, patternType, permission, resourceType, operation } =\n        acl;\n      if (\n        resource?.value &&\n        patternType?.value &&\n        permission?.value &&\n        resourceType?.value &&\n        operation?.value\n      ) {\n        await permissionsService.addPermission({\n          resourceName: resource.value,\n          patternType: patternType.value,\n          permission: permission.value,\n          resourceType: resourceType.value,\n          operation: operation.value,\n          principal: `User:${selectedAccount.value}`,\n        });\n      }\n    }\n  };\n\n  const deleteAcls = async () => {\n    for (const value of removeAcls) {\n      await permissionsService.deletePermission({\n        resourceName: value.resourceName,\n        patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n        permissionType: convertEnum(value.permission, AclPermissionTypeFilter),\n        resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n        operation: convertEnum(value.operation, AclOperationFilter),\n        principal: `User:${selectedAccount.value}`,\n      });\n    }\n  };\n\n  const principal = principals\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const setEscapeClosesModal = (closes: boolean) => {\n    escapeClosesModal.current = closes;\n  };\n\n  const onEscapePress = () => {\n    if (escapeClosesModal.current) {\n      hideModal();\n    }\n  };\n\n  const isDisabledSaveButton = !(\n    newAcls?.some((p) => isNewAclModified(p)) || removeAcls.length > 0\n  );\n\n  const closePermissionModal = () => {\n    if (step === 2 && !isDisabledSaveButton) {\n      setIsOpenPreCancelModal(true);\n    } else {\n      hideModal();\n    }\n  };\n\n  const closePreCancelModal = () => {\n    setIsOpenPreCancelModal(false);\n    hideModal();\n  };\n\n  const resumeEditingPermissions = () => {\n    setIsOpenPreCancelModal(false);\n  };\n\n  const aclsForSelectedAccount = (acls || []).filter(\n    (i) =>\n      (selectedAccount.value && i.principal === `${selectedAccount.value}`) ||\n      i.principal === '*'\n  );\n\n  return (\n    <Modal\n      id='manage-permissions-modal'\n      variant={variant}\n      isOpen={true}\n      aria-label={t('permission.manage_permissions_dialog.aria_label')}\n      position='top'\n      title={title}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={closePermissionModal}\n      onEscapePress={onEscapePress}\n      actions={[\n        step === 1 ? (\n          <Button\n            key={'step1'}\n            variant='primary'\n            onClick={() => setStep(2)}\n            isDisabled={selectedAccount.value === undefined}\n          >\n            {t('permission.manage_permissions_dialog.step_1_submit_button')}\n          </Button>\n        ) : (\n          <Button\n            variant='primary'\n            onClick={save}\n            key={'step2'}\n            isDisabled={isDisabledSaveButton}\n          >\n            {t('permission.manage_permissions_dialog.step_2_submit_button')}\n          </Button>\n        ),\n        <Button\n          onClick={closePermissionModal}\n          key={'cancel'}\n          variant='secondary'\n        >\n          {t('permission.manage_permissions_dialog.cancel_button')}\n        </Button>,\n      ]}\n    >\n      <PreCancelModal\n        isOpen={isOpenPreCancelModal}\n        closeModal={closePreCancelModal}\n        resumeEditing={resumeEditingPermissions}\n      />\n      <Form>\n        <FormGroup\n          fieldId='kafka-instance-name'\n          label={t('permission.manage_permissions_dialog.kafka_instance_title')}\n        >\n          {kafkaName}\n        </FormGroup>\n        {step === 1 ? (\n          <SelectAccount\n            id={selectedAccount}\n            setId={setSelectedAccount}\n            initialOptions={principal}\n            setEscapeClosesModal={setEscapeClosesModal}\n          />\n        ) : (\n          <FormGroupWithPopover\n            labelHead={t(\n              'permission.manage_permissions_dialog.account_id_title'\n            )}\n            fieldId='kafka-instance-name'\n            fieldLabel={t(\n              'permission.manage_permissions_dialog.account_id_title'\n            )}\n            labelBody={t(\n              'permission.manage_permissions_dialog.account_id_help'\n            )}\n            buttonAriaLabel={t(\n              'permission.manage_permissions_dialog.account_id_aria'\n            )}\n            isRequired={true}\n          >\n            {selectedAccount.value === '*'\n              ? t('permission.manage_permissions_dialog.all_accounts_title')\n              : selectedAccount.value}\n          </FormGroupWithPopover>\n        )}\n        {step === 2 && resourceOperations && (\n          <Step2\n            onRemoveAcl={(acl) =>\n              setRemoveAcls((prevState) => {\n                return [...prevState, acl];\n              })\n            }\n            setAcls={setNewAcls}\n            setEscapeClosesModal={setEscapeClosesModal}\n            acls={aclsForSelectedAccount}\n            consumerGroupIds={consumerGroupIds}\n            selectedAccount={selectedAccount}\n            selectedAccountId={selectedAccount.value}\n            newAcls={newAcls}\n            topicNames={topicNames}\n            resourceOperations={resourceOperations}\n            kafkaName={kafkaName}\n          />\n        )}\n      </Form>\n    </Modal>\n  );\n};\n\ntype Step2Props = {\n  selectedAccount: Validated<string | undefined>;\n  selectedAccountId: string | undefined;\n  acls: Array<AclBinding>;\n  newAcls: NewAcls[];\n  onRemoveAcl: (acl: EnhancedAclBinding) => void;\n} & Omit<CreatePermissionsProps, 'acls' | 'menuAppendTo' | 'selectedAccount'>;\nconst Step2: VoidFunctionComponent<Step2Props> = ({\n  kafkaName,\n  topicNames,\n  consumerGroupIds,\n  selectedAccount,\n  selectedAccountId,\n  resourceOperations,\n  acls,\n  newAcls,\n  onRemoveAcl,\n  setAcls,\n  setEscapeClosesModal,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  const menuAppendTo =\n    document.getElementById('manage-permissions-modal') || undefined;\n\n  return (\n    <>\n      {isFormInvalid(newAcls) && (\n        <FormAlert>\n          <Alert\n            variant='danger'\n            title={t('common:form_invalid_alert')}\n            aria-live='polite'\n            isInline\n          />\n        </FormAlert>\n      )}\n      <ExistingAclTable\n        existingAcls={acls}\n        selectedAccountId={selectedAccountId}\n        onRemove={onRemoveAcl}\n      />\n      <CreatePermissions\n        acls={newAcls}\n        setAcls={setAcls}\n        topicNames={topicNames}\n        consumerGroupIds={consumerGroupIds}\n        selectedAccount={selectedAccount.value}\n        setEscapeClosesModal={setEscapeClosesModal}\n        resourceOperations={resourceOperations}\n        menuAppendTo={menuAppendTo}\n        kafkaName={kafkaName}\n      />\n    </>\n  );\n};\n\nfunction isFormInvalid(newAcls: NewAcls[]): boolean {\n  return newAcls.some((value) => {\n    value = Array.isArray(value) ? value : [value];\n    return value?.some(\n      (v) =>\n        v.operation.validated === 'error' ||\n        v.patternType.validated === 'error' ||\n        v.resource.validated === 'error' ||\n        v.resourceType.validated === 'error'\n    );\n  });\n}\n\nexport default ManagePermissions;\n","import { ResourceOperationValue } from '@rhoas/app-services-ui-components/types/src/Kafka/ManageKafkaPermissions/components/ResourceOperation';\nimport { ResourceTypeValue } from '@rhoas/app-services-ui-components/types/src/Kafka/ManageKafkaPermissions/components/ResourceType';\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { sentenceCase } from 'sentence-case';\n\nexport const displayName = (resourceType: AclResourceType): string => {\n  switch (resourceType) {\n    case AclResourceType.Group:\n      return 'Consumer group';\n\n    case AclResourceType.Topic:\n      return 'Topic';\n\n    case AclResourceType.Cluster:\n      return 'Kafka instance';\n\n    case AclResourceType.TransactionalId:\n      return 'Transactional ID';\n\n    default:\n      return sentenceCase(resourceType);\n  }\n};\n\nexport const transformResourceType = (value: ResourceTypeValue | undefined) => {\n  switch (value) {\n    case 'consumer-group':\n      return AclResourceType.Group;\n    case 'kafka-instance':\n      return AclResourceType.Cluster;\n    case 'topic':\n      return AclResourceType.Topic;\n    default:\n      return AclResourceType.TransactionalId;\n  }\n};\nexport const transformResourceOperation = (\n  value: ResourceOperationValue | undefined\n) => {\n  switch (value) {\n    case 'All':\n      return 'ALL';\n    case 'Alter':\n      return 'ALTER';\n    case 'Alter configs':\n      return 'ALTER_CONFIGS';\n    case 'Create':\n      return 'CREATE';\n    case 'Delete':\n      return 'DELETE';\n    case 'Describe':\n      return 'DESCRIBE';\n    case 'Describe configs':\n      return 'DESCRIBE_CONFIGS';\n    case 'Read':\n      return 'READ';\n    default:\n      return 'WRITE';\n  }\n};\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const useValidateTopic = (): {\n  validateName(name: string): string | undefined;\n} => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return {\n    validateName: useCallback(\n      (name) => {\n        const legalNameChars = new RegExp('^[a-zA-Z0-9._-]+$');\n        if (name.length && !legalNameChars.test(name)) {\n          return t('topic.topic_name_helper_text');\n        } else if (name.length > 249) {\n          return t('topic.cannot_exceed_characters');\n        } else if (name === '.' || name === '..') {\n          return t('topic.invalid_name_with_dot');\n        }\n        return undefined;\n      },\n      [t]\n    ),\n  };\n};\n","import { useCallback, useMemo } from 'react';\nimport { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type EnhancedAclBinding = AclBinding & {\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const usePermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = useCallback(\n    async (\n      filter: AclFilter,\n      size?: number,\n      page?: number\n    ): Promise<EnhancedAclBindingListPage> => {\n      const accessToken = await config?.getToken();\n\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n        filter.resourceType,\n        filter.resourceName,\n        filter.patternType,\n        filter.principal,\n        filter.operation,\n        filter.permissionType,\n        page,\n        size\n      );\n      return enhanceAclBindingListPage(response);\n    },\n    [config]\n  );\n\n  const addPermission = useCallback(\n    async (acl: AclBinding) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.createAcl(acl);\n    },\n    [config]\n  );\n\n  const deletePermission = useCallback(\n    async (acl: AclFilter) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.deleteAcls(\n        acl.resourceType,\n        acl.resourceName,\n        acl.patternType,\n        acl.principal,\n        acl.operation,\n        acl.permissionType\n      );\n    },\n    [config]\n  );\n\n  const getResourceOperations = useCallback(async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return api.getAclResourceOperations().then((response) => response.data);\n  }, [config]);\n\n  return useMemo(() => {\n    return {\n      getPermissions,\n      addPermission,\n      deletePermission,\n      getResourceOperations,\n    } as PermissionsService;\n  }, [getPermissions, addPermission, deletePermission, getResourceOperations]);\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        return {\n          ...item,\n          // Strip out the \"User:\" prefix\n          principal: item.principal.substring(5),\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["FormGroupWithPopover","children","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","validated","helperText","helperTextInvalid","isRequired","FormGroup","label","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","rowDataTestId","useContext","trRef","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","undefined","css","rowId","hidden","MASTable","tableProps","tableHeaderProps","tableBodyProps","ouiaId","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","SolidLabel","labelColor","content","AclResourceType","variantSwitch","Label","color","AllAccountsPrincipal","t","useTranslation","PrincipalWithTooltip","acl","currentlyLoggedInuser","setCurrentlyLoggedInuser","useState","auth","useAuth","kafka","locatedPrincipals","usePrincipals","getAllPrincipals","filter","p","id","owner","principal","useEffect","username","getUsername","length","principalType","PrincipalType","Tooltip","InfoCircleIcon","displayName","emailAddress","principalCell","item","title","permissionOperationCell","LabelGroup","permission","AclPermissionType","sentenceCase","operation","resourceCell","PatternType","patternType","AclPatternType","resourceType","resourceName","SelectAccount","setId","initialOptions","setEscapeClosesModal","isOpen","setIsOpen","clearSelection","options","SelectGroup","SelectOption","description","Divider","sort","a","b","localeCompare","map","index","errorMessage","ValidatedOptions","Select","SelectVariant","typeAheadAriaLabel","onToggle","newState","onSelect","_","selection","isPlaceholder","onClear","selections","onFilter","input","RegExp","accounts","Array","isArray","account","allAccounts","test","placeholderText","isCreatable","menuAppendTo","isGrouped","isNewAclModified","emptyAcl","createEmptyNewAcl","some","v","aclShortcutType","AclShortcutType","ManageAccess","resource","update2DArrayAcls","prevAcls","newAcl","childRow","el","handle2DArrayAcls","acls","CreateSelect","setSelected","selected","placeholder","P","isInputValuePersisted","maxHeight","direction","option","isDisabled","disabled","OperationCell","setAcls","resourceOperations","toString","snakeCase","operationType","prevState","k","newPrevState","PermissionTypeCell","operations","numLabels","ResourceType","kafkaName","ConsumeTopic","ProduceTopic","PatternTypeCell","CreateTypeahead","setValue","setOptions","o","onCreateOption","newValue","createText","ResourceCell","topicNames","consumerGroupIds","validateName","toLowerCase","RemoveButtonCell","removeRow","Button","icon","CreatePermissions","selectedAccount","tableColumns","columnTransforms","cellWidth","TextContent","Text","component","TextVariants","account_id","TableComposable","Thead","noWrap","Tr","col","Th","Tbody","style","borderBottom","Td","colSpan","metaData","popoverHeader","popoverBody","ButtonVariant","width","noPadding","preparedRows","ActionList","ActionListItem","PermissionsDropdown","onAddPermission","onShortcutProduceTopic","AclOperation","onShortcutConsumeTopic","onShortcutManageAccess","ExistingAclTable","existingAcls","selectedAccountId","onRemove","answer","RemoveButton","TrashIcon","hash","removed","AllAccountsLabel","Trans","ns","i18nKey","f","TableVariant","canSelectAll","PreCancelModal","closeModal","resumeEditing","Modal","ModalVariant","titleIconVariant","showClose","onClose","onEscapePress","actions","hideModal","onSave","config","permissionsService","getResourceOperations","setResourceOperations","ManagePermissionsModal","setSelectedAccount","step","setStep","newAcls","setNewAcls","removeAcls","setRemoveAcls","isOpenPreCancelModal","setIsOpenPreCancelModal","escapeClosesModal","useRef","principals","setValidationAcls","Object","assign","saveAcl","addPermission","deleteAcls","deletePermission","AclPatternTypeFilter","permissionType","AclPermissionTypeFilter","AclResourceTypeFilter","AclOperationFilter","closes","current","isDisabledSaveButton","closePermissionModal","aclsForSelectedAccount","i","position","valid","validatedAcls","isFormInvalid","forEach","Error","validateAcls","Form","Step2","onRemoveAcl","document","getElementById","FormAlert","Alert","isInline","transformResourceType","transformResourceOperation","useValidateTopic","useCallback","name","legalNameChars","convertEnum","entries","find","usePermissionsService","getPermissions","size","page","accessToken","getToken","api","AclsApi","Configuration","basePath","response","getAcls","enhanceAclBindingListPage","createAcl","getAclResourceOperations","then","data","useMemo","total","items","substring","getPermissionsTypes","values","getOperations","getResourceTypes","getPatternTypes"],"sourceRoot":""}