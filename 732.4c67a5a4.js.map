{"version":3,"file":"732.4c67a5a4.js","mappings":"4IAkBaA,E,MAAmB,sBAC9BC,GAEWC,EAAe,WAC1B,WAAAC,YAAWH,K,4HCkBb,QAxB2E,SAAC,G,IAC1EI,EAAQ,WACRC,EAAW,cACXC,EAAS,YACTC,EAAa,gBACbC,EAAiB,oBAEjB,OACE,kBAAC,EAAAC,gBAAe,CAACC,KAAM,KACrB,kBAAC,aAAsB,CAACC,MAAO,CAAEC,SAAUP,EAAaD,SAAQ,IAC9D,kBAAC,aAAyB,CACxBO,MAAO,CACLL,UAAS,EACTC,cAAa,EACbC,kBAAiB,IAGnB,kBAAC,IAAe","sources":["webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Topics/pages/CreateTopic/CreateTopicFederated.tsx"],"sourcesContent":["import React, { useContext } from 'react';\n\nexport type FederatedProps = {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React, { FunctionComponent } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { CreateTopicPage } from '@app/modules/Topics/pages/CreateTopic/CreateTopicPage';\nimport kafkai18n from '@app/i18n';\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\n\nexport type CreateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst CreateTopicFederated: FunctionComponent<CreateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n}) => {\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <FederatedContext.Provider\n          value={{\n            kafkaName,\n            kafkaPageLink,\n            kafkaInstanceLink,\n          }}\n        >\n          <CreateTopicPage />\n        </FederatedContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default CreateTopicFederated;\n"],"names":["FederatedContext","undefined","useFederated","useContext","getToken","apiBasePath","kafkaName","kafkaPageLink","kafkaInstanceLink","I18nextProvider","i18n","value","basePath"],"sourceRoot":""}