{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepTopicName.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepPartitions.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepMessageRetention.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepReplicas.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicWizard.tsx","webpack://kafka-ui/./src/Components/DropdownWithToggle.tsx","webpack://kafka-ui/./src/Components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/Components/SizeTimeFormGroup/SizeTimeFormGroup.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/MessageSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CoreConfiguration.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/LogSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/ReplicationSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/IndexSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/FlushSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CleanupSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/TopicAdvanceConfig.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/utils.ts"],"names":["StepTopicName","topicNameInput","setTopicNameInput","TextContent","className","Text","component","TextVariants","Form","onSubmit","event","preventDefault","FormGroup","label","fieldId","TextInput","isRequired","type","id","name","value","onChange","placeholder","StepPartitions","partitionTouchspinValue","setPartitionTouchspinValue","NumberInput","onPlus","onMinus","inputName","Number","target","StepMessageRetention","RetentionOption","setMsgRetentionValue","DAY","currentPeriod","setCurrentPeriod","useState","msgTouchspinValue","setMsgTouchspinValue","isMsgSelectOpen","setIsMsgSelectOpen","selected","setSelected","retentionFactor","setRetentionFactor","useEffect","WEEK","MONTH","CUSTOM","handleMessageRetention","checked","Radio","isChecked","Flex","FlexItem","Select","variant","SelectVariant","onToggle","onSelect","selection","selections","isOpen","SelectOption","key","isPlaceholder","StepReplicas","ReplicationOption","setReplicationFactorTouchspinValue","setMinInSyncReplicaTouchspinValue","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","ONE","currentReplicationFactor","setCurrentReplicationFactor","handleChangeReplicationFactor","TWO","description","CreateTopicWizard","setIsCreateTopic","config","useContext","alertVisible","setAlertVisible","isSwitchChecked","setIsSwitchChecked","store","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","closeWizard","saveTopic","topic","settings","numPartitions","replicationFactor","basePath","accessToken","getToken","createTopic","then","res","status","steps","enableNext","trim","canJumpTo","nextButtonText","title","PageSection","PageSectionVariants","AlertGroup","isToast","Alert","isLiveRegion","actionClose","AlertActionCloseButton","onClose","Title","headingLevel","size","Switch","labelOff","Divider","TopicAdvanceConfig","isCreate","padding","default","Wizard","navAriaLabel","mainAriaLabel","onSave","DropdownWithToggle","options","toggleId","items","ariaLabel","onSelectOption","setIsOpen","dropdownToggle","DropdownToggle","toggleIndicator","CaretDownIcon","Dropdown","e","currentTarget","textContent","toggle","dropdownItems","map","option","DropdownItem","FormGroupWithPopover","children","labelHead","fieldLabel","labelBody","buttonAriaLabel","labelIcon","Popover","headerContent","bodyContent","onClick","HelpIcon","noVerticalAlign","SizeTimeFormGroup","dropdownValue","plusBtnProps","minusBtnProps","timeUnits","isDisabled","memoryUnits","grow","getItemsForType","timeStampOptions","messageCompressionTypes","MessageSection","updateStore","t","useTranslation","handleTouchSpinInputChange","fieldName","handleTouchSpinPlus","handleTouchSpinMinus","onDropdownChange","onDropdownChangeDotSeparated","tabIndex","CoreConfiguration","handleTouchSpinInputChangeCamelCase","handleTouchSpinPlusCamelCase","handleTouchSpinMinusCamelCase","clearOptions","LogSection","ReplicationSection","handleTextInputChange","Checkbox","Boolean","InputGroup","IndexSection","FlushSection","CleanupSection","preallocate","deleteTopic","actionText","Grid","hasGutter","GridItem","span","style","JumpLinks","isVertical","scrollableSelector","position","JumpLinksItem","href","PageGroup","hasOverflowScroll","ActionGroup","Button","kebabToCamel","kebabCase","split","word","index","text","charAt","toUpperCase","slice","join","kebabToDotSeparated","val","replaceAll","unitsToBytes","bytes","kilobytes","megabytes","gigabytes","terabytes","unitsToMilliSecond","milliseconds","seconds","days","months","years","convertUnits","topicData","pop","String","formatTopicRequest","configEntries","push","toString"],"mappings":"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","file":"3b97ff8f78ef28b9032d.bundle.js","sourcesContent":["import React from 'react';\nimport {\n  Form,\n  FormGroup,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepTopicName {\n  topicNameInput: string;\n  setTopicNameInput: (value: string) => void;\n}\n\nexport const StepTopicName: React.FC<IStepTopicName> = ({\n  topicNameInput,\n  setTopicNameInput,\n}) => {\n  const handleTopicNameChange = (topicNameInput) => {\n    setTopicNameInput(topicNameInput);\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <TextContent className='topics-wizard-content'>\n      <Text component={TextVariants.h2}>Topic name</Text>\n      <Text component={TextVariants.p}>\n        This is the unique name used to recognize your topic.\n      </Text>\n      <Text component={TextVariants.small}>\n        It will also be used by your producers and consumers as part of the\n        connection information, so make it something easy to recognize.\n      </Text>\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          label='Topic name'\n          fieldId='step-topic-name-form'\n          // helperText=\"Please enter your topic name\"\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            aria-describedby='step-topic-name-helper'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder='Enter topic name'\n          />\n        </FormGroup>\n      </Form>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepPartitions {\n  setPartitionTouchspinValue: (value: number) => void;\n  partitionTouchspinValue: number;\n}\n\nexport const StepPartitions: React.FC<IStepPartitions> = ({\n  partitionTouchspinValue,\n  setPartitionTouchspinValue,\n}) => {\n  const handleOnPlus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue + 1);\n  };\n  const handleOnMinus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue - 1);\n  };\n  const handlePartitionTouchspinChange = (event) => {\n    setPartitionTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <TextContent className='topics-wizard-content'>\n      <Text component={TextVariants.h2}>Partitions</Text>\n      <Text component={TextVariants.p}>\n        One or more partitions make up a topic. A partition is an ordered list\n        of messages.\n      </Text>\n      <Text component={TextVariants.small}>\n        Partitions are distributed across the brokers in order to increase the\n        scalability of your topic. You can also use them to distribute messages\n        across the members of a consumer group.\n      </Text>\n      <NumberInput\n        onPlus={handleOnPlus}\n        onMinus={handleOnMinus}\n        value={partitionTouchspinValue}\n        inputName='input'\n        onChange={handlePartitionTouchspinChange}\n      />\n    </TextContent>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepMessageRetention {\n  setMsgRetentionValue: (value: number) => void;\n}\n\nexport const StepMessageRetention: React.FC<IStepMessageRetention> = ({\n  setMsgRetentionValue,\n}) => {\n  enum RetentionOption {\n    DAY = 1,\n    WEEK = 7,\n    MONTH = 30,\n    CUSTOM = 'custom',\n  }\n\n  const [currentPeriod, setCurrentPeriod] = React.useState<string | number>(\n    RetentionOption.DAY\n  );\n  const [msgTouchspinValue, setMsgTouchspinValue] = useState(7);\n  const [isMsgSelectOpen, setIsMsgSelectOpen] = useState(false);\n  const [selected, setSelected] = useState(false);\n  const [retentionFactor, setRetentionFactor] = useState(1);\n\n  useEffect(() => {\n    if (currentPeriod === RetentionOption.DAY) {\n      setMsgRetentionValue(RetentionOption.DAY);\n    } else if (currentPeriod === RetentionOption.WEEK) {\n      setMsgRetentionValue(RetentionOption.WEEK);\n    } else if (currentPeriod === RetentionOption.MONTH) {\n      setMsgRetentionValue(RetentionOption.MONTH);\n    } else if (currentPeriod === RetentionOption.CUSTOM) {\n      setMsgRetentionValue(retentionFactor * msgTouchspinValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPeriod, msgTouchspinValue, retentionFactor]);\n\n  const handleMessageRetention = (checked, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radio1') {\n      setCurrentPeriod(RetentionOption.DAY);\n    } else if (name === 'radio2') {\n      setCurrentPeriod(RetentionOption.WEEK);\n    } else if (name === 'radio3') {\n      setCurrentPeriod(RetentionOption.MONTH);\n    } else if (name === 'radio4') {\n      setCurrentPeriod(RetentionOption.CUSTOM);\n    }\n  };\n\n  const onMsgToggle = (isMsgSelectOpen) => {\n    setIsMsgSelectOpen(isMsgSelectOpen);\n  };\n\n  const onMsgSelect = (event, selection) => {\n    if (selection === 'days') {\n      setRetentionFactor(RetentionOption.DAY);\n    } else if (selection === 'weeks') {\n      setRetentionFactor(RetentionOption.WEEK);\n    } else if (selection === 'months') {\n      setRetentionFactor(RetentionOption.MONTH);\n    }\n    setSelected(selection);\n    setIsMsgSelectOpen(false);\n  };\n\n  const handlePlusClick = () => {\n    setMsgTouchspinValue(msgTouchspinValue + 1);\n  };\n\n  const handleMinusClick = () => {\n    setMsgTouchspinValue(msgTouchspinValue - 1);\n  };\n\n  const handleMsgTouchSpinChange = (event) => {\n    setMsgTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <TextContent className='topics-wizard-content'>\n        <Text component={TextVariants.h2}>Message retention</Text>\n        <Text component={TextVariants.p}>\n          This is how long messages are retained before they are deleted.\n        </Text>\n        <Text component={TextVariants.small}>\n          If your messages are not read by a consumer within this time, they\n          will be missed.\n        </Text>\n      </TextContent>\n      <Form className='form-in-wizard' onSubmit={preventFormSubmit}>\n        <FormGroup\n          fieldId='form-group-in-wizard'\n          label='Message retention'\n          className='form-group-radio'\n        >\n          <Radio\n            isChecked={currentPeriod === RetentionOption.DAY}\n            name='radio1'\n            onChange={handleMessageRetention}\n            label='A day'\n            aria-label='A day'\n            id='radio-controlled-1'\n            value='day'\n          />\n          <Radio\n            isChecked={currentPeriod === RetentionOption.WEEK}\n            name='radio2'\n            onChange={handleMessageRetention}\n            label='A week'\n            aria-label='A week'\n            id='radio-controlled-2'\n            value='week'\n          />\n          <Radio\n            isChecked={currentPeriod === RetentionOption.MONTH}\n            name='radio3'\n            onChange={handleMessageRetention}\n            label='A month'\n            aria-label='A month'\n            id='radio-controlled-3'\n            value='month'\n          />\n          <Radio\n            isChecked={currentPeriod === RetentionOption.CUSTOM}\n            name='radio4'\n            onChange={handleMessageRetention}\n            label=''\n            aria-label='custom input'\n            id='radio-controlled-4'\n            value='custom'\n          />\n          <div className='radio-description radio-step-3'>\n            <Flex>\n              <FlexItem>\n                <NumberInput\n                  onMinus={handleMinusClick}\n                  onPlus={handlePlusClick}\n                  value={msgTouchspinValue}\n                  onChange={handleMsgTouchSpinChange}\n                />\n              </FlexItem>\n              <FlexItem>\n                <Select\n                  variant={SelectVariant.single}\n                  aria-label='Select Input'\n                  onToggle={onMsgToggle}\n                  onSelect={onMsgSelect}\n                  selections={selected}\n                  isOpen={isMsgSelectOpen}\n                  // aria-labelledby={titleId}\n                >\n                  <SelectOption key={0} value='days' isPlaceholder />\n                  <SelectOption key={1} value='weeks' />\n                  <SelectOption key={2} value='months' />\n                </Select>\n              </FlexItem>\n            </Flex>\n          </div>\n        </FormGroup>\n      </Form>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepReplicas {\n  setReplicationFactorTouchspinValue: (value: number) => void;\n  setMinInSyncReplicaTouchspinValue: (value: number) => void;\n  replicationFactorTouchspinValue: number;\n  minInSyncReplicaTouchspinValue: number;\n}\n\nexport const StepReplicas: React.FC<IStepReplicas> = ({\n  setReplicationFactorTouchspinValue,\n  setMinInSyncReplicaTouchspinValue,\n  replicationFactorTouchspinValue,\n  minInSyncReplicaTouchspinValue,\n}) => {\n  enum ReplicationOption {\n    ONE = 1,\n    TWO = 2,\n    CUSTOM = 'custom',\n  }\n\n  const [\n    currentReplicationFactor,\n    setCurrentReplicationFactor,\n  ] = React.useState<string | number>(ReplicationOption.ONE);\n  const handleChangeReplicationFactor = (checked, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radio4') {\n      setCurrentReplicationFactor(ReplicationOption.ONE);\n      setMinInSyncReplicaTouchspinValue(ReplicationOption.ONE);\n      setReplicationFactorTouchspinValue(ReplicationOption.ONE);\n    } else if (name === 'radio5') {\n      setCurrentReplicationFactor(ReplicationOption.TWO);\n      setMinInSyncReplicaTouchspinValue(ReplicationOption.TWO);\n      setReplicationFactorTouchspinValue(ReplicationOption.TWO);\n    } else if (name === 'radio6') {\n      setCurrentReplicationFactor(ReplicationOption.CUSTOM);\n      setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue);\n      setReplicationFactorTouchspinValue(replicationFactorTouchspinValue);\n    }\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  const handleOnPlusReplicationFactor = () => {\n    setReplicationFactorTouchspinValue(replicationFactorTouchspinValue + 1);\n  };\n  const handleOnMinusReplicationFactor = () => {\n    setReplicationFactorTouchspinValue(replicationFactorTouchspinValue - 1);\n  };\n  const handleReplicationFactorChange = (event) => {\n    setReplicationFactorTouchspinValue(Number(event.target.value));\n  };\n\n  const handleOnPlusMinInSyncReplicaFactor = () => {\n    setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue + 1);\n  };\n  const handleOnMinusMinInSyncReplicaFactor = () => {\n    setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue - 1);\n  };\n  const handleMinInSyncReplicaChange = (event) => {\n    setMinInSyncReplicaTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <TextContent className='topics-wizard-content'>\n      <Text component={TextVariants.h2}>Replicas</Text>\n      <Text component={TextVariants.p}>\n        This is how many copies of a topic will be made for high availability.\n      </Text>\n      <Text component={TextVariants.small}>\n        The partitions of each topic can be replicated across a configurable\n        number of brokers.\n      </Text>\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          fieldId='create-wizard-replica-form-group'\n          label='Replicas'\n          className='form-group-radio'\n        >\n          <Radio\n            isChecked={currentReplicationFactor === ReplicationOption.ONE}\n            name='radio4'\n            onChange={handleChangeReplicationFactor}\n            label='Replication factor: 1'\n            id='radio-controlled-4'\n            value='radio4'\n            description='Minimum in-sync replicas: 1'\n          />\n          <Radio\n            isChecked={currentReplicationFactor === ReplicationOption.TWO}\n            name='radio5'\n            onChange={handleChangeReplicationFactor}\n            label='Replication factor: 2'\n            id='radio-controlled-5'\n            value='radio5'\n            description='Minimum in-sync replicas: 2'\n          />\n          <Radio\n            isChecked={currentReplicationFactor === ReplicationOption.CUSTOM}\n            name='radio6'\n            onChange={handleChangeReplicationFactor}\n            label='Replication factor'\n            id='radio-controlled-6'\n            value='radio6'\n          />\n          <div className='radio-description'>\n            <NumberInput\n              value={replicationFactorTouchspinValue}\n              onMinus={handleOnMinusReplicationFactor}\n              onPlus={handleOnPlusReplicationFactor}\n              onChange={handleReplicationFactorChange}\n            />\n            <Text\n              component={TextVariants.small}\n              className='minimum-in-sync-replicas'\n            >\n              Minimum in-sync replicas\n            </Text>\n            <NumberInput\n              value={minInSyncReplicaTouchspinValue}\n              onMinus={handleOnMinusMinInSyncReplicaFactor}\n              onPlus={handleOnPlusMinInSyncReplicaFactor}\n              onChange={handleMinInSyncReplicaChange}\n            />\n          </div>\n        </FormGroup>\n      </Form>\n    </TextContent>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertGroup,\n  Breadcrumb,\n  BreadcrumbItem,\n  Divider,\n  PageSection,\n  PageSectionVariants,\n  Switch,\n  Title,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { StepTopicName } from './StepTopicName';\nimport { StepPartitions } from './StepPartitions';\nimport { StepMessageRetention } from './StepMessageRetention';\nimport { StepReplicas } from './StepReplicas';\nimport './CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from './TopicAdvanceConfig';\nimport { DefaultApi, NewTopicInput } from '../../../../OpenApi/api';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { convertUnits, formatTopicRequest } from '../utils';\nimport { ConfigContext } from '../../../../Contexts';\nimport { Configuration } from '../../../../OpenApi';\n\ninterface ICreateTopicWizard {\n  setIsCreateTopic?: (value: boolean) => void;\n}\n\nexport const CreateTopicWizard: React.FC<ICreateTopicWizard> = ({\n  setIsCreateTopic,\n}) => {\n  const config = useContext(ConfigContext);\n\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [isSwitchChecked, setIsSwitchChecked] = useState(false);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [topicNameInput, setTopicNameInput] = useState('');\n  const [partitionTouchspinValue, setPartitionTouchspinValue] = useState(1);\n  const [\n    replicationFactorTouchspinValue,\n    setReplicationFactorTouchspinValue,\n  ] = useState(1);\n  const [\n    minInSyncReplicaTouchspinValue,\n    setMinInSyncReplicaTouchspinValue,\n  ] = useState(1);\n  const { store } = React.useContext(TopicContext);\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='/openshiftstreams'>\n        Red Hat OpenShift Streams for Apache Kafka\n      </BreadcrumbItem>\n      <BreadcrumbItem to='/openshiftstreams'>\n        MK Cluster Instance\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        Create topic\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  const handleAlertClose = () => {\n    setAlertVisible(true);\n  };\n\n  const closeWizard = () => {\n    if (setIsCreateTopic) {\n      setIsCreateTopic(false);\n    }\n  };\n\n  const saveTopic = () => {\n    //Object may change based on schema\n\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(store))\n      : {\n          name: topicNameInput,\n          settings: {\n            numPartitions: partitionTouchspinValue,\n            replicationFactor: replicationFactorTouchspinValue,\n          },\n        };\n\n    new DefaultApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then((res) => {\n        if (res.status === 200) {\n          setAlertVisible(true);\n        }\n        closeWizard();\n      });\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: 'Topic name',\n      enableNext: topicNameInput.trim() !== '',\n      component: (\n        <StepTopicName\n          topicNameInput={topicNameInput}\n          setTopicNameInput={setTopicNameInput}\n        />\n      ),\n    },\n    {\n      name: 'Partitions',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepPartitions\n          partitionTouchspinValue={partitionTouchspinValue}\n          setPartitionTouchspinValue={setPartitionTouchspinValue}\n        />\n      ),\n    },\n    {\n      name: 'Message retention',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepMessageRetention setMsgRetentionValue={setMsgRetentionValue} />\n      ),\n    },\n    {\n      name: 'Replicas',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepReplicas\n          setReplicationFactorTouchspinValue={\n            setReplicationFactorTouchspinValue\n          }\n          setMinInSyncReplicaTouchspinValue={setMinInSyncReplicaTouchspinValue}\n          replicationFactorTouchspinValue={replicationFactorTouchspinValue}\n          minInSyncReplicaTouchspinValue={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: 'Finish',\n    },\n  ];\n\n  const title = 'Create topics wizard';\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <AlertGroup isToast>\n          {alertVisible ? (\n            <Alert\n              isLiveRegion\n              variant='success'\n              title='OpenShift Streams topic created'\n              actionClose={\n                <AlertActionCloseButton\n                  aria-label='Close success alert'\n                  onClose={handleAlertClose}\n                />\n              }\n            >\n              The topic was successfully created in the Kafka instance.\n            </Alert>\n          ) : (\n            <></>\n          )}\n        </AlertGroup>\n\n        <Title headingLevel='h1' size='lg'>\n          Create topic\n        </Title>\n        <Switch\n          id='simple-switch'\n          label='Show all available options'\n          labelOff='Show all available options'\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n      <Divider />\n      {isSwitchChecked ? (\n        <>\n          <Divider />\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig isCreate={true} saveTopic={saveTopic} />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value = e.currentTarget.textContent;\n    if (onSelectOption) {\n      e.target.name = name;\n      onSelectOption(value, e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {value}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n    />\n  );\n};\n","import { FormGroup, Popover } from '@patternfly/react-core';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\ninterface IFormGroupWithPopoverProps {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n}\n\nexport const FormGroupWithPopover: React.FC<IFormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import {\n  Flex,\n  FlexItem,\n  NumberInput,\n  NumberInputProps,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { DropdownWithToggle, IDropdownOption } from '../DropdownWithToggle';\n\nexport interface SizeTimeFormGroup extends NumberInputProps {\n  /** id of dropdown element */\n  id: string;\n  /** id of dropdown toggle button */\n  toggleId: string;\n  /** id of dropdown element */\n  dropdownValue?: string;\n  /** name attribute of dropdown element */\n  name: string;\n  /** handler method of dropdown */\n  onSelectOption?: (value: string, event) => void;\n  /** aria label for dropdown element */\n  ariaLabel?: string;\n  /** determines whether to display memory units or time units */\n  type: string;\n}\n\nexport const SizeTimeFormGroup: React.FC<SizeTimeFormGroup> = ({\n  id,\n  toggleId,\n  dropdownValue,\n  ariaLabel,\n  onSelectOption,\n  name,\n  inputName,\n  onChange,\n  onPlus,\n  onMinus,\n  value,\n  plusBtnProps,\n  minusBtnProps,\n  type,\n}) => {\n  const timeUnits: IDropdownOption[] = [\n    { key: 'milliseconds', value: 'milliseconds', isDisabled: false },\n    { key: 'seconds', value: 'seconds', isDisabled: false },\n    { key: 'days', value: 'days', isDisabled: false },\n    { key: 'months', value: 'months', isDisabled: false },\n    { key: 'years', value: 'years', isDisabled: false },\n  ];\n\n  const memoryUnits: IDropdownOption[] = [\n    { key: 'bytes', value: 'bytes', isDisabled: false },\n    { key: 'kilobytes', value: 'kilobytes', isDisabled: false },\n    { key: 'megabytes', value: 'megabytes', isDisabled: false },\n    { key: 'gigabytes', value: 'gigabytes', isDisabled: false },\n    { key: 'terabytes', value: 'terabytes', isDisabled: false },\n  ];\n\n  const getItemsForType = (type: string) => {\n    switch (type) {\n      case 'time':\n        return timeUnits;\n      case 'memory':\n        return memoryUnits;\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem grow={{ default: 'grow' }}>\n        <NumberInput\n          inputName={inputName}\n          onChange={onChange}\n          onPlus={onPlus}\n          onMinus={onMinus}\n          value={value}\n          plusBtnProps={plusBtnProps}\n          minusBtnProps={minusBtnProps}\n        />\n      </FlexItem>\n      <FlexItem>\n        <DropdownWithToggle\n          id={id}\n          toggleId={toggleId}\n          ariaLabel={ariaLabel}\n          onSelectOption={onSelectOption}\n          items={getItemsForType(type)}\n          name={name}\n          value={dropdownValue || ''}\n        />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import { TextVariants, Text, TextContent, Form } from '@patternfly/react-core';\nimport React from 'react';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nconst timeStampOptions: IDropdownOption[] = [\n  { key: 'create-time', value: 'CreateTime', isDisabled: false },\n  { key: 'log-append-time', value: 'LogAppendTime', isDisabled: false },\n];\n\nconst messageCompressionTypes: IDropdownOption[] = [\n  { key: 'Producer', value: 'Producer', isDisabled: false },\n  { key: 'Gzip', value: 'Gzip', isDisabled: false },\n  { key: 'Snappy', value: 'Snappy', isDisabled: false },\n  { key: 'LZ4', value: 'LZ4', isDisabled: false },\n  { key: 'Zstandard', value: 'Zstandard', isDisabled: false },\n  { key: 'Uncompressed', value: 'Uncompressed', isDisabled: false },\n];\n\nconst MessageSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n          Messages\n        </Text>\n        <Text component={TextVariants.p}>\n          {t('createTopic.messageSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='maxsize'\n          fieldLabel='Maximum message size'\n          labelHead={t('createTopic.maxMessageSizeLabelHead')}\n          labelBody={t('createTopic.maxMessageSizeLabelBody')}\n          buttonAriaLabel='More info for maximum message size field'\n        >\n          <SizeTimeFormGroup\n            inputName='max-message-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['max.message.bytes'])}\n            plusBtnProps={{ name: 'max-message-bytes' }}\n            minusBtnProps={{ name: 'max-message-bytes' }}\n            id='msg-section-units-dropdown'\n            toggleId='msg-section-units-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='max-message-bytes-unit'\n            dropdownValue={store['max.message.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='timestamp'\n          fieldLabel='Message timestamp type'\n          labelHead={t('createTopic.messageTimestampLabelHead')}\n          labelBody={t('createTopic.messageTimestampLabelBody')}\n          buttonAriaLabel='More info for message timestamp field'\n        >\n          <DropdownWithToggle\n            id='msg-section-timestamp-dropdown'\n            toggleId='msg-section-timestamp-dropdowntoggle'\n            ariaLabel='select timestamp type from dropdown'\n            name='message-timestamp-type'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={timeStampOptions}\n            value={store['message.timestamp.type'] || ''}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='max-difference'\n          fieldLabel='Message timestamp difference'\n          labelHead={t('createTopic.messageTimestampDiffLabelHead')}\n          labelBody={t('createTopic.messageTimestampDiffLabelBody')}\n          buttonAriaLabel='More info for maximum message timestamp difference field'\n        >\n          <SizeTimeFormGroup\n            inputName='message-timestamp-difference-max-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['message.timestamp.difference.max.ms'])}\n            plusBtnProps={{ name: 'message-timestamp-difference-max-ms' }}\n            minusBtnProps={{ name: 'message-timestamp-difference-max-ms' }}\n            id='msg-section-timestamp-diff-units-dropdown'\n            toggleId='msg-section-timestamp-diff-units-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='message-timestamp-difference-max-ms-unit'\n            dropdownValue={store['message.timestamp.difference.max.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='compression-type'\n          fieldLabel='Compression type'\n          labelHead={t('createTopic.compressionTypeLabelHead')}\n          labelBody={t('createTopic.compressionTypeLabelBody')}\n          buttonAriaLabel='More info for comprssion type field'\n        >\n          <DropdownWithToggle\n            id='compression-type'\n            toggleId='msg-section-compression-type-dropdowntoggle'\n            ariaLabel='select timestamp type from dropdown'\n            name='compression-type'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={messageCompressionTypes}\n            value={store['compression.type'] || ''}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </>\n  );\n};\n\nexport { MessageSection };\n","import {\n  Form,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  Title,\n  NumberInput,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToCamel, kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nconst CoreConfiguration: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToCamel(fieldName), value);\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinInputChangeCamelCase = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToCamel(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinPlusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const handleTouchSpinMinusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Title\n          headingLevel='h2'\n          size='2xl'\n          id='core-configuration'\n          tabIndex={-1}\n        >\n          Core configuration\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.coreConfigInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          labelHead={t('createTopic.topicNameLabelHead')}\n          fieldId='create-topic-name'\n          fieldLabel='Topic name'\n          labelBody={t('createTopic.topicNameLabelBody')}\n          buttonAriaLabel='More info for topic name field'\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='create-topic-name'\n            name='name'\n            value={store.name}\n            onChange={handleTextInputChange}\n            label='Topic name'\n            placeholder='Test topic name'\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='create-topic-partitions'\n          fieldLabel='Partitions'\n          labelHead={t('createTopic.partitionsLabelHead')}\n          labelBody={t('createTopic.partitionsLabelBody')}\n          buttonAriaLabel='More info for partitions field'\n        >\n          <NumberInput\n            id='create-topic-partitions'\n            inputName='num-partitions'\n            onChange={handleTouchSpinInputChangeCamelCase}\n            onPlus={handleTouchSpinPlusCamelCase}\n            onMinus={handleTouchSpinMinusCamelCase}\n            value={Number(store.numPartitions)}\n            plusBtnProps={{ name: 'num-partitions' }}\n            minusBtnProps={{ name: 'num-partitions' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='replicas'\n          fieldLabel='Replicas'\n          labelHead={t('createTopic.replicasLabelHead')}\n          labelBody={t('createTopic.replicasLabelBody')}\n          buttonAriaLabel='More info for replicas field'\n        >\n          <NumberInput\n            inputName='replicas'\n            onChange={handleTouchSpinInputChangeCamelCase}\n            onPlus={handleTouchSpinPlusCamelCase}\n            onMinus={handleTouchSpinMinusCamelCase}\n            value={Number(store.replicationFactor)}\n            plusBtnProps={{ name: 'replication-factor' }}\n            minusBtnProps={{ name: 'replication-factor' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='insyncreplicas'\n          fieldLabel='Minimum in-sync replicas'\n          labelHead={t('createTopic.inSyncReplicasLabelHead')}\n          labelBody={t('createTopic.inSyncReplicasLabelBody')}\n          buttonAriaLabel='More info for minimum in-sync replicas field'\n        >\n          <NumberInput\n            id='insyncreplicas'\n            inputName='min-insync-replicas'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.insync.replicas'])}\n            plusBtnProps={{ name: 'min-insync-replicas' }}\n            minusBtnProps={{ name: 'min-insync-replicas' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='retention'\n          fieldLabel='Retention time'\n          labelHead={t('createTopic.retentionTimeLabelHead')}\n          labelBody={t('createTopic.retentionTimeLabelBody')}\n          buttonAriaLabel='More info for retention time field'\n        >\n          <SizeTimeFormGroup\n            inputName='retention-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['retention.ms'])}\n            plusBtnProps={{ name: 'retention-ms' }}\n            minusBtnProps={{ name: 'retention-ms' }}\n            id='core-config-retention-time-unit'\n            toggleId='core-config-retention-dropdowntoggle'\n            name='retention-ms-unit'\n            dropdownValue={store['retention.ms.unit']}\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </>\n  );\n};\n\nexport { CoreConfiguration };\n","import { TextVariants, Text, TextContent, Form } from '@patternfly/react-core';\nimport React from 'react';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nconst clearOptions: IDropdownOption[] = [\n  { key: 'compact', value: 'compact', isDisabled: false },\n  { key: 'delete', value: 'delete', isDisabled: false },\n  { key: 'compact-delete', value: 'compact, delete', isDisabled: false },\n  { key: 'delete-compact', value: 'delete, compact', isDisabled: false },\n];\n\nconst LogSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n          Log\n        </Text>\n        <Text component={TextVariants.p}>\n          {t('createTopic.logSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='cleanup-policy'\n          fieldLabel='Cleanup policy'\n          labelHead={t('createTopic.cleanupPolicyLabelHead')}\n          labelBody={t('createTopic.cleanupPolicyLabelBody')}\n          buttonAriaLabel='More info for cleanup policy field'\n        >\n          <DropdownWithToggle\n            id='log-section-policy-type-dropdown'\n            toggleId='log-section-policy-type-dropdowntoggle'\n            ariaLabel='select policy type from dropdown'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={clearOptions}\n            name='log-cleanup-policy'\n            value={store['log.cleanup.policy'] || ''}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='retention-bytes'\n          fieldLabel='Retention bytes'\n          labelHead={t('createTopic.retentionBytesLabelHead')}\n          labelBody={t('createTopic.retentionBytesLabelBody')}\n          buttonAriaLabel='More info for retention bytes field'\n        >\n          <SizeTimeFormGroup\n            inputName='log-retention-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['log.retention.bytes'])}\n            plusBtnProps={{ name: 'log-retention-bytes' }}\n            minusBtnProps={{ name: 'log-retention-bytes' }}\n            id='log-section-retention-unit-dropdown'\n            toggleId='log-section-retention-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='log-retention-bytes-unit'\n            dropdownValue={store['log.retention.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n\n        <FormGroupWithPopover\n          fieldId='log-type'\n          fieldLabel='Log segment types'\n          labelHead={t('createTopic.logSegmentLabelHead')}\n          labelBody={t('createTopic.logSegmentLabelBody')}\n          buttonAriaLabel='More info for log segment types field'\n        >\n          <SizeTimeFormGroup\n            inputName='log-segment-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['log.segment.bytes'])}\n            plusBtnProps={{ name: 'log-segment-bytes' }}\n            minusBtnProps={{ name: 'log-segment-bytes' }}\n            id='log-section-segment-unit-dropdown'\n            toggleId='log-section-segment-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='log-segment-bytes-unit'\n            dropdownValue={store['log.segment.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </>\n  );\n};\n\nexport { LogSection };\n","import {\n  TextContent,\n  Text,\n  Checkbox,\n  Form,\n  InputGroup,\n  TextInput,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { kebabToDotSeparated } from '../utils';\nimport { useTranslation } from 'react-i18next';\n\nexport const ReplicationSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleCheckboxSelect = (checked: boolean, event) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), checked);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2} tabIndex={-1} id='replication'>\n          Replication\n        </Text>\n        <Text component={TextVariants.p}>\n          {t('createTopic.replicationSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='unclean-leader-election'\n          fieldLabel='Unclean leader election'\n          labelHead={t('createTopic.leaderElectionLabelHead')}\n          labelBody={t('createTopic.leaderElectionLabelBody')}\n          buttonAriaLabel='More info for leader election field'\n        >\n          <Checkbox\n            isChecked={Boolean(store['unclean.leader.election.enable'])}\n            label='Allow unclean leader election'\n            aria-label='uncontrolled checkbox example'\n            id='leader-election'\n            onChange={handleCheckboxSelect}\n            name='unclean-leader-election-enable'\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='follower-replicas'\n          fieldLabel='Follower replication throttled replicas'\n          labelHead={t('createTopic.followerReplicaLabelHead')}\n          labelBody={t('createTopic.followerReplicaLabelBody')}\n          buttonAriaLabel='More info for follower throttled replicas field'\n        >\n          <InputGroup>\n            <TextInput\n              name='follower-replication-throttled-replicas'\n              type='text'\n              aria-label='Text'\n              onChange={handleTextInputChange}\n              value={store['follower.replication.throttled.replicas']}\n            />\n          </InputGroup>\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='leader-replicas'\n          fieldLabel='Leader replication throttled replicas'\n          labelHead={t('createTopic.leaderReplicaLabelHead')}\n          labelBody={t('createTopic.leaderReplicaLabelBody')}\n          buttonAriaLabel='More info for leader throttled replicas field'\n        >\n          <InputGroup>\n            <TextInput\n              name='leader-replication-throttled-replicas'\n              type='text'\n              aria-label='Text'\n              onChange={handleTextInputChange}\n              value={store['leader.replication.throttled.replicas']}\n            />\n          </InputGroup>\n        </FormGroupWithPopover>\n      </Form>\n    </>\n  );\n};\n","import { TextContent, Text, Form, TextVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport const IndexSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n          Index\n        </Text>\n        <Text component={TextVariants.p}>\n          {t('createTopic.indexSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='interval-bytes'\n          fieldLabel='Index interval bytes'\n          labelHead={t('createTopic.indexIntervalLabelHead')}\n          labelBody={t('createTopic.indexIntervalLabelBody')}\n          buttonAriaLabel='More info for index interval bytes field'\n        >\n          <SizeTimeFormGroup\n            id='index-interval-size'\n            inputName='index-interval-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['index.interval.bytes'])}\n            plusBtnProps={{ name: 'index-interval-bytes' }}\n            minusBtnProps={{ name: 'index-interval-bytes' }}\n            toggleId='index-interval-unit-dropdowntoggle'\n            name='index-interval-bytes-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            dropdownValue={store['index.interval.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='int-bytes'\n          fieldLabel='Segment interval bytes'\n          labelHead={t('createTopic.segementIntervalLabelHead')}\n          labelBody={t('createTopic.segementIntervalLabelBody')}\n          buttonAriaLabel='More info for segment interval bytes field'\n        >\n          <SizeTimeFormGroup\n            id='segment-index-size'\n            inputName='segment-index-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.index.bytes'])}\n            plusBtnProps={{ name: 'segment-index-bytes' }}\n            minusBtnProps={{ name: 'segment-index-bytes' }}\n            toggleId='segment-index-unit-dropdowntoggle'\n            name='segment-index-bytes-unit'\n            ariaLabel='select duration from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            dropdownValue={store['segment.index.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </>\n  );\n};\n","import { TextContent, Text, Form, TextVariants } from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport const FlushSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n          Flush\n        </Text>\n        <Text component={TextVariants.p}>\n          {t('createTopic.flushSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='interval-messages'\n          fieldLabel='Flush interval messages'\n          labelHead={'createTopic.intervalMessagesLabelHead'}\n          labelBody={'createTopic.intervalMessagesLabelBody'}\n          buttonAriaLabel='More info for flush interval messages field'\n        >\n          <SizeTimeFormGroup\n            inputName='flush-messages'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['flush.messages'])}\n            plusBtnProps={{ name: 'flush-messages' }}\n            minusBtnProps={{ name: 'flush-messages' }}\n            id='interval-messages-unit-dropdown'\n            toggleId='interval-messages-unit-dropdowntoggle'\n            name='flush-messages-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            dropdownValue={store['flush.messages.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='flush'\n          fieldLabel='Flush interval time'\n          labelHead={t('createTopic.intervalTimeLabelHead')}\n          labelBody={t('createTopic.intervalTimeLabelBody')}\n          buttonAriaLabel='More info for flush interval time field'\n        >\n          <SizeTimeFormGroup\n            inputName='flush-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['flush.ms'])}\n            plusBtnProps={{ name: 'flush-ms' }}\n            minusBtnProps={{ name: 'flush-ms' }}\n            id='interval-time-unit-dropdown'\n            toggleId='interval-time-unit-dropdowntoggle'\n            name='flush-ms-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            dropdownValue={store['flush.ms.unit']}\n            type='time'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Checkbox,\n  Form,\n  TextContent,\n  TextVariants,\n  NumberInput,\n  Text,\n} from '@patternfly/react-core';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nexport const CleanupSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name, value } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleCheckboxSelect = (checked: boolean, event) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(fieldName, checked);\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n          Cleanup\n        </Text>\n        <Text component={TextVariants.p}>\n          {t('createTopic.cleanupSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='delete-retention'\n          fieldLabel='Delete retention'\n          labelHead={t('createTopic.deleteRetentionLabelHead')}\n          labelBody={t('createTopic.deleteRetentionLabelBody')}\n          buttonAriaLabel='More info for delete retention field'\n        >\n          <SizeTimeFormGroup\n            inputName='delete.retention.ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['delete.retention.ms'])}\n            plusBtnProps={{ name: 'delete-retention-ms' }}\n            minusBtnProps={{ name: 'delete-retention-ms' }}\n            id='delete-retention-unit'\n            toggleId='delete-retention-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='delete-retention-ms-unit'\n            dropdownValue={store['delete.retention.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='dirty-ratio'\n          fieldLabel='Minimum cleanable dirty ratio'\n          labelHead={t('createTopic.minRatioLabelHead')}\n          labelBody={t('createTopic.minRatioLabelBody')}\n          buttonAriaLabel='More info for minimum cleanable ratio field'\n        >\n          <NumberInput\n            inputName='min.cleanable.dirty.ratio'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.cleanable.dirty.ratio'])}\n            plusBtnProps={{ name: 'min-cleanable-dirty-ratio' }}\n            minusBtnProps={{ name: 'min-cleanable-dirty-ratio' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='compaction'\n          fieldLabel='Minimum compaction lag time'\n          labelHead={t('createTopic.minLagLabelHead')}\n          labelBody={t('createTopic.minLagLabelBody')}\n          buttonAriaLabel='More info for minimum compaction log time field'\n        >\n          <SizeTimeFormGroup\n            inputName='min-compaction-lag-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.compaction.lag.ms'])}\n            plusBtnProps={{ name: 'min-compaction-lag-ms' }}\n            minusBtnProps={{ name: 'min-compaction-lag-ms' }}\n            id='min-lag-unit'\n            toggleId='min-lag-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='min-compaction-lag-ms-unit'\n            dropdownValue={store['min.compaction.lag.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='segment-time'\n          fieldLabel='Segment time'\n          labelHead={t('createTopic.segementTimeLabelHead')}\n          labelBody={t('createTopic.segementTimeLabelBody')}\n          buttonAriaLabel='More info for segment time field'\n        >\n          <SizeTimeFormGroup\n            inputName='segment-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.ms'])}\n            plusBtnProps={{ name: 'segment-ms' }}\n            minusBtnProps={{ name: 'segment-ms' }}\n            id='segment-time-unit'\n            toggleId='segment-time-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='segment-ms-unit'\n            dropdownValue={store['segment.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='jitter'\n          fieldLabel='Segment jitter time'\n          labelHead={t('createTopic.jitterTimeLabelHead')}\n          labelBody={t('createTopic.jitterTimeLabelBody')}\n          buttonAriaLabel='More info for segment jitter time field'\n        >\n          <SizeTimeFormGroup\n            inputName='segment-jitter-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.jitter.ms'])}\n            plusBtnProps={{ name: 'segment.jitter.ms' }}\n            minusBtnProps={{ name: 'segment.jitter.ms' }}\n            id='jitter-time-unit'\n            toggleId='jitter-time-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='segment-jitter-ms-unit'\n            dropdownValue={store['segment.jitter.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='delete'\n          fieldLabel='File delete delay'\n          labelHead={t('createTopic.deleteDelayLabelHead')}\n          labelBody={t('createTopic.deleteDelayLabelBody')}\n          buttonAriaLabel='More info for file delete delay field'\n        >\n          <SizeTimeFormGroup\n            inputName='file-delete-delay-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['file.delete.delay.ms'])}\n            plusBtnProps={{ name: 'file-delete-delay-ms' }}\n            minusBtnProps={{ name: 'file-delete-delay-ms' }}\n            id='delete-delay-unit'\n            toggleId='delete-delay-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='file-delete-delay-ms-unit'\n            dropdownValue={store['file.delete.delay.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='log-preallocation'\n          fieldLabel='Preallocate log segment files'\n          labelHead={t('createTopic.preallocateLabelHead')}\n          labelBody={t('createTopic.preallocateLabelBody')}\n          buttonAriaLabel='More info for preallocation field'\n        >\n          <Checkbox\n            isChecked={Boolean(store.preallocate)}\n            label='Allow preallocation of log segment files'\n            aria-label='log segment files pre allocation'\n            id='log-preallocation'\n            onChange={handleCheckboxSelect}\n            name='preallocate'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Divider,\n  Grid,\n  GridItem,\n  JumpLinks,\n  JumpLinksItem,\n  PageGroup,\n  PageSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nimport { MessageSection } from './MessageSection';\nimport { CoreConfiguration } from './CoreConfiguration';\nimport { LogSection } from './LogSection';\nimport { ReplicationSection } from './ReplicationSection';\nimport { IndexSection } from './IndexSection';\nimport { FlushSection } from './FlushSection';\nimport { CleanupSection } from './CleanupSection';\n\ninterface ITopicAdvanceConfig {\n  isCreate: boolean;\n  saveTopic: () => void;\n  deleteTopic?: () => void;\n}\n\nexport const TopicAdvanceConfig: React.FunctionComponent<ITopicAdvanceConfig> = ({\n  isCreate,\n  saveTopic,\n  deleteTopic,\n}) => {\n  const actionText = isCreate === true ? 'Create Topic' : 'Save';\n\n  return (\n    <>\n      <Grid hasGutter>\n        <GridItem span={2} style={{ padding: '30px 30px' }}>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='#advanced-create-topic'\n            style={{ position: 'absolute' }}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n            {isCreate ? (\n              <></>\n            ) : (\n              <JumpLinksItem key={7} href='#delete'>\n                Delete\n              </JumpLinksItem>\n            )}\n          </JumpLinks>\n        </GridItem>\n        <GridItem span={10} style={{ padding: '30px 30px' }}>\n          <div>\n            <PageGroup\n              hasOverflowScroll\n              id='advanced-create-topic'\n              className='topics-wizard-content'\n            >\n              <PageSection>\n                <CoreConfiguration />\n\n                <MessageSection />\n\n                <LogSection />\n\n                <ReplicationSection />\n\n                <CleanupSection />\n\n                <IndexSection />\n\n                <FlushSection />\n\n                <ActionGroup>\n                  <Button onClick={saveTopic} variant='primary'>\n                    {actionText}\n                  </Button>\n                  <Button variant='link'>Cancel</Button>\n                </ActionGroup>\n\n                {isCreate ? (\n                  <></>\n                ) : (\n                  <>\n                    <br />\n                    <Divider />\n                    <br />\n                    <br />\n                    <TextContent className='section-margin'>\n                      <Text\n                        component={TextVariants.h2}\n                        tabIndex={-1}\n                        id='delete'\n                      >\n                        Delete topic (irreversible)\n                      </Text>\n                      <Text component={TextVariants.p}>\n                        This permanently removes this topic from this instance\n                        of Strimzi. Applications will no longer have access to\n                        this topic.\n                      </Text>\n                    </TextContent>\n                    <br />\n                    <Button\n                      variant='danger'\n                      className='section-margin'\n                      onClick={deleteTopic}\n                    >\n                      Delete topic\n                    </Button>\n                  </>\n                )}\n              </PageSection>\n            </PageGroup>\n          </div>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import { AdvancedTopic } from '../../../Contexts/Topic';\nimport { ConfigEntry, NewTopicInput } from '../../../OpenApi';\n\nconst capitalizeText = (text: string) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nexport const kebabToCamel = function (kebabCase: string): string {\n  const words: string[] = kebabCase.split('-');\n\n  const camelCased: string[] = words.map((word: string, index: number) => {\n    return index > 0 ? capitalizeText(word) : word;\n  });\n\n  return camelCased.join('');\n};\n\nexport const kebabToDotSeparated = (val: string): string => {\n  return val.replaceAll('-', '.');\n};\n\nconst unitsToBytes = {\n  bytes: 1,\n  kilobytes: 1000,\n  megabytes: 1000000,\n  gigabytes: 1000000000,\n  terabytes: 1000000000000,\n};\n\nconst unitsToMilliSecond = {\n  milliseconds: 1,\n  seconds: 1000,\n  days: 86400000,\n  months: 2592000000,\n  years: 31536000000,\n};\n\nexport const convertUnits = (topicData: AdvancedTopic): AdvancedTopic => {\n  const topic = { ...topicData };\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'ms') {\n      topic[key] = String(\n        Number(topic[key]) *\n          unitsToMilliSecond[topic[`${key}.unit`] || 'milliseconds']\n      );\n    }\n    if (key.split('.').pop() === 'bytes') {\n      topic[key] = String(\n        Number(topic[key]) * unitsToBytes[topic[`${key}.unit`] || 'bytes']\n      );\n    }\n  }\n\n  if (topic['flush.messages']) {\n    topic['flush.messages'] = String(\n      Number(topic['flush.messages']) *\n        unitsToMilliSecond[topic['flush.messages.unit'] || 'milliseconds']\n    );\n  }\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'unit') {\n      delete topic[key];\n    }\n  }\n\n  return topic;\n};\n\nexport const formatTopicRequest = (topic: AdvancedTopic): NewTopicInput => {\n  const { name, numPartitions, replicationFactor, ...configEntries } = topic;\n\n  const config: ConfigEntry[] = [];\n\n  for (const key in configEntries) {\n    if (key) {\n      config.push({\n        key,\n        value: configEntries[key].toString(),\n      });\n    }\n  }\n\n  return {\n    name,\n    settings: {\n      numPartitions: Number(numPartitions),\n      replicationFactor: Number(replicationFactor),\n      config,\n    },\n  };\n};\n"],"sourceRoot":""}