{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/DeleteTopicsModal.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedUpdateTopicView.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx"],"names":["AlertContext","createContext","TopicDetailHead","topicName","getTopicListPath","onClickTopicList","className","Breadcrumb","BreadcrumbItem","onClick","e","preventDefault","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","DeleteTopics","setDeleteModal","deleteModal","onDeleteTopic","useState","verificationText","setVerificationText","addAlert","useContext","onClose","config","Modal","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","AlertVariant","response","data","err","key","isDisabled","toUpperCase","id","htmlFor","TextInput","value","name","type","onChange","autoFocus","FederatedUpdateTopicView","getToken","apiBasePath","currentTopic","onCancelUpdateTopic","onSaveTopic","alertContext","I18nextProvider","i18n","basePath","getTopics","accessToken","getTopicsList","getTopicDetail","getTopic","convertTopicResponse","topic","topicObj","forEach","numPartitions","partitions","length","replicationFactor","map","p","replicas","reduce","previousValue","currentValue","updateTopicModel","topicSettings","updateTopic","status","answer","push","toString","deleteTopic"],"mappings":"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","file":"983.658d1bd6.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  getTopicListPath,\n  onClickTopicList,\n}) => {\n  return (\n    <section className='pf-c-page__main-breadcrumb'>\n      <Breadcrumb>\n        <BreadcrumbItem\n          onClick={(e) => {\n            e.preventDefault();\n            onClickTopicList();\n          }}\n          to={getTopicListPath()}\n        >\n          Topics\n        </BreadcrumbItem>\n        <BreadcrumbItem>{topicName}</BreadcrumbItem>\n      </Breadcrumb>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent className='header-padding'>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </section>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '../../../../Services/TopicServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteTopics {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  topicName?: string;\n  onDeleteTopic: () => void;\n}\nexport const DeleteTopics: React.FunctionComponent<IDeleteTopics> = ({\n  setDeleteModal,\n  deleteModal,\n  topicName,\n  onDeleteTopic,\n}) => {\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useContext(AlertContext);\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      topicName && (await deleteTopic(topicName, config));\n      addAlert(`Successfully deleted topic ${topicName}`, AlertVariant.success);\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    onDeleteTopic();\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Delete topic?'\n      title='Delete topic?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n        >\n          Delete\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <b>{topicName}</b> will be deleted.{' '}\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>Type DELETE to confirm:</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { UpdateTopicPage } from '../../Modules/Topics/UpdateTopic/UpdateTopicPage';\nimport { ConfigContext, TopicContextProvider } from '../../Contexts';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport kafkai18n from '../../i18n';\nimport { I18nextProvider } from 'react-i18next';\nimport { AlertContext, AlertContextProps } from '../../Contexts/Alert';\n\nexport type FederatedUpdateTopicProps = {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  currentTopic: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onCancelUpdateTopic: () => void;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n};\n\nconst FederatedUpdateTopicView: FunctionComponent<FederatedUpdateTopicProps> = ({\n  getToken,\n  apiBasePath,\n  currentTopic,\n  getTopicListPath,\n  onClickTopicList,\n  onCancelUpdateTopic,\n  addAlert,\n  onDeleteTopic,\n  onSaveTopic,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <AlertContext.Provider value={alertContext}>\n          <TopicContextProvider>\n            <PageSection variant={PageSectionVariants.light}>\n              <UpdateTopicPage\n                topicName={currentTopic}\n                getTopicListPath={getTopicListPath}\n                onClickTopicList={onClickTopicList}\n                onCancelUpdateTopic={onCancelUpdateTopic}\n                onDeleteTopic={onDeleteTopic}\n                onSaveTopic={onSaveTopic}\n              />\n            </PageSection>\n          </TopicContextProvider>\n        </AlertContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport { FederatedUpdateTopicView };\n\nexport default FederatedUpdateTopicView;\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport {\n  ConfigEntry,\n  DefaultApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length;\n\n  topicObj.replicationFactor = topic?.partitions\n    ?.map((p) => p.replicas?.length)\n    .reduce(\n      (previousValue = 0, currentValue = 0) => previousValue + currentValue\n    );\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"sourceRoot":""}