{"version":3,"file":"612.dfcbf79e.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/MASPagination/MASPagination.tsx","webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["import React, {\n  useCallback,\n  FunctionComponent,\n  createContext,\n  useContext,\n  useState,\n} from 'react';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport type PaginationProps = Omit<PFPaginationProps, 'children' | 'ref'>;\n\nexport type PaginationContextProps = {\n  page: number | undefined;\n  perPage: number | undefined;\n  setPage: (page: number | undefined) => void;\n  setPerPage: (perPage: number | undefined) => void;\n};\n\nexport const PaginationContext = createContext<\n  PaginationContextProps | undefined\n>(undefined);\nexport const usePaginationParams = (): PaginationContextProps | undefined =>\n  useContext(PaginationContext);\n\nexport const PaginationProvider = ({ children }) => {\n  const [page, setPage] = useState<number | undefined>(1);\n  const [perPage, setPerPage] = useState<number | undefined>(10);\n\n  return (\n    <PaginationContext.Provider value={{ page, perPage, setPage, setPerPage }}>\n      {children}\n    </PaginationContext.Provider>\n  );\n};\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const { setPage, setPerPage, perPage, page } = usePaginationParams() || {};\n\n  const onSetPage = useCallback((_: unknown, newPage: number) => {\n    setPage && setPage(newPage);\n  }, []);\n\n  const onPerPageSelect = useCallback((_: unknown, newPerPage: number) => {\n    setPage && setPage(1);\n    setPerPage && setPerPage(newPerPage);\n  }, []);\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { useContext } from 'react';\n\nexport type FederatedProps = {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n};\n\nexport const FederatedContext =\n  React.createContext<FederatedProps | undefined>(undefined);\nexport const useFederated = (): FederatedProps | undefined => useContext(FederatedContext);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport {\n  TopicAdvanceConfig,\n  IAdvancedTopic,\n} from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigEntry, TopicSettings } from '@rhoas/kafka-instance-sdk';\nimport { ConfigContext } from '@app/contexts';\nimport { convertUnits } from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert, useBasename } from '@bf2/ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert();\n  const history = useHistory();\n  const { getBasename } = useBasename();\n  const basename = getBasename();\n\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  };\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n    const onCancelUpdateTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const fetchTopic = async (topicName) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      const configEntries: any = {};\n      topicRes.config?.forEach((configItem) => {\n        configEntries[configItem.key || ''] = configItem.value || '';\n      });\n\n      setTopicData({\n        ...topicData,\n        numPartitions: topicRes?.partitions?.length.toString() || '',\n        replicationFactor: topicRes?.partitions && topicRes?.partitions[0].replicas?.length.toString() || '', \n        'cleanup.policy': configEntries['cleanup.policy'] || 'delete',\n        'retention.bytes': configEntries['retention.bytes'] || '-1',\n        'retention.ms': configEntries['retention.ms'] || '604800000',\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        if (onError) {\n          onError(err.response?.data.code, err.response?.data.error_message);\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert({\n            variant: AlertVariant.danger,\n            title: `Topic ${topicName} does not exist`,\n          });\n          onCancelUpdateTopic && onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n    const newConfig: ConfigEntry[] = [];\n    setIsLoading(true);\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== 'numPartitions' && key !== 'replicationFactor') {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      await updateTopicModel(name, topicSettings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      if (onError) {\n        onError(err.response.data.code, err.response.data.error_message);\n      }\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {useBasename} from '@bf2/ui-shared';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\n\nexport const UpdateTopicPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { getBasename } = useBasename();\n  const basename = getBasename();\n  const { topicName } = useParams<{topicName:string}>();\n  const {  \n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 1,\n  } = useFederated() || {};\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n\n  const onDeleteTopic = () => {\n    history.push(basename);\n  };\n\n  const onSaveTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { UpdateTopicPage } from \"@app/modules/Topics/pages/UpdateTopic\";\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\nimport kafkai18n from '@app/i18n';\nimport { ModalProvider } from '@app/components/KafkaModal';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n}) => {\n\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <FederatedContext.Provider\n          value={{\n            activeTab: 1,           \n            kafkaName,\n            kafkaPageLink,\n            kafkaInstanceLink,\n            onError      \n          }}\n        >\n          <ModalProvider>\n            <UpdateTopicPage/>\n          </ModalProvider>\n        </FederatedContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default UpdateTopicFederated;\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"names":["PaginationContext","createContext","undefined","usePaginationParams","useContext","PaginationProvider","children","useState","page","setPage","perPage","setPerPage","Provider","value","MASPagination","itemCount","variant","PaginationVariant","isCompact","titles","restProps","onSetPage","useCallback","_","newPage","onPerPageSelect","newPerPage","FederatedContext","useFederated","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","to","PageSection","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onSaveTopic","onError","config","addAlert","useAlert","history","useHistory","basename","getBasename","useBasename","initialState","name","numPartitions","topicData","setTopicData","isLoading","setIsLoading","onCancelUpdateTopic","push","useEffect","topicRes","forEach","configItem","key","partitions","length","toString","replicationFactor","replicas","response","data","code","error_message","status","AlertVariant","title","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","configEntries","newConfig","toLowerCase","topicSettings","Number","then","handleCancel","isLoadingSave","UpdateTopicPage","useParams","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","onDeleteTopic","getToken","apiBasePath","I18nextProvider","i18n","basePath","isAxiosError","error"],"sourceRoot":""}