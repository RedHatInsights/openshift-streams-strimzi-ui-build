{"version":3,"file":"566.a964867d.bundle.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/MASDrawer/MASDrawer.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/ConsumerGroups.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailView/TopicDetailView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/TopicDetail/TopicDetailPage.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/components';\nimport './MASDrawer.css';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading?: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: React.ReactNode;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = false,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n  inlineAlertMessage,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } =\n    drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent\n      widths={widths || { default: 'width_50' }}\n      {...restDrawerPanelContentProps}\n    >\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text\n                  component={text?.component || TextVariants.small}\n                  className={\n                    text?.className || 'kafka-ui-mas-drawer__top-label'\n                  }\n                >\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'kafka-ui-mas-drawer__title'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      onExpand={onExpand}\n      data-ouia-app-id={dataOuiaAppId}\n    >\n      <DrawerContent\n        panelContent={panelContent}\n        className={\n          notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''\n        }\n      >\n        <DrawerContentBody className='kafka-ui-mas-drawer__drawer-content-body'>\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useContext, useState, useEffect, lazy, Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport {\n  EmptyState,\n  MASEmptyStateVariant,\n  MASLoading,\n  MASDrawer,\n} from '@app/components';\nimport { getConsumerGroups } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { ConsumerGroupList, ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { useTimeout } from '@app/hooks/useTimeOut';\nimport { ISortBy, OnSort, SortByDirection } from '@patternfly/react-table';\n\nconst ConsumerGroupDetail = lazy(\n  () => import('./components/ConsumerGroupDetail/ConsumerGroupDetail')\n);\nconst ConsumerGroupsTable = lazy(\n  () => import('./components/ConsumerGroupsTable/ConsumerGroupsTable')\n);\n\nexport type ConsumerGroupsProps = {\n  consumerGroupByTopic: boolean;\n  topic?: string;\n  rowDataTestId?: string;\n};\n\nconst ConsumerGroups: React.FunctionComponent<ConsumerGroupsProps> = ({\n  consumerGroupByTopic,\n  topic,\n  rowDataTestId,\n}) => {\n  const [offset, setOffset] = useState<number>(0);\n  const [order, setOrder] = useState<SortByDirection>();\n  const [orderKey, setOrderKey] = useState<'name' | undefined>();\n  const [sortBy, setSortBy] = useState<ISortBy>({\n    index: undefined,\n    direction: 'asc',\n  });\n  const [consumerGroups, setConsumerGroups] = useState<ConsumerGroupList>();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>('');\n  const [consumerGroupDetail, setConsumerGroupDetail] =\n    useState<ConsumerGroup>();\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  useEffect(() => {\n    setOffset(perPage * (page - 1));\n  }, [page, perPage]);\n\n  const onSort: OnSort = (_event, index, direction) => {\n    setOrder(direction);\n    setOrderKey('name');\n    setSortBy({ index, direction });\n  };\n\n  const fetchConsumerGroups = async () => {\n    const limit = 100;\n    try {\n      await getConsumerGroups(\n        config,\n        offset,\n        limit,\n        perPage,\n        page,\n        topic,\n        search,\n        order,\n        orderKey\n      ).then((response) => {\n        setConsumerGroups(response);\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  useEffect(() => {\n    fetchConsumerGroups();\n  }, [search, order]);\n\n  useTimeout(() => fetchConsumerGroups(), 5000);\n\n  const panelBodyContent = (\n    <ConsumerGroupDetail\n      consumerDetail={consumerGroupDetail}\n      consumerGroupByTopic={consumerGroupByTopic}\n    />\n  );\n\n  const onClose = () => {\n    setIsExpanded(false);\n  };\n\n  const onViewConsumerGroup = (consumerGroup) => {\n    setIsExpanded(true);\n    setConsumerGroupDetail(consumerGroup);\n  };\n\n  const renderConsumerTable = () => {\n    if (consumerGroups === undefined) {\n      return (\n        <PageSection\n          className='kafka-ui-m-full-height'\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (\n      (!consumerGroups?.items?.length || consumerGroups?.items?.length < 1) &&\n      search.length < 1\n    ) {\n      return (\n        <EmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoConsumerGroups,\n          }}\n          titleProps={{\n            title: t('consumerGroup.empty_consumer_title'),\n          }}\n          emptyStateBodyProps={{\n            body: t('consumerGroup.empty_consumer_body'),\n          }}\n        />\n      );\n    } else if (consumerGroups) {\n      return (\n        <ConsumerGroupsTable\n          consumerGroups={consumerGroups?.items?.slice(\n            offset,\n            offset + perPage\n          )}\n          total={consumerGroups?.items?.length || 0}\n          page={page}\n          perPage={perPage}\n          search={search}\n          setSearch={setSearch}\n          rowDataTestId={rowDataTestId}\n          onViewConsumerGroup={onViewConsumerGroup}\n          isDrawerOpen={isExpanded}\n          refreshConsumerGroups={fetchConsumerGroups}\n          consumerGroupByTopic={consumerGroupByTopic}\n          onSort={onSort}\n          sortBy={sortBy}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <Suspense fallback={<MASLoading />}>\n      <MASDrawer\n        isExpanded={isExpanded}\n        onClose={onClose}\n        panelBodyContent={panelBodyContent}\n        drawerHeaderProps={{\n          text: { label: t('consumerGroup.consumer_group_id') },\n          title: { value: consumerGroupDetail?.groupId, headingLevel: 'h1' },\n        }}\n        data-ouia-app-id='dataPlane-consumerGroupDetails'\n      >\n        {renderConsumerTable()}\n      </MASDrawer>\n    </Suspense>\n  );\n};\n\nexport { ConsumerGroups };\nexport default ConsumerGroups;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  SplitItem,\n  Split,\n  Form,\n  FormSection,\n} from '@patternfly/react-core';\nimport {\n  DEFAULT_MESSAGE_TIMESTAMP_TYPE,\n  DEFAULT_DELETE_RETENTION_TIME,\n  DEFAULT_FILE_DELETE_DELAY,\n  DEFAULT_INDEX_INTERVAL_SIZE,\n  DEFAULT_LOG_SEGMENT_SIZE,\n  DEFAULT_MAXIMUM_MESSAGE_BYTES,\n  DEFAULT_MINIMUM_COMPACTION_LAG_TIME,\n  DEFAULT_MIN_CLEANBLE_RATIO,\n  DEFAULT_MIN_INSYNC_REPLICAS,\n  DEFAULT_REPLICAS,\n  DEFAULT_SEGMENT_INDEX_SIZE,\n  DEFAULT_SEGMENT_JITTER_TIME,\n  DEFAULT_SEGMENT_TIME,\n  DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF,\n  DEFAULT_FLUSH_INTERVAL_MESSAGES,\n  DEFAULT_FLUSH_INTERVAL_TIME,\n} from '@app/constant';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '@app/components/TextWithLabelPopover';\nimport { IAdvancedTopic } from '@app/modules/Topics/components/CreateTopicWizard';\nimport { convertRetentionSize, convertRetentionTime } from '@app/utils';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: IAdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label={t('topic.jump_to_section')}\n            scrollableSelector='#scrollablePageMain'\n            offset={-164} // for header\n            style={{ position: 'sticky' }}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              {t('topic.core_configuration')}\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              {t('topic.messages')}\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              {t('topic.log')}\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              {t('topic.replication')}\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              {t('common.cleanup')}\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              {t('topic.index')}\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              {t('topic.flush')}\n            </JumpLinksItem>\n            <JumpLinksItem key={7} href='#delete'>\n              {t('common.delete')}\n            </JumpLinksItem>\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <PageGroup hasOverflowScroll id='topic-detail-view'>\n            <PageSection padding={{ default: 'noPadding' }}>\n              <Split>\n                <SplitItem isFilled>\n                  <Form>\n                    <FormSection\n                      title={t('topic.core_configuration')}\n                      id='core-configuration'\n                      titleElement={'h2'}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className='section-info'\n                        >\n                          {t('topic.core_config_info')}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId='topic-name'\n                        btnAriaLabel={t('common.name')}\n                        fieldLabel={t('topic.topic_name')}\n                        fieldValue={topic.name}\n                        popoverBody={t('topic.topic_name_description')}\n                        popoverHeader={t('topic.topic_name')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='partitions'\n                        btnAriaLabel={t('topic.partitions')}\n                        fieldLabel={t('topic.partitions')}\n                        fieldValue={topic.numPartitions}\n                        popoverBody={t('topic.partitions_description')}\n                        popoverHeader={t('topic.partitions')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='replicas'\n                        btnAriaLabel={t('topic.replicas')}\n                        fieldLabel={t('topic.replicas')}\n                        fieldValue={DEFAULT_REPLICAS}\n                        popoverBody={t('topic.replicas_description')}\n                        popoverHeader={t('topic.replicas')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='min-insync-replicas'\n                        btnAriaLabel={t('topic.min_insync_replicas')}\n                        fieldLabel={t('topic.min_insync_replicas')}\n                        fieldValue={DEFAULT_MIN_INSYNC_REPLICAS}\n                        popoverBody={t('topic.min_insync_replicas_description')}\n                        popoverHeader={t('topic.min_insync_replicas')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='retention-time'\n                        btnAriaLabel={t('topic.retention_time')}\n                        fieldLabel={t('topic.retention_time')}\n                        fieldValue={convertRetentionTime(\n                          Number(topic['retention.ms'])\n                        )}\n                        popoverBody={t('topic.retention_time_description')}\n                        popoverHeader={t('topic.retention_time')}\n                        showUnlimited={true}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='retention-size'\n                        btnAriaLabel={t('topic.retention_size')}\n                        fieldLabel={t('topic.retention_size')}\n                        fieldValue={convertRetentionSize(\n                          Number(topic['retention.bytes'])\n                        )}\n                        popoverHeader={t('topic.retention_size')}\n                        popoverBody={t('topic.retention_size_description')}\n                        showUnlimited={true}\n                      />\n                    </FormSection>\n                    <FormSection\n                      title={t('topic.messages')}\n                      id='messages'\n                      titleElement={'h2'}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className='section-info'\n                        >\n                          {t('topic.message_section_info')}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId='max-message-size'\n                        btnAriaLabel={t('topic.max_message_size')}\n                        fieldLabel={t('topic.max_message_size')}\n                        fieldValue={DEFAULT_MAXIMUM_MESSAGE_BYTES}\n                        popoverBody={t('topic.max_message_size_description')}\n                        popoverHeader={t('topic.max_message_size')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='message-timestamp-type'\n                        btnAriaLabel={t('topic.message_timestamp_type')}\n                        fieldLabel={t('topic.message_timestamp_type')}\n                        fieldValue={DEFAULT_MESSAGE_TIMESTAMP_TYPE}\n                        popoverBody={t(\n                          'topic.message_timestamp_type_description'\n                        )}\n                        popoverHeader={t('topic.message_timestamp_type')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='max-message-timestamp-diff'\n                        btnAriaLabel={t('topic.max_message_timestamp_diff')}\n                        fieldLabel={t('topic.max_message_timestamp_diff')}\n                        fieldValue={DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF}\n                        popoverBody={t(\n                          'topic.max_message_timestamp_diff_description'\n                        )}\n                        popoverHeader={t('topic.max_message_timestamp_diff')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='compression-type'\n                        btnAriaLabel={t('topic.compression_type')}\n                        fieldLabel={t('topic.compression_type')}\n                        fieldValue='Producer'\n                        popoverBody={t('topic.compression_type_description')}\n                        popoverHeader={t('topic.compression_type')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='message-format'\n                        btnAriaLabel={t('topic.message_format')}\n                        fieldLabel={t('topic.message_format')}\n                        fieldValue='2.7-IV2'\n                        popoverBody={t('topic.message_format_description')}\n                        popoverHeader={t('topic.message_format')}\n                      />\n                    </FormSection>\n                    <FormSection\n                      title={t('topic.log')}\n                      id='log'\n                      titleElement={'h2'}\n                    >\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {t('topic.log_section_info')}\n                          <Text\n                            component={TextVariants.small}\n                            className='section-info-note'\n                          >\n                            {t('topic.log_section_info_note')}\n                          </Text>\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId='cleanup-policy'\n                        btnAriaLabel={t('topic.cleanup_policy')}\n                        fieldLabel={t('topic.cleanup_policy')}\n                        fieldValue={topic['cleanup.policy']}\n                        popoverBody={t('topic.cleanup_policy_description')}\n                        popoverHeader={t('topic.cleanup_policy')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='delete-retention-time'\n                        btnAriaLabel={t('topic.delete_retention_time')}\n                        fieldLabel={t('topic.delete_retention_time')}\n                        fieldValue={DEFAULT_DELETE_RETENTION_TIME}\n                        popoverBody={t(\n                          'topic.delete_retention_time_description'\n                        )}\n                        popoverHeader={t('topic.delete_retention_time')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='min-cleanable-ratio'\n                        btnAriaLabel={t('topic.min_cleanable_ratio')}\n                        fieldLabel={t('topic.min_cleanable_ratio')}\n                        fieldValue={DEFAULT_MIN_CLEANBLE_RATIO}\n                        popoverBody={t('topic.min_cleanable_ratio_description')}\n                        popoverHeader={t('topic.min_cleanable_ratio')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='min-compaction-lag-time'\n                        btnAriaLabel={t('topic.min_compaction_lag_time')}\n                        fieldLabel={t('topic.min_compaction_lag_time')}\n                        fieldValue={DEFAULT_MINIMUM_COMPACTION_LAG_TIME}\n                        popoverBody={t(\n                          'topic.min_compaction_lag_time_description'\n                        )}\n                        popoverHeader={t('topic.min_compaction_lag_time')}\n                      />\n                    </FormSection>\n                    <FormSection\n                      title={t('topic.replication')}\n                      id='replication'\n                      titleElement={'h2'}\n                    >\n                      <TextContent>\n                        <Text component={TextVariants.p}>\n                          {t('topic.replication_section_info')}\n                          <Text component={TextVariants.small}>\n                            {t('topic.replication_section_info_note')}\n                          </Text>\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId='unclean-leader-election'\n                        btnAriaLabel={t('topic.unclean_leader_election')}\n                        fieldLabel={t('topic.unclean_leader_election')}\n                        fieldValue={t('common.disabled')}\n                        popoverBody={t(\n                          'topic.unclean_leader_election_description'\n                        )}\n                        popoverHeader={t('topic.unclean_leader_election')}\n                      />\n                    </FormSection>\n\n                    <FormSection\n                      title={t('common.cleanup')}\n                      id='cleanup'\n                      titleElement={'h2'}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className='section-info'\n                        >\n                          {t('topic.cleanup_section_info')}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId='log-segment-size'\n                        btnAriaLabel={t('topic.log_segment_size')}\n                        fieldLabel={t('topic.log_segment_size')}\n                        fieldValue={DEFAULT_LOG_SEGMENT_SIZE}\n                        popoverBody={t('topic.log_segment_size_description')}\n                        popoverHeader={t('topic.log_segment_size')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='segement-time'\n                        btnAriaLabel={t('topic.segement_time')}\n                        fieldLabel={t('topic.segement_time')}\n                        fieldValue={DEFAULT_SEGMENT_TIME}\n                        popoverBody={t('topic.segement_time_description')}\n                        popoverHeader={t('topic.segement_time')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='segment-jitter-time'\n                        btnAriaLabel={t('topic.segment_jitter_time')}\n                        fieldLabel={t('topic.segment_jitter_time')}\n                        fieldValue={DEFAULT_SEGMENT_JITTER_TIME}\n                        popoverBody={t('topic.segment_jitter_time_description')}\n                        popoverHeader={t('topic.segment_jitter_time')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='file-delete-delay'\n                        btnAriaLabel={t('topic.file_delete_delay')}\n                        fieldLabel={t('topic.file_delete_delay')}\n                        fieldValue={DEFAULT_FILE_DELETE_DELAY}\n                        popoverBody={t('topic.file_delete_delay_description')}\n                        popoverHeader={t('topic.file_delete_delay')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='preallocate-log-segment-files'\n                        btnAriaLabel={t('topic.preallocate_log_segment_files')}\n                        fieldLabel={t('topic.preallocate_log_segment_files')}\n                        fieldValue={t('common.disabled')}\n                        popoverBody={t(\n                          'topic.preallocate_log_segment_files_description'\n                        )}\n                        popoverHeader={t('topic.preallocate_log_segment_files')}\n                      />\n                    </FormSection>\n                    <FormSection\n                      title={t('topic.index')}\n                      id='index'\n                      titleElement={'h2'}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className='section-info'\n                        >\n                          {t('topic.index_section_info')}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId='index-interval-size'\n                        btnAriaLabel={t('topic.index_interval_size')}\n                        fieldLabel={t('topic.index_interval_size')}\n                        fieldValue={DEFAULT_INDEX_INTERVAL_SIZE}\n                        popoverBody={t('topic.index_interval_size_description')}\n                        popoverHeader={t('topic.index_interval_size')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='segment-index-size'\n                        btnAriaLabel={t('topic.segment_index_size')}\n                        fieldLabel={t('topic.segment_index_size')}\n                        fieldValue={DEFAULT_SEGMENT_INDEX_SIZE}\n                        popoverBody={t('topic.segment_index_size_description')}\n                        popoverHeader={t('topic.segment_index_size')}\n                      />\n                    </FormSection>\n                    <FormSection\n                      title={t('topic.flush')}\n                      id='flush'\n                      titleElement={'h2'}\n                    >\n                      <TextContent>\n                        <Text\n                          component={TextVariants.p}\n                          className='section-info'\n                        >\n                          {t('topic.flush_section_info')}\n                        </Text>\n                      </TextContent>\n\n                      <TextWithLabelPopover\n                        fieldId='flush-interval-messages'\n                        btnAriaLabel={t('topic.flush_interval_messages')}\n                        fieldLabel={t('topic.flush_interval_messages')}\n                        fieldValue={DEFAULT_FLUSH_INTERVAL_MESSAGES}\n                        popoverBody={t(\n                          'topic.flush_interval_messages_description'\n                        )}\n                        popoverHeader={t('topic.flush_interval_messages')}\n                      />\n\n                      <TextWithLabelPopover\n                        fieldId='flush-interval-time'\n                        btnAriaLabel={t('topic.flush_interval_time')}\n                        fieldLabel={t('topic.flush_interval_time')}\n                        fieldValue={DEFAULT_FLUSH_INTERVAL_TIME}\n                        popoverBody={t('topic.flush_interval_time_description')}\n                        popoverHeader={t('topic.flush_interval_time')}\n                      />\n                    </FormSection>\n                  </Form>\n\n                  <Divider className='kafka-ui-divider__Margin' />\n\n                  <TextContent>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                      {t('topic.delete_topic')}\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('topic.delete_topic_info')}\n                    </Text>\n                    <Button\n                      variant='danger'\n                      onClick={deleteTopic}\n                      data-testid='tabProperties-actionDelete'\n                    >\n                      {t('common.delete_topic')}\n                    </Button>\n                  </TextContent>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant='primary'\n                    onClick={updateTopic}\n                    data-testid='tabProperties-actionEdit'\n                  >\n                    {t('common.edit_props')}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport {\n  TopicDetailHead,\n  TopicDetailView,\n  IAdvancedTopic,\n} from '@app/modules/Topics/components';\nimport { getTopicDetail } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useFederated } from '@app/contexts';\nimport { useModal, ModalType } from '@app/components/KafkaModal';\nimport { useAlert } from '@bf2/ui-shared';\nimport '../style.css';\n\nexport type TopicDetailGroupProps = {\n  updateTopic: () => void;\n  onDeleteTopic?: () => void;\n};\n\nexport const TopicDetailPage: React.FC<TopicDetailGroupProps> = ({\n  updateTopic,\n  onDeleteTopic,\n}) => {\n  const {\n    activeTab,\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    topicName = '',\n    onError,\n  } = useFederated();\n\n  const [topicDetail, setTopicDetail] = useState<IAdvancedTopic>({\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  });\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert();\n  const { t } = useTranslation();\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n  const { showModal } = useModal<ModalType.DeleteTopic>();\n\n  const fetchTopicDetail = async (topicName: string) => {\n    if (activeTab === 2) {\n      try {\n        await getTopicDetail(topicName, config).then((response) => {\n          setTopicDetail(response);\n        });\n      } catch (err) {\n        if (isAxiosError(err)) {\n          if (onError) {\n            onError(err.response?.data.code, err.response?.data.error_message);\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert({\n              title: t('topic.topic_not_found', { name: topicName }),\n              variant: AlertVariant.danger,\n            });\n          }\n        }\n      }\n    }\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const deleteTopic = () => {\n    showModal(ModalType.DeleteTopic, {\n      topicName,\n      onDeleteTopic,\n    });\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n        className='pf-c-page__main-tabs'\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={1}\n            data-testid='pageTopic-tabConsumers'\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroupList'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={2}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            data-testid='pageTopic-tabProperties'\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          />\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 2\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentConsumerGroupList'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden\n        >\n          <ConsumerGroups\n            consumerGroupByTopic={true}\n            topic={topicName}\n            rowDataTestId='tableTopicConsumers-row'\n          />\n        </TabContent>\n        <TabContent\n          eventKey={2}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties.'\n        >\n          <TopicDetailView\n            topic={topicDetail}\n            deleteTopic={deleteTopic}\n            updateTopic={updateTopic}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  DefaultApi,\n  ConsumerGroupList,\n  ConsumerGroup,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nexport { getConsumerGroups, deleteConsumerGroup, getConsumerGroupDetail };\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"names":["MASDrawer","onClose","isLoading","drawerPanelContentProps","drawerHeaderProps","isExpanded","children","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","widths","restDrawerPanelContentProps","text","title","panelContent","DrawerPanelContent","default","MASLoading","DrawerHead","TextContent","label","Text","component","TextVariants","className","value","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","onClick","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","ConsumerGroupDetail","lazy","ConsumerGroupsTable","ConsumerGroups","consumerGroupByTopic","topic","rowDataTestId","useState","offset","setOffset","order","setOrder","orderKey","setOrderKey","index","undefined","direction","sortBy","setSortBy","consumerGroups","setConsumerGroups","setIsExpanded","search","setSearch","consumerGroupDetail","setConsumerGroupDetail","config","useContext","t","useTranslation","location","useLocation","searchParams","URLSearchParams","page","parseInt","get","perPage","useEffect","onSort","_event","fetchConsumerGroups","limit","then","response","consumerDetail","onViewConsumerGroup","consumerGroup","Suspense","fallback","groupId","PageSection","variant","PageSectionVariants","padding","items","length","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","slice","total","isDrawerOpen","refreshConsumerGroups","renderConsumerTable","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","Breadcrumb","BreadcrumbItem","to","deleteTopic","updateTopic","Sidebar","hasGutter","SidebarPanel","JumpLinks","isVertical","scrollableSelector","style","position","JumpLinksItem","key","href","SidebarContent","PageGroup","hasOverflowScroll","id","Split","SplitItem","isFilled","Form","FormSection","titleElement","TextWithLabelPopover","fieldId","btnAriaLabel","fieldLabel","fieldValue","name","popoverBody","popoverHeader","numPartitions","Number","showUnlimited","Divider","tabIndex","Button","TopicDetailPage","onDeleteTopic","activeTab","onError","topicDetail","setTopicDetail","activeTabKey","setActiveTabKey","addAlert","useAlert","contentRefConsumerGroup","contentRefProperties","showModal","data","code","error_message","status","AlertVariant","fetchTopicDetail","Tabs","activeKey","onSelect","event","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","ref","hidden","getConsumerGroups","groupIdFilter","SortByDirection","getToken","accessToken","DefaultApi","Configuration","basePath","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","isAxiosError","error"],"sourceRoot":""}