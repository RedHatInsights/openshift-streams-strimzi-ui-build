{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedUpdateTopicView.tsx"],"names":["AlertContext","createContext","initialState","name","numPartitions","replicationFactor","preallocate","TopicContext","TopicContextProvider","children","useState","store","setStore","Provider","value","updateStore","toString","updateBulkStore","advanceConfig","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onCancelUpdateTopic","onDeleteTopic","onSaveTopic","onError","deleteModal","setDeleteModal","topicData","setTopicData","config","useContext","addAlert","useEffect","topicRes","configEntries","forEach","configItem","key","partitions","length","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","newConfig","push","toLowerCase","topicSettings","AlertVariant","response","data","code","error_message","handleCancel","UpdateTopicPage","onDeleteConsumer","padding","default","Tabs","activeKey","onSelect","isBox","Tab","eventKey","title","TabTitleText","onDeleteConsumerGroup","topic","consumerGroupByTopic","FederatedUpdateTopicView","getToken","apiBasePath","currentTopic","alertContext","I18nextProvider","i18n","basePath"],"mappings":"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","file":"469.753d918b.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nexport const initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '7',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.message.format.version': '',\n  'cleanup.policy': '',\n  'retention.bytes': '-1',\n  'retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n            Kafka Instances\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink ? kafkaInstanceLink : '#'}>\n            {kafkaName ? kafkaName : 'Kafka Instance Name'}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { AlertVariant, PageSection } from '@patternfly/react-core';\nimport '../../CreateTopic/Components/CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from '../../CreateTopic/Components/TopicAdvanceConfig';\nimport { getTopic, updateTopicModel } from '../../../../Services/index';\nimport { ConfigEntry, TopicSettings } from '../../../../OpenApi/api';\nimport { DeleteTopics } from '../../TopicList/Components/DeleteTopicsModal';\nimport { AlertContext } from '../../../../Contexts/Alert';\nimport { ConfigContext } from '../../../../Contexts';\nimport { IAdvancedTopic } from '../../CreateTopic/Components/CreateTopicWizard';\nimport { convertUnits } from '../../CreateTopic/utils';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onCancelUpdateTopic,\n  onDeleteTopic,\n  onSaveTopic,\n  onError,\n}) => {\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>({\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  });\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n  const fetchTopic = async (topicName) => {\n    const topicRes = await getTopic(topicName, config);\n\n    const configEntries: any = {};\n    topicRes.config?.forEach((configItem) => {\n      configEntries[configItem.key || ''] = configItem.value || '';\n    });\n\n    setTopicData({\n      ...topicData,\n      numPartitions: topicRes?.partitions?.length.toString() || '',\n      'cleanup.policy': configEntries['cleanup.policy'] || 'delete',\n      'retention.bytes': configEntries['retention.bytes'] || '-1',\n      'retention.ms': configEntries['retention.ms'] || '604800000',\n    });\n  };\n\n  useEffect(() => {\n    (async function () {\n      fetchTopic(topicName);\n    })();\n  }, []);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n\n    const newConfig: ConfigEntry[] = [];\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== 'numPartitions') {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      // numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      const updateStatus = await updateTopicModel(name, topicSettings, config);\n\n      if (updateStatus === 200) {\n        addAlert(\n          'The topic was successfully updated in the Kafka instance',\n          AlertVariant.success\n        );\n        onSaveTopic();\n      }\n    } catch (err) {\n      if (onError) {\n        onError(err.response.data.code, err.response.data.error_message);\n      }\n      addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  return (\n    <>\n      <PageSection className='kafka-ui--page__main-section--adjust-padding'>\n        <TopicAdvanceConfig\n          isCreate={false}\n          saveTopic={saveTopic}\n          handleCancel={onCancelUpdateTopic}\n          topicData={topicData}\n          setTopicData={setTopicData}\n        />\n        <br />\n        <br />\n        {deleteModal && (\n          <DeleteTopics\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n            topicName={topicName}\n            onDeleteTopic={onDeleteTopic}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ConsumerGroupsList } from '../../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport { UpdateTopicView } from './Components/UpdateTopicView';\nimport { TopicDetailHead } from '../TopicDetails/Components/TopicDetailHead';\n\nexport interface UpdateTopicPageProps {\n  topicName: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onDeleteConsumer: () => void;\n  onError?: (errorCode: number, message: string) => void;\n}\n\nexport const UpdateTopicPage: React.FunctionComponent<UpdateTopicPageProps> = ({\n  topicName,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onCancelUpdateTopic,\n  onDeleteTopic,\n  onSaveTopic,\n  onError,\n  onDeleteConsumer,\n}) => {\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        {/* <div> */}\n        <Tabs\n          activeKey={1}\n          onSelect={() => {\n            return;\n          }}\n          isBox={false}\n          className='kafka-ui--tab-padding'\n        >\n          <Tab\n            eventKey={0}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupsList\n              onDeleteConsumerGroup={onDeleteConsumer}\n              topic={topicName}\n              consumerGroupByTopic={true}\n            />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n            <PageSection variant='light' padding={{ default: 'noPadding' }}>\n              <UpdateTopicView\n                topicName={topicName}\n                onCancelUpdateTopic={onCancelUpdateTopic}\n                onDeleteTopic={onDeleteTopic}\n                onSaveTopic={onSaveTopic}\n                onError={onError}\n              />\n            </PageSection>\n          </Tab>\n        </Tabs>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { UpdateTopicPage } from '../../Modules/Topics/UpdateTopic/UpdateTopicPage';\nimport { ConfigContext, TopicContextProvider } from '../../Contexts';\nimport { AlertVariant } from '@patternfly/react-core';\nimport kafkai18n from '../../i18n';\nimport { I18nextProvider } from 'react-i18next';\nimport { AlertContext, AlertContextProps } from '../../Contexts/Alert';\nimport { FederatedProps } from '../../Utils';\n\nexport interface FederatedUpdateTopicProps extends FederatedProps {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  currentTopic: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onCancelUpdateTopic: () => void;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onDeleteConsumer: () => void;\n}\n\nconst FederatedUpdateTopicView: FunctionComponent<FederatedUpdateTopicProps> = ({\n  getToken,\n  apiBasePath,\n  currentTopic,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onCancelUpdateTopic,\n  addAlert,\n  onDeleteTopic,\n  onSaveTopic,\n  onError,\n  onDeleteConsumer,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <AlertContext.Provider value={alertContext}>\n          <TopicContextProvider>\n            <UpdateTopicPage\n              onDeleteConsumer={onDeleteConsumer}\n              topicName={currentTopic}\n              onCancelUpdateTopic={onCancelUpdateTopic}\n              onDeleteTopic={onDeleteTopic}\n              onSaveTopic={onSaveTopic}\n              onError={onError}\n              kafkaName={kafkaName}\n              kafkaPageLink={kafkaPageLink}\n              kafkaInstanceLink={kafkaInstanceLink}\n            />\n          </TopicContextProvider>\n        </AlertContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport { FederatedUpdateTopicView };\n\nexport default FederatedUpdateTopicView;\n"],"sourceRoot":""}