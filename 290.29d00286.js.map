{"version":3,"file":"290.29d00286.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Topics/dialogs/DeleteTopic/DeleteTopic.tsx","webpack://kafka-ui/./src/services/topics.ts"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { useAlert } from '@bf2/ui-shared';\nimport { BaseModalProps } from '@app/components/KafkaModal/ModalTypes';\n\nexport type DeleteTopicProps = {\n  topicName?: string;\n  onDeleteTopic?: () => void;\n  refreshTopics?: () => void;\n};\n\nconst DeleteTopic: React.FC<DeleteTopicProps & BaseModalProps> = ({\n  topicName,\n  onDeleteTopic,\n  refreshTopics,\n  hideModal,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useAlert();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (topicName) {\n        setIsLoading(true);\n        await deleteTopic(topicName, config).then(() => {\n          addAlert({\n            title: t('topic.topic_successfully_deleted', { name: topicName }),\n            variant: AlertVariant.success,\n          });\n          onDeleteTopic && onDeleteTopic();\n          refreshTopics && refreshTopics();\n        });\n      }\n    } catch (err) {\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n    onClose();\n  };\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t('topic.delete_modal_title')}\n      title={t('topic.delete_modal_title')}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          data-testid='modalDeleteTopic-buttonDelete'\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n          isLoading={isLoading}\n        >\n          {t('common.delete')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <label\n          htmlFor='instance-name-input'\n          dangerouslySetInnerHTML={{\n            __html: t('common.confirm_delete_modal_text', { name: topicName }),\n          }}\n        />\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>{t('common.confirm_delete')}</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n\nexport default DeleteTopic;\n","import { AxiosResponse } from 'axios';\nimport {\n  ConfigEntry,\n  TopicsApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { IAdvancedTopic } from '@app/modules/Topics/components/CreateTopicWizard/CreateTopicWizard';\nimport { SortByDirection } from '@patternfly/react-table';\n\nexport enum OrderKey {\n  name = 'name',\n  partitions = 'partitions',\n  retentionMs = 'retention.ms',\n  retentionSize = 'retention.bytes',\n}\n\nexport const getTopics = async (\n  config: IConfiguration | undefined,\n  limit?: number,\n  size?: number,\n  filter?: string,\n  offset?: number | undefined,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: OrderKey\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopics(\n    offset,\n    limit,\n    size,\n    filter,\n    undefined,\n    order,\n    orderKey\n  );\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<IAdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): IAdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length.toString() || '0';\n\n  topicObj.replicationFactor = topic?.partitions && topic?.partitions[0].replicas?.length.toString() || '0';\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"names":["topicName","onDeleteTopic","refreshTopics","hideModal","config","useContext","t","useTranslation","useState","verificationText","setVerificationText","addAlert","useAlert","isLoading","setIsLoading","onClose","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","then","name","AlertVariant","response","data","error_message","key","isDisabled","toUpperCase","Text","id","htmlFor","dangerouslySetInnerHTML","__html","TextInput","value","type","onChange","autoFocus","OrderKey","getTopics","limit","size","filter","offset","order","orderKey","SortByDirection","Promise","getToken","accessToken","TopicsApi","Configuration","basePath","undefined","getTopicDetail","getTopic","convertTopicResponse","topic","topicObj","forEach","numPartitions","partitions","length","toString","replicationFactor","replicas","updateTopicModel","topicSettings","updateTopic","status","answer","push","map","p","reduce","previousValue","currentValue","deleteTopic"],"sourceRoot":""}