{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedCreateView.tsx"],"names":["AlertContext","createContext","FederatedCreateTopic","getToken","apiBasePath","kafkaName","kafkaPageLink","kafkaInatanceLink","onCloseCreateTopic","alertContext","addAlert","I18nextProvider","i18n","value","basePath","setIsCreateTopic","b","kafkaInstanceLink"],"mappings":"kIAKaA,G,SAAe,IAAAC,eAC1B,M,wKCcIC,EAAqE,SAAC,G,IAC1EC,EAAQ,WACRC,EAAW,cACXC,EAAS,YACTC,EAAa,gBACbC,EAAiB,oBACjBC,EAAkB,qBAGZC,EAAe,CACnBC,SAHM,YAWR,OACE,kBAAC,EAAAC,gBAAe,CAACC,KAAM,KACrB,kBAAC,aAAsB,CACrBC,MAAO,CAAEC,SAAUV,EAAaD,SAAQ,IAExC,kBAAC,aAAqB,CAACU,MAAOJ,GAC5B,kBAAC,IAAe,CACdM,iBAbe,SAACC,GACnBA,GACHR,KAYMH,UAAWA,EACXC,cAAeA,EACfW,kBAAmBV,EACnBC,mBAAoBA,QAUhC","file":"513.bdfe5673.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { ConfigContext, IConfiguration } from '../../Contexts';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { CreateTopicPage } from '../../Modules/Topics/CreateTopic/CreateTopicPage';\nimport kafkai18n from '../../i18n';\nimport { I18nextProvider } from 'react-i18next';\nimport { AlertContext, AlertContextProps } from '../../Contexts/Alert';\nimport { FederatedProps } from '../../Utils';\n\nexport interface FederatedCreateTopicProps extends FederatedProps {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInatanceLink?: string;\n  onCloseCreateTopic: () => void;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n}\n\nconst FederatedCreateTopic: FunctionComponent<FederatedCreateTopicProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInatanceLink,\n  onCloseCreateTopic,\n  addAlert,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n  const setIsCreateTopic = (b: boolean) => {\n    if (!b) {\n      onCloseCreateTopic();\n    }\n  };\n\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider\n        value={{ basePath: apiBasePath, getToken } as IConfiguration}\n      >\n        <AlertContext.Provider value={alertContext}>\n          <CreateTopicPage\n            setIsCreateTopic={setIsCreateTopic}\n            kafkaName={kafkaName}\n            kafkaPageLink={kafkaPageLink}\n            kafkaInstanceLink={kafkaInatanceLink}\n            onCloseCreateTopic={onCloseCreateTopic}\n          />\n        </AlertContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport { FederatedCreateTopic };\n\nexport default FederatedCreateTopic;\n"],"sourceRoot":""}