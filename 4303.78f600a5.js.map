{"version":3,"file":"4303.78f600a5.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/ManagePermissionsV2.tsx","webpack://kafka-ui/./src/modules/Permissions/utils.ts","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["import { AclBinding } from '@rhoas/app-services-ui-shared/dist/esm/contexts/modals/kafka-modals';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { usePermissionsService } from '@app/services/acls';\nimport { ConfigContext, useFederated } from '@app/contexts';\nimport {\n  BaseModalProps,\n  ManagePermissionsModalProps,\n  ManagePermissionsProps,\n  usePrincipals,\n  useAuth,\n  useAlert,\n  AlertVariant,\n} from '@rhoas/app-services-ui-shared';\nimport './ManagePermissions.css';\nimport {\n  Account,\n  AddAclType,\n  ManageKafkaPermissions,\n  PrincipalType,\n} from '@rhoas/app-services-ui-components';\nimport { transformResourceType, transformResourceOperation } from '../../utils';\n\nexport const ManagePermissionsV2: React.VFC<\n  ManagePermissionsProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  title,\n  variant,\n}) => {\n  return (\n    <ManagePermissionsModal\n      topicNames={topicNames}\n      consumerGroupIds={consumerGroupIds}\n      acls={acls}\n      resourceOperations={undefined}\n      hideModal={hideModal}\n      selectedAccountId={selectedAccountId}\n      onSave={onSave}\n      kafkaName={kafkaName}\n      variant={variant}\n      title={title}\n    />\n  );\n};\n\nexport const ManagePermissionsModal: React.FC<\n  ManagePermissionsModalProps & BaseModalProps\n> = ({ hideModal, kafkaName, acls, topicNames, consumerGroupIds }) => {\n  const { kafka } = useFederated() || {};\n  const auth = useAuth();\n\n  const [selectedAccount, setSelectedAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [isAclDeleted, setIsAclDeleted] = useState<boolean>(false);\n  const [deletedAcls, setDeletedAcls] = useState<AclBinding[]>([]);\n  const [existingAcls, setExistingAcls] = useState<AclBinding[]>(\n    (acls || []).filter(\n      (i) =>\n        (selectedAccount &&\n          selectedAccount &&\n          i.principal === `${selectedAccount}`) ||\n        i.principal === '*'\n    )\n  );\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n\n  const aclsForSelectedAccount = useCallback(async () => {\n    setExistingAcls(\n      (acls || []).filter(\n        (i) =>\n          (selectedAccount &&\n            selectedAccount &&\n            i.principal === `${selectedAccount}`) ||\n          i.principal === '*'\n      )\n    );\n  }, [acls, selectedAccount]);\n\n  useEffect(() => {\n    aclsForSelectedAccount();\n  }, [acls, aclsForSelectedAccount, selectedAccount]);\n\n  const principals = usePrincipals();\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  const principal = principals\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const accounts: Account[] = principal.map((value) => ({\n    displayName: value.displayName || '',\n    id: value.id || '',\n    principalType: value.principalType || PrincipalType.UserAccount,\n  }));\n\n  const updateExistingAcls = (row: number) => {\n    setExistingAcls((existingAcls || []).filter((_, index) => index != row));\n  };\n\n  const onRemoveAcls = async (row: number) => {\n    setDeletedAcls((prevState) => [...prevState, existingAcls[row]]);\n    setIsAclDeleted(true);\n    updateExistingAcls(row);\n  };\n  const onSaveAcl = async (data: AddAclType[] | undefined) => {\n    if (deletedAcls.length > 0) {\n      deletedAcls.map(async (value) => {\n        await permissionsService\n          .deletePermission({\n            resourceName: value.resourceName,\n            patternType: value.patternType,\n            permissionType: value.permission,\n            resourceType: value.resourceType,\n            operation: value.operation,\n            principal: `User:${\n              selectedAccount == 'All accounts' ? '*' : selectedAccount\n            }`,\n          })\n          .then(() => hideModal())\n\n          .catch((error) =>\n            addAlert({\n              variant: AlertVariant.danger,\n              title: error.response.data.reason,\n            })\n          );\n      });\n    }\n\n    data &&\n      data.map(async (value) => {\n        switch (value.type) {\n          case 'manage-access': {\n            await permissionsService\n              .addPermission({\n                resourceName: 'kafka-cluster',\n                resourceType: 'CLUSTER',\n                patternType: 'LITERAL',\n                operation: 'ALTER',\n                permission: 'ALLOW',\n                principal:\n                  selectedAccount == 'All accounts'\n                    ? `User:*`\n                    : `User:${selectedAccount}`,\n              })\n              .then(() => hideModal());\n            break;\n          }\n          case 'manual': {\n            await permissionsService\n              .addPermission({\n                resourceName: value.resourceName ? value.resourceName : '',\n                resourceType: transformResourceType(value.resourceType),\n                patternType:\n                  value.resourcePrefix == 'Is' ? 'LITERAL' : 'PREFIXED',\n                operation: transformResourceOperation(value.resourceOperation),\n                permission:\n                  value.resourcePermission == 'allow' ? 'ALLOW' : 'DENY',\n                principal:\n                  selectedAccount == 'All accounts'\n                    ? `User:*`\n                    : `User:${selectedAccount}`,\n              })\n              .then(() => hideModal());\n            break;\n          }\n          case 'produce-topic': {\n            await permissionsService.addPermission({\n              resourceName: value.resourceNameValue || '',\n              resourceType: 'TOPIC',\n              patternType:\n                value.prefixRuleValue == 'Is' ? 'LITERAL' : 'PREFIXED',\n              operation: 'WRITE',\n              permission: 'ALLOW',\n              principal:\n                selectedAccount == 'All accounts'\n                  ? `User:*`\n                  : `User:${selectedAccount}`,\n            });\n            await permissionsService.addPermission({\n              resourceName: value.resourceNameValue || '',\n              resourceType: 'TOPIC',\n              patternType:\n                value.prefixRuleValue == 'Is' ? 'LITERAL' : 'PREFIXED',\n              operation: 'CREATE',\n              permission: 'ALLOW',\n              principal:\n                selectedAccount == 'All accounts'\n                  ? `User:*`\n                  : `User:${selectedAccount}`,\n            });\n            await permissionsService\n              .addPermission({\n                resourceName: value.resourceNameValue || '',\n                resourceType: 'TOPIC',\n                patternType:\n                  value.prefixRuleValue == 'Is' ? 'LITERAL' : 'PREFIXED',\n                operation: 'DESCRIBE',\n                permission: 'ALLOW',\n                principal:\n                  selectedAccount == 'All accounts'\n                    ? `User:*`\n                    : `User:${selectedAccount}`,\n              })\n              .then(() => hideModal());\n            break;\n          }\n          case 'consume-topic': {\n            await permissionsService.addPermission({\n              resourceName: value.topicResourceName || '',\n              resourceType: 'TOPIC',\n              patternType:\n                value.topicResourcePrefixRule == 'Is' ? 'LITERAL' : 'PREFIXED',\n              operation: 'READ',\n              permission: 'ALLOW',\n              principal:\n                selectedAccount == 'All accounts'\n                  ? `User:*`\n                  : `User:${selectedAccount}`,\n            });\n            await permissionsService.addPermission({\n              resourceName: value.topicResourceName || '',\n              resourceType: 'TOPIC',\n              patternType:\n                value.topicResourcePrefixRule == 'Is' ? 'LITERAL' : 'PREFIXED',\n              operation: 'DESCRIBE',\n              permission: 'ALLOW',\n              principal:\n                selectedAccount == 'All accounts'\n                  ? `User:*`\n                  : `User:${selectedAccount}`,\n            });\n            await permissionsService\n              .addPermission({\n                resourceName: value.consumerResourceName || '',\n                resourceType: 'GROUP',\n                patternType:\n                  value.consumerResourcePrefixRule == 'Is'\n                    ? 'LITERAL'\n                    : 'PREFIXED',\n                operation: 'READ',\n                permission: 'ALLOW',\n                principal:\n                  selectedAccount == 'All accounts'\n                    ? `User:*`\n                    : `User:${selectedAccount}`,\n              })\n              .then(() => hideModal());\n            break;\n          }\n        }\n      });\n  };\n  const filterTopics = (filter: string) => {\n    return topicNames.filter((v) => v.includes(filter));\n  };\n  const filterConsumerGroups = (filter: string) => {\n    return consumerGroupIds.filter((v) => v.includes(filter));\n  };\n  return (\n    <ManageKafkaPermissions\n      accounts={accounts}\n      onCancel={hideModal}\n      kafkaName={kafkaName || ''}\n      onSave={onSaveAcl}\n      existingAcls={existingAcls}\n      onRemoveAcls={onRemoveAcls}\n      selectedAccount={selectedAccount}\n      onChangeSelectedAccount={setSelectedAccount}\n      topicNameOptions={filterTopics}\n      consumerGroupNameOptions={filterConsumerGroups}\n      isAclDeleted={isAclDeleted}\n    />\n  );\n};\n\nexport default ManagePermissionsV2;\n","import { ResourceOperationValue } from '@rhoas/app-services-ui-components/types/src/Kafka/ManageKafkaPermissions/components/ResourceOperation';\nimport { ResourceTypeValue } from '@rhoas/app-services-ui-components/types/src/Kafka/ManageKafkaPermissions/components/ResourceType';\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { sentenceCase } from 'sentence-case';\n\nexport const displayName = (resourceType: AclResourceType): string => {\n  switch (resourceType) {\n    case AclResourceType.Group:\n      return 'Consumer group';\n\n    case AclResourceType.Topic:\n      return 'Topic';\n\n    case AclResourceType.Cluster:\n      return 'Kafka instance';\n\n    case AclResourceType.TransactionalId:\n      return 'Transactional ID';\n\n    default:\n      return sentenceCase(resourceType);\n  }\n};\n\nexport const transformResourceType = (value: ResourceTypeValue | undefined) => {\n  switch (value) {\n    case 'consumer-group':\n      return AclResourceType.Group;\n    case 'kafka-instance':\n      return AclResourceType.Cluster;\n    case 'topic':\n      return AclResourceType.Topic;\n    default:\n      return AclResourceType.TransactionalId;\n  }\n};\nexport const transformResourceOperation = (\n  value: ResourceOperationValue | undefined\n) => {\n  switch (value) {\n    case 'All':\n      return 'ALL';\n    case 'Alter':\n      return 'ALTER';\n    case 'Alter configs':\n      return 'ALTER_CONFIGS';\n    case 'Create':\n      return 'CREATE';\n    case 'Delete':\n      return 'DELETE';\n    case 'Describe':\n      return 'DESCRIBE';\n    case 'Describe configs':\n      return 'DESCRIBE_CONFIGS';\n    case 'Read':\n      return 'READ';\n    default:\n      return 'WRITE';\n  }\n};\n","import { useCallback, useMemo } from 'react';\nimport { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type EnhancedAclBinding = AclBinding & {\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const usePermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = useCallback(\n    async (\n      filter: AclFilter,\n      size?: number,\n      page?: number\n    ): Promise<EnhancedAclBindingListPage> => {\n      const accessToken = await config?.getToken();\n\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n        filter.resourceType,\n        filter.resourceName,\n        filter.patternType,\n        filter.principal,\n        filter.operation,\n        filter.permissionType,\n        page,\n        size\n      );\n      return enhanceAclBindingListPage(response);\n    },\n    [config]\n  );\n\n  const addPermission = useCallback(\n    async (acl: AclBinding) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.createAcl(acl);\n    },\n    [config]\n  );\n\n  const deletePermission = useCallback(\n    async (acl: AclFilter) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.deleteAcls(\n        acl.resourceType,\n        acl.resourceName,\n        acl.patternType,\n        acl.principal,\n        acl.operation,\n        acl.permissionType\n      );\n    },\n    [config]\n  );\n\n  const getResourceOperations = useCallback(async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return api.getAclResourceOperations().then((response) => response.data);\n  }, [config]);\n\n  return useMemo(() => {\n    return {\n      getPermissions,\n      addPermission,\n      deletePermission,\n      getResourceOperations,\n    } as PermissionsService;\n  }, [getPermissions, addPermission, deletePermission, getResourceOperations]);\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        return {\n          ...item,\n          // Strip out the \"User:\" prefix\n          principal: item.principal.substring(5),\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["ManagePermissionsV2","hideModal","onSave","kafkaName","selectedAccountId","acls","topicNames","consumerGroupIds","title","variant","ManagePermissionsModal","resourceOperations","undefined","kafka","auth","useAuth","selectedAccount","setSelectedAccount","useState","isAclDeleted","setIsAclDeleted","deletedAcls","setDeletedAcls","existingAcls","setExistingAcls","filter","i","principal","currentlyLoggedInuser","setCurrentlyLoggedInuser","aclsForSelectedAccount","useCallback","useEffect","principals","usePrincipals","addAlert","useAlert","config","useContext","permissionsService","username","getUsername","accounts","getAllPrincipals","p","id","owner","map","value","displayName","principalType","PrincipalType","ManageKafkaPermissions","onCancel","data","length","deletePermission","resourceName","patternType","permissionType","permission","resourceType","operation","then","catch","error","AlertVariant","response","reason","type","addPermission","resourcePrefix","resourceOperation","resourcePermission","resourceNameValue","prefixRuleValue","topicResourceName","topicResourcePrefixRule","consumerResourceName","consumerResourcePrefixRule","onRemoveAcls","row","prevState","_","index","updateExistingAcls","onChangeSelectedAccount","topicNameOptions","v","includes","consumerGroupNameOptions","AclResourceType","sentenceCase","transformResourceType","transformResourceOperation","convertEnum","Object","entries","find","toString","usePermissionsService","getPermissions","size","page","accessToken","getToken","api","AclsApi","Configuration","basePath","getAcls","enhanceAclBindingListPage","acl","createAcl","deleteAcls","getResourceOperations","getAclResourceOperations","useMemo","total","items","item","substring","hash","sort","a","b","localeCompare","getPermissionsTypes","values","AclPermissionType","getOperations","AclOperation","getResourceTypes","getPatternTypes","AclPatternType"],"sourceRoot":""}