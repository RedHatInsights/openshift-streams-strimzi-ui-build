{"version":3,"sources":["webpack://kafka-ui/./src/modules/Topics/pages/CreateTopic/CreateTopicFederated.tsx"],"names":["getToken","apiBasePath","kafkaName","kafkaPageLink","kafkaInstanceLink","dispatchKafkaAction","I18nextProvider","i18n","value","basePath","onCloseCreateTopic"],"mappings":"4NA+CA,QA9B2E,SAAC,G,IAC1EA,EAAQ,WACRC,EAAW,cACXC,EAAS,YACTC,EAAa,gBACbC,EAAiB,oBACjBC,EAAmB,sBAMnB,OACE,kBAAC,EAAAC,gBAAe,CAACC,KAAM,KACrB,kBAAC,aAAsB,CAACC,MAAO,CAAEC,SAAUR,EAAaD,SAAQ,IAC9D,kBAAC,aAAyB,CACxBQ,MAAO,CACLN,UAAS,EACTC,cAAa,EACbC,kBAAiB,EACjBC,oBAAmB,IAGrB,kBAAC,IAAe,CAACK,mBAfE,WACzBL,GAAuBA,EAAoB","file":"545.e41f5d95.bundle.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { CreateTopicPage } from '@app/modules/Topics/pages/CreateTopic/CreateTopicPage';\nimport kafkai18n from '@app/i18n';\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\nimport { KafkaActions } from '@app/utils';\n\nexport type CreateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst CreateTopicFederated: FunctionComponent<CreateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  dispatchKafkaAction,\n}) => {\n  const onCloseCreateTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.ViewTopics);\n  };\n\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <FederatedContext.Provider\n          value={{\n            kafkaName,\n            kafkaPageLink,\n            kafkaInstanceLink,\n            dispatchKafkaAction,\n          }}\n        >\n          <CreateTopicPage onCloseCreateTopic={onCloseCreateTopic} />\n        </FederatedContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default CreateTopicFederated;\n"],"sourceRoot":""}