{"version":3,"file":"650.d738263b.js","mappings":"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","sources":["webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx"],"sourcesContent":["import React, { useContext } from 'react';\n\nexport type FederatedProps = {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport {\n  IAdvancedTopic,\n  TopicAdvanceConfig,\n} from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigEntry, TopicSettings } from '@rhoas/kafka-instance-sdk';\nimport { ConfigContext } from '@app/contexts';\nimport { convertUnits } from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert, useBasename } from '@bf2/ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  };\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onCancelUpdateTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const fetchTopic = async (topicName) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      const configEntries: ConfigEntry = {};\n      topicRes.config?.forEach((configItem) => {\n        configEntries[configItem.key || ''] = configItem.value || '';\n      });\n\n      setTopicData({\n        ...topicData,\n        numPartitions: topicRes?.partitions?.length.toString() || '',\n        replicationFactor:\n          (topicRes?.partitions &&\n            topicRes?.partitions[0].replicas?.length.toString()) ||\n          '',\n        'cleanup.policy': configEntries['cleanup.policy'] || 'delete',\n        'retention.bytes': configEntries['retention.bytes'] || '-1',\n        'retention.ms': configEntries['retention.ms'] || '604800000',\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        if (onError) {\n          onError(err.response?.data.code, err.response?.data.error_message);\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert({\n            variant: AlertVariant.danger,\n            title: `Topic ${topicName} does not exist`,\n          });\n          onCancelUpdateTopic && onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n    const newConfig: ConfigEntry[] = [];\n    setIsLoading(true);\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== 'numPartitions' && key !== 'replicationFactor') {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      await updateTopicModel(name, topicSettings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      if (onError) {\n        onError(err.response.data.code, err.response.data.error_message);\n      }\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useBasename } from '@bf2/ui-shared';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const UpdateTopicPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n  const { topicName } = useParams<{ topicName: string }>();\n  const {\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 1,\n  } = useFederated() || {};\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const onDeleteTopic = () => {\n    history.push(basename);\n  };\n\n  const onSaveTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { UpdateTopicPage } from '@app/modules/Topics/pages/UpdateTopic';\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\nimport kafkai18n from '@app/i18n';\nimport { ModalProvider } from '@app/components/KafkaModal';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n}) => {\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <FederatedContext.Provider\n          value={{\n            activeTab: 1,\n            kafkaName,\n            kafkaPageLink,\n            kafkaInstanceLink,\n            onError,\n          }}\n        >\n          <ModalProvider>\n            <UpdateTopicPage />\n          </ModalProvider>\n        </FederatedContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default UpdateTopicFederated;\n"],"names":["FederatedContext","undefined","useFederated","useContext","UpdateTopicView","topicName","onSaveTopic","onError","t","useTranslation","config","addAlert","useAlert","history","useHistory","basename","getBasename","useBasename","initialState","name","numPartitions","useState","topicData","setTopicData","isLoading","setIsLoading","onCancelUpdateTopic","push","useEffect","topicRes","forEach","configItem","key","value","partitions","length","toString","replicationFactor","replicas","response","data","code","error_message","status","variant","AlertVariant","title","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","configEntries","newConfig","toLowerCase","topicSettings","Number","then","handleCancel","isLoadingSave","UpdateTopicPage","useParams","kafkaName","kafkaPageLink","kafkaInstanceLink","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","TopicDetailHead","PageSection","PageSectionVariants","className","padding","default","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","onDeleteTopic","getToken","apiBasePath","I18nextProvider","i18n","basePath"],"sourceRoot":""}