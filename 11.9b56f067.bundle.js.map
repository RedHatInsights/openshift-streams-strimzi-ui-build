{"version":3,"sources":["webpack://kafka-ui/./src/contexts/Alert/Context.tsx","webpack://kafka-ui/./src/modules/Topics/pages/MainView/MainViewFederated.tsx"],"names":["AlertContext","createContext","getToken","apiBasePath","kafkaName","kafkaPageLink","addAlert","onError","onConnectToRoute","getConnectToRoutePath","handleInstanceDrawer","setIsOpenDeleteInstanceModal","dispatchKafkaAction","alertContext","BrowserRouter","I18nextProvider","i18n","value","basePath","onCreateTopic","onEditTopic","topicName","activeTab"],"mappings":"iIAKaA,G,SAAe,IAAAC,eAC1B,M,2KC2EF,QA5DqE,SAAC,G,IACpEC,EAAQ,WACRC,EAAW,cACXC,EAAS,YACTC,EAAa,gBACbC,EAAQ,WACRC,EAAO,UACPC,EAAgB,mBAChBC,EAAqB,wBACrBC,EAAoB,uBACpBC,EAA4B,+BAC5BC,EAAmB,sBAEbC,EAAe,CACnBP,SAAQ,GAYV,OAEE,kBAAC,EAAAQ,cAAa,KACZ,kBAAC,EAAAC,gBAAe,CAACC,KAAM,KACrB,kBAAC,aAAqB,CAACC,MAAOJ,GAC5B,kBAAC,aAAsB,CAACI,MAAO,CAAEC,SAAUf,EAAaD,SAAQ,IAC9D,kBAAC,aAAyB,CACxBe,MAAO,CACLb,UAAS,EACTC,cAAa,EACbC,SAAQ,EACRC,QAAO,EACPC,iBAAgB,EAChBC,sBAAqB,EACrBC,qBAAoB,EACpBC,6BAA4B,EAC5BC,oBAAmB,IAGrB,kBAAC,KAAS,KACR,kBAAC,IAAQ,CACPO,cA9BM,WACpBP,GAAuBA,EAAoB,mBA8B7BQ,YA3BI,SAACC,GACnBT,GACEA,EAAoB,iBAA0BS,IA0BlCC,UAAW","file":"11.9b56f067.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { ServerAlertGroup } from \"@app/components/ServerAlertGroup\";\nimport { AlertType, AlertContextProps, TimeOut } from \"./Alert.types\";\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { I18nextProvider } from \"react-i18next\";\nimport {\n  AlertContext,\n  AlertContextProps,\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from \"@app/contexts\";\nimport kafkai18n from \"@app/i18n\";\nimport { MainView } from \"./MainView\";\nimport { KafkaActions } from \"@app/utils\";\nimport { RootModal } from \"@app/components/RootModal\";\n\nexport type MainViewFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst MainViewFederated: FunctionComponent<MainViewFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  addAlert,\n  onError,\n  onConnectToRoute,\n  getConnectToRoutePath,\n  handleInstanceDrawer,\n  setIsOpenDeleteInstanceModal,\n  dispatchKafkaAction,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n\n  const onCreateTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.CreateTopic);\n  };\n\n  const onEditTopic = (topicName?: string | undefined) => {\n    dispatchKafkaAction &&\n      dispatchKafkaAction(KafkaActions.UpdateTopic, topicName);\n  };\n\n  return (\n    // TODO don't add BrowserRouter here - see  https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/74\n    <BrowserRouter>\n      <I18nextProvider i18n={kafkai18n}>\n        <AlertContext.Provider value={alertContext}>\n          <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n            <FederatedContext.Provider\n              value={{\n                kafkaName,\n                kafkaPageLink,\n                addAlert,\n                onError,\n                onConnectToRoute,\n                getConnectToRoutePath,\n                handleInstanceDrawer,\n                setIsOpenDeleteInstanceModal,\n                dispatchKafkaAction,\n              }}\n            >\n              <RootModal>\n                <MainView\n                  onCreateTopic={onCreateTopic}\n                  onEditTopic={onEditTopic}\n                  activeTab={1}\n                />\n              </RootModal>\n            </FederatedContext.Provider>\n          </ConfigContext.Provider>\n        </AlertContext.Provider>\n      </I18nextProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default MainViewFederated;\n"],"sourceRoot":""}