{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedUpdateTopicView.tsx"],"names":["AlertContext","createContext","UpdateTopicView","topicName","onCancelUpdateTopic","onDeleteTopic","store","updateBulkStore","useState","deleteModal","setDeleteModal","topic","setTopic","config","useContext","addAlert","history","useEffect","topicRes","saveToStore","fetchTopic","advanceConfig","numPartitions","partitions","length","toString","name","forEach","configItem","key","value","patchConfig","previousTopic","filter","item","Object","keys","map","TopicAdvanceConfig","isCreate","saveTopic","newConfig","topicSettings","Number","AlertVariant","push","response","data","error","handleCancel","UpdateTopicPage","getTopicListPath","onClickTopicList","TopicDetailHead","PageSection","variant","PageSectionVariants","padding","default","Tabs","activeKey","onSelect","isBox","className","Tab","eventKey","title","TabTitleText","FederatedUpdateTopicView","getToken","apiBasePath","currentTopic","alertContext","I18nextProvider","i18n","basePath"],"mappings":"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","file":"130.a786ef40.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport '../../CreateTopic/Components/CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from '../../CreateTopic/Components/TopicAdvanceConfig';\nimport { useHistory } from 'react-router';\nimport { getTopic, updateTopicModel } from '../../../../Services/index';\nimport { Topic, TopicSettings } from '../../../../OpenApi/api';\nimport {\n  AdvancedTopic,\n  initialState,\n  TopicContext,\n} from '../../../../Contexts/Topic';\nimport { DeleteTopics } from '../../TopicList/Components/DeleteTopicsModal';\nimport { AlertContext } from '../../../../Contexts/Alert';\nimport { ConfigContext } from '../../../../Contexts';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onCancelUpdateTopic,\n  onDeleteTopic,\n}) => {\n  const { store, updateBulkStore } = React.useContext(TopicContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [topic, setTopic] = useState<Topic>();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const fetchTopic = async (topicName) => {\n    const topicRes = await getTopic(topicName, config);\n    setTopic(topicRes);\n    if (topicRes) saveToStore(topicRes);\n  };\n\n  useEffect(() => {\n    (async function () {\n      await updateBulkStore(initialState);\n      fetchTopic(topicName);\n    })();\n  }, []);\n\n  const saveToStore = (topic: Topic) => {\n    const advanceConfig: AdvancedTopic = store;\n    advanceConfig.numPartitions = topic?.partitions?.length.toString() || '0';\n    advanceConfig.name = topic.name || '';\n    topic.config?.forEach((configItem) => {\n      advanceConfig[configItem.key || ''] = configItem.value || '';\n    });\n    updateBulkStore(advanceConfig);\n  };\n\n  const patchConfig = (previousTopic: Topic) => {\n    const updatedConfig = previousTopic.config?.length\n      ? previousTopic.config.filter((item) => {\n          if (item.key && store[item.key] != item.value)\n            return { key: item.key, value: store[item.key] };\n        })\n      : Object.keys(store).map((key) => {\n          return { key: key, value: store[key] };\n        });\n    return updatedConfig;\n  };\n\n  const saveTopic = async () => {\n    const newConfig = topic && (await patchConfig(topic));\n\n    const topicSettings: TopicSettings = {\n      numPartitions: Number(store.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      const updateStatus = await updateTopicModel(\n        store.name,\n        topicSettings,\n        config\n      );\n\n      if (updateStatus === 200) {\n        addAlert(\n          'The topic was successfully updated in the Kafka instance',\n          AlertVariant.success\n        );\n        history.push(`/topic/${topicName}`);\n      }\n    } catch (err) {\n      addAlert(err.response.data.error, AlertVariant.danger);\n    }\n    updateBulkStore(initialState);\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n      />\n      <br />\n      <br />\n      {deleteModal && (\n        <DeleteTopics\n          deleteModal={deleteModal}\n          setDeleteModal={setDeleteModal}\n          topicName={topicName}\n          onDeleteTopic={onDeleteTopic}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport { ConsumerGroupByTopicList } from '../TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\nimport { UpdateTopicView } from './Components/UpdateTopicView';\nimport { TopicDetailHead } from '../TopicDetails/Components/TopicDetailHead';\n\nexport interface UpdateTopicPageProps {\n  topicName: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n}\n\nexport const UpdateTopicPage: React.FunctionComponent<UpdateTopicPageProps> = ({\n  topicName,\n  getTopicListPath,\n  onClickTopicList,\n  onCancelUpdateTopic,\n  onDeleteTopic,\n}) => {\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        getTopicListPath={getTopicListPath}\n        onClickTopicList={onClickTopicList}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        {/* <div> */}\n        <Tabs\n          activeKey={1}\n          onSelect={() => {\n            return;\n          }}\n          isBox={false}\n          className='tab-padding'\n        >\n          <Tab\n            eventKey={0}\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupByTopicList />\n          </Tab>\n          <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n            <PageSection variant='light'>\n              <UpdateTopicView\n                topicName={topicName}\n                onCancelUpdateTopic={onCancelUpdateTopic}\n                onDeleteTopic={onDeleteTopic}\n              />\n            </PageSection>\n          </Tab>\n        </Tabs>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { UpdateTopicPage } from '../../Modules/Topics/UpdateTopic/UpdateTopicPage';\nimport { ConfigContext, TopicContextProvider } from '../../Contexts';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport kafkai18n from '../../i18n';\nimport { I18nextProvider } from 'react-i18next';\nimport { AlertContext, AlertContextProps } from '../../Contexts/Alert';\n\nexport type FederatedUpdateTopicProps = {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  currentTopic: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onCancelUpdateTopic: () => void;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  onDeleteTopic: () => void;\n};\n\nconst FederatedUpdateTopicView: FunctionComponent<FederatedUpdateTopicProps> = ({\n  getToken,\n  apiBasePath,\n  currentTopic,\n  getTopicListPath,\n  onClickTopicList,\n  onCancelUpdateTopic,\n  addAlert,\n  onDeleteTopic,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <AlertContext.Provider value={alertContext}>\n          <TopicContextProvider>\n            <PageSection variant={PageSectionVariants.light}>\n              <UpdateTopicPage\n                topicName={currentTopic}\n                getTopicListPath={getTopicListPath}\n                onClickTopicList={onClickTopicList}\n                onCancelUpdateTopic={onCancelUpdateTopic}\n                onDeleteTopic={onDeleteTopic}\n              />\n            </PageSection>\n          </TopicContextProvider>\n        </AlertContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport { FederatedUpdateTopicView };\n\nexport default FederatedUpdateTopicView;\n"],"sourceRoot":""}