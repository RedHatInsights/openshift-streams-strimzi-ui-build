{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Components/DropdownWithToggle.tsx","webpack://kafka-ui/./src/Components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/Components/SizeTimeFormGroup/SizeTimeFormGroup.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/MessageSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CoreConfiguration.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/LogSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/ReplicationSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/IndexSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/FlushSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CleanupSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/TopicAdvanceConfig.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/utils.ts"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","initialState","numPartitions","replicationFactor","preallocate","TopicContext","createContext","TopicContextProvider","children","useState","store","setStore","Provider","value","updateStore","toString","updateBulkStore","advanceConfig","DropdownWithToggle","options","id","toggleId","items","ariaLabel","onSelectOption","isOpen","setIsOpen","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","Dropdown","onSelect","e","currentTarget","textContent","target","toggle","dropdownItems","map","option","key","label","DropdownItem","FormGroupWithPopover","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","FormGroup","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","SizeTimeFormGroup","dropdownValue","inputName","onChange","onPlus","onMinus","plusBtnProps","minusBtnProps","type","timeUnits","isDisabled","memoryUnits","Flex","FlexItem","grow","default","NumberInput","getItemsForType","timeStampOptions","messageCompressionTypes","MessageSection","t","useTranslation","handleTouchSpinInputChange","fieldName","Number","handleTouchSpinPlus","handleTouchSpinMinus","onDropdownChange","onDropdownChangeDotSeparated","Stack","hasGutter","TextContent","Title","headingLevel","size","tabIndex","Text","component","TextVariants","Form","CoreConfiguration","handleTouchSpinInputChangeCamelCase","handleTouchSpinPlusCamelCase","handleTouchSpinMinusCamelCase","TextInput","isRequired","placeholder","clearOptions","LogSection","ReplicationSection","handleTextInputChange","Checkbox","isChecked","Boolean","checked","InputGroup","IndexSection","FlushSection","CleanupSection","TopicAdvanceConfig","isCreate","saveTopic","handleCancel","actionText","useEffect","Sidebar","SidebarPanel","variant","JumpLinks","isVertical","scrollableSelector","style","position","offset","expandable","md","isExpanded","JumpLinksItem","href","SidebarContent","PageSection","padding","hasOverflowScroll","StackItem","ActionGroup","Button","kebabToCamel","kebabCase","split","word","index","text","charAt","toUpperCase","slice","join","kebabToDotSeparated","val","replaceAll","unitsToBytes","bytes","kilobytes","megabytes","gigabytes","terabytes","unitsToMilliSecond","milliseconds","seconds","days","months","years","convertUnits","topicData","topic","pop","String","formatTopicRequest","configEntries","config","push","settings"],"mappings":"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","file":"190.f4d37f28.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nexport const initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.message.format.version': '',\n  'log.cleanup.policy': '',\n  'log.retention.bytes': '',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value = e.currentTarget.textContent;\n    if (onSelectOption) {\n      e.target.name = name;\n      onSelectOption(value, e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {value}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n    />\n  );\n};\n","import { FormGroup, Popover } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\ninterface IFormGroupWithPopoverProps {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n}\n\nexport const FormGroupWithPopover: React.FC<IFormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import {\n  Flex,\n  FlexItem,\n  NumberInput,\n  NumberInputProps,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { DropdownWithToggle, IDropdownOption } from '../DropdownWithToggle';\n\nexport interface SizeTimeFormGroup extends NumberInputProps {\n  /** id of dropdown element */\n  id: string;\n  /** id of dropdown toggle button */\n  toggleId: string;\n  /** id of dropdown element */\n  dropdownValue?: string;\n  /** name attribute of dropdown element */\n  name: string;\n  /** handler method of dropdown */\n  onSelectOption?: (value: string, event) => void;\n  /** aria label for dropdown element */\n  ariaLabel?: string;\n  /** determines whether to display memory units or time units */\n  type: string;\n}\n\nexport const SizeTimeFormGroup: React.FC<SizeTimeFormGroup> = ({\n  id,\n  toggleId,\n  dropdownValue,\n  ariaLabel,\n  onSelectOption,\n  name,\n  inputName,\n  onChange,\n  onPlus,\n  onMinus,\n  value,\n  plusBtnProps,\n  minusBtnProps,\n  type,\n}) => {\n  const timeUnits: IDropdownOption[] = [\n    { key: 'milliseconds', value: 'milliseconds', isDisabled: false },\n    { key: 'seconds', value: 'seconds', isDisabled: false },\n    { key: 'days', value: 'days', isDisabled: false },\n    { key: 'months', value: 'months', isDisabled: false },\n    { key: 'years', value: 'years', isDisabled: false },\n  ];\n\n  const memoryUnits: IDropdownOption[] = [\n    { key: 'bytes', value: 'bytes', isDisabled: false },\n    { key: 'kilobytes', value: 'kilobytes', isDisabled: false },\n    { key: 'megabytes', value: 'megabytes', isDisabled: false },\n    { key: 'gigabytes', value: 'gigabytes', isDisabled: false },\n    { key: 'terabytes', value: 'terabytes', isDisabled: false },\n  ];\n\n  const getItemsForType = (type: string) => {\n    switch (type) {\n      case 'time':\n        return timeUnits;\n      case 'memory':\n        return memoryUnits;\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem grow={{ default: 'grow' }}>\n        <NumberInput\n          inputName={inputName}\n          onChange={onChange}\n          onPlus={onPlus}\n          onMinus={onMinus}\n          value={value}\n          plusBtnProps={plusBtnProps}\n          minusBtnProps={minusBtnProps}\n        />\n      </FlexItem>\n      <FlexItem>\n        <DropdownWithToggle\n          id={id}\n          toggleId={toggleId}\n          ariaLabel={ariaLabel}\n          onSelectOption={onSelectOption}\n          items={getItemsForType(type)}\n          name={name}\n          value={dropdownValue || ''}\n        />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import {\n  TextVariants,\n  Text,\n  TextContent,\n  Form,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nconst timeStampOptions: IDropdownOption[] = [\n  { key: 'create-time', value: 'CreateTime', isDisabled: false },\n  { key: 'log-append-time', value: 'LogAppendTime', isDisabled: false },\n];\n\nconst messageCompressionTypes: IDropdownOption[] = [\n  { key: 'Producer', value: 'Producer', isDisabled: false },\n  { key: 'Gzip', value: 'Gzip', isDisabled: false },\n  { key: 'Snappy', value: 'Snappy', isDisabled: false },\n  { key: 'LZ4', value: 'LZ4', isDisabled: false },\n  { key: 'Zstandard', value: 'Zstandard', isDisabled: false },\n  { key: 'Uncompressed', value: 'Uncompressed', isDisabled: false },\n];\n\nconst MessageSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='messages' tabIndex={-1}>\n          Messages\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.messageSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='maxsize'\n          fieldLabel='Maximum message size'\n          labelHead={t('createTopic.maxMessageSizeLabelHead')}\n          labelBody={t('createTopic.maxMessageSizeLabelBody')}\n          buttonAriaLabel='More info for maximum message size field'\n        >\n          <SizeTimeFormGroup\n            inputName='max-message-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['max.message.bytes'])}\n            plusBtnProps={{ name: 'max-message-bytes' }}\n            minusBtnProps={{ name: 'max-message-bytes' }}\n            id='msg-section-units-dropdown'\n            toggleId='msg-section-units-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='max-message-bytes-unit'\n            dropdownValue={store['max.message.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='timestamp'\n          fieldLabel='Message timestamp type'\n          labelHead={t('createTopic.messageTimestampLabelHead')}\n          labelBody={t('createTopic.messageTimestampLabelBody')}\n          buttonAriaLabel='More info for message timestamp field'\n        >\n          <DropdownWithToggle\n            id='msg-section-timestamp-dropdown'\n            toggleId='msg-section-timestamp-dropdowntoggle'\n            ariaLabel='select timestamp type from dropdown'\n            name='message-timestamp-type'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={timeStampOptions}\n            value={store['message.timestamp.type'] || ''}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='max-difference'\n          fieldLabel='Message timestamp difference'\n          labelHead={t('createTopic.messageTimestampDiffLabelHead')}\n          labelBody={t('createTopic.messageTimestampDiffLabelBody')}\n          buttonAriaLabel='More info for maximum message timestamp difference field'\n        >\n          <SizeTimeFormGroup\n            inputName='message-timestamp-difference-max-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['message.timestamp.difference.max.ms'])}\n            plusBtnProps={{ name: 'message-timestamp-difference-max-ms' }}\n            minusBtnProps={{ name: 'message-timestamp-difference-max-ms' }}\n            id='msg-section-timestamp-diff-units-dropdown'\n            toggleId='msg-section-timestamp-diff-units-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='message-timestamp-difference-max-ms-unit'\n            dropdownValue={store['message.timestamp.difference.max.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='compression-type'\n          fieldLabel='Compression type'\n          labelHead={t('createTopic.compressionTypeLabelHead')}\n          labelBody={t('createTopic.compressionTypeLabelBody')}\n          buttonAriaLabel='More info for comprssion type field'\n        >\n          <DropdownWithToggle\n            id='compression-type'\n            toggleId='msg-section-compression-type-dropdowntoggle'\n            ariaLabel='select timestamp type from dropdown'\n            name='compression-type'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={messageCompressionTypes}\n            value={store['compression.type'] || ''}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n\nexport { MessageSection };\n","import {\n  Form,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  Title,\n  NumberInput,\n  Stack,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToCamel, kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nconst CoreConfiguration: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToCamel(fieldName), value);\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinInputChangeCamelCase = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToCamel(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinPlusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const handleTouchSpinMinusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title\n          headingLevel='h2'\n          size='xl'\n          id='core-configuration'\n          tabIndex={-1}\n        >\n          Core configuration\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.coreConfigInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          labelHead={t('createTopic.topicNameLabelHead')}\n          fieldId='create-topic-name'\n          fieldLabel='Topic name'\n          labelBody={t('createTopic.topicNameLabelBody')}\n          buttonAriaLabel='More info for topic name field'\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='create-topic-name'\n            name='name'\n            value={store.name}\n            onChange={handleTextInputChange}\n            label='Topic name'\n            placeholder='Enter topic name'\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='create-topic-partitions'\n          fieldLabel='Partitions'\n          labelHead={t('createTopic.partitionsLabelHead')}\n          labelBody={t('createTopic.partitionsLabelBody')}\n          buttonAriaLabel='More info for partitions field'\n        >\n          <NumberInput\n            id='create-topic-partitions'\n            inputName='num-partitions'\n            onChange={handleTouchSpinInputChangeCamelCase}\n            onPlus={handleTouchSpinPlusCamelCase}\n            onMinus={handleTouchSpinMinusCamelCase}\n            value={Number(store.numPartitions)}\n            plusBtnProps={{ name: 'num-partitions' }}\n            minusBtnProps={{ name: 'num-partitions' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='replicas'\n          fieldLabel='Replicas'\n          labelHead={t('createTopic.replicasLabelHead')}\n          labelBody={t('createTopic.replicasLabelBody')}\n          buttonAriaLabel='More info for replicas field'\n        >\n          <NumberInput\n            inputName='replication-factor'\n            onChange={handleTouchSpinInputChangeCamelCase}\n            onPlus={handleTouchSpinPlusCamelCase}\n            onMinus={handleTouchSpinMinusCamelCase}\n            value={Number(store.replicationFactor)}\n            plusBtnProps={{ name: 'replication-factor' }}\n            minusBtnProps={{ name: 'replication-factor' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='insyncreplicas'\n          fieldLabel='Minimum in-sync replicas'\n          labelHead={t('createTopic.inSyncReplicasLabelHead')}\n          labelBody={t('createTopic.inSyncReplicasLabelBody')}\n          buttonAriaLabel='More info for minimum in-sync replicas field'\n        >\n          <NumberInput\n            id='insyncreplicas'\n            inputName='min-insync-replicas'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.insync.replicas'])}\n            plusBtnProps={{ name: 'min-insync-replicas' }}\n            minusBtnProps={{ name: 'min-insync-replicas' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='retention'\n          fieldLabel='Retention time'\n          labelHead={t('createTopic.retentionTimeLabelHead')}\n          labelBody={t('createTopic.retentionTimeLabelBody')}\n          buttonAriaLabel='More info for retention time field'\n        >\n          <SizeTimeFormGroup\n            inputName='retention-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['retention.ms'])}\n            plusBtnProps={{ name: 'retention-ms' }}\n            minusBtnProps={{ name: 'retention-ms' }}\n            id='core-config-retention-time-unit'\n            toggleId='core-config-retention-dropdowntoggle'\n            name='retention-ms-unit'\n            dropdownValue={store['retention.ms.unit']}\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n\nexport { CoreConfiguration };\n","import {\n  TextVariants,\n  Text,\n  TextContent,\n  Form,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nconst clearOptions: IDropdownOption[] = [\n  { key: 'compact', value: 'compact', isDisabled: false },\n  { key: 'delete', value: 'delete', isDisabled: false },\n  { key: 'compact-delete', value: 'compact, delete', isDisabled: false },\n  { key: 'delete-compact', value: 'delete, compact', isDisabled: false },\n];\n\nconst LogSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='log' tabIndex={-1}>\n          Log\n        </Title>\n\n        <Text component={TextVariants.p}>\n          {t('createTopic.logSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='cleanup-policy'\n          fieldLabel='Cleanup policy'\n          labelHead={t('createTopic.cleanupPolicyLabelHead')}\n          labelBody={t('createTopic.cleanupPolicyLabelBody')}\n          buttonAriaLabel='More info for cleanup policy field'\n        >\n          <DropdownWithToggle\n            id='log-section-policy-type-dropdown'\n            toggleId='log-section-policy-type-dropdowntoggle'\n            ariaLabel='select policy type from dropdown'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={clearOptions}\n            name='log-cleanup-policy'\n            value={store['log.cleanup.policy'] || ''}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='retention-bytes'\n          fieldLabel='Retention bytes'\n          labelHead={t('createTopic.retentionBytesLabelHead')}\n          labelBody={t('createTopic.retentionBytesLabelBody')}\n          buttonAriaLabel='More info for retention bytes field'\n        >\n          <SizeTimeFormGroup\n            inputName='log-retention-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['log.retention.bytes'])}\n            plusBtnProps={{ name: 'log-retention-bytes' }}\n            minusBtnProps={{ name: 'log-retention-bytes' }}\n            id='log-section-retention-unit-dropdown'\n            toggleId='log-section-retention-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='log-retention-bytes-unit'\n            dropdownValue={store['log.retention.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n\n        <FormGroupWithPopover\n          fieldId='log-type'\n          fieldLabel='Log segment types'\n          labelHead={t('createTopic.logSegmentLabelHead')}\n          labelBody={t('createTopic.logSegmentLabelBody')}\n          buttonAriaLabel='More info for log segment types field'\n        >\n          <SizeTimeFormGroup\n            inputName='log-segment-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['log.segment.bytes'])}\n            plusBtnProps={{ name: 'log-segment-bytes' }}\n            minusBtnProps={{ name: 'log-segment-bytes' }}\n            id='log-section-segment-unit-dropdown'\n            toggleId='log-section-segment-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='log-segment-bytes-unit'\n            dropdownValue={store['log.segment.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n\nexport { LogSection };\n","import {\n  TextContent,\n  Text,\n  Checkbox,\n  Form,\n  InputGroup,\n  TextInput,\n  TextVariants,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { kebabToDotSeparated } from '../utils';\nimport { useTranslation } from 'react-i18next';\n\nexport const ReplicationSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleCheckboxSelect = (checked: boolean, event) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), checked);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='replication' tabIndex={-1}>\n          Replication\n        </Title>\n\n        <Text component={TextVariants.p}>\n          {t('createTopic.replicationSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='unclean-leader-election'\n          fieldLabel='Unclean leader election'\n          labelHead={t('createTopic.leaderElectionLabelHead')}\n          labelBody={t('createTopic.leaderElectionLabelBody')}\n          buttonAriaLabel='More info for leader election field'\n        >\n          <Checkbox\n            isChecked={Boolean(store['unclean.leader.election.enable'])}\n            label='Allow unclean leader election'\n            aria-label='uncontrolled checkbox example'\n            id='leader-election'\n            onChange={handleCheckboxSelect}\n            name='unclean-leader-election-enable'\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='follower-replicas'\n          fieldLabel='Follower replication throttled replicas'\n          labelHead={t('createTopic.followerReplicaLabelHead')}\n          labelBody={t('createTopic.followerReplicaLabelBody')}\n          buttonAriaLabel='More info for follower throttled replicas field'\n        >\n          <InputGroup>\n            <TextInput\n              name='follower-replication-throttled-replicas'\n              type='text'\n              aria-label='Text'\n              onChange={handleTextInputChange}\n              value={store['follower.replication.throttled.replicas']}\n            />\n          </InputGroup>\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='leader-replicas'\n          fieldLabel='Leader replication throttled replicas'\n          labelHead={t('createTopic.leaderReplicaLabelHead')}\n          labelBody={t('createTopic.leaderReplicaLabelBody')}\n          buttonAriaLabel='More info for leader throttled replicas field'\n        >\n          <InputGroup>\n            <TextInput\n              name='leader-replication-throttled-replicas'\n              type='text'\n              aria-label='Text'\n              onChange={handleTextInputChange}\n              value={store['leader.replication.throttled.replicas']}\n            />\n          </InputGroup>\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import {\n  TextContent,\n  Text,\n  Form,\n  TextVariants,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport const IndexSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='index' tabIndex={-1}>\n          Index\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.indexSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='interval-bytes'\n          fieldLabel='Index interval bytes'\n          labelHead={t('createTopic.indexIntervalLabelHead')}\n          labelBody={t('createTopic.indexIntervalLabelBody')}\n          buttonAriaLabel='More info for index interval bytes field'\n        >\n          <SizeTimeFormGroup\n            id='index-interval-size'\n            inputName='index-interval-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['index.interval.bytes'])}\n            plusBtnProps={{ name: 'index-interval-bytes' }}\n            minusBtnProps={{ name: 'index-interval-bytes' }}\n            toggleId='index-interval-unit-dropdowntoggle'\n            name='index-interval-bytes-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            dropdownValue={store['index.interval.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='int-bytes'\n          fieldLabel='Segment interval bytes'\n          labelHead={t('createTopic.segementIntervalLabelHead')}\n          labelBody={t('createTopic.segementIntervalLabelBody')}\n          buttonAriaLabel='More info for segment interval bytes field'\n        >\n          <SizeTimeFormGroup\n            id='segment-index-size'\n            inputName='segment-index-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.index.bytes'])}\n            plusBtnProps={{ name: 'segment-index-bytes' }}\n            minusBtnProps={{ name: 'segment-index-bytes' }}\n            toggleId='segment-index-unit-dropdowntoggle'\n            name='segment-index-bytes-unit'\n            ariaLabel='select duration from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            dropdownValue={store['segment.index.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import {\n  TextContent,\n  Text,\n  Form,\n  TextVariants,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport const FlushSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='flush' tabIndex={-1}>\n          Flush\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.flushSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='interval-messages'\n          fieldLabel='Flush interval messages'\n          labelHead={t('createTopic.intervalMessagesLabelHead')}\n          labelBody={t('createTopic.intervalMessagesLabelBody')}\n          buttonAriaLabel='More info for flush interval messages field'\n        >\n          <SizeTimeFormGroup\n            inputName='flush-messages'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['flush.messages'])}\n            plusBtnProps={{ name: 'flush-messages' }}\n            minusBtnProps={{ name: 'flush-messages' }}\n            id='interval-messages-unit-dropdown'\n            toggleId='interval-messages-unit-dropdowntoggle'\n            name='flush-messages-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            dropdownValue={store['flush.messages.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='flush'\n          fieldLabel='Flush interval time'\n          labelHead={t('createTopic.intervalTimeLabelHead')}\n          labelBody={t('createTopic.intervalTimeLabelBody')}\n          buttonAriaLabel='More info for flush interval time field'\n        >\n          <SizeTimeFormGroup\n            inputName='flush-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['flush.ms'])}\n            plusBtnProps={{ name: 'flush-ms' }}\n            minusBtnProps={{ name: 'flush-ms' }}\n            id='interval-time-unit-dropdown'\n            toggleId='interval-time-unit-dropdowntoggle'\n            name='flush-ms-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            dropdownValue={store['flush.ms.unit']}\n            type='time'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  Checkbox,\n  Form,\n  TextContent,\n  TextVariants,\n  NumberInput,\n  Text,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nexport const CleanupSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name, value } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleCheckboxSelect = (checked: boolean, event) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(fieldName, checked);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='cleanup' tabIndex={-1}>\n          Cleanup\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.cleanupSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='delete-retention'\n          fieldLabel='Delete retention'\n          labelHead={t('createTopic.deleteRetentionLabelHead')}\n          labelBody={t('createTopic.deleteRetentionLabelBody')}\n          buttonAriaLabel='More info for delete retention field'\n        >\n          <SizeTimeFormGroup\n            inputName='delete.retention.ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['delete.retention.ms'])}\n            plusBtnProps={{ name: 'delete-retention-ms' }}\n            minusBtnProps={{ name: 'delete-retention-ms' }}\n            id='delete-retention-unit'\n            toggleId='delete-retention-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='delete-retention-ms-unit'\n            dropdownValue={store['delete.retention.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='dirty-ratio'\n          fieldLabel='Minimum cleanable dirty ratio'\n          labelHead={t('createTopic.minRatioLabelHead')}\n          labelBody={t('createTopic.minRatioLabelBody')}\n          buttonAriaLabel='More info for minimum cleanable ratio field'\n        >\n          <NumberInput\n            inputName='min.cleanable.dirty.ratio'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.cleanable.dirty.ratio'])}\n            plusBtnProps={{ name: 'min-cleanable-dirty-ratio' }}\n            minusBtnProps={{ name: 'min-cleanable-dirty-ratio' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='compaction'\n          fieldLabel='Minimum compaction lag time'\n          labelHead={t('createTopic.minLagLabelHead')}\n          labelBody={t('createTopic.minLagLabelBody')}\n          buttonAriaLabel='More info for minimum compaction log time field'\n        >\n          <SizeTimeFormGroup\n            inputName='min-compaction-lag-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.compaction.lag.ms'])}\n            plusBtnProps={{ name: 'min-compaction-lag-ms' }}\n            minusBtnProps={{ name: 'min-compaction-lag-ms' }}\n            id='min-lag-unit'\n            toggleId='min-lag-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='min-compaction-lag-ms-unit'\n            dropdownValue={store['min.compaction.lag.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='segment-time'\n          fieldLabel='Segment time'\n          labelHead={t('createTopic.segementTimeLabelHead')}\n          labelBody={t('createTopic.segementTimeLabelBody')}\n          buttonAriaLabel='More info for segment time field'\n        >\n          <SizeTimeFormGroup\n            inputName='segment-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.ms'])}\n            plusBtnProps={{ name: 'segment-ms' }}\n            minusBtnProps={{ name: 'segment-ms' }}\n            id='segment-time-unit'\n            toggleId='segment-time-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='segment-ms-unit'\n            dropdownValue={store['segment.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='jitter'\n          fieldLabel='Segment jitter time'\n          labelHead={t('createTopic.jitterTimeLabelHead')}\n          labelBody={t('createTopic.jitterTimeLabelBody')}\n          buttonAriaLabel='More info for segment jitter time field'\n        >\n          <SizeTimeFormGroup\n            inputName='segment-jitter-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.jitter.ms'])}\n            plusBtnProps={{ name: 'segment.jitter.ms' }}\n            minusBtnProps={{ name: 'segment.jitter.ms' }}\n            id='jitter-time-unit'\n            toggleId='jitter-time-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='segment-jitter-ms-unit'\n            dropdownValue={store['segment.jitter.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='delete'\n          fieldLabel='File delete delay'\n          labelHead={t('createTopic.deleteDelayLabelHead')}\n          labelBody={t('createTopic.deleteDelayLabelBody')}\n          buttonAriaLabel='More info for file delete delay field'\n        >\n          <SizeTimeFormGroup\n            inputName='file-delete-delay-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['file.delete.delay.ms'])}\n            plusBtnProps={{ name: 'file-delete-delay-ms' }}\n            minusBtnProps={{ name: 'file-delete-delay-ms' }}\n            id='delete-delay-unit'\n            toggleId='delete-delay-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='file-delete-delay-ms-unit'\n            dropdownValue={store['file.delete.delay.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='log-preallocation'\n          fieldLabel='Preallocate log segment files'\n          labelHead={t('createTopic.preallocateLabelHead')}\n          labelBody={t('createTopic.preallocateLabelBody')}\n          buttonAriaLabel='More info for preallocation field'\n        >\n          <Checkbox\n            isChecked={Boolean(store.preallocate)}\n            label='Allow preallocation of log segment files'\n            aria-label='log segment files pre allocation'\n            id='log-preallocation'\n            onChange={handleCheckboxSelect}\n            name='preallocate'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useEffect } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  JumpLinks,\n  JumpLinksItem,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nimport { MessageSection } from './MessageSection';\nimport { CoreConfiguration } from './CoreConfiguration';\nimport { LogSection } from './LogSection';\nimport { ReplicationSection } from './ReplicationSection';\nimport { IndexSection } from './IndexSection';\nimport { FlushSection } from './FlushSection';\nimport { CleanupSection } from './CleanupSection';\nimport { initialState, TopicContext } from '../../../../Contexts/Topic';\n\ninterface ITopicAdvanceConfig {\n  isCreate: boolean;\n  saveTopic: () => void;\n  handleCancel: () => void;\n}\n\nexport const TopicAdvanceConfig: React.FunctionComponent<ITopicAdvanceConfig> = ({\n  isCreate,\n  saveTopic,\n  handleCancel,\n}) => {\n  const { updateBulkStore } = React.useContext(TopicContext);\n\n  const actionText = isCreate === true ? 'Create Topic' : 'Save';\n\n  useEffect(() => {\n    updateBulkStore(initialState);\n  }, []);\n\n  const handleOnSave = () => {\n    saveTopic();\n    updateBulkStore(initialState);\n  };\n\n  const handleOnCancel = () => {\n    handleCancel();\n    updateBulkStore(initialState);\n  };\n\n  return (\n    <>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='#main-container'\n            style={{ position: 'sticky' }}\n            offset={-164} // for header\n            expandable={{ default: 'expandable', md: 'nonExpandable' }}\n            isExpanded={false}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n            {isCreate ? (\n              <></>\n            ) : (\n              <JumpLinksItem key={7} href='#delete'>\n                Delete\n              </JumpLinksItem>\n            )}\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <PageSection\n            className='kafka-ui--topics-advanced-config'\n            padding={{ default: 'noPadding' }}\n            hasOverflowScroll\n            id='topic-advance-config-scroll-container'\n          >\n            <Stack hasGutter className='kafka-ui--topic-advanced-config__stack'>\n              <StackItem>\n                <CoreConfiguration />\n              </StackItem>\n\n              <StackItem>\n                <MessageSection />\n              </StackItem>\n\n              <StackItem>\n                <LogSection />\n              </StackItem>\n\n              <StackItem>\n                <ReplicationSection />\n              </StackItem>\n\n              <StackItem>\n                <CleanupSection />\n              </StackItem>\n\n              <StackItem>\n                <IndexSection />\n              </StackItem>\n\n              <StackItem>\n                <FlushSection />\n              </StackItem>\n            </Stack>\n          </PageSection>\n          <ActionGroup className='kafka-ui--sticky-footer'>\n            <Button onClick={handleOnSave} variant='primary'>\n              {actionText}\n            </Button>\n            <Button onClick={handleOnCancel} variant='link'>\n              Cancel\n            </Button>\n          </ActionGroup>\n        </SidebarContent>\n      </Sidebar>\n    </>\n  );\n};\n","import { AdvancedTopic } from '../../../Contexts/Topic';\nimport { ConfigEntry, NewTopicInput } from '../../../OpenApi';\n\nconst capitalizeText = (text: string) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nexport const kebabToCamel = function (kebabCase: string): string {\n  const words: string[] = kebabCase.split('-');\n\n  const camelCased: string[] = words.map((word: string, index: number) => {\n    return index > 0 ? capitalizeText(word) : word;\n  });\n\n  return camelCased.join('');\n};\n\nexport const kebabToDotSeparated = (val: string): string => {\n  return val.replaceAll('-', '.');\n};\n\nconst unitsToBytes = {\n  bytes: 1,\n  kilobytes: 1000,\n  megabytes: 1000000,\n  gigabytes: 1000000000,\n  terabytes: 1000000000000,\n};\n\nconst unitsToMilliSecond = {\n  milliseconds: 1,\n  seconds: 1000,\n  days: 86400000,\n  months: 2592000000,\n  years: 31536000000,\n};\n\nexport const convertUnits = (topicData: AdvancedTopic): AdvancedTopic => {\n  const topic = { ...topicData };\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'ms') {\n      topic[key] = String(\n        Number(topic[key]) *\n          unitsToMilliSecond[topic[`${key}.unit`] || 'milliseconds']\n      );\n    }\n    if (key.split('.').pop() === 'bytes') {\n      topic[key] = String(\n        Number(topic[key]) * unitsToBytes[topic[`${key}.unit`] || 'bytes']\n      );\n    }\n  }\n\n  if (topic['flush.messages']) {\n    topic['flush.messages'] = String(\n      Number(topic['flush.messages']) *\n        unitsToMilliSecond[topic['flush.messages.unit'] || 'milliseconds']\n    );\n  }\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'unit') {\n      delete topic[key];\n    }\n  }\n\n  return topic;\n};\n\nexport const formatTopicRequest = (topic: AdvancedTopic): NewTopicInput => {\n  const { name, numPartitions, ...configEntries } = topic;\n\n  const config: ConfigEntry[] = [];\n\n  for (const key in configEntries) {\n    if (key) {\n      config.push({\n        key,\n        value: configEntries[key].toString(),\n      });\n    }\n  }\n\n  return {\n    name,\n    settings: {\n      numPartitions: Number(numPartitions),\n      config,\n    },\n  };\n};\n"],"sourceRoot":""}