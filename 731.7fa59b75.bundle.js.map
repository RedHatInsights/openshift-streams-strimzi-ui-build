{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/check-circle-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack://kafka-ui/./src/i18n/locale/index.ts","webpack://kafka-ui/./src/Panels/Topics/TopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Components/TextWithLabelPopover/TextWithLabelPopover.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerDataByTopics.ts","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupDetailByTopics.ts","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsByTopicsDrawer.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/SearchConsumerGroupsByTopics.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopic.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupData.ts","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/SearchConsumers.tsx","webpack://kafka-ui/./src/Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList.tsx","webpack://kafka-ui/./src/Components/ErrorBoundary/UnexpectedError.tsx","webpack://kafka-ui/./src/Components/ErrorBoundary/ErrorBoundary.tsx","webpack://kafka-ui/./src/i18n/index.ts","webpack://kafka-ui/./src/Bootstrap/bootstrap.tsx","webpack://kafka-ui/./src/Panels/Topics/DetailView.tsx","webpack://kafka-ui/./src/Panels/Topics/CreateView.tsx","webpack://kafka-ui/./src/Panels/Topics/UpdateView.tsx","webpack://kafka-ui/./src/Panels/ConsumerGroups/ConsumerGroupsView.tsx","webpack://kafka-ui/./src/Panels/ConsumerGroupsByTopic/ConsumerGroupsByTopic.tsx","webpack://kafka-ui/./src/Components/ServerAlertGroup/ServerAlertGroup.tsx","webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","resources","en","translation","de","Topics","history","TopicsList","onCreateTopic","push","TopicDetailHead","topicName","Breadcrumb","className","BreadcrumbItem","to","TextContent","Text","component","TextVariants","TextWithLabelPopover","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","unit","displayText","Number","style","fontWeight","display","Popover","headerContent","bodyContent","onClick","event","preventDefault","position","left","top","HelpIcon","noVerticalAlign","TopicDetailView","topic","deleteTopic","updateTopic","t","useTranslation","Grid","hasGutter","GridItem","span","JumpLinks","isVertical","label","scrollableSelector","JumpLinksItem","key","href","PageGroup","hasOverflowScroll","id","PageSection","tabIndex","numPartitions","replicationFactor","preallocate","Divider","Button","variant","ConsumerGroupDataByTopics","members","partitions","state","mockConsumerGroupDetailByTopics","partition","currentOffset","logendOffset","offsetLag","ConsumerGroupsByTopicDrawer","isExpanded","consumerGroupDetail","rows","map","consumergroup","title","DrawerPanelContent","widths","default","DrawerHead","DrawerActions","DrawerCloseButton","DrawerPanelBody","Flex","FlexItem","size","Table","TableVariant","cells","dataLabel","TableHeader","TableBody","SearchConsumerGroupsByTopics","setTableData","useState","searchText","setSearchText","InputGroup","SearchInput","type","placeholder","value","onChange","onClear","ButtonVariant","filter","row","toLowerCase","indexOf","ConsumerGroupByTopicList","page","setPage","perPage","setPerPage","offset","setOffset","setIsExpanded","setConsumerGroupDetail","tableData","onSetPage","_event","pageNumber","onPerPageSelect","panelContent","rowData","ConsumerGroupByTopic","Label","color","icon","Card","Title","headingLevel","Drawer","DrawerContent","Toolbar","ToolbarContent","ToolbarItem","Pagination","itemCount","length","widgetId","slice","EmptySearch","TopicDetailGroup","topicDetail","setTopicDetail","config","useContext","deleteModal","setDeleteModal","useEffect","response","fetchTopicDetail","Tabs","activeKey","onSelect","isBox","Tab","eventKey","TabTitleText","UpdateTopic","store","updateBulkStore","setTopic","addAlert","topicRes","saveToStore","advanceConfig","toString","forEach","configItem","mainBreadcrumbs","isActive","patchConfig","previousTopic","item","Object","keys","padding","PageSectionVariants","TopicAdvanceConfig","isCreate","saveTopic","newConfig","topicSettings","updateStatus","console","log","AlertVariant","data","err","consumerGroupData","SearchConsumers","search","setSearch","trim","filterSearch","consumersFiltered","includes","ConsumerGroupsList","consumer","UnexpectedError","updateState","EmptyState","EmptyStateVariant","EmptyStateIcon","ExclamationCircleIcon","TitleSizes","EmptyStateBody","hasError","setState","getDerivedStateFromError","error","componentDidCatch","errorInfo","render","this","props","children","initReactI18next","use","init","detection","order","caches","fallbackLng","debug","interpolation","escapeValue","basePath","getToken","ErrorBoundary","Switch","Route","path","exact","useHistory","CreateTopicWizard","setIsCreateTopic","goBack","document","getElementById","ServerAlertGroup","alerts","onCloseAlert","AlertGroup","isToast","message","Alert","isLiveRegion","variantLabel","actionClose","AlertActionCloseButton","onClose","AlertContext","createContext","AlertProvider","setAlerts","timers","setTimers","timersKeys","timer","timeOuts","alert","timeOut","setTimeout","hideAlert","clearTimeout","el","Provider","Date","getTime","initialState","TopicContext","TopicContextProvider","setStore","updateStore","getTopics","accessToken","getTopicsList","getTopicDetail","getTopic","convertTopicResponse","topicObj","p","replicas","reduce","previousValue","currentValue","updateTopicModel","status"],"mappings":"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","file":"731.7fa59b75.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CheckCircleIconConfig = {\n  name: 'CheckCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CheckCircleIcon = require('../createIcon').createIcon(exports.CheckCircleIconConfig);\nexports[\"default\"] = exports.CheckCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","import en from './en.json';\nimport de from './de.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n","import React, { FunctionComponent } from 'react';\nimport { useHistory } from 'react-router';\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { TopicsListComponent } from '../../Modules/Topics/TopicList/Components/TopicsList';\n\nconst Topics: FunctionComponent = () => {\n  const history = useHistory();\n\n  const onCreateTopic = () => {\n    history.push('/topics/create');\n  };\n\n  return <TopicsListComponent onCreateTopic={onCreateTopic} />;\n};\n\nexport { Topics };\n\nexport default Topics;\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n}) => {\n  return (\n    <>\n      <Breadcrumb className='breadcrumb-padding'>\n        <BreadcrumbItem to='#/topics'>Topics</BreadcrumbItem>\n        <BreadcrumbItem to={`#/topic/${topicName}`}>{topicName}</BreadcrumbItem>\n      </Breadcrumb>\n      <TextContent className='header-padding'>\n        <Text component={TextVariants.h1}>{topicName}</Text>\n      </TextContent>\n    </>\n  );\n};\n","import { Popover, TextContent, Text } from '@patternfly/react-core';\nimport React from 'react';\nimport { HelpIcon } from '@patternfly/react-icons';\nimport bytes from 'bytes';\nimport humanizeDuration from 'humanize-duration';\n\nimport './TextWithLabelPopover.css';\n\nexport interface TextWithLabelPopoverProps {\n  /** Field label */\n  fieldLabel: string;\n  /** Field value */\n  fieldValue?: string;\n  /** Header text for popover label */\n  popoverHeader: string;\n  /** Body text for popover label */\n  popoverBody: string;\n  /** Aria label for popover button */\n  btnAriaLabel: string;\n  /** Unit (if exists) for the field */\n  unit?: string;\n}\n\nexport const TextWithLabelPopover: React.FC<TextWithLabelPopoverProps> = ({\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  unit,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  let displayText = '-';\n\n  if (fieldValue) {\n    if (unit) {\n      if (unit === 'ms') {\n        displayText = humanizeDuration(Number(fieldValue));\n      }\n      if (unit === 'bytes') {\n        displayText = bytes(Number(fieldValue));\n      }\n    } else {\n      displayText = fieldValue;\n    }\n  }\n\n  return (\n    <TextContent className='text-content-padding'>\n      <Text style={{ fontWeight: 700, display: 'inline' }}>{fieldLabel}</Text>\n      <Popover\n        headerContent={<div>{popoverHeader}</div>}\n        bodyContent={<div>{popoverBody}</div>}\n      >\n        <button\n          aria-label={btnAriaLabel}\n          onClick={preventButtonSubmit}\n          className='pf-c-form__group-label-help'\n          style={{ position: 'relative', left: '5px', top: '2px' }}\n        >\n          <HelpIcon noVerticalAlign />\n        </button>\n      </Popover>\n      <Text>{displayText}</Text>\n    </TextContent>\n  );\n};\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  // TODO: Add delete modal back to this view.\n  // const [deleteModal, setDeleteModal] = useState(false);\n  // const onDelete = () => {\n  //   setDeleteModal(true);\n  // };\n  return (\n    <Grid hasGutter>\n      <GridItem span={2} className='grid-item-padding'>\n        <JumpLinks\n          isVertical\n          label='JUMP TO SECTION'\n          scrollableSelector='#topic-detail-view'\n          style={{ position: 'absolute' }}\n        >\n          <JumpLinksItem key={0} href='#core-configuration'>\n            Core configuration\n          </JumpLinksItem>\n          <JumpLinksItem key={1} href='#messages'>\n            Messages\n          </JumpLinksItem>\n          <JumpLinksItem key={2} href='#log'>\n            Log\n          </JumpLinksItem>\n          <JumpLinksItem key={3} href='#replication'>\n            Replication\n          </JumpLinksItem>\n          <JumpLinksItem key={4} href='#cleanup'>\n            Cleanup\n          </JumpLinksItem>\n          <JumpLinksItem key={5} href='#index'>\n            Index\n          </JumpLinksItem>\n          <JumpLinksItem key={6} href='#flush'>\n            Flush\n          </JumpLinksItem>\n          <JumpLinksItem key={7} href='#delete'>\n            Delete\n          </JumpLinksItem>\n        </JumpLinks>\n      </GridItem>\n      <GridItem span={8} className='grid-item-padding'>\n        <PageGroup hasOverflowScroll id='topic-detail-view'>\n          <PageSection>\n            <TextContent>\n              <Text\n                component={TextVariants.h2}\n                tabIndex={-1}\n                id='core-configuration'\n              >\n                Core configuration\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.coreConfigInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail name'\n              fieldLabel='Name'\n              fieldValue={topic.name}\n              popoverBody={t('createTopic.topicNameLabelBody')}\n              popoverHeader={t('createTopic.topicNameLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail partition'\n              fieldLabel='Partitions'\n              fieldValue={topic.numPartitions}\n              popoverBody={t('createTopic.partitionsLabelBody')}\n              popoverHeader={t('createTopic.partitionsLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail replicas'\n              fieldLabel='Replicas'\n              fieldValue={topic.replicationFactor}\n              popoverBody={t('createTopic.replicasLabelBody')}\n              popoverHeader={t('createTopic.replicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min-in-sync replica'\n              fieldLabel='Minimum in-sync replicas'\n              fieldValue={topic['min.insync.replicas']}\n              popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n              popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention time'\n              fieldLabel='Retention Time'\n              fieldValue={topic['retention.ms']}\n              popoverBody={t('createTopic.retentionTimeLabelBody')}\n              popoverHeader={t('createTopic.retentionTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n                Messages\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.messageSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail max message bytes'\n              fieldLabel='Maximum message bytes'\n              fieldValue={topic['max.message.bytes.message.bytes']}\n              popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n              popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp type'\n              fieldLabel='Message timestamp type'\n              fieldValue={topic['message.timestamp.type']}\n              popoverBody={t('createTopic.messageTimestampLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail message timestamp difference'\n              fieldLabel='Maximum message timestamp difference'\n              fieldValue={topic['message.timestamp.difference.max.ms']}\n              popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n              popoverHeader={t('createTopic.messageTimestampDiffLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail compression type'\n              fieldLabel='Compression type'\n              fieldValue={topic['compression.type']}\n              popoverBody={t('createTopic.compressionTypeLabelBody')}\n              popoverHeader={t('createTopic.compressionTypeLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                Log\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.logSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail cleanup policy'\n              fieldLabel='Cleanup policy'\n              fieldValue={topic['log.cleanup.policy']}\n              popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n              popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail retention bytes'\n              fieldLabel='Retention bytes'\n              fieldValue={topic['log.retention.bytes']}\n              popoverBody={t('createTopic.retentionBytesLabelBody')}\n              popoverHeader={t('createTopic.retentionBytesLabelHead')}\n              unit={'bytes'}\n            />\n\n            {/* TODO: Clarify the field from wireframes */}\n            {/* <TextWithLabelPopover\n                  btnAriaLabel='topic detail log segment types'\n                  fieldLabel='Log segment types'\n\n                  fieldValue={topic.}\n                  popoverBody={t('createTopic.compressionTypeLabelBody')}\n                  popoverHeader={t('createTopic.compressionTypeLabelHead')}\n                /> */}\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='replication'>\n                Replication\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.replicationSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail unclean leader election'\n              fieldLabel='Unclean leader election'\n              fieldValue={topic['unclean.leader.election.enable']}\n              popoverBody={t('createTopic.leaderElectionLabelBody')}\n              popoverHeader={t('createTopic.leaderElectionLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail throttled follower replicas'\n              fieldLabel='Follower replication throttled replicas'\n              fieldValue={topic['follower.replication.throttled.replicas']}\n              popoverBody={t('createTopic.followerReplicaLabelBody')}\n              popoverHeader={t('createTopic.followerReplicaLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail throttled leader replicas'\n              fieldLabel='Leader replication throttled replicas'\n              fieldValue={topic['leader.replication.throttled.replicas']}\n              popoverBody={t('createTopic.leaderReplicaLabelBody')}\n              popoverHeader={t('createTopic.leaderReplicaLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n                Cleanup\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.cleanupSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min cleanable dirty ratio'\n              fieldLabel='Minimum cleanable dirty ratio'\n              fieldValue={topic['min.cleanable.dirty.ratio']}\n              popoverBody={t('createTopic.minRatioLabelBody')}\n              popoverHeader={t('createTopic.minRatioLabelHead')}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='topic detail min compaction lag time'\n              fieldLabel='Minimum compaction lag time'\n              fieldValue={topic['min.compaction.lag.ms']}\n              popoverBody={t('createTopic.minLagLabelBody')}\n              popoverHeader={t('createTopic.minLagLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment time'\n              fieldLabel='Segment time'\n              fieldValue={topic['segment.ms']}\n              popoverBody={t('createTopic.segementTimeLabelBody')}\n              popoverHeader={t('createTopic.segementTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment jitter time'\n              fieldLabel='Segment jitter time'\n              fieldValue={topic['segment.jitter.ms']}\n              popoverBody={t('createTopic.jitterTimeLabelBody')}\n              popoverHeader={t('createTopic.jitterTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='file delete delay'\n              fieldLabel='File delete delay'\n              fieldValue={topic['file.delete.delay.ms']}\n              popoverBody={t('createTopic.deleteDelayLabelBody')}\n              popoverHeader={t('createTopic.deleteDelayLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='preallocation log segment files'\n              fieldLabel='Preallocation log segment files'\n              fieldValue={topic.preallocate}\n              popoverBody={t('createTopic.preallocateLabelBody')}\n              popoverHeader={t('createTopic.preallocateLabelHead')}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                Index\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.indexSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='index interval size'\n              fieldLabel='Index interval size'\n              fieldValue={topic['index.interval.bytes']}\n              popoverBody={t('createTopic.indexIntervalLabelBody')}\n              popoverHeader={t('createTopic.indexIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='segment index size'\n              fieldLabel='Segment index size'\n              fieldValue={topic['segment.index.bytes']}\n              popoverBody={t('createTopic.segementIntervalLabelBody')}\n              popoverHeader={t('createTopic.segementIntervalLabelHead')}\n              unit={'bytes'}\n            />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                Flush\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.flushSectionInfo')}\n              </Text>\n            </TextContent>\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval messages'\n              fieldLabel='Flush interval messages'\n              fieldValue={topic['flush.messages']}\n              popoverBody={t('createTopic.intervalMessagesLabelBody')}\n              popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n              unit={'ms'}\n            />\n\n            <TextWithLabelPopover\n              btnAriaLabel='flush interval time'\n              fieldLabel='Flush interval time'\n              fieldValue={topic['flush.ms']}\n              popoverBody={t('createTopic.intervalTimeLabelBody')}\n              popoverHeader={t('createTopic.intervalTimeLabelHead')}\n              unit={'ms'}\n            />\n\n            <Divider />\n\n            <TextContent className='section-margin'>\n              <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                Delete topic (irreversible)\n              </Text>\n              <Text component={TextVariants.p} className='section-info'>\n                {t('createTopic.deleteTopicInfo')}\n              </Text>\n            </TextContent>\n\n            <Button\n              variant='danger'\n              className='section-margin'\n              onClick={deleteTopic}\n            >\n              Delete topic\n            </Button>\n          </PageSection>\n        </PageGroup>\n      </GridItem>\n      <GridItem span={2} className='grid-item-padding'>\n        <Button variant='primary' onClick={updateTopic}>\n          Edit properties\n        </Button>\n      </GridItem>\n    </Grid>\n  );\n};\n","export const ConsumerGroupDataByTopics = [\n  {\n    id: 'Custom_0',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_1',\n    members: 1,\n    partitions: 1,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_2',\n    members: 0,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_3',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_4',\n    members: 1,\n    partitions: 0,\n    state: 'Stable',\n  },\n];\n","export const mockConsumerGroupDetailByTopics = [\n  {\n    partition: 0,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 2,\n    logendOffset: 0,\n    offsetLag: 1,\n  },\n  {\n    partition: 1,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 0,\n    logendOffset: 0,\n    offsetLag: 0,\n  },\n  {\n    partition: 2,\n    id: 'consumer-1 consumer-1-02207915-3ab4-43cb547-4567c6fe87e1',\n    currentOffset: 0,\n    logendOffset: 0,\n    offsetLag: 0,\n  },\n];\n","import React from 'react';\nimport {\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  Flex,\n  FlexItem,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { mockConsumerGroupDetailByTopics } from './ConsumerGroupDetailByTopics';\nimport { IConsumerGroupByTopic } from './SearchConsumerGroupsByTopics.patternfly';\n\nexport interface ISearchTopicsConsumerListProps {\n  isExpanded: (value: boolean) => void;\n  consumerGroupDetail: IConsumerGroupByTopic | undefined;\n}\n\nexport const ConsumerGroupsByTopicDrawer: React.FunctionComponent<ISearchTopicsConsumerListProps> = ({\n  isExpanded,\n  consumerGroupDetail,\n}) => {\n  const columns = [\n    'Partition',\n    'Client ID + Customer ID',\n    'Current offset',\n    'Log end offset',\n    'Offset lag',\n    {\n      title: '',\n      dataLabel: 'Action',\n    },\n  ];\n\n  const rows = mockConsumerGroupDetailByTopics.map((consumergroup) => [\n    consumergroup.partition,\n    consumergroup.id,\n    consumergroup.currentOffset,\n    consumergroup.logendOffset,\n    consumergroup.offsetLag,\n    { title: <a href='#'>Reset offset</a> },\n  ]);\n\n  const onCloseClick = () => {\n    isExpanded(false);\n  };\n\n  return (\n    <DrawerPanelContent widths={{ default: 'width_50' }}>\n      <DrawerHead>\n        <span>\n          <TextContent>\n            <Text>Consumer group ID</Text>\n            <Text component={TextVariants.h1}>\n              {consumerGroupDetail && consumerGroupDetail.id}\n            </Text>\n          </TextContent>\n        </span>\n        <DrawerActions>\n          <DrawerCloseButton onClick={onCloseClick} />\n        </DrawerActions>\n      </DrawerHead>\n      <DrawerPanelBody>\n        <TextContent>\n          <Flex>\n            <FlexItem>\n              <Text component={TextVariants.h4} size={50}>\n                Active members\n              </Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.members}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>Unconsumed partitions</Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.partitions}\n              </Text>\n            </FlexItem>\n            <FlexItem>\n              <Text component={TextVariants.h4}>State</Text>\n              <Text component={TextVariants.h2}>\n                {consumerGroupDetail && consumerGroupDetail.state}\n              </Text>\n            </FlexItem>\n          </Flex>\n        </TextContent>\n      </DrawerPanelBody>\n\n      <Table\n        aria-label='Compact Table'\n        variant={TableVariant.compact}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </DrawerPanelContent>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  InputGroup,\n  SearchInput,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\nimport { ConsumerGroupDataByTopics } from './ConsumerDataByTopics';\n\nexport interface IConsumerGroupByTopic {\n  id: string;\n  members: number;\n  partitions: number;\n  state: string;\n}\nexport interface ISearchConsumerGroupsByTopicsProps {\n  setTableData: (value: IConsumerGroupByTopic[]) => void;\n}\nexport const SearchConsumerGroupsByTopics: React.FunctionComponent<ISearchConsumerGroupsByTopicsProps> = ({\n  setTableData,\n}) => {\n  const [searchText, setSearchText] = useState('');\n\n  const onChangeInput = (value: string) => {\n    setSearchText(value);\n  };\n\n  const onConfirm = () => {\n    setTableData(\n      ConsumerGroupDataByTopics.filter(\n        (row) => row.id.toLowerCase().indexOf(searchText.toLowerCase()) > -1\n      )\n    );\n  };\n  const onClear = () => {\n    setSearchText('');\n    setTableData(ConsumerGroupDataByTopics);\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='searchText-consumer-groups-by-topic-input'\n        type='searchText'\n        aria-label='searchText input'\n        placeholder='Search'\n        value={searchText}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n      <Button\n        variant={ButtonVariant.control}\n        aria-label='searchText button for searchText input'\n        onClick={onConfirm}\n        id='searchText-consumer-groups-by-topic-button'\n      >\n        <SearchIcon />\n      </Button>\n    </InputGroup>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Label,\n  Card,\n  Divider,\n  Pagination,\n  Toolbar,\n  Button,\n  ToolbarContent,\n  Drawer,\n  DrawerContent,\n  ToolbarItem,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { ConsumerGroupDataByTopics } from './ConsumerDataByTopics';\nimport { ConsumerGroupsByTopicDrawer } from './ConsumerGroupsByTopicsDrawer.patternfly';\nimport {\n  SearchConsumerGroupsByTopics,\n  IConsumerGroupByTopic,\n} from './SearchConsumerGroupsByTopics.patternfly';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { EmptySearch } from '../../../TopicList/Components/EmptySearch';\n\nexport const ConsumerGroupByTopicList: React.FunctionComponent = () => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState(0);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [\n    consumerGroupDetail,\n    setConsumerGroupDetail,\n  ] = useState<IConsumerGroupByTopic>();\n  const [tableData, setTableData] = useState(ConsumerGroupDataByTopics);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const onClickConsumerGroup = (\n    id: string,\n    members: number,\n    partitions: number,\n    state: string\n  ) => {\n    const consumerDetail = { id, members, partitions, state };\n    setConsumerGroupDetail(consumerDetail);\n    setIsExpanded(true);\n  };\n  const panelContent = (\n    <ConsumerGroupsByTopicDrawer\n      consumerGroupDetail={consumerGroupDetail}\n      isExpanded={setIsExpanded}\n    />\n  );\n\n  const tableColumns = [\n    { title: 'Consumer group ID' },\n    { title: 'Active members for this topic' },\n    { title: 'Unconsumed partitions for this topic' },\n    { title: 'State' },\n  ];\n  const rowData = tableData.map((ConsumerGroupByTopic) => [\n    {\n      title: (\n        <Button\n          variant='link'\n          onClick={() =>\n            onClickConsumerGroup(\n              ConsumerGroupByTopic.id,\n              ConsumerGroupByTopic.members,\n              ConsumerGroupByTopic.partitions,\n              ConsumerGroupByTopic.state\n            )\n          }\n        >\n          {ConsumerGroupByTopic.id}\n        </Button>\n      ),\n    },\n    ConsumerGroupByTopic?.members,\n    ConsumerGroupByTopic?.partitions,\n    {\n      title: (\n        <Label\n          color={ConsumerGroupByTopic.state === 'Stable' ? 'green' : 'red'}\n          icon={\n            ConsumerGroupByTopic.state === 'Stable' ? (\n              <CheckCircleIcon />\n            ) : (\n              <ExclamationCircleIcon />\n            )\n          }\n        >\n          {ConsumerGroupByTopic.state}\n        </Label>\n      ),\n    },\n  ]);\n\n  return (\n    <>\n      <Card>\n        <Title headingLevel='h4'> </Title>\n        <Drawer isExpanded={isExpanded}>\n          <DrawerContent panelContent={panelContent}>\n            <Toolbar>\n              <ToolbarContent>\n                <ToolbarItem>\n                  <SearchConsumerGroupsByTopics setTableData={setTableData} />\n                </ToolbarItem>\n\n                <ToolbarItem variant='pagination'>\n                  <Pagination\n                    itemCount={rowData.length}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    widgetId='pagination-options-menu-top'\n                    onPerPageSelect={onPerPageSelect}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n            <Divider />\n\n            <Table\n              aria-label='Compact Table'\n              variant={TableVariant.compact}\n              cells={tableColumns}\n              rows={\n                page != 1\n                  ? rowData.slice(offset, offset + perPage)\n                  : rowData.slice(0, perPage)\n              }\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n\n            {rowData.length > 0 ? (\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='pagination-options-menu-top'\n                onPerPageSelect={onPerPageSelect}\n                offset={0}\n              />\n            ) : (\n              <EmptySearch />\n            )}\n          </DrawerContent>\n        </Drawer>\n      </Card>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic } from '../../../Contexts/Topic';\nimport { Tab, Tabs, TabTitleText } from '@patternfly/react-core';\nimport { useHistory, useParams } from 'react-router';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupByTopicList } from './Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\n\nexport type TopicDetailRouteParams = {\n  topicName: string;\n};\n\n// TODO: Remove this mock, fetch it from server.\nconst topic: AdvancedTopic = {\n  name: 'SampleTopic2345',\n  numPartitions: '52',\n  replicationFactor: '35',\n  'min.insync.replicas': '78',\n  'retention.ms': '78',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '50',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '4',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': 'Producer',\n  'log.cleanup.policy': 'Delete',\n  'log.retention.bytes': '-1',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '78',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': 'false',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '789',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '4',\n  'min.compaction.lag.ms': '58',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '6048000',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '0',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '6000',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: 'true',\n  'index.interval.bytes': '4096',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '10847560',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '783945',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '3894949',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicDetailGroup: React.FC = () => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(topic);\n  const { topicName } = useParams<TopicDetailRouteParams>();\n  const history = useHistory();\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const fetchTopicDetail = async (topicName: string) => {\n    const response = await getTopicDetail(topicName, config);\n    setTopicDetail(response);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const updateTopic = () => {\n    history.push(`/topics/update/${topicName}`);\n  };\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n\n  return (\n    <>\n      <TopicDetailHead topicName={topicName} />\n      <Tabs\n        activeKey={1}\n        onSelect={() => {\n          return;\n        }}\n        isBox={false}\n        className='tab-padding'\n      >\n        <Tab eventKey={0} title={<TabTitleText>Consumer Groups</TabTitleText>}>\n          <ConsumerGroupByTopicList />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Properties</TabTitleText>}>\n          <TopicDetailView\n            topic={topicDetail}\n            deleteTopic={deleteTopic}\n            updateTopic={updateTopic}\n          />\n        </Tab>\n      </Tabs>\n      {deleteModal && (\n        <DeleteTopics\n          topicName={topicName}\n          deleteModal={deleteModal}\n          setDeleteModal={setDeleteModal}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  AlertVariant,\n  Breadcrumb,\n  BreadcrumbItem,\n  Divider,\n  PageSection,\n  PageSectionVariants,\n  Title,\n} from '@patternfly/react-core';\nimport '../../CreateTopic/Components/CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from '../../CreateTopic/Components/TopicAdvanceConfig';\nimport { useParams } from 'react-router';\nimport { getTopic, updateTopicModel } from '../../../../Services/index';\nimport { Topic, TopicSettings } from '../../../../OpenApi/api';\nimport { AdvancedTopic, TopicContext } from '../../../../Contexts/Topic';\nimport { ConfigContext } from '../../../../Contexts';\nimport { DeleteTopics } from '../../../../Modules/Topics/TopicList/Components/DeleteTopicsModal';\nimport { AlertContext } from '../../../../Contexts/Alert';\n\nexport const UpdateTopic: React.FC = () => {\n  const { store, updateBulkStore } = React.useContext(TopicContext);\n  const { name } = useParams<any>();\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [topic, setTopic] = useState<Topic>();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n\n  const fetchTopic = async (topicName) => {\n    const topicRes = await getTopic(topicName, config);\n    setTopic(topicRes);\n    if (topicRes) saveToStore(topicRes);\n  };\n\n  useEffect(() => {\n    fetchTopic(name);\n  }, []);\n\n  const saveToStore = (topic: Topic) => {\n    const advanceConfig: AdvancedTopic = store;\n    advanceConfig.numPartitions = topic?.partitions?.length.toString() || '0';\n    advanceConfig.name = topic.name || '';\n    topic.config?.forEach((configItem) => {\n      advanceConfig[configItem.key || ''] = configItem.value || '';\n    });\n    updateBulkStore(advanceConfig);\n  };\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='/#/topics'>Topics</BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {name}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n\n  const patchConfig = (previousTopic: Topic) => {\n    const updatedConfig = previousTopic.config?.length\n      ? previousTopic.config.filter((item) => {\n          if (item.key && store[item.key] != item.value)\n            return { key: item.key, value: store[item.key] };\n        })\n      : Object.keys(store).map((key) => {\n          return { key: key, value: store[key] };\n        });\n    return updatedConfig;\n  };\n\n  const saveTopic = async () => {\n    const newConfig = topic && (await patchConfig(topic));\n\n    const topicSettings: TopicSettings = {\n      numPartitions: Number(store.numPartitions),\n      replicationFactor: Number(store.replicationFactor),\n      config: newConfig,\n    };\n\n    //Todo: handle alert based on update response\n    try {\n      const updateStatus = await updateTopicModel(\n        store.name,\n        topicSettings,\n        config\n      );\n      console.log('updateResponse', updateStatus);\n\n      if (updateStatus === 204){\n        addAlert(\n          'The topic was successfully updated in the Kafka instance',\n          AlertVariant.success\n        );\n      }\n    } catch (err) {\n      addAlert(\n        err.response.data.err,\n        AlertVariant.danger\n      );\n    }\n  };\n\n  return (\n    <>\n      <section\n        className='pf-c-page__main-breadcrumb'\n        style={{ padding: '20px 20px' }}\n      >\n        {mainBreadcrumbs}\n        <br />\n        <br />\n        <Title headingLevel='h1' size='xl'>\n          {name}\n        </Title>\n      </section>\n      <Divider />\n      <>\n        <Divider />\n        <PageSection variant={PageSectionVariants.light}>\n          <TopicAdvanceConfig\n            isCreate={false}\n            saveTopic={saveTopic}\n            deleteTopic={deleteTopic}\n          />\n        </PageSection>\n        {deleteModal && (\n          <DeleteTopics\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n            topicName={name}\n          />\n        )}\n      </>\n    </>\n  );\n};\n","export const consumerGroupData = [\n  {\n    id: 'Custom_0',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_1',\n    members: 1,\n    partitions: 1,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_2',\n    members: 0,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_3',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_4',\n    members: 1,\n    partitions: 0,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_5',\n    members: 0,\n    partitions: 0,\n    state: 'Empty',\n  },\n  {\n    id: 'Custom_6',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_7',\n    members: 2,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_8',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_9',\n    members: 1,\n    partitions: 2,\n    state: 'Stable',\n  },\n  {\n    id: 'Custom_10',\n    members: 2,\n    partitions: 1,\n    state: 'Stable',\n  },\n];\n","import React, { useState, useEffect } from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\nimport { consumerGroupData } from './ConsumerGroupData';\n\nexport interface IConsumerGroupData {\n  id: string;\n  members: number;\n  partitions: number;\n  state: number;\n}\n\nexport interface ISearchConsumerGroupProps {\n  setTableData: (IConsumerGroupData) => void;\n}\n\nconst SearchConsumers: React.FunctionComponent<ISearchConsumerGroupProps> = ({\n  setTableData,\n}) => {\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    if (search && search.trim() != '') {\n      const filterSearch = consumerGroupData.filter((consumersFiltered) =>\n        consumersFiltered?.id.includes(search)\n      );\n      setTableData(filterSearch);\n      console.log(filterSearch);\n    } else {\n      setTableData(consumerGroupData);\n    }\n  }, [search]);\n\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n    setTableData(\n      consumerGroupData.filter(\n        (row) => row.id.toLowerCase().indexOf(search.toLowerCase()) > -1\n      )\n    );\n  };\n  const onClear = () => {\n    setSearch('');\n    setTableData(consumerGroupData);\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-consumers-input'\n        type='search'\n        aria-label='search input '\n        placeholder='Search'\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClear}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchConsumers };\n","import React, { useState } from 'react';\nimport {\n  Card,\n  Divider,\n  Label,\n  Pagination,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { SearchConsumers } from './SearchConsumers';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport { CheckCircleIcon } from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport { consumerGroupData } from './ConsumerGroupData';\nimport { EmptySearch } from '../../../Topics/TopicList/Components/EmptySearch';\nexport const ConsumerGroupsList: React.FunctionComponent = () => {\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState(0);\n  const [tableData, setTableData] = useState(consumerGroupData);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const tableColumns = [\n    { title: 'Consumer Group ID' },\n    { title: 'Active Members' },\n    { title: 'Unconsumed Partitions' },\n    { title: 'State' },\n  ];\n\n  //const rowData = model.consumersList.items.map((consumer) => [\n  const rowData = tableData.map((consumer) => [\n    consumer.id,\n    consumer.members,\n    consumer.partitions,\n    {\n      title: (\n        <Label\n          color={consumer.state === 'Stable' ? 'green' : 'red'}\n          icon={\n            consumer.state === 'Stable' ? (\n              <CheckCircleIcon />\n            ) : (\n              <ExclamationCircleIcon />\n            )\n          }\n        >\n          {consumer.state}\n        </Label>\n      ),\n    },\n  ]);\n\n  return (\n    <>\n      <Card>\n        <Toolbar>\n          <ToolbarContent>\n            <ToolbarItem>\n              <SearchConsumers setTableData={setTableData} />\n            </ToolbarItem>\n            <ToolbarItem variant='pagination'>\n              <Pagination\n                itemCount={rowData.length}\n                perPage={perPage}\n                page={page}\n                onSetPage={onSetPage}\n                widgetId='consumer-group-pagination-top'\n                onPerPageSelect={onPerPageSelect}\n              />\n            </ToolbarItem>\n          </ToolbarContent>\n        </Toolbar>\n        <Divider />\n        <Table\n          aria-label='Compact Table'\n          variant={TableVariant.compact}\n          cells={tableColumns}\n          rows={\n            page != 1\n              ? rowData.slice(offset, offset + perPage)\n              : rowData.slice(0, perPage)\n          }\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n        {rowData.length < 1 ? (\n          <EmptySearch />\n        ) : (\n          <Pagination\n            itemCount={rowData.length}\n            perPage={perPage}\n            page={page}\n            onSetPage={onSetPage}\n            widgetId='consumer-group-pagination-bottom'\n            onPerPageSelect={onPerPageSelect}\n            offset={0}\n          />\n        )}\n      </Card>\n      <Divider />\n    </>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport {\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  PageSection,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\ntype IUnexpectedErrorProps = {\n  updateState: (hasError: boolean) => void;\n};\n\nexport const UnexpectedError: React.FC<IUnexpectedErrorProps> = ({\n  updateState,\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n\n  const navigateToHome = () => {\n    updateState(false);\n    history.push('/');\n  };\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <EmptyState variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={ExclamationCircleIcon} />\n        <Title headingLevel='h1' size={TitleSizes.lg}>\n          {t('common.errorBoundaryTitle')}\n        </Title>\n        <EmptyStateBody>{t('common.unexpectedError')}</EmptyStateBody>\n        <Button variant={ButtonVariant.primary} onClick={navigateToHome}>\n          {t('common.returnToHome')}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React, { ErrorInfo } from 'react';\nimport { UnexpectedError } from './UnexpectedError';\n\ntype IErrorBoundaryProps = {\n  children: React.ReactNode;\n};\n\ntype IErrorBoundary = {\n  hasError: boolean;\n};\n\nexport class ErrorBoundary extends React.Component<\n  IErrorBoundaryProps,\n  IErrorBoundary\n> {\n  state: IErrorBoundary = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error: Error): IErrorBoundary {\n    console.error(error);\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    console.error('error:', error, errorInfo);\n  }\n\n  updateState = (hasError: boolean): void => {\n    this.setState({ hasError });\n  };\n\n  render(): React.ReactNode {\n    if (this.state.hasError) {\n      return <UnexpectedError updateState={this.updateState} />;\n    }\n    return this.props.children;\n  }\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst init = (): void => {\n  i18n\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      detection: {\n        order: ['htmlTag', 'navigator'],\n        caches: [],\n      },\n      fallbackLng: 'en',\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      resources,\n    });\n};\n\nexport { init };\n","import { init } from '../i18n';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { ConfigContext } from '../Contexts';\nimport { Topics } from '../Panels/Topics';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport CreateTopic from '../Panels/Topics/CreateView';\nimport TopicDetail from '../Panels/Topics/DetailView';\nimport UpdateTopicView from '../Panels/Topics/UpdateView';\nimport { TopicContextProvider } from '../Contexts/Topic';\nimport { ConsumerGroupsView } from '../Panels/ConsumerGroups/ConsumerGroupsView';\nimport { ConsumerGroupsTopicsView } from '../Panels/ConsumerGroupsByTopic/ConsumerGroupsByTopic';\nimport { ErrorBoundary } from '../Components/ErrorBoundary/ErrorBoundary';\nimport { AlertProvider } from '../Contexts/Alert/Context';\n\ninit(); //Bootstrap i18next support\nReactDOM.render(\n  <ConfigContext.Provider\n    value={{\n      basePath: 'http://localhost:8000/api/managed-services-strimzi-ui/v1/api',\n      getToken: async () => '',\n    }}\n  >\n    <TopicContextProvider>\n      <Router>\n        <AlertProvider>\n          <ErrorBoundary>\n            <Switch>\n              <Route path='/' component={Topics} exact />\n              <Route path='/topics' component={Topics} exact />\n              <Route path='/topic/:topicName' component={TopicDetail} exact />\n              <Route path='/topics/create' component={CreateTopic} exact />\n              <Route\n                path='/topics/update/:name'\n                component={UpdateTopicView}\n                exact\n              />\n              <Route\n                path='/consumerGroups'\n                component={ConsumerGroupsView}\n                exact\n              />\n              <Route\n                path='/topics/consumerGroups/:topicName'\n                component={ConsumerGroupsTopicsView}\n                exact\n              />\n            </Switch>\n          </ErrorBoundary>\n        </AlertProvider>\n      </Router>\n    </TopicContextProvider>\n  </ConfigContext.Provider>,\n  document.getElementById('root')\n);\n","import React, { FunctionComponent } from 'react';\nimport { TopicDetailGroup } from '../../Modules/Topics/TopicDetails/TopicDetailPage';\n\nconst TopicDetail: FunctionComponent = () => {\n  return <TopicDetailGroup />;\n};\n\nexport { TopicDetail };\n\nexport default TopicDetail;\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { CreateTopicWizard } from '../../Modules/Topics/CreateTopic/Components/CreateTopicWizard';\nimport { useHistory } from 'react-router-dom';\n\nconst CreateTopic: FunctionComponent = () => {\n  const history = useHistory();\n\n  return (\n    <CreateTopicWizard\n      setIsCreateTopic={(value) => {\n        if (!value) {\n          history.goBack();\n        }\n      }}\n    />\n  );\n};\n\nexport { CreateTopic };\n\nexport default CreateTopic;\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { UpdateTopic } from '../../Modules/Topics/UpdateTopic/Components/UpdateTopic';\n\nconst UpdateTopicView: FunctionComponent = () => {\n  return <UpdateTopic />;\n};\n\nexport { UpdateTopicView };\n\nexport default UpdateTopicView;\n","import React, { FunctionComponent } from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { ConsumerGroupsList } from '../../Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\n\nexport const ConsumerGroupsView: FunctionComponent = () => {\n  return <ConsumerGroupsList />;\n};\n\nexport default ConsumerGroupsView;\n","import React, { FunctionComponent } from 'react';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport { ConsumerGroupByTopicList } from '../../Modules/Topics/TopicDetails/Components/ConsumerGroupsByTopic/ConsumerGroupsListByTopic.patternfly';\n\nexport const ConsumerGroupsTopicsView: FunctionComponent = () => {\n  return <ConsumerGroupByTopicList />;\n};\n\nexport default ConsumerGroupsTopicsView;\n","import React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertGroup,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { AlertType } from '../../Contexts/Alert';\n\ntype AlertToastGroupProps = {\n  alerts: AlertType[];\n  onCloseAlert: (key: number) => void;\n};\n\nexport const ServerAlertGroup: React.FC<AlertToastGroupProps> = ({\n  alerts,\n  onCloseAlert,\n}) => {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ key, variant, message }) => (\n        <Alert\n          key={key}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=''\n          title={message}\n          actionClose={\n            <AlertActionCloseButton\n              title={message}\n              onClose={() => onCloseAlert(key)}\n            />\n          }\n        />\n      ))}\n    </AlertGroup>\n  );\n};\n","import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nconst initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.cleanup.policy': '',\n  'log.retention.bytes': '',\n  'log.retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport { DefaultApi, Topic, TopicSettings, TopicsList } from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length;\n\n  topicObj.replicationFactor = topic?.partitions\n    ?.map((p) => p.replicas?.length)\n    .reduce(\n      (previousValue = 0, currentValue = 0) => previousValue + currentValue\n    );\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"sourceRoot":""}