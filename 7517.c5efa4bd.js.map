{"version":3,"file":"7517.c5efa4bd.js","mappings":"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","sources":["webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { DeleteInstanceProps } from '@rhoas/app-services-ui-shared';\n\nexport type FederatedProps = Pick<DeleteInstanceProps, 'kafka'> & {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n  showSchemas?: JSX.Element | undefined;\n  redirectAfterDeleteInstance?: () => void;\n  onDeleteInstance?: () => void;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n            {kafkaName || t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import { useCallback, useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { TopicAdvanceConfig } from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport {\n  serializeTopic,\n  deserializeTopic,\n  IAdvancedTopic,\n} from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n    isRetentionTimeUnlimited: false,\n    isRetentionSizeUnlimited: true,\n  };\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onCancelUpdateTopic = useCallback(() => {\n    history.push(`${basename}/topics/${topicName}`);\n  }, [basename, history, topicName]);\n\n  const fetchTopic = useCallback(\n    async (topicName: string) => {\n      try {\n        await getTopic(topicName, config).then((topicRes) => {\n          const deserializedTopic = deserializeTopic(topicRes);\n\n          setTopicData({\n            ...topicData,\n            ...deserializedTopic,\n            numPartitions: topicRes?.partitions?.length.toString() || '',\n            replicationFactor:\n              (topicRes?.partitions &&\n                topicRes?.partitions[0].replicas?.length.toString()) ||\n              '',\n          });\n        });\n      } catch (err) {\n        if (isAxiosError(err)) {\n          let message: string | undefined;\n          let code: number | undefined;\n          if (err && isAxiosError(err)) {\n            code = err.response?.data.code;\n            message = err.response?.data.error_message;\n          }\n          if (onError) {\n            onError(code || -1, message || '');\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert({\n              variant: AlertVariant.danger,\n              title: `Topic ${topicName} does not exist`,\n            });\n            onCancelUpdateTopic && onCancelUpdateTopic();\n          }\n        }\n      }\n    },\n    [addAlert, config, onCancelUpdateTopic, onError, topicData]\n  );\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [fetchTopic, topicName]);\n\n  const saveTopic = async () => {\n    const { name, settings } = serializeTopic(topicData, ['cleanup.policy']);\n    setIsLoading(true);\n\n    try {\n      await updateTopicModel(name, settings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      let message: string | undefined;\n      let code: number | undefined;\n      if (err && isAxiosError(err)) {\n        code = err.response?.data.code;\n        message = err.response?.data.error_message;\n      }\n      if (onError) {\n        onError(code || -1, message || '');\n      }\n      setIsLoading(false);\n      addAlert({\n        title: message || '',\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useBasename } from '@rhoas/app-services-ui-shared';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n  TabsProps,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const UpdateTopicPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n  const { topicName } = useParams<{ topicName: string }>();\n  const {\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 1,\n  } = useFederated() || {};\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const onDeleteTopic = () => {\n    history.push(basename);\n  };\n\n  const onSaveTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const handleTabClick: TabsProps['onSelect'] = (_, tabIndex) => {\n    setActiveTabKey(tabIndex as number);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { UpdateTopicPage } from '@app/modules/Topics/pages/UpdateTopic';\nimport {\n  ConfigContext,\n  FederatedContext,\n  FederatedProps,\n  IConfiguration,\n} from '@app/contexts';\nimport { KafkaModalLoader } from '@app/components/KafkaModal';\nimport { ModalProvider } from '@rhoas/app-services-ui-components';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n}) => {\n  return (\n    <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n      <FederatedContext.Provider\n        value={{\n          activeTab: 1,\n          kafkaName,\n          kafkaPageLink,\n          kafkaInstanceLink,\n          onError,\n          kafka: {},\n        }}\n      >\n        <ModalProvider>\n          <UpdateTopicPage />\n          <KafkaModalLoader />\n        </ModalProvider>\n      </FederatedContext.Provider>\n    </ConfigContext.Provider>\n  );\n};\n\nexport default UpdateTopicFederated;\n"],"names":["FederatedContext","undefined","useFederated","useContext","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onSaveTopic","onError","config","addAlert","useAlert","history","useHistory","getBasename","useBasename","basename","initialState","name","numPartitions","isRetentionTimeUnlimited","isRetentionSizeUnlimited","topicData","setTopicData","useState","isLoading","setIsLoading","onCancelUpdateTopic","useCallback","push","fetchTopic","then","topicRes","deserializedTopic","partitions","length","toString","replicationFactor","replicas","err","message","code","response","data","error_message","status","AlertVariant","title","useEffect","TopicAdvanceConfig","isCreate","saveTopic","settings","handleCancel","isLoadingSave","UpdateTopicPage","useParams","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","_","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","onDeleteTopic","getToken","apiBasePath","value","basePath","kafka","ModalProvider"],"sourceRoot":""}