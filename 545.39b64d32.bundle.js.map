{"version":3,"sources":["webpack://kafka-ui/./src/contexts/Alert/Context.tsx","webpack://kafka-ui/./src/modules/Topics/pages/CreateTopic/CreateTopicFederated.tsx"],"names":["AlertContext","createContext","getToken","apiBasePath","kafkaName","kafkaPageLink","kafkaInstanceLink","addAlert","dispatchKafkaAction","alertContext","I18nextProvider","i18n","value","basePath","onCloseCreateTopic"],"mappings":"kIAKaA,G,SAAe,IAAAC,eAC1B,M,sJCkDF,QArC2E,SAAC,G,IAC1EC,EAAQ,WACRC,EAAW,cACXC,EAAS,YACTC,EAAa,gBACbC,EAAiB,oBACjBC,EAAQ,WACRC,EAAmB,sBAEbC,EAAe,CACnBF,SAAQ,GAOV,OACE,kBAAC,EAAAG,gBAAe,CAACC,KAAM,KACrB,kBAAC,aAAsB,CAACC,MAAO,CAAEC,SAAUV,EAAaD,SAAQ,IAC9D,kBAAC,aAAqB,CAACU,MAAOH,GAC5B,kBAAC,aAAyB,CACxBG,MAAO,CACLR,UAAS,EACTC,cAAa,EACbC,kBAAiB,EACjBE,oBAAmB,IAGrB,kBAAC,IAAe,CAACM,mBAhBA,WACzBN,GAAuBA,EAAoB","file":"545.39b64d32.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { ServerAlertGroup } from \"@app/components/ServerAlertGroup\";\nimport { AlertType, AlertContextProps, TimeOut } from \"./Alert.types\";\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { CreateTopicPage } from \"@app/modules/Topics/pages/CreateTopic/CreateTopicPage\";\nimport kafkai18n from \"@app/i18n\";\nimport {\n  AlertContext,\n  AlertContextProps,\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from \"@app/contexts\";\nimport { KafkaActions } from \"@app/utils\";\n\nexport type CreateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst CreateTopicFederated: FunctionComponent<CreateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  addAlert,\n  dispatchKafkaAction,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n\n  const onCloseCreateTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.ViewTopics);\n  };\n\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <AlertContext.Provider value={alertContext}>\n          <FederatedContext.Provider\n            value={{\n              kafkaName,\n              kafkaPageLink,\n              kafkaInstanceLink,\n              dispatchKafkaAction,\n            }}\n          >\n            <CreateTopicPage onCloseCreateTopic={onCloseCreateTopic} />\n          </FederatedContext.Provider>\n        </AlertContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default CreateTopicFederated;\n"],"sourceRoot":""}