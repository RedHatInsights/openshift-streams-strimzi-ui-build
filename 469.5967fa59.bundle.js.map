{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/Components/UpdateTopicView.tsx","webpack://kafka-ui/./src/Modules/Topics/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedUpdateTopicView.tsx","webpack://kafka-ui/./src/Utils/axios.ts"],"names":["AlertContext","createContext","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onCancelUpdateTopic","onDeleteTopic","onSaveTopic","onError","useState","deleteModal","setDeleteModal","name","numPartitions","topicData","setTopicData","config","useContext","addAlert","useEffect","topicRes","forEach","configItem","key","value","partitions","length","toString","response","data","code","error_message","status","AlertVariant","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","configEntries","newConfig","push","toLowerCase","topicSettings","handleCancel","UpdateTopicPage","onDeleteConsumer","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","title","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","onDeleteConsumerGroup","topic","consumerGroupByTopic","FederatedUpdateTopicView","getToken","apiBasePath","currentTopic","alertContext","I18nextProvider","i18n","basePath","isAxiosError","error","undefined"],"mappings":"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","file":"469.5967fa59.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink ? kafkaInstanceLink : '#'}>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport '../../CreateTopic/Components/CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from '../../CreateTopic/Components/TopicAdvanceConfig';\nimport { getTopic, updateTopicModel } from '../../../../Services/index';\nimport { ConfigEntry, TopicSettings } from '../../../../OpenApi/api';\nimport { DeleteTopics } from '../../TopicList/Components/DeleteTopicsModal';\nimport { AlertContext } from '../../../../Contexts/Alert';\nimport { ConfigContext } from '../../../../Contexts';\nimport { IAdvancedTopic } from '../../CreateTopic/Components/CreateTopicWizard';\nimport { convertUnits } from '../../CreateTopic/utils';\nimport { isAxiosError } from '../../../../Utils/axios';\nimport { useTranslation } from 'react-i18next';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onCancelUpdateTopic,\n  onDeleteTopic,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation();\n\n  const [deleteModal, setDeleteModal] = useState(false);\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>({\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  });\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n  const fetchTopic = async (topicName) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      const configEntries: any = {};\n      topicRes.config?.forEach((configItem) => {\n        configEntries[configItem.key || ''] = configItem.value || '';\n      });\n\n      setTopicData({\n        ...topicData,\n        numPartitions: topicRes?.partitions?.length.toString() || '',\n        'cleanup.policy': configEntries['cleanup.policy'] || 'delete',\n        'retention.bytes': configEntries['retention.bytes'] || '-1',\n        'retention.ms': configEntries['retention.ms'] || '604800000',\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        if (onError) {\n          onError(err.response?.data.code, err.response?.data.error_message);\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert(`Topic ${topicName} does not exist`, AlertVariant.danger);\n          onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n\n    const newConfig: ConfigEntry[] = [];\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== 'numPartitions') {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      // numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      const updateStatus = await updateTopicModel(name, topicSettings, config);\n\n      if (updateStatus === 200) {\n        addAlert(t('topic.topic_successfully_updated'), AlertVariant.success);\n        onSaveTopic();\n      }\n    } catch (err) {\n      if (onError) {\n        onError(err.response.data.code, err.response.data.error_message);\n      }\n      addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n      />\n      <br />\n      <br />\n      {deleteModal && (\n        <DeleteTopics\n          deleteModal={deleteModal}\n          setDeleteModal={setDeleteModal}\n          topicName={topicName}\n          onDeleteTopic={onDeleteTopic}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport { ConsumerGroupsList } from '../../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport { UpdateTopicView } from './Components/UpdateTopicView';\nimport { TopicDetailHead } from '../TopicDetails/Components/TopicDetailHead';\nimport { useTranslation } from 'react-i18next';\n\nexport interface UpdateTopicPageProps {\n  topicName: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onDeleteConsumer: () => void;\n  onError?: (errorCode: number, message: string) => void;\n  activeTab?: number;\n}\n\nexport const UpdateTopicPage: React.FunctionComponent<UpdateTopicPageProps> = ({\n  topicName,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onCancelUpdateTopic,\n  onDeleteTopic,\n  onSaveTopic,\n  onError,\n  onDeleteConsumer,\n  activeTab = 0,\n}) => {\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const { t } = useTranslation();\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          >\n\n          </Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          >\n          </Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroupsList\n            onDeleteConsumerGroup={onDeleteConsumer}\n            topic={topicName}\n            consumerGroupByTopic={true}\n          />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onCancelUpdateTopic={onCancelUpdateTopic}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { UpdateTopicPage } from '../../Modules/Topics/UpdateTopic/UpdateTopicPage';\nimport { ConfigContext } from '../../Contexts';\nimport { AlertVariant } from '@patternfly/react-core';\nimport kafkai18n from '../../i18n';\nimport { I18nextProvider } from 'react-i18next';\nimport { AlertContext, AlertContextProps } from '../../Contexts/Alert';\nimport { FederatedProps } from '../../Utils';\n\nexport interface FederatedUpdateTopicProps extends FederatedProps {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  currentTopic: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onCancelUpdateTopic: () => void;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onDeleteConsumer: () => void;\n}\n\nconst FederatedUpdateTopicView: FunctionComponent<FederatedUpdateTopicProps> = ({\n  getToken,\n  apiBasePath,\n  currentTopic,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onCancelUpdateTopic,\n  addAlert,\n  onDeleteTopic,\n  onSaveTopic,\n  onError,\n  onDeleteConsumer,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <AlertContext.Provider value={alertContext}>\n          <UpdateTopicPage\n            onDeleteConsumer={onDeleteConsumer}\n            topicName={currentTopic}\n            onCancelUpdateTopic={onCancelUpdateTopic}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n            kafkaName={kafkaName}\n            kafkaPageLink={kafkaPageLink}\n            kafkaInstanceLink={kafkaInstanceLink}\n            activeTab={1}\n          />\n        </AlertContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport { FederatedUpdateTopicView };\n\nexport default FederatedUpdateTopicView;\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"sourceRoot":""}