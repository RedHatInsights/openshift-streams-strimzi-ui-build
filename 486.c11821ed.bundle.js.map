{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicHead.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepTopicName.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepPartitions.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepMessageRetention.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepReplicas.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/WizardCustomFooter.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicWizard.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/CreateTopicPage.tsx"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","kafkaName","kafkaPageLink","t","useTranslation","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","StepTopicName","topicNameInput","setTopicNameInput","topicNameValidated","setTopicNameValidated","invalidText","setInvalidText","Stack","hasGutter","TextContent","Text","component","TextVariants","Form","onSubmit","event","preventDefault","FormGroup","fieldId","helperText","helperTextInvalid","validated","isRequired","TextInput","type","name","value","regexpInvalid","RegExp","length","test","validationCheck","placeholder","StepPartitions","partitionTouchspinValue","setPartitionTouchspinValue","NumberInput","onPlus","onMinus","inputName","num","Number","target","widthChars","min","StepMessageRetention","RetentionTimeOption","RetentionSizeOption","setMsgRetentionValue","currentPeriod","currentSize","setCurrentPeriod","setCurrentSize","setRetentionSize","useState","retentionTimeTouchspinValue","setRetentionTimeTouchspinValue","retentionSizeTouchspinValue","setRetentionSizeTouchspinValue","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","selectedTime","setSelectedTime","selectedSize","setSelectedSize","DAY","retentionTimeFactor","setRetentionTimeFactor","BYTE","retentionSizeFactor","setRetentionSizeFactor","useEffect","WEEK","UNLIMITED","CUSTOM","handleMessageRetention","_","Radio","Flex","FlexItem","Select","SelectVariant","onToggle","onSelect","selection","MILLISECOND","SECOND","MINUTE","HOUR","selections","isOpen","SelectOption","key","isPlaceholder","KILOBYTE","MEGABYTE","GIGABYTE","TERABYTE","StepReplicas","replicationFactor","minInSyncReplica","Alert","isInline","title","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","toString","popoverBody","popoverHeader","WizardCustomFooter","isLoading","onValidate","closeWizard","WizardFooter","WizardContextConsumer","activeStep","onNext","onBack","Button","onClick","isDisabled","setIsCreateTopic","onCloseCreateTopic","config","useContext","addAlert","msgRetentionValue","retentionSize","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","setIsLoading","numPartitions","topicData","setTopicData","saveTopic","topic","settings","basePath","accessToken","getToken","createTopic","then","res","status","AlertVariant","catch","err","response","data","error_message","steps","enableNext","trim","canJumpTo","nextButtonText","Divider","TopicAdvanceConfig","isCreate","handleCancel","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","footer","topicName","fetchTopic","CreateTopicPage","kafkaInstanceLink"],"mappings":"+JAmBaA,EAA+C,SAAC,G,IAC3DC,EAAe,kBACfC,EAAkB,qBAClBC,EAAS,YACTC,EAAa,gBAELC,GAAM,IAAAC,kBAAgB,EAExBC,EACJ,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,CAACC,GAAIN,GAAgC,KAAG,mBAGvD,kBAAC,EAAAK,eAAc,CAACC,GAAG,IAAIC,UAAQ,GAC5BR,GAAwBE,EAAE,+BAE7B,kBAAC,EAAAI,eAAc,CAACC,GAAG,IAAIC,UAAQ,GAC5BN,EAAE,wBAIT,OACE,oCACE,6BAASO,UAAU,8BAChBL,GAEH,kBAAC,EAAAM,YAAW,CAACC,QAAS,EAAAC,oBAAA,OACpB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,OAC3Bb,EAAE,uBAEL,6BACA,kBAAC,EAAAc,OAAM,CACLC,GAAG,gBACHC,MAAOhB,EAAE,0BACTiB,SAAUjB,EAAE,0BACZkB,UAAWtB,EACXuB,SAAUtB,EACVU,UAAU,2BCnCPa,G,QAA0C,SAAC,G,IACtDC,EAAc,iBACdC,EAAiB,oBACjBC,EAAkB,qBAClBC,EAAqB,wBACrBC,EAAW,cACXC,EAAc,iBAEN1B,GAAM,IAAAC,kBAAgB,EAoB9B,OACE,kBAAC,EAAA0B,MAAK,CAACC,WAAS,EAACrB,UAAU,qCACzB,kBAAC,EAAAsB,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,IAAkBhC,EAAE,qBACrC,kBAAC,EAAA8B,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBhC,EAAE,0BACpC,kBAAC,EAAA8B,KAAI,CAACC,UAAW,EAAAC,aAAA,OACdhC,EAAE,gCAGP,kBAAC,EAAAiC,KAAI,CAACC,SAXgB,SAACC,GAAU,OAAAA,EAAMC,mBAYrC,kBAAC,EAAAC,UAAS,CACRrB,MAAOhB,EAAE,oBACTsC,QAAQ,uBACRC,WAAYvC,EAAE,gCACdwC,kBAAmBf,EACnBgB,UAAWlB,EACXmB,YAAU,GAEV,kBAAC,EAAAC,UAAS,CACRD,YAAU,EACVE,KAAK,OACL7B,GAAG,wBACH8B,KAAK,kBACLC,MAAOzB,EACPF,SA/BoB,SAACE,IAXP,SAACA,GACvB,IAAM0B,EAAgB,IAAIC,OAAO,oBAC7B3B,EAAe4B,SAAWF,EAAcG,KAAK7B,IAC/CK,EAAe1B,EAAE,iCACjBwB,EAAsB,UACbH,EAAe4B,OAAS,KACjCzB,EAAsB,SACtBE,EAAe1B,EAAE,oCACZwB,EAAsB,WAI7B2B,CAAgB9B,GAChBC,EAAkBD,IA8BV+B,YAAapD,EAAE,oBACfyC,UAAWlB,SC1DV8B,EAA4C,SAAC,G,IACxDC,EAAuB,0BACvBC,EAA0B,6BAIlBvD,GAAM,IAAAC,kBAAgB,EAgB9B,OACE,kBAAC,EAAA0B,MAAK,CAACC,WAAS,EAACrB,UAAU,qCACzB,kBAAC,EAAAsB,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,IAAe,cAChC,kBAAC,EAAAF,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBhC,EAAE,yBACpC,kBAAC,EAAA8B,KAAI,CAACC,UAAW,EAAAC,aAAA,OACdhC,EAAE,+BAGP,kBAAC,EAAAiC,KAAI,KACH,kBAAC,EAAAI,UAAS,CACRrB,MAAM,aACNsB,QAAQ,uBACRC,WAAYvC,EAAE,+BACd0C,YAAU,GAEV,kBAAC,EAAAc,YAAW,CACVC,OA/BW,WACnBF,EAA2BD,EAA0B,IA+B7CI,QA7BY,WACpBH,EAA2BD,EAA0B,IA6B7CR,MAAOQ,EACPK,UAAU,QACVxC,SA7B6B,SAACgB,GACtC,IAAIyB,EAAMC,OAAO1B,EAAM2B,OAAOhB,OAC1Bc,EAZW,IAabA,EAba,GAefL,EAA2BK,IAyBnBG,WAAY,GACZC,IAzCO,QCONC,EAAwD,SAAC,G,IAU/DC,EAWAC,EApBLC,EAAoB,uBACpBC,EAAa,gBACbC,EAAW,cACXC,EAAgB,mBAChBC,EAAc,iBACdC,EAAgB,mBAERzE,GAAM,IAAAC,kBAAgB,GAE9B,SAAKiE,GACH,iCACA,yBACA,yBACA,sBACA,qBACA,wBACA,kBACA,8BARF,CAAKA,MAAmB,KAWxB,SAAKC,GACH,mBACA,6BACA,6BACA,6BACA,8BACA,kBACA,8BAPF,CAAKA,MAAmB,KASlB,OAGF,IAAAO,UAAiB,GAFnBC,EAA2B,KAC3BC,EAA8B,KAE1B,GAGF,IAAAF,UAAiB,GAFnBG,EAA2B,KAC3BC,EAA8B,KAE1B,GAGF,IAAAJ,WAAkB,GAFpBK,EAAyB,KACzBC,EAA4B,KAExB,GAGF,IAAAN,WAAkB,GAFpBO,EAAyB,KACzBC,EAA4B,KAExB,GAAkC,IAAAR,WAAkB,GAAnDS,EAAY,KAAEC,EAAe,KAC9B,GAAkC,IAAAV,WAAkB,GAAnDW,EAAY,KAAEC,EAAe,KAC9B,GAAgD,IAAAZ,UACpDR,EAAoBqB,KADfC,EAAmB,KAAEC,EAAsB,KAG5C,GAAgD,IAAAf,UACpDP,EAAoBuB,MADfC,EAAmB,KAAEC,EAAsB,MAIlD,IAAAC,YAAU,WACJxB,IAAkBH,EAAoBqB,IACxCnB,EAAqBF,EAAoBqB,KAChClB,IAAkBH,EAAoB4B,KAC/C1B,EAAqBF,EAAoB4B,MAChCzB,IAAkBH,EAAoB6B,UAC/C3B,EAAqBF,EAAoB6B,WAChC1B,IAAkBH,EAAoB8B,QAC/C5B,EAAqBoB,EAAsBb,GAGzCL,IAAgBH,EAAoB4B,UACtCtB,EAAiBN,EAAoB4B,WAC5BzB,IAAgBH,EAAoB6B,QAC7CvB,EAAiBkB,EAAsBd,KAGxC,CACDR,EACAC,EACAK,EACAE,EACAW,EACAG,IAGF,IAAMM,EAAyB,SAACC,EAAG/D,GACjC,IACMU,EADSV,EAAM2B,OACDjB,KAEP,aAATA,EACF0B,EAAiBL,EAAoBqB,KACnB,cAAT1C,EACT0B,EAAiBL,EAAoB4B,MACnB,uBAATjD,EACT0B,EAAiBL,EAAoB6B,WACnB,oBAATlD,GACT0B,EAAiBL,EAAoB8B,QAG1B,oBAATnD,EACF2B,EAAeL,EAAoB6B,QACjB,uBAATnD,GACT2B,EAAeL,EAAoB4B,YA0EvC,OACE,oCACE,kBAAC,EAAApE,MAAK,CAACC,WAAS,EAACrB,UAAU,qCACzB,kBAAC,EAAAsB,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,IACdhC,EAAE,4BAEL,kBAAC,EAAA8B,KAAI,CAACC,UAAW,EAAAC,aAAA,GACdhC,EAAE,iCAEL,kBAAC,EAAA8B,KAAI,CAACC,UAAW,EAAAC,aAAA,OACdhC,EAAE,uCAIP,kBAAC,EAAAiC,KAAI,CAACC,SAjBc,SAACC,GAAU,OAAAA,EAAMC,mBAkBnC,kBAAC,EAAAC,UAAS,CACRC,QAAQ,sCACRtB,MAAOhB,EAAE,yBAGT,kBAAC,EAAA2B,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAuE,MAAK,CACJjF,UAAWmD,IAAkBH,EAAoBqB,IACjD1C,KAAK,WACL1B,SAAU8E,EACVjF,MAAM,QAAO,aACF,QACXD,GAAG,qBACH+B,MAAM,QAER,kBAAC,EAAAqD,MAAK,CACJjF,UAAWmD,IAAkBH,EAAoB4B,KACjDjD,KAAK,YACL1B,SAAU8E,EACVjF,MAAM,SAAQ,aACH,SACXD,GAAG,qBACH+B,MAAM,SAER,kBAAC,EAAAqD,MAAK,CACJjF,UAAWmD,IAAkBH,EAAoB8B,OACjDnD,KAAK,kBACL1B,SAAU8E,EACVjF,MAAM,kBAAiB,aACZ,eACXD,GAAG,qBACH+B,MAAM,WAER,yBAAKvC,UAAU,+BACb,kBAAC,EAAA6F,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAA7C,YAAW,CACVE,QA3EkB,WACpCkB,EAA+BD,EAA8B,IA2E3ClB,OAhFiB,WACnCmB,EAA+BD,EAA8B,IAgF3C7B,MAAO6B,EACPxD,SA1EuB,SAACgB,GAC1CyC,EAA+Bf,OAAO1B,EAAM2B,OAAOhB,SA0EjCkB,IAAK,KAGT,kBAAC,EAAAqC,SAAQ,KACP,kBAAC,EAAAC,OAAM,CACL7F,QAAS,EAAA8F,cAAA,OAAoB,aAClB,eACXC,SAtIU,SAACzB,GAC7BC,EAA6BD,IAsIX0B,SA/HU,SAACtE,EAAOuE,GAClB,SAAdA,EACFjB,EAAuBvB,EAAoBqB,KACpB,cAAdmB,EACTjB,EAAuBvB,EAAoB6B,WACpB,iBAAdW,EACTjB,EAAuBvB,EAAoByC,aACpB,YAAdD,EACTjB,EAAuBvB,EAAoB0C,QACpB,YAAdF,EACTjB,EAAuBvB,EAAoB2C,QACpB,UAAdH,GACTjB,EAAuBvB,EAAoB4C,MAE7C1B,EAAgBsB,GAChB1B,GAA6B,IAiHX+B,WAAY5B,EACZ6B,OAAQjC,GAGR,kBAAC,EAAAkC,aAAY,CAACC,IAAK,EAAGpE,MAAM,OAAOqE,eAAa,IAChD,kBAAC,EAAAF,aAAY,CAACC,IAAK,EAAGpE,MAAM,YAC5B,kBAAC,EAAAmE,aAAY,CAACC,IAAK,EAAGpE,MAAM,YAC5B,kBAAC,EAAAmE,aAAY,CAACC,IAAK,EAAGpE,MAAM,UAC5B,kBAAC,EAAAmE,aAAY,CAACC,IAAK,EAAGpE,MAAM,qBAKpC,kBAAC,EAAAqD,MAAK,CACJjF,UAAWmD,IAAkBH,EAAoB6B,UACjDlD,KAAK,qBACL1B,SAAU8E,EACVjF,MAAM,YAAW,aACN,YACXD,GAAG,qBACH+B,MAAM,gBAIZ,kBAAC,EAAAT,UAAS,CACRC,QAAQ,sCACRtB,MAAM,kBAEN,kBAAC,EAAAW,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAuE,MAAK,CACJjF,UAAWoD,IAAgBH,EAAoB4B,UAC/ClD,KAAK,qBACL1B,SAAU8E,EACVjF,MAAM,YAAW,aACN,YACXD,GAAG,qBACH+B,MAAM,cAER,kBAAC,EAAAqD,MAAK,CACJjF,UAAWoD,IAAgBH,EAAoB6B,OAC/CnD,KAAK,kBACL1B,SAAU8E,EACVjF,MAAM,cAAa,aACR,eACXD,GAAG,qBACH+B,MAAM,WAER,yBAAKvC,UAAU,+BACb,kBAAC,EAAA6F,KAAI,KACH,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAA7C,YAAW,CACVE,QA/HkB,WACpCoB,EAA+BD,EAA8B,IA+H3CpB,OApIiB,WACnCqB,EAA+BD,EAA8B,IAoI3C/B,MAAO+B,EACP1D,SA9HuB,SAACgB,GAC1C2C,EAA+BjB,OAAO1B,EAAM2B,OAAOhB,SA8HjCkB,IAAK,KAGT,kBAAC,EAAAqC,SAAQ,KACP,kBAAC,EAAAC,OAAM,CACL7F,QAAS,EAAA8F,cAAA,OAAoB,aAClB,eACXC,SAlMU,SAACvB,GAC7BC,EAA6BD,IAkMXwB,SA7KU,SAACtE,EAAOuE,GAClB,cAAdA,EACFd,EAAuBzB,EAAoB4B,WACpB,UAAdW,EACTd,EAAuBzB,EAAoBuB,MACpB,cAAdgB,EACTd,EAAuBzB,EAAoBiD,UACpB,cAAdV,EACTd,EAAuBzB,EAAoBkD,UACpB,cAAdX,EACTd,EAAuBzB,EAAoBmD,UACpB,cAAdZ,GACTd,EAAuBzB,EAAoBoD,UAE7CjC,EAAgBoB,GAChBxB,GAA6B,IA+JX6B,WAAY1B,EACZ2B,OAAQ/B,GAGR,kBAAC,EAAAgC,aAAY,CAACC,IAAK,EAAGpE,MAAM,QAAQqE,eAAa,IACjD,kBAAC,EAAAF,aAAY,CAACC,IAAK,EAAGpE,MAAM,cAC5B,kBAAC,EAAAmE,aAAY,CAACC,IAAK,EAAGpE,MAAM,cAC5B,kBAAC,EAAAmE,aAAY,CAACC,IAAK,EAAGpE,MAAM,cAC5B,kBAAC,EAAAmE,aAAY,CAACC,IAAK,EAAGpE,MAAM,wB,UCjUrC0E,EAAwC,SAAC,G,IACpDC,EAAiB,oBACjBC,EAAgB,mBAER1H,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAA0B,MAAK,CAACC,WAAS,EAACrB,UAAU,qCACzB,kBAAC,EAAAsB,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,IAAkBhC,EAAE,oBACrC,kBAAC,EAAA8B,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBhC,EAAE,wBACpC,kBAAC,EAAA8B,KAAI,CAACC,UAAW,EAAAC,aAAA,OAAqBhC,EAAE,2BAE1C,kBAAC,EAAA2H,MAAK,CAAClH,QAAQ,OAAOmH,UAAQ,EAACC,MAAO7H,EAAE,gCACxC,kBAAC8H,EAAA,EAAoB,CACnBC,aAAc/H,EAAE,mBAChBgI,WAAYhI,EAAE,mBACdiI,WAAYR,EAAkBS,WAC9BC,YAAanI,EAAE,8BACfoI,cAAepI,EAAE,oBAGnB,kBAAC8H,EAAA,EAAoB,CACnBC,aAAa,mCACbC,WAAW,2BACXC,WAAYP,EAAiBQ,WAC7BC,YAAanI,EAAE,yCACfoI,cAAepI,EAAE,iC,sEC9BZqI,EAA8C,SAAC,G,IAC1DC,EAAS,YACTC,EAAU,aACVhH,EAAkB,qBAClBiH,EAAW,cAEHxI,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAwI,aAAY,KACX,kBAAC,EAAAC,sBAAqB,MACnB,SAAC,G,IAAEC,EAAU,aAAEC,EAAM,SAAEC,EAAM,SAC5B,OAAIF,EAAW9F,MAAQ7C,EAAE,oBAErB,oCACE,kBAAC,EAAA8I,OAAM,CACLrI,QAAQ,UACRmC,KAAK,SACL0F,UAAWA,EACXS,QAAS,WAAM,OAAAR,EAAWK,IAC1BI,WAAkC,WAAtBzH,GAEXvB,EAAE,gBAEL,kBAAC,EAAA8I,OAAM,CAACrI,QAAQ,YAAYuI,YAAY,GACrChJ,EAAE,gBAEL,kBAAC,EAAA8I,OAAM,CAACrI,QAAQ,OAAOsI,QAASP,GAC7BxI,EAAE,mBAMY,YAAnB2I,EAAW9F,KAEX,oCACE,kBAAC,EAAAiG,OAAM,CAACrI,QAAQ,UAAUmC,KAAK,SAASmG,QAASH,GAC9C5I,EAAE,kBAEL,kBAAC,EAAA8I,OAAM,CAACrI,QAAQ,YAAYsI,QAASF,GAClC7I,EAAE,gBAEL,kBAAC,EAAA8I,OAAM,CAACrI,QAAQ,OAAOsI,QAASP,GAC7BxI,EAAE,mBAMT,oCACE,kBAAC,EAAA8I,OAAM,CAACrI,QAAQ,UAAUmC,KAAK,SAASmG,QAASH,GAC9C5I,EAAE,gBAEL,kBAAC,EAAA8I,OAAM,CAACrI,QAAQ,YAAYsI,QAASF,GAClC7I,EAAE,gBAEL,kBAAC,EAAA8I,OAAM,CAACrI,QAAQ,OAAOsI,QAASP,GAC7BxI,EAAE,wBCxBN,EAAkD,SAAC,G,IAC9DiJ,EAAgB,mBAChBrJ,EAAe,kBACfsJ,EAAkB,qBAEZC,GAAS,IAAAC,YAAW,KAClBpJ,GAAM,IAAAC,kBAAgB,EACtBoJ,GAAa,IAAAD,YAAW,KAAa,SACvC,GAA4C,IAAA1E,UAAS,GAApD4E,EAAiB,KAAElF,EAAoB,KACxC,GAAoC,IAAAM,UAAS,GAA5C6E,EAAa,KAAE9E,EAAgB,KAChC,GAAsC,IAAAC,UAAS,IAA9CrD,EAAc,KAAEC,EAAiB,KAClC,GAAwD,IAAAoD,UAAS,GAAhEpB,EAAuB,KAAEC,EAA0B,KACnDiG,GAAmC,IAAA9E,UAAS,GAAE,GAC9C+E,GAAkC,IAAA/E,UAAS,GAAE,GAC9C,GAA8C,IAAAA,UAElD,WAFKnD,EAAkB,KAAEC,EAAqB,KAG1C,GAA4B,IAAAkD,WAAkB,GAA7C4D,EAAS,KAAEoB,EAAY,KACxB,GAAgC,IAAAhF,UAAiB,IAAhDjD,EAAW,KAAEC,EAAc,KAC5B,GAA4B,IAAAgD,UAAyB,CACzD7B,KAAM,GACN8G,cAAe,IACf,eAAgB,IAChB,oBAAqB,OACrB,kBAAmB,KACnB,uBAAwB,QACxB,iBAAkB,WAPbC,EAAS,KAAEC,EAAY,KAUxB,EAAoC,aACxC,QADKxF,EAAa,KAAEE,EAAgB,KAGhC,EAAgC,cAAiC,GAAhED,EAAW,KAAEE,GAAc,KAE5BgE,GAAc,WACdS,GACFA,GAAiB,IAIfa,GAAY,WAGhB,IAAMC,EAAuBnK,GACzB,SAAmB,QAAagK,IAChC,CACE/G,KAAMxB,EACN2I,SAAU,CACRL,cAAerG,EACf6F,OAAQ,CACN,CACEjC,IAAK,eACLpE,MAAOwG,EAAkBpB,YAE3B,CAAEhB,IAAK,kBAAmBpE,MAAOyG,EAAcrB,eAKzD,IAAI,KACF,IAAI,KAAc,CAChB+B,SAAUd,aAAM,EAANA,EAAQc,SAClBC,YAAaf,aAAM,EAANA,EAAQgB,YAGtBC,YAAYL,GACZM,MAAK,SAACC,GACc,MAAfA,EAAIC,QACNlB,EAASrJ,EAAE,oCAAqC,EAAAwK,aAAA,SAElDhC,QAEDiC,OAAM,SAACC,GACNrB,EAASqB,EAAIC,SAASC,KAAKC,cAAe,EAAAL,aAAA,QAC1ChC,SAqBAsC,GAAsB,CAC1B,CACEjI,KAAM7C,EAAE,oBACR+K,WAC4B,KAA1B1J,EAAe2J,QAAwC,YAAvBzJ,EAClCQ,UACE,kBAACX,EAAa,CACZC,eAAgBA,EAChBC,kBAAmBA,EACnBC,mBAAoBA,EACpBC,sBAAuBA,EACvBC,YAAaA,EACbC,eAAgBA,KAItB,CACEmB,KAAM7C,EAAE,qBACRiL,UAAqC,KAA1B5J,EAAe2J,OAC1BjJ,UACE,kBAACsB,EAAc,CACbC,wBAAyBA,EACzBC,2BAA4BA,KAIlC,CACEV,KAAM7C,EAAE,2BACRiL,UAAqC,KAA1B5J,EAAe2J,OAC1BjJ,UACE,kBAACkC,EAAoB,CACnBG,qBAAsBA,EACtBC,cAAeA,EACfC,YAAaA,EACbC,iBAAkBA,EAClBC,eAAgBA,GAChBC,iBAAkBA,KAIxB,CACE5B,KAAM7C,EAAE,mBACRiL,UAAqC,KAA1B5J,EAAe2J,OAC1BjJ,UACE,kBAACyF,EAAY,CACXC,kBAAmB+B,EACnB9B,iBAAkB+B,IAGtByB,eAAgBlL,EAAE,mBAIhB6H,GAAQ7H,EAAE,sBAYhB,OACE,oCACGJ,EACC,oCACE,kBAAC,EAAAuL,QAAO,CAAC5K,UAAU,kCACnB,kBAAC,EAAAC,YAAW,CAACC,QAAS,EAAAC,oBAAA,OACpB,kBAAC0K,EAAA,EAAkB,CACjBC,UAAU,EACVvB,UAAWA,GACXwB,aAAcpC,EACdU,UAAWA,EACXC,aAAcA,MAKpB,kBAAC,EAAArJ,YAAW,CACVC,QAAS,EAAAC,oBAAA,MACTkC,KAAM,EAAA2I,iBAAA,OACNC,UAAQ,GAER,kBAAC,EAAAC,OAAM,CACLC,aAAiB7D,GAAK,SACtB8D,cAAkB9D,GAAK,WACvBiD,MAAOA,GACPc,QAASpD,GACTqD,OAAQ/B,GAAS,cACL,0BACZgC,OACE,kBAACzD,EAAkB,CACjBC,UAAWA,EACXC,WAzCK,SAACK,GACdvH,EAAe4B,OAAS,GAC1BvB,EAAe1B,EAAE,mBACjBwB,EAAsB,WAEtBkI,GAAa,GA7EE,SAAOqC,EAAWnD,G,mBAAM,E,OAAA,E,EAAA,W,qlCAEtB,O,sBAAA,IAAM,QAASmD,EAAW5C,I,cAA1B,WAEfzH,EAAe1B,EAAE,uBAAwB,CAAE6C,KAAMkJ,KACjDvK,EAAsB,SACtBkI,GAAa,I,mBAGc,O,SAAnBiB,SAASJ,SACjB/I,EAAsB,WACtBkI,GAAa,GACbd,K,wCAZqC,K,kQA8EvCoD,CAAW3K,EAAgBuH,KAoCjBrH,mBAAoBA,EACpBiH,YAAaA,UCrOhByD,EAAmD,SAAC,G,IAC/DhD,EAAgB,mBAChBiD,EAAiB,oBACjBpM,EAAS,YACTC,EAAa,gBACbmJ,EAAkB,qBAEZ,GAAwC,IAAAxE,WAAkB,GAAzD9E,EAAe,KAAEC,EAAkB,KAC1C,OACE,oCACE,kBAACF,EAAe,CACdC,gBAAiBA,EACjBC,mBAAoBA,EACpBC,UAAWA,EACXoM,kBAAmBA,EACnBnM,cAAeA,IAEjB,kBAAC,EAAiB,CAChBH,gBAAiBA,EACjBqJ,iBAAkBA,EAClBC,mBAAoBA","file":"486.c11821ed.bundle.js","sourcesContent":["import {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport interface ICreateTopicProps {\n  isSwitchChecked: boolean;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsSwitchChecked: (value: boolean) => void;\n}\n\nexport const CreateTopichead: React.FC<ICreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n  kafkaName,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n        Kafka Instances\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {t('topic.create_topic')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          {t('topic.create_topic')}\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label={t('topic.show_all_options')}\n          labelOff={t('topic.show_all_options')}\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Form,\n  FormGroup,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nimport { useTranslation } from 'react-i18next';\nexport interface IStepTopicName {\n  topicNameInput: string;\n  setTopicNameInput: (value: string) => void;\n  topicNameValidated: 'error' | 'default';\n  setTopicNameValidated: (value: 'error' | 'default') => void;\n  invalidText: string;\n  setInvalidText: (value: string) => void;\n}\n\nexport const StepTopicName: React.FC<IStepTopicName> = ({\n  topicNameInput,\n  setTopicNameInput,\n  topicNameValidated,\n  setTopicNameValidated,\n  invalidText,\n  setInvalidText,\n}) => {\n  const { t } = useTranslation();\n\n  const validationCheck = (topicNameInput) => {\n    const regexpInvalid = new RegExp('^[0-9A-Za-z_-]+$');\n    if (topicNameInput.length && !regexpInvalid.test(topicNameInput)) {\n      setInvalidText(t('topic.topic_name_helper_text'));\n      setTopicNameValidated('error');\n    } else if (topicNameInput.length > 249) {\n      setTopicNameValidated('error');\n      setInvalidText(t('topic.cannot_exceed_characters'));\n    } else setTopicNameValidated('default');\n  };\n\n  const handleTopicNameChange = (topicNameInput) => {\n    validationCheck(topicNameInput);\n    setTopicNameInput(topicNameInput);\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>{t('topic.topic_name')}</Text>\n        <Text component={TextVariants.p}>{t('topic.topic_name_info')}</Text>\n        <Text component={TextVariants.small}>\n          {t('topic.topic_name_info_note')}\n        </Text>\n      </TextContent>\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          label={t('topic.topic_name')}\n          fieldId='step-topic-name-form'\n          helperText={t('topic.topic_name_helper_text')}\n          helperTextInvalid={invalidText}\n          validated={topicNameValidated}\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder={t('topic.enter_name')}\n            validated={topicNameValidated}\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nimport { useTranslation } from 'react-i18next';\nexport interface IStepPartitions {\n  setPartitionTouchspinValue: (value: number) => void;\n  partitionTouchspinValue: number;\n}\n\nexport const StepPartitions: React.FC<IStepPartitions> = ({\n  partitionTouchspinValue,\n  setPartitionTouchspinValue,\n}) => {\n  const minValue = 1;\n\n  const { t } = useTranslation();\n\n  const handleOnPlus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue + 1);\n  };\n  const handleOnMinus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue - 1);\n  };\n  const handlePartitionTouchspinChange = (event) => {\n    let num = Number(event.target.value);\n    if (num < minValue) {\n      num = minValue;\n    }\n    setPartitionTouchspinValue(num);\n  };\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Partitions</Text>\n        <Text component={TextVariants.p}>{t('topic.partition_info')}</Text>\n        <Text component={TextVariants.small}>\n          {t('topic.partition_info_note')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText={t('topic.partition_helper_text')}\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={partitionTouchspinValue}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n            min={minValue}\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IStepMessageRetention {\n  setMsgRetentionValue: (value: number) => void;\n  currentPeriod: string | number;\n  currentSize: string | number;\n  setCurrentPeriod: (value: string | number) => void;\n  setCurrentSize: (value: string | number) => void;\n  setRetentionSize: (value: number) => void;\n}\n\nexport const StepMessageRetention: React.FC<IStepMessageRetention> = ({\n  setMsgRetentionValue,\n  currentPeriod,\n  currentSize,\n  setCurrentPeriod,\n  setCurrentSize,\n  setRetentionSize,\n}) => {\n  const { t } = useTranslation();\n\n  enum RetentionTimeOption {\n    MILLISECOND = 1,\n    SECOND = 1000,\n    MINUTE = 60000,\n    HOUR = 3600000,\n    DAY = 86400000,\n    WEEK = 604800000,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n\n  enum RetentionSizeOption {\n    BYTE = 1,\n    KILOBYTE = 1000,\n    MEGABYTE = 1000000,\n    GIGABYTE = 1000000000,\n    TERABYTE = 1000000000000,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n  const [\n    retentionTimeTouchspinValue,\n    setRetentionTimeTouchspinValue,\n  ] = useState<number>(7);\n  const [\n    retentionSizeTouchspinValue,\n    setRetentionSizeTouchspinValue,\n  ] = useState<number>(1);\n  const [\n    isRetentionTimeSelectOpen,\n    setIsRetentionTimeSelectOpen,\n  ] = useState<boolean>(false);\n  const [\n    isRetentionSizeSelectOpen,\n    setIsRetentionSizeSelectOpen,\n  ] = useState<boolean>(false);\n  const [selectedTime, setSelectedTime] = useState<boolean>(false);\n  const [selectedSize, setSelectedSize] = useState<boolean>(false);\n  const [retentionTimeFactor, setRetentionTimeFactor] = useState<number>(\n    RetentionTimeOption.DAY\n  );\n  const [retentionSizeFactor, setRetentionSizeFactor] = useState<number>(\n    RetentionSizeOption.BYTE\n  );\n\n  useEffect(() => {\n    if (currentPeriod === RetentionTimeOption.DAY) {\n      setMsgRetentionValue(RetentionTimeOption.DAY);\n    } else if (currentPeriod === RetentionTimeOption.WEEK) {\n      setMsgRetentionValue(RetentionTimeOption.WEEK);\n    } else if (currentPeriod === RetentionTimeOption.UNLIMITED) {\n      setMsgRetentionValue(RetentionTimeOption.UNLIMITED);\n    } else if (currentPeriod === RetentionTimeOption.CUSTOM) {\n      setMsgRetentionValue(retentionTimeFactor * retentionTimeTouchspinValue);\n    }\n\n    if (currentSize === RetentionSizeOption.UNLIMITED) {\n      setRetentionSize(RetentionSizeOption.UNLIMITED);\n    } else if (currentSize === RetentionSizeOption.CUSTOM) {\n      setRetentionSize(retentionSizeFactor * retentionSizeTouchspinValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    currentPeriod,\n    currentSize,\n    retentionTimeTouchspinValue,\n    retentionSizeTouchspinValue,\n    retentionTimeFactor,\n    retentionSizeFactor,\n  ]);\n\n  const handleMessageRetention = (_, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radioDay') {\n      setCurrentPeriod(RetentionTimeOption.DAY);\n    } else if (name === 'radioWeek') {\n      setCurrentPeriod(RetentionTimeOption.WEEK);\n    } else if (name === 'radioUnlimitedTime') {\n      setCurrentPeriod(RetentionTimeOption.UNLIMITED);\n    } else if (name === 'radioCustomTime') {\n      setCurrentPeriod(RetentionTimeOption.CUSTOM);\n    }\n\n    if (name === 'radioCustomSize') {\n      setCurrentSize(RetentionSizeOption.CUSTOM);\n    } else if (name === 'radioUnlimitedSize') {\n      setCurrentSize(RetentionSizeOption.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isRetentionTimeSelectOpen) => {\n    setIsRetentionTimeSelectOpen(isRetentionTimeSelectOpen);\n  };\n\n  const onRetentionSizeToggle = (isRetentionSizeSelectOpen) => {\n    setIsRetentionSizeSelectOpen(isRetentionSizeSelectOpen);\n  };\n\n  const onRetentionTimeSelect = (event, selection) => {\n    if (selection === 'days') {\n      setRetentionTimeFactor(RetentionTimeOption.DAY);\n    } else if (selection === 'unlimited') {\n      setRetentionTimeFactor(RetentionTimeOption.UNLIMITED);\n    } else if (selection === 'milliseconds') {\n      setRetentionTimeFactor(RetentionTimeOption.MILLISECOND);\n    } else if (selection === 'seconds') {\n      setRetentionTimeFactor(RetentionTimeOption.SECOND);\n    } else if (selection === 'minutes') {\n      setRetentionTimeFactor(RetentionTimeOption.MINUTE);\n    } else if (selection === 'hours') {\n      setRetentionTimeFactor(RetentionTimeOption.HOUR);\n    }\n    setSelectedTime(selection);\n    setIsRetentionTimeSelectOpen(false);\n  };\n\n  const onRetentionSizeSelect = (event, selection) => {\n    if (selection === 'unlimited') {\n      setRetentionSizeFactor(RetentionSizeOption.UNLIMITED);\n    } else if (selection === 'bytes') {\n      setRetentionSizeFactor(RetentionSizeOption.BYTE);\n    } else if (selection === 'kilobytes') {\n      setRetentionSizeFactor(RetentionSizeOption.KILOBYTE);\n    } else if (selection === 'megabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.MEGABYTE);\n    } else if (selection === 'gigabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.GIGABYTE);\n    } else if (selection === 'terabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.TERABYTE);\n    }\n    setSelectedSize(selection);\n    setIsRetentionSizeSelectOpen(false);\n  };\n\n  const handleRetentionTimePlusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue + 1);\n  };\n\n  const handleRetentionTimeMinusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue - 1);\n  };\n\n  const handleRetentionTimeTouchSpinChange = (event) => {\n    setRetentionTimeTouchspinValue(Number(event.target.value));\n  };\n\n  const handleRetentionSizePlusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue + 1);\n  };\n\n  const handleRetentionSizeMinusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue - 1);\n  };\n\n  const handleRetentionSizeTouchSpinChange = (event) => {\n    setRetentionSizeTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n        <TextContent>\n          <Text component={TextVariants.h2}>\n            {t('topic.message_retention')}\n          </Text>\n          <Text component={TextVariants.p}>\n            {t('topic.message_retention_info')}\n          </Text>\n          <Text component={TextVariants.small}>\n            {t('topic.message_retention_info_note')}\n          </Text>\n        </TextContent>\n\n        <Form onSubmit={preventFormSubmit}>\n          <FormGroup\n            fieldId='form-group-retention-time-in-wizard'\n            label={t('topic.retention_time')}\n            // className='form-group-radio'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.DAY}\n                name='radioDay'\n                onChange={handleMessageRetention}\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value='day'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.WEEK}\n                name='radioWeek'\n                onChange={handleMessageRetention}\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value='week'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.CUSTOM}\n                name='radioCustomTime'\n                onChange={handleMessageRetention}\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionTimeMinusClick}\n                      onPlus={handleRetentionTimePlusClick}\n                      value={retentionTimeTouchspinValue}\n                      onChange={handleRetentionTimeTouchSpinChange}\n                      min={0}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onRetentionTimeToggle}\n                      onSelect={onRetentionTimeSelect}\n                      selections={selectedTime}\n                      isOpen={isRetentionTimeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={0} value='days' isPlaceholder />\n                      <SelectOption key={1} value='seconds' />\n                      <SelectOption key={2} value='minutes' />\n                      <SelectOption key={3} value='hours' />\n                      <SelectOption key={4} value='milliseconds' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.UNLIMITED}\n                name='radioUnlimitedTime'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-3'\n                value='unlimited'\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId='form-group-retention-size-in-wizard'\n            label='Retention size'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.UNLIMITED}\n                name='radioUnlimitedSize'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-6'\n                value='unlimited'\n              />\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.CUSTOM}\n                name='radioCustomSize'\n                onChange={handleMessageRetention}\n                label='Custom size'\n                aria-label='custom input'\n                id='radio-controlled-5'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionSizeMinusClick}\n                      onPlus={handleRetentionSizePlusClick}\n                      value={retentionSizeTouchspinValue}\n                      onChange={handleRetentionSizeTouchSpinChange}\n                      min={0}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onRetentionSizeToggle}\n                      onSelect={onRetentionSizeSelect}\n                      selections={selectedSize}\n                      isOpen={isRetentionSizeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={5} value='bytes' isPlaceholder />\n                      <SelectOption key={6} value='kilobytes' />\n                      <SelectOption key={7} value='megabytes' />\n                      <SelectOption key={8} value='gigabytes' />\n                      <SelectOption key={9} value='terabytes' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n            </Stack>\n          </FormGroup>\n        </Form>\n      </Stack>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Alert,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IStepReplicas {\n  replicationFactor: number;\n  minInSyncReplica: number;\n}\n\nexport const StepReplicas: React.FC<IStepReplicas> = ({\n  replicationFactor,\n  minInSyncReplica,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>{t('common.replicas')}</Text>\n        <Text component={TextVariants.p}>{t('topic.replicas_info')}</Text>\n        <Text component={TextVariants.small}>{t('topic.replicas_detail')}</Text>\n      </TextContent>\n      <Alert variant='info' isInline title={t('topic.replicas_helper_text')} />\n      <TextWithLabelPopover\n        btnAriaLabel={t('common.replicas')}\n        fieldLabel={t('common.replicas')}\n        fieldValue={replicationFactor.toString()}\n        popoverBody={t('topic.replicas_description')}\n        popoverHeader={t('topic.replicas')}\n      />\n\n      <TextWithLabelPopover\n        btnAriaLabel='topic detail min-in-sync replica'\n        fieldLabel='Minimum in-sync replicas'\n        fieldValue={minInSyncReplica.toString()}\n        popoverBody={t('topic.min_insync_replicas_description')}\n        popoverHeader={t('topic.min_insync_replicas')}\n      />\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  WizardContextConsumer,\n  Button,\n  WizardFooter,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IWizardFooter {\n  isLoading: boolean;\n  onValidate: (value: () => void) => void;\n  topicNameValidated: 'error' | 'default';\n  closeWizard: () => void;\n}\nexport const WizardCustomFooter: React.FC<IWizardFooter> = ({\n  isLoading,\n  onValidate,\n  topicNameValidated,\n  closeWizard,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, onNext, onBack }) => {\n          if (activeStep.name == t('topic.topic_name')) {\n            return (\n              <>\n                <Button\n                  variant='primary'\n                  type='submit'\n                  isLoading={isLoading}\n                  onClick={() => onValidate(onNext)}\n                  isDisabled={topicNameValidated == 'default' ? false : true}\n                >\n                  {t('common.next')}\n                </Button>\n                <Button variant='secondary' isDisabled={true}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n\n          if (activeStep.name == 'Replicas') {\n            return (\n              <>\n                <Button variant='primary' type='submit' onClick={onNext}>\n                  {t('common.finish')}\n                </Button>\n                <Button variant='secondary' onClick={onBack}>\n                  {t('common.back')}\n                </Button>\n                <Button variant='link' onClick={closeWizard}>\n                  {t('common.cancel')}\n                </Button>\n              </>\n            );\n          }\n          return (\n            <>\n              <Button variant='primary' type='submit' onClick={onNext}>\n                {t('common.next')}\n              </Button>\n              <Button variant='secondary' onClick={onBack}>\n                {t('common.back')}\n              </Button>\n              <Button variant='link' onClick={closeWizard}>\n                {t('common.cancel')}\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  AlertVariant,\n  Divider,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { StepTopicName } from './StepTopicName';\nimport { StepPartitions } from './StepPartitions';\nimport { StepMessageRetention } from './StepMessageRetention';\nimport { StepReplicas } from './StepReplicas';\nimport './CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from './TopicAdvanceConfig';\nimport { DefaultApi, NewTopicInput } from '../../../../OpenApi/api';\nimport { convertUnits, formatTopicRequest } from '../utils';\nimport { ConfigContext } from '../../../../Contexts';\nimport { Configuration } from '../../../../OpenApi';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nimport { useTranslation } from 'react-i18next';\nimport { getTopic } from '../../../../Services/index';\nimport { WizardCustomFooter } from './WizardCustomFooter';\n\ninterface ICreateTopicWizard {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n}\n\nexport interface IAdvancedTopic {\n  /** unique identifier for a topic within the cluster */\n  name: string;\n  /** ordered list of messages that make up a topic */\n  numPartitions: string;\n  /** the length of time that messages are retained before they are deleted */\n  'retention.ms'?: string;\n  /** unit for retention time */\n  'retention.ms.unit'?: string;\n  /** maximum total size of a partition's log segments before old log segments are deleted */\n  'retention.bytes'?: string;\n  /** unit for retention bytes */\n  'retention.bytes.unit'?: string;\n  /** determines whether messages that reach the retention window are deleted or compacted */\n  'cleanup.policy'?: string;\n}\n\nexport const CreateTopicWizard: React.FC<ICreateTopicWizard> = ({\n  setIsCreateTopic,\n  isSwitchChecked,\n  onCloseCreateTopic,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n  const { addAlert } = useContext(AlertContext);\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [retentionSize, setRetentionSize] = useState(1);\n  const [topicNameInput, setTopicNameInput] = useState('');\n  const [partitionTouchspinValue, setPartitionTouchspinValue] = useState(1);\n  const [replicationFactorTouchspinValue] = useState(3);\n  const [minInSyncReplicaTouchspinValue] = useState(2);\n  const [topicNameValidated, setTopicNameValidated] = useState<\n    'error' | 'default'\n  >('default');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [invalidText, setInvalidText] = useState<string>('');\n  const [topicData, setTopicData] = useState<IAdvancedTopic>({\n    name: '',\n    numPartitions: '1',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '-1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': 'delete',\n  });\n\n  const [currentPeriod, setCurrentPeriod] = React.useState<string | number>(\n    604800000\n  );\n  const [currentSize, setCurrentSize] = React.useState<string | number>(-1);\n\n  const closeWizard = () => {\n    if (setIsCreateTopic) {\n      setIsCreateTopic(false);\n    }\n  };\n\n  const saveTopic = () => {\n    // Object may change based on schema\n\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(topicData))\n      : {\n          name: topicNameInput,\n          settings: {\n            numPartitions: partitionTouchspinValue,\n            config: [\n              {\n                key: 'retention.ms',\n                value: msgRetentionValue.toString(),\n              },\n              { key: 'retention.bytes', value: retentionSize.toString() },\n            ],\n          },\n        };\n\n    new DefaultApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then((res) => {\n        if (res.status === 200) {\n          addAlert(t('topic.topic_successfully_created'), AlertVariant.success);\n        }\n        closeWizard();\n      })\n      .catch((err) => {\n        addAlert(err.response.data.error_message, AlertVariant.danger);\n        closeWizard();\n      });\n  };\n\n  const fetchTopic = async (topicName, onNext) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      if (topicRes) {\n        setInvalidText(t('topic.already_exists', { name: topicName }));\n        setTopicNameValidated('error');\n        setIsLoading(false);\n      }\n    } catch (error) {\n      if (error.response.status == '404') {\n        setTopicNameValidated('default');\n        setIsLoading(false);\n        onNext();\n      }\n    }\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: t('topic.topic_name'),\n      enableNext:\n        topicNameInput.trim() !== '' && topicNameValidated === 'default',\n      component: (\n        <StepTopicName\n          topicNameInput={topicNameInput}\n          setTopicNameInput={setTopicNameInput}\n          topicNameValidated={topicNameValidated}\n          setTopicNameValidated={setTopicNameValidated}\n          invalidText={invalidText}\n          setInvalidText={setInvalidText}\n        />\n      ),\n    },\n    {\n      name: t('common.partitions'),\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepPartitions\n          partitionTouchspinValue={partitionTouchspinValue}\n          setPartitionTouchspinValue={setPartitionTouchspinValue}\n        />\n      ),\n    },\n    {\n      name: t('topic.message_retention'),\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepMessageRetention\n          setMsgRetentionValue={setMsgRetentionValue}\n          currentPeriod={currentPeriod}\n          currentSize={currentSize}\n          setCurrentPeriod={setCurrentPeriod}\n          setCurrentSize={setCurrentSize}\n          setRetentionSize={setRetentionSize}\n        />\n      ),\n    },\n    {\n      name: t('common.replicas'),\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepReplicas\n          replicationFactor={replicationFactorTouchspinValue}\n          minInSyncReplica={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: t('common.finish'),\n    },\n  ];\n\n  const title = t('topic.wizard_title');\n\n  const onValidate = (onNext) => {\n    if (topicNameInput.length < 1) {\n      setInvalidText(t('topic.required'));\n      setTopicNameValidated('error');\n    } else {\n      setIsLoading(true);\n      fetchTopic(topicNameInput, onNext);\n    }\n  };\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <Divider className='kafka-ui--divider--FlexShrink' />\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={onCloseCreateTopic}\n              topicData={topicData}\n              setTopicData={setTopicData}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n            data-testid='topicBasicCreate-Wizard'\n            footer={\n              <WizardCustomFooter\n                isLoading={isLoading}\n                onValidate={onValidate}\n                topicNameValidated={topicNameValidated}\n                closeWizard={closeWizard}\n              />\n            }\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { CreateTopichead } from './Components/CreateTopicHead';\nimport { CreateTopicWizard } from './Components/CreateTopicWizard';\n\ninterface ICreateTopicPageProps {\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n}\n\nexport const CreateTopicPage: React.FC<ICreateTopicPageProps> = ({\n  setIsCreateTopic,\n  kafkaInstanceLink,\n  kafkaName,\n  kafkaPageLink,\n  onCloseCreateTopic,\n}) => {\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n        kafkaName={kafkaName}\n        kafkaInstanceLink={kafkaInstanceLink}\n        kafkaPageLink={kafkaPageLink}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        setIsCreateTopic={setIsCreateTopic}\n        onCloseCreateTopic={onCloseCreateTopic}\n      />\n    </>\n  );\n};\n"],"sourceRoot":""}