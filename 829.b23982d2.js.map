{"version":3,"file":"829.b23982d2.js","mappings":"wYAwBaA,GAAe,IAAAC,oBAE1BC,GAEWC,EAAW,WACtB,OACE,IAAAC,YAAWJ,IACV,CACCK,UAAWC,SAASC,UACpBC,UAAWF,SAASC,YAKpBE,EAA6C,SAAC,G,IAClDC,EAAW,cACXL,EAAS,YAYT,QAAoBH,IAAhBQ,EACF,OAAO,qCAGT,IAbEC,EAaIC,GAbJD,EAa+BD,EAAYC,UATpC,IAAuBA,IAUhC,OACE,kBAAC,aAAc,CAACE,SAAU,kBAAC,IAAU,OACnC,kBAACD,EAAc,GACbP,UAAWA,EACXS,GAAG,cACCJ,EAAYK,eAMXC,EAAyC,SAAC,G,IAAEC,EAAQ,WACzD,GAAgC,IAAAC,YAA/BR,EAAW,KAAES,EAAc,KAI5BJ,EAAqC,CACzCV,UAAW,WACTc,OAAejB,IAGjBM,UAAW,SAACG,EAAWI,GACrBI,EAAe,CACbR,UAAS,EACTI,WAAU,MAKhB,OACE,oCACE,kBAACN,EAAK,CAACC,YAAaA,EAAaL,UAAWU,EAAWV,YACvD,kBAACL,EAAaoB,SAAQ,CAACC,MAAON,GAC3BE,M,+CCjFGK,E,qBAAZ,SAAYA,GACV,iCACA,iDACA,2CACA,2DAJF,CAAYA,IAAAA,EAAS,KAsBd,IAAMC,IAAsB,MAKhCD,EAAUE,aAAc,UACvB,WAAM,mFAER,EAACF,EAAUG,kBAAmB,UAC5B,WACE,yCAIJ,EAACH,EAAUI,qBAAsB,UAC/B,WACE,mFAMJ,EAACJ,EAAUK,0BAA2B,UACpC,WACE,mF,sRC1COC,EAAuD,SAAC,G,IACnEC,EAAa,gBACbC,EAAY,eACS,OACrB,kBAAC,EAAAC,SAAQ,KAAKF,GACZ,kBAAC,EAAAG,QAAO,KAAKF,O,+CCXJG,E,MAAgB,sBAC3B/B,I,uFCLK,IAAMgC,EAAY,CACvBC,GAAI,CACFC,Y,8ufAEFC,GAAI,CACFD,Y,mfCAEE,EAAY,qBAElBA,EAEGC,IAAI,EAAAC,kBACJD,IAAI,KAGJE,KAAK,CACJC,UAAW,CACTC,MAAO,CAAC,UAAW,aACnBC,OAAQ,IAEVC,YAAa,KACbC,OAAO,EAEPC,cAAe,CACbC,aAAa,GAEfd,UAAS,IAGb","sources":["webpack://kafka-ui/./src/components/KafkaModal/ModalContext.tsx","webpack://kafka-ui/./src/components/KafkaModal/ModalTypes.ts","webpack://kafka-ui/./src/components/MASLoading/MASLoading.tsx","webpack://kafka-ui/./src/contexts/Api/Context.tsx","webpack://kafka-ui/./src/i18n/locale/index.ts","webpack://kafka-ui/./src/i18n/index.ts"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { MASLoading } from '@app/components';\nimport {\n  BaseModalProps,\n  ModalType,\n  ModalTypeComponentsMap,\n  ModalTypePropsMap,\n} from '@app/components/KafkaModal/ModalTypes';\n\nexport type ModalContextProps<T extends ModalType> = {\n  showModal: (modalType: T, modalProps?: ModalTypePropsMap[T]) => void;\n  hideModal: () => void;\n};\n\ntype ActiveModalProps<T extends ModalType> = {\n  modalType: T;\n  modalProps: ModalTypePropsMap[T];\n};\n\ntype ModalProps = {\n  activeModal?: ActiveModalProps<ModalType>;\n  hideModal: () => void;\n};\n\nexport const ModalContext = createContext<\n  ModalContextProps<ModalType> | undefined\n>(undefined);\n\nexport const useModal = <T extends ModalType>(): ModalContextProps<T> => {\n  return (\n    useContext(ModalContext) ||\n    ({\n      hideModal: Function.prototype,\n      showModal: Function.prototype,\n    } as ModalContextProps<T>)\n  );\n};\n\nconst Modal: React.FunctionComponent<ModalProps> = ({\n  activeModal,\n  hideModal,\n}) => {\n  const loadModal = <T extends ModalType>(\n    modalType: T\n  ): React.LazyExoticComponent<\n    React.FunctionComponent<ModalTypePropsMap[T] & BaseModalProps>\n  > => {\n    return ModalTypeComponentsMap[modalType] as React.LazyExoticComponent<\n      React.FunctionComponent<ModalTypePropsMap[T] & BaseModalProps>\n    >;\n  };\n\n  if (activeModal === undefined) {\n    return <></>;\n  }\n\n  const ModalComponent = loadModal(activeModal.modalType);\n  return (\n    <React.Suspense fallback={<MASLoading />}>\n      <ModalComponent\n        hideModal={hideModal}\n        id='root-modal'\n        {...activeModal.modalProps}\n      />\n    </React.Suspense>\n  );\n};\n\nexport const ModalProvider: React.FunctionComponent = ({ children }) => {\n  const [activeModal, setActiveModal] = useState<\n    ActiveModalProps<ModalType> | undefined\n  >();\n\n  const modalProps: ModalContextProps<any> = {\n    hideModal: () => {\n      setActiveModal(undefined);\n    },\n\n    showModal: (modalType, modalProps) => {\n      setActiveModal({\n        modalType,\n        modalProps,\n      });\n    },\n  };\n\n  return (\n    <>\n      <Modal activeModal={activeModal} hideModal={modalProps.hideModal} />\n      <ModalContext.Provider value={modalProps}>\n        {children}\n      </ModalContext.Provider>\n    </>\n  );\n};\n","import {\n  DeleteTopicProps,\n  PartitionsChangeProps,\n} from '@app/modules/Topics/dialogs';\nimport { DeleteConsumerGroupProps } from '@app/modules/ConsumerGroups/dialogs';\nimport React from 'react';\nimport { ConsumerGroupResetOffsetProps } from '@app/modules/ConsumerGroups/dialogs/ConsumerGroupResetOffset';\n\n// The available types of modal\nexport enum ModalType {\n  DeleteTopic,\n  DeleteConsumerGroup,\n  UpdatePartitions,\n  ConsumerGroupResetOffset\n}\n\n// A map of modal types to their props\nexport interface ModalTypePropsMap {\n  [ModalType.DeleteTopic]: DeleteTopicProps;\n  [ModalType.UpdatePartitions]: PartitionsChangeProps;\n  [ModalType.DeleteConsumerGroup]: DeleteConsumerGroupProps;\n  [ModalType.ConsumerGroupResetOffset]: ConsumerGroupResetOffsetProps;\n}\n\n// Properties available to all Modal components\nexport type BaseModalProps = {\n  id: string;\n  hideModal: () => void;\n};\n\n// A map of modal components to their lazy loaded implementations\nexport const ModalTypeComponentsMap: {\n  [T in ModalType]: React.LazyExoticComponent<\n    React.FunctionComponent<ModalTypePropsMap[T] & BaseModalProps>\n  >;\n} = {\n  [ModalType.DeleteTopic]: React.lazy(\n    () => import('@app/modules/Topics/dialogs/DeleteTopic/DeleteTopic')\n  ) as React.LazyExoticComponent<React.FunctionComponent<DeleteTopicProps>>,\n  [ModalType.UpdatePartitions]: React.lazy(\n    () =>\n      import('@app/modules/Topics/dialogs/PartitionsChange/PartitionsChange')\n  ) as React.LazyExoticComponent<\n    React.FunctionComponent<PartitionsChangeProps>\n  >,\n  [ModalType.DeleteConsumerGroup]: React.lazy(\n    () =>\n      import(\n        '@app/modules/ConsumerGroups/dialogs/DeleteConsumerGroup/DeleteConsumerGroup'\n      )\n  ) as React.LazyExoticComponent<\n    React.FunctionComponent<DeleteConsumerGroupProps>\n  >,\n  [ModalType.ConsumerGroupResetOffset]: React.lazy(\n    () =>\n      import(\n        '@app/modules/ConsumerGroups/dialogs/ConsumerGroupResetOffset/ConsumerGroupResetOffset'\n      )\n  ) as React.LazyExoticComponent<\n    React.FunctionComponent<ConsumerGroupResetOffsetProps>\n  >,\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  BullseyeProps,\n  Spinner,\n  SpinnerProps,\n} from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React from 'react';\n\nexport type IConfiguration = {\n  basePath: string;\n  getToken: () => Promise<string>;\n};\n\nexport const ConfigContext = React.createContext<IConfiguration | undefined>(\n  undefined\n);\n","import en from './en.json';\nimport de from './de.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst kafkai18n = i18n.createInstance();\n\nkafkai18n\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    detection: {\n      order: ['htmlTag', 'navigator'],\n      caches: [],\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    resources,\n  });\n\nexport default kafkai18n;\n"],"names":["ModalContext","createContext","undefined","useModal","useContext","hideModal","Function","prototype","showModal","Modal","activeModal","modalType","ModalComponent","fallback","id","modalProps","ModalProvider","children","useState","setActiveModal","Provider","value","ModalType","ModalTypeComponentsMap","DeleteTopic","UpdatePartitions","DeleteConsumerGroup","ConsumerGroupResetOffset","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","ConfigContext","resources","en","translation","de","kafkai18n","use","initReactI18next","init","detection","order","caches","fallbackLng","debug","interpolation","escapeValue"],"sourceRoot":""}