{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicHead.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepTopicName.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepPartitions.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepMessageRetention.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepReplicas.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicWizard.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/CreateTopicPage.tsx"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","kafkaName","kafkaPageLink","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","StepTopicName","topicNameInput","setTopicNameInput","topicNameValidated","setTopicNameValidated","useState","invalidText","setInvalidText","t","useTranslation","Stack","hasGutter","TextContent","Text","component","TextVariants","Form","onSubmit","event","preventDefault","FormGroup","fieldId","helperText","helperTextInvalid","validated","isRequired","TextInput","type","name","value","regexpInvalid","RegExp","length","test","validationCheck","placeholder","StepPartitions","partitionTouchspinValue","setPartitionTouchspinValue","NumberInput","onPlus","onMinus","inputName","Number","target","widthChars","min","StepMessageRetention","RetentionTimeOption","RetentionSizeOption","setMsgRetentionValue","currentPeriod","currentSize","setCurrentPeriod","setCurrentSize","setRetentionSize","retentionTimeTouchspinValue","setRetentionTimeTouchspinValue","retentionSizeTouchspinValue","setRetentionSizeTouchspinValue","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","selectedTime","setSelectedTime","selectedSize","setSelectedSize","DAY","retentionTimeFactor","setRetentionTimeFactor","BYTE","retentionSizeFactor","setRetentionSizeFactor","useEffect","WEEK","UNLIMITED","CUSTOM","handleMessageRetention","_","Radio","Flex","FlexItem","Select","SelectVariant","onToggle","onSelect","selection","MILLISECOND","SECOND","MINUTE","HOUR","selections","isOpen","SelectOption","key","isPlaceholder","KILOBYTE","MEGABYTE","GIGABYTE","TERABYTE","StepReplicas","replicationFactor","minInSyncReplica","Alert","isInline","title","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","toString","popoverBody","popoverHeader","setIsCreateTopic","onCloseCreateTopic","config","useContext","addAlert","msgRetentionValue","retentionSize","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","numPartitions","topicData","setTopicData","closeWizard","saveTopic","topic","settings","basePath","accessToken","getToken","createTopic","then","res","status","AlertVariant","catch","err","response","data","error_message","steps","enableNext","trim","canJumpTo","nextButtonText","Divider","TopicAdvanceConfig","isCreate","handleCancel","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","CreateTopicPage","kafkaInstanceLink"],"mappings":"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","file":"410.1692b1a3.bundle.js","sourcesContent":["import {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nexport interface ICreateTopicProps {\n  isSwitchChecked: boolean;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsSwitchChecked: (value: boolean) => void;\n}\n\nexport const CreateTopichead: React.FC<ICreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n  kafkaName,\n  kafkaPageLink\n}) => {\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n        Kafka Instances\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName ? kafkaName : 'Kafka Instance Name'}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        Create topic\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          Create topic\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label='Show all available options'\n          labelOff='Show all available options'\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Form,\n  FormGroup,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IStepTopicName {\n  topicNameInput: string;\n  setTopicNameInput: (value: string) => void;\n  topicNameValidated: 'error' | 'default';\n  setTopicNameValidated: (value: 'error' | 'default') => void;\n}\n\nexport const StepTopicName: React.FC<IStepTopicName> = ({\n  topicNameInput,\n  setTopicNameInput,\n  topicNameValidated,\n  setTopicNameValidated,\n}) => {\n  const [invalidText, setInvalidText] = useState('This is a required field');\n  const { t } = useTranslation();\n\n  const validationCheck = (topicNameInput) => {\n    const regexpInvalid = new RegExp('^[0-9A-Za-z_-]+$');\n    if (topicNameInput.length && !regexpInvalid.test(topicNameInput)) {\n      setInvalidText(\n        'Invalid input. Only letters (Aa-Zz) , numbers \" _ \" and \" - \" are accepted.'\n      );\n      setTopicNameValidated('error');\n    } else if (topicNameInput.length < 1) {\n      setInvalidText('This is a required field');\n      setTopicNameValidated('error');\n    } else if (topicNameInput.length > 249) {\n      setTopicNameValidated('error');\n      setInvalidText('Topic name cannot exceed 249 characters');\n    } else setTopicNameValidated('default');\n  };\n\n  const handleTopicNameChange = (topicNameInput) => {\n    validationCheck(topicNameInput);\n    setTopicNameInput(topicNameInput);\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Topic name</Text>\n        <Text component={TextVariants.p}>\n          Unique name used to recognize your topic\n        </Text>\n        <Text component={TextVariants.small}>\n          The topic name is also used by your producers and consumers as part of\n          the connection information, so make it something easy to recognize.\n        </Text>\n      </TextContent>\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          label='Topic name'\n          fieldId='step-topic-name-form'\n          helperText='Must be letters (Aa-Zz), numbers, underscores( _ ), or hyphens ( - ).'\n          helperTextInvalid={invalidText}\n          validated={topicNameValidated}\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            aria-describedby='step-topic-name-helper'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder={t('createTopic.enterName')}\n            validated={topicNameValidated}\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepPartitions {\n  setPartitionTouchspinValue: (value: number) => void;\n  partitionTouchspinValue: number;\n}\n\nexport const StepPartitions: React.FC<IStepPartitions> = ({\n  partitionTouchspinValue,\n  setPartitionTouchspinValue,\n}) => {\n  const handleOnPlus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue + 1);\n  };\n  const handleOnMinus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue - 1);\n  };\n  const handlePartitionTouchspinChange = (event) => {\n    setPartitionTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Partitions</Text>\n        <Text component={TextVariants.p}>An ordered list of messages</Text>\n        <Text component={TextVariants.small}>\n          One or more partitions make up a topic. Partitions are distributed\n          across the brokers to increase the scalability of your topic. You can\n          also use them to distribute messages across the members of the\n          consumer group.\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText='One partition is sufficient for getting started, but production systems often have more.'\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={partitionTouchspinValue}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n            min={1}\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepMessageRetention {\n  setMsgRetentionValue: (value: number) => void;\n  currentPeriod: string | number;\n  currentSize: string | number;\n  setCurrentPeriod: (value: string | number) => void;\n  setCurrentSize: (value: string | number) => void;\n  setRetentionSize: (value: number) => void;\n}\n\nexport const StepMessageRetention: React.FC<IStepMessageRetention> = ({\n  setMsgRetentionValue,\n  currentPeriod,\n  currentSize,\n  setCurrentPeriod,\n  setCurrentSize,\n  setRetentionSize,\n}) => {\n  enum RetentionTimeOption {\n    MILLISECOND = 1,\n    SECOND = 1000,\n    MINUTE = 60000,\n    HOUR = 3600000,\n    DAY = 86400000,\n    WEEK = 604800000,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n\n  enum RetentionSizeOption {\n    BYTE = 1,\n    KILOBYTE = 1000,\n    MEGABYTE = 1000000,\n    GIGABYTE = 1000000000,\n    TERABYTE = 1000000000000,\n    CUSTOM = 'custom',\n    UNLIMITED = -1,\n  }\n  const [\n    retentionTimeTouchspinValue,\n    setRetentionTimeTouchspinValue,\n  ] = useState<number>(7);\n  const [\n    retentionSizeTouchspinValue,\n    setRetentionSizeTouchspinValue,\n  ] = useState<number>(1);\n  const [\n    isRetentionTimeSelectOpen,\n    setIsRetentionTimeSelectOpen,\n  ] = useState<boolean>(false);\n  const [\n    isRetentionSizeSelectOpen,\n    setIsRetentionSizeSelectOpen,\n  ] = useState<boolean>(false);\n  const [selectedTime, setSelectedTime] = useState<boolean>(false);\n  const [selectedSize, setSelectedSize] = useState<boolean>(false);\n  const [retentionTimeFactor, setRetentionTimeFactor] = useState<number>(\n    RetentionTimeOption.DAY\n  );\n  const [retentionSizeFactor, setRetentionSizeFactor] = useState<number>(\n    RetentionSizeOption.BYTE\n  );\n\n  useEffect(() => {\n    if (currentPeriod === RetentionTimeOption.DAY) {\n      setMsgRetentionValue(RetentionTimeOption.DAY);\n    } else if (currentPeriod === RetentionTimeOption.WEEK) {\n      setMsgRetentionValue(RetentionTimeOption.WEEK);\n    } else if (currentPeriod === RetentionTimeOption.UNLIMITED) {\n      setMsgRetentionValue(RetentionTimeOption.UNLIMITED);\n    } else if (currentPeriod === RetentionTimeOption.CUSTOM) {\n      setMsgRetentionValue(retentionTimeFactor * retentionTimeTouchspinValue);\n    }\n\n    if (currentSize === RetentionSizeOption.UNLIMITED) {\n      setRetentionSize(RetentionSizeOption.UNLIMITED);\n    } else if (currentSize === RetentionSizeOption.CUSTOM) {\n      setRetentionSize(retentionSizeFactor * retentionSizeTouchspinValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    currentPeriod,\n    currentSize,\n    retentionTimeTouchspinValue,\n    retentionSizeTouchspinValue,\n    retentionTimeFactor,\n    retentionSizeFactor,\n  ]);\n\n  const handleMessageRetention = (_, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radioDay') {\n      setCurrentPeriod(RetentionTimeOption.DAY);\n    } else if (name === 'radioWeek') {\n      setCurrentPeriod(RetentionTimeOption.WEEK);\n    } else if (name === 'radioUnlimitedTime') {\n      setCurrentPeriod(RetentionTimeOption.UNLIMITED);\n    } else if (name === 'radioCustomTime') {\n      setCurrentPeriod(RetentionTimeOption.CUSTOM);\n    }\n\n    if (name === 'radioCustomSize') {\n      setCurrentSize(RetentionSizeOption.CUSTOM);\n    } else if (name === 'radioUnlimitedSize') {\n      setCurrentSize(RetentionSizeOption.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isRetentionTimeSelectOpen) => {\n    setIsRetentionTimeSelectOpen(isRetentionTimeSelectOpen);\n  };\n\n  const onRetentionSizeToggle = (isRetentionSizeSelectOpen) => {\n    setIsRetentionSizeSelectOpen(isRetentionSizeSelectOpen);\n  };\n\n  const onRetentionTimeSelect = (event, selection) => {\n    if (selection === 'days') {\n      setRetentionTimeFactor(RetentionTimeOption.DAY);\n    } else if (selection === 'unlimited') {\n      setRetentionTimeFactor(RetentionTimeOption.UNLIMITED);\n    } else if (selection === 'milliseconds') {\n      setRetentionTimeFactor(RetentionTimeOption.MILLISECOND);\n    } else if (selection === 'seconds') {\n      setRetentionTimeFactor(RetentionTimeOption.SECOND);\n    } else if (selection === 'minutes') {\n      setRetentionTimeFactor(RetentionTimeOption.MINUTE);\n    } else if (selection === 'hours') {\n      setRetentionTimeFactor(RetentionTimeOption.HOUR);\n    }\n    setSelectedTime(selection);\n    setIsRetentionTimeSelectOpen(false);\n  };\n\n  const onRetentionSizeSelect = (event, selection) => {\n    if (selection === 'unlimited') {\n      setRetentionSizeFactor(RetentionSizeOption.UNLIMITED);\n    } else if (selection === 'bytes') {\n      setRetentionSizeFactor(RetentionSizeOption.BYTE);\n    } else if (selection === 'kilobytes') {\n      setRetentionSizeFactor(RetentionSizeOption.KILOBYTE);\n    } else if (selection === 'megabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.MEGABYTE);\n    } else if (selection === 'gigabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.GIGABYTE);\n    } else if (selection === 'terabytes') {\n      setRetentionSizeFactor(RetentionSizeOption.TERABYTE);\n    }\n    setSelectedSize(selection);\n    setIsRetentionSizeSelectOpen(false);\n  };\n\n  const handleRetentionTimePlusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue + 1);\n  };\n\n  const handleRetentionTimeMinusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue - 1);\n  };\n\n  const handleRetentionTimeTouchSpinChange = (event) => {\n    setRetentionTimeTouchspinValue(Number(event.target.value));\n  };\n\n  const handleRetentionSizePlusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue + 1);\n  };\n\n  const handleRetentionSizeMinusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue - 1);\n  };\n\n  const handleRetentionSizeTouchSpinChange = (event) => {\n    setRetentionSizeTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n        <TextContent>\n          <Text component={TextVariants.h2}>Message retention</Text>\n          <Text component={TextVariants.p}>\n            How long messages are retained and the maximum total size of all log\n            segments in a partition before they are deleted to free up space\n          </Text>\n          <Text component={TextVariants.small}>\n            Messages that aren't read by a consumer within this time will be\n            missed. By default, a limit is only applied to retention time.\n          </Text>\n        </TextContent>\n\n        <Form onSubmit={preventFormSubmit}>\n          <FormGroup\n            fieldId='form-group-retention-time-in-wizard'\n            label='Retention time'\n            // className='form-group-radio'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.DAY}\n                name='radioDay'\n                onChange={handleMessageRetention}\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value='day'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.WEEK}\n                name='radioWeek'\n                onChange={handleMessageRetention}\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value='week'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.CUSTOM}\n                name='radioCustomTime'\n                onChange={handleMessageRetention}\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionTimeMinusClick}\n                      onPlus={handleRetentionTimePlusClick}\n                      value={retentionTimeTouchspinValue}\n                      onChange={handleRetentionTimeTouchSpinChange}\n                      min={0}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onRetentionTimeToggle}\n                      onSelect={onRetentionTimeSelect}\n                      selections={selectedTime}\n                      isOpen={isRetentionTimeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={0} value='days' isPlaceholder />\n                      <SelectOption key={1} value='seconds' />\n                      <SelectOption key={2} value='minutes' />\n                      <SelectOption key={3} value='hours' />\n                      <SelectOption key={4} value='milliseconds' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.UNLIMITED}\n                name='radioUnlimitedTime'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-3'\n                value='unlimited'\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId='form-group-retention-size-in-wizard'\n            label='Retention size'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.UNLIMITED}\n                name='radioUnlimitedSize'\n                onChange={handleMessageRetention}\n                label='Unlimited'\n                aria-label='Unlimited'\n                id='radio-controlled-6'\n                value='unlimited'\n              />\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.CUSTOM}\n                name='radioCustomSize'\n                onChange={handleMessageRetention}\n                label='Custom size'\n                aria-label='custom input'\n                id='radio-controlled-5'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionSizeMinusClick}\n                      onPlus={handleRetentionSizePlusClick}\n                      value={retentionSizeTouchspinValue}\n                      onChange={handleRetentionSizeTouchSpinChange}\n                      min={0}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onRetentionSizeToggle}\n                      onSelect={onRetentionSizeSelect}\n                      selections={selectedSize}\n                      isOpen={isRetentionSizeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={5} value='bytes' isPlaceholder />\n                      <SelectOption key={6} value='kilobytes' />\n                      <SelectOption key={7} value='megabytes' />\n                      <SelectOption key={8} value='gigabytes' />\n                      <SelectOption key={9} value='terabytes' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n            </Stack>\n          </FormGroup>\n        </Form>\n      </Stack>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Alert,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IStepReplicas {\n  replicationFactor: number;\n  minInSyncReplica: number;\n}\n\nexport const StepReplicas: React.FC<IStepReplicas> = ({\n  replicationFactor,\n  minInSyncReplica,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Replicas</Text>\n        <Text component={TextVariants.p}>\n          How many copies of a topic will be made for high availability.\n        </Text>\n        <Text component={TextVariants.small}>\n          The partitions of each topic can be replicated across a configurable\n          number of brokers.\n        </Text>\n      </TextContent>\n      <Alert\n        variant='info'\n        isInline\n        title='Streams for Apache Kafka only supports 3 replicas and a minimum in-sync replica factor of 2.'\n      />\n      <TextWithLabelPopover\n        btnAriaLabel='topic detail replicas'\n        fieldLabel='Replicas'\n        fieldValue={replicationFactor.toString()}\n        popoverBody={t('createTopic.replicasLabelBody')}\n        popoverHeader={t('createTopic.replicasLabelHead')}\n      />\n\n      <TextWithLabelPopover\n        btnAriaLabel='topic detail min-in-sync replica'\n        fieldLabel='Minimum in-sync replicas'\n        fieldValue={minInSyncReplica.toString()}\n        popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n        popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n      />\n    </Stack>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  AlertVariant,\n  Divider,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { StepTopicName } from './StepTopicName';\nimport { StepPartitions } from './StepPartitions';\nimport { StepMessageRetention } from './StepMessageRetention';\nimport { StepReplicas } from './StepReplicas';\nimport './CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from './TopicAdvanceConfig';\nimport { DefaultApi, NewTopicInput } from '../../../../OpenApi/api';\nimport { convertUnits, formatTopicRequest } from '../utils';\nimport { ConfigContext } from '../../../../Contexts';\nimport { Configuration } from '../../../../OpenApi';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\n\ninterface ICreateTopicWizard {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n}\n\nexport interface IAdvancedTopic {\n  /** unique identifier for a topic within the cluster */\n  name: string;\n  /** ordered list of messages that make up a topic */\n  numPartitions: string;\n  /** the length of time that messages are retained before they are deleted */\n  'retention.ms'?: string;\n  /** unit for retention time */\n  'retention.ms.unit'?: string;\n  /** maximum total size of a partition's log segments before old log segments are deleted */\n  'retention.bytes'?: string;\n  /** unit for retention bytes */\n  'retention.bytes.unit'?: string;\n\n  'cleanup.policy'?: string;\n}\n\nexport const CreateTopicWizard: React.FC<ICreateTopicWizard> = ({\n  setIsCreateTopic,\n  isSwitchChecked,\n  onCloseCreateTopic\n}) => {\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [retentionSize, setRetentionSize] = useState(1);\n  const [topicNameInput, setTopicNameInput] = useState('');\n  const [partitionTouchspinValue, setPartitionTouchspinValue] = useState(1);\n  const [replicationFactorTouchspinValue] = useState(3);\n  const [minInSyncReplicaTouchspinValue] = useState(2);\n  const [topicNameValidated, setTopicNameValidated] = useState<\n    'error' | 'default'\n  >('default');\n  const [topicData, setTopicData] = useState<IAdvancedTopic>({\n    name: '',\n    numPartitions: '1',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '-1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': 'delete',\n  });\n\n  const [currentPeriod, setCurrentPeriod] = React.useState<string | number>(\n    86400000\n  );\n  const [currentSize, setCurrentSize] = React.useState<string | number>(-1);\n\n  const closeWizard = () => {\n    if (setIsCreateTopic) {\n      setIsCreateTopic(false);\n    }\n  };\n\n  const saveTopic = () => {\n    // Object may change based on schema\n\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(topicData))\n      : {\n        name: topicNameInput,\n        settings: {\n          numPartitions: partitionTouchspinValue,\n          config: [\n            {\n              key: 'retention.ms',\n              value: msgRetentionValue.toString(),\n            },\n            { key: 'retention.bytes', value: retentionSize.toString() },\n          ],\n        },\n      };\n\n    new DefaultApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then((res) => {\n        if (res.status === 200) {\n          addAlert(\n            'The topic was successfully created in the Kafka instance',\n            AlertVariant.success\n          );\n        }\n        closeWizard();\n      })\n      .catch((err) => {\n        addAlert(err.response.data.error_message, AlertVariant.danger);\n        closeWizard();\n      });\n  };\n\n\n  const steps: WizardStep[] = [\n    {\n      name: 'Topic name',\n      enableNext:\n        topicNameInput.trim() !== '' && topicNameValidated === 'default',\n      component: (\n        <StepTopicName\n          topicNameInput={topicNameInput}\n          setTopicNameInput={setTopicNameInput}\n          topicNameValidated={topicNameValidated}\n          setTopicNameValidated={setTopicNameValidated}\n        />\n      ),\n    },\n    {\n      name: 'Partitions',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepPartitions\n          partitionTouchspinValue={partitionTouchspinValue}\n          setPartitionTouchspinValue={setPartitionTouchspinValue}\n        />\n      ),\n    },\n    {\n      name: 'Message retention',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepMessageRetention\n          setMsgRetentionValue={setMsgRetentionValue}\n          currentPeriod={currentPeriod}\n          currentSize={currentSize}\n          setCurrentPeriod={setCurrentPeriod}\n          setCurrentSize={setCurrentSize}\n          setRetentionSize={setRetentionSize}\n        />\n      ),\n    },\n    {\n      name: 'Replicas',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepReplicas\n          replicationFactor={replicationFactorTouchspinValue}\n          minInSyncReplica={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: 'Finish',\n    },\n  ];\n\n  const title = 'Create topics wizard';\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <Divider className='kafka-ui--divider--FlexShrink' />\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={onCloseCreateTopic}\n              topicData={topicData}\n              setTopicData={setTopicData}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n            data-testid='topicBasicCreate-Wizard'\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { CreateTopichead } from './Components/CreateTopicHead';\nimport { CreateTopicWizard } from './Components/CreateTopicWizard';\n\ninterface ICreateTopicPageProps {\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void\n}\n\nexport const CreateTopicPage: React.FC<ICreateTopicPageProps> = ({\n  setIsCreateTopic,\n  kafkaInstanceLink,\n  kafkaName,\n  kafkaPageLink,\n  onCloseCreateTopic\n}) => {\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n        kafkaName={kafkaName}\n        kafkaInstanceLink={kafkaInstanceLink}\n        kafkaPageLink={kafkaPageLink}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        setIsCreateTopic={setIsCreateTopic}\n        onCloseCreateTopic={onCloseCreateTopic}\n      />\n    </>\n  );\n};\n"],"sourceRoot":""}