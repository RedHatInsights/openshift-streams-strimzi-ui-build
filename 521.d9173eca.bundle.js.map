{"version":3,"sources":["webpack://kafka-ui/./src/contexts/Alert/Context.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx","webpack://kafka-ui/./src/utils/axios.ts"],"names":["AlertContext","createContext","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onCancelUpdateTopic","onSaveTopic","onError","config","useContext","addAlert","initialState","name","numPartitions","useState","topicData","setTopicData","isLoading","setIsLoading","useEffect","topicRes","forEach","configItem","key","value","partitions","length","toString","response","data","code","error_message","status","AlertVariant","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","configEntries","newConfig","push","toLowerCase","topicSettings","then","handleCancel","isLoadingSave","UpdateTopicPage","onDeleteTopic","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","title","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","getToken","apiBasePath","dispatchKafkaAction","onConnectToRoute","alertContext","BrowserRouter","I18nextProvider","i18n","basePath","RootModal","isAxiosError","error","undefined"],"mappings":"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","file":"521.d9173eca.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { ServerAlertGroup } from \"@app/components/ServerAlertGroup\";\nimport { AlertType, AlertContextProps, TimeOut } from \"./Alert.types\";\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport \"../TopicDetailView/TopicDetailView.css\";\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || \"#\"}>\n            {t(\"common.kafka_instance\")}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || \"#\"}>\n            {kafkaName ? kafkaName : t(\"common.kafka_instance_name\")}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport {\n  TopicAdvanceConfig,\n  IAdvancedTopic,\n} from \"@app/modules/Topics/components\";\nimport { getTopic, updateTopicModel } from \"@app/services\";\nimport { ConfigEntry, TopicSettings } from \"@app/openapi/api\";\nimport { AlertContext, ConfigContext } from \"@app/contexts\";\nimport { convertUnits } from \"@app/modules/Topics/utils\";\nimport { isAxiosError } from \"@app/utils/axios\";\nimport \"../CreateTopicWizard/CreateTopicWizard.css\";\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onCancelUpdateTopic,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n  const initialState = {\n    name: topicName,\n    numPartitions: \"\",\n    \"retention.ms\": \"\",\n    \"retention.ms.unit\": \"milliseconds\",\n    \"retention.bytes\": \"\",\n    \"retention.bytes.unit\": \"bytes\",\n    \"cleanup.policy\": \"\",\n  };\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const fetchTopic = async (topicName) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      const configEntries: any = {};\n      topicRes.config?.forEach((configItem) => {\n        configEntries[configItem.key || \"\"] = configItem.value || \"\";\n      });\n\n      setTopicData({\n        ...topicData,\n        numPartitions: topicRes?.partitions?.length.toString() || \"\",\n        \"cleanup.policy\": configEntries[\"cleanup.policy\"] || \"delete\",\n        \"retention.bytes\": configEntries[\"retention.bytes\"] || \"-1\",\n        \"retention.ms\": configEntries[\"retention.ms\"] || \"604800000\",\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        if (onError) {\n          onError(err.response?.data.code, err.response?.data.error_message);\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert(`Topic ${topicName} does not exist`, AlertVariant.danger);\n          onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n    const newConfig: ConfigEntry[] = [];\n    setIsLoading(true);\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== \"numPartitions\") {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      // numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      await updateTopicModel(name, topicSettings, config).then(() => {\n        addAlert(t(\"topic.topic_successfully_updated\"), AlertVariant.success);\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      if (onError) {\n        onError(err.response.data.code, err.response.data.error_message);\n      }\n      setIsLoading(false);\n      addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from \"@patternfly/react-core\";\nimport { ConsumerGroups } from \"@app/modules/ConsumerGroups\";\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from \"@app/modules/Topics/components\";\nimport { useFederated } from \"@app/contexts\";\nimport \"../style.css\";\n\nexport type UpdateTopicPageProps = {\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n};\n\nexport const UpdateTopicPage: React.FunctionComponent<UpdateTopicPageProps> = ({\n  onCancelUpdateTopic,\n  onDeleteTopic,\n  onSaveTopic,\n}) => {\n  const { t } = useTranslation();\n  const {\n    topicName = \"\",\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 0,\n  } = useFederated();\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className=\"pf-c-page__main-tabs\"\n        padding={{ default: \"noPadding\" }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className=\"pf-m-page-insets\"\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t(\"consumerGroup.consumer_groups\")}</TabTitleText>\n            }\n            tabContentId=\"kafka-ui-TabcontentConsumerGroups\"\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t(\"common.properties\")}</TabTitleText>}\n            tabContentId=\"kafka-ui-TabcontentProperties\"\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id=\"kafka-ui-TabcontentConsumerGroups\"\n          ref={contentRefConsumerGroup}\n          className=\"kafka-ui-m-full-height\"\n          aria-label=\"Consumer groups.\"\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id=\"kafka-ui-TabcontentProperties\"\n          ref={contentRefProperties}\n          className=\"kafka-ui-m-full-height\"\n          aria-label=\"Topic properties\"\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onCancelUpdateTopic={onCancelUpdateTopic}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { UpdateTopicPage } from \"@app/modules/Topics/pages/UpdateTopic\";\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from \"@app/contexts\";\nimport kafkai18n from \"@app/i18n\";\nimport { AlertContext, AlertContextProps } from \"@app/contexts/Alert\";\nimport { KafkaActions } from \"@app/utils\";\nimport { RootModal } from \"@app/components/RootModal\";\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  topicName,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  addAlert,\n  onError,\n  dispatchKafkaAction,\n  onConnectToRoute,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n\n  const onCancelUpdateTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.DetailsTopic);\n  };\n\n  const onDeleteTopic = () => {\n    onConnectToRoute && onConnectToRoute(\"\");\n  };\n\n  const onSaveTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.DetailsTopic);\n  };\n\n  return (\n    <BrowserRouter>\n      <I18nextProvider i18n={kafkai18n}>\n        <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n          <AlertContext.Provider value={alertContext}>\n            <FederatedContext.Provider\n              value={{\n                activeTab: 1,\n                topicName,\n                kafkaName,\n                kafkaPageLink,\n                kafkaInstanceLink,\n                onError,\n              }}\n            >\n              <RootModal>\n                <UpdateTopicPage\n                  onCancelUpdateTopic={onCancelUpdateTopic}\n                  onDeleteTopic={onDeleteTopic}\n                  onSaveTopic={onSaveTopic}\n                />\n              </RootModal>\n            </FederatedContext.Provider>\n          </AlertContext.Provider>\n        </ConfigContext.Provider>\n      </I18nextProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default UpdateTopicFederated;\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"sourceRoot":""}