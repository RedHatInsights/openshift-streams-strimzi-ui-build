{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack://kafka-ui/./src/Components/TextWithLabelPopover/TextWithLabelPopover.tsx","webpack://kafka-ui/./src/Components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/Components/DropdownWithToggle.tsx","webpack://kafka-ui/./src/Components/SizeTimeFormGroup/SizeTimeFormGroup.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/TopicAdvanceConfig.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/utils.ts"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","TextWithLabelPopover","fieldLabel","btnAriaLabel","fieldValue","popoverBody","popoverHeader","unit","displayText","Number","unitSeparator","TextContent","className","Text","style","fontWeight","display","Popover","headerContent","bodyContent","onClick","event","preventDefault","position","left","top","noVerticalAlign","FormGroupWithPopover","children","labelHead","fieldId","labelBody","buttonAriaLabel","FormGroup","label","labelIcon","DropdownWithToggle","options","id","toggleId","items","value","ariaLabel","onSelectOption","useState","isOpen","setIsOpen","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","Dropdown","onSelect","e","currentTarget","textContent","target","toggle","dropdownItems","map","option","key","DropdownItem","SizeTimeFormGroup","dropdownValue","inputName","onChange","onPlus","onMinus","plusBtnProps","minusBtnProps","type","timeUnits","isDisabled","memoryUnits","Flex","FlexItem","grow","default","NumberInput","getItemsForType","TopicAdvanceConfig","isCreate","saveTopic","handleCancel","topicData","setTopicData","t","useTranslation","actionText","onDropdownChange","fieldName","handleTouchSpinInputChange","handleTouchSpinPlus","handleTouchSpinMinus","Sidebar","hasGutter","SidebarPanel","variant","JumpLinks","isVertical","scrollableSelector","offset","expandable","md","isExpanded","JumpLinksItem","href","SidebarContent","PageSection","padding","hasOverflowScroll","Stack","StackItem","component","TextVariants","tabIndex","Form","TextInput","isRequired","placeholder","numPartitions","ActionGroup","Button","kebabToCamel","kebabCase","split","word","index","text","charAt","toUpperCase","slice","join","kebabToDotSeparated","val","replaceAll","unitsToBytes","bytes","kilobytes","megabytes","gigabytes","terabytes","unitsToMilliSecond","milliseconds","seconds","days","months","years","convertUnits","topic","pop","String","formatTopicRequest","configEntries","config","push","toString","settings"],"mappings":"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","file":"925.05a46ed6.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","import { Popover, TextContent, Text } from '@patternfly/react-core';\nimport React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport bytes from 'bytes';\nimport humanizeDuration from 'humanize-duration';\n\nimport './TextWithLabelPopover.css';\n\nexport interface TextWithLabelPopoverProps {\n  /** Field label */\n  fieldLabel: string;\n  /** Field value */\n  fieldValue?: string;\n  /** Header text for popover label */\n  popoverHeader: string;\n  /** Body text for popover label */\n  popoverBody: string;\n  /** Aria label for popover button */\n  btnAriaLabel: string;\n  /** Unit (if exists) for the field */\n  unit?: string;\n}\n\nexport const TextWithLabelPopover: React.FC<TextWithLabelPopoverProps> = ({\n  fieldLabel,\n  btnAriaLabel,\n  fieldValue,\n  popoverBody,\n  popoverHeader,\n  unit,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  let displayText = '-';\n\n  if (fieldValue) {\n    if (unit) {\n      if (unit === 'ms') {\n        displayText = humanizeDuration(Number(fieldValue));\n      }\n      if (unit === 'bytes') {\n        displayText = bytes(Number(fieldValue), { unitSeparator: ' ' });\n      }\n    } else {\n      displayText = fieldValue;\n    }\n  }\n\n  return (\n    <TextContent className='text-content-padding'>\n      <Text style={{ fontWeight: 700, display: 'inline' }}>{fieldLabel}</Text>\n      <Popover\n        headerContent={<div>{popoverHeader}</div>}\n        bodyContent={<div>{popoverBody}</div>}\n      >\n        <button\n          aria-label={btnAriaLabel}\n          onClick={preventButtonSubmit}\n          className='pf-c-form__group-label-help'\n          style={{ position: 'relative', left: '5px', top: '2px' }}\n        >\n          <HelpIcon noVerticalAlign />\n        </button>\n      </Popover>\n      <Text>{displayText}</Text>\n    </TextContent>\n  );\n};\n","import { FormGroup, Popover } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\ninterface IFormGroupWithPopoverProps {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n}\n\nexport const FormGroupWithPopover: React.FC<IFormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value = e.currentTarget.textContent;\n    if (onSelectOption) {\n      e.target.name = name;\n      onSelectOption(value, e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {value}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n    />\n  );\n};\n","import {\n  Flex,\n  FlexItem,\n  NumberInput,\n  NumberInputProps,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { DropdownWithToggle, IDropdownOption } from '../DropdownWithToggle';\n\nexport interface SizeTimeFormGroup extends NumberInputProps {\n  /** id of dropdown element */\n  id: string;\n  /** id of dropdown toggle button */\n  toggleId: string;\n  /** id of dropdown element */\n  dropdownValue?: string;\n  /** name attribute of dropdown element */\n  name: string;\n  /** handler method of dropdown */\n  onSelectOption?: (value: string, event) => void;\n  /** aria label for dropdown element */\n  ariaLabel?: string;\n  /** determines whether to display memory units or time units */\n  type: string;\n}\n\nexport const SizeTimeFormGroup: React.FC<SizeTimeFormGroup> = ({\n  id,\n  toggleId,\n  dropdownValue,\n  ariaLabel,\n  onSelectOption,\n  name,\n  inputName,\n  onChange,\n  onPlus,\n  onMinus,\n  value,\n  plusBtnProps,\n  minusBtnProps,\n  type,\n}) => {\n  const timeUnits: IDropdownOption[] = [\n    { key: 'milliseconds', value: 'milliseconds', isDisabled: false },\n    { key: 'seconds', value: 'seconds', isDisabled: false },\n    { key: 'days', value: 'days', isDisabled: false },\n    { key: 'months', value: 'months', isDisabled: false },\n    { key: 'years', value: 'years', isDisabled: false },\n  ];\n\n  const memoryUnits: IDropdownOption[] = [\n    { key: 'bytes', value: 'bytes', isDisabled: false },\n    { key: 'kilobytes', value: 'kilobytes', isDisabled: false },\n    { key: 'megabytes', value: 'megabytes', isDisabled: false },\n    { key: 'gigabytes', value: 'gigabytes', isDisabled: false },\n    { key: 'terabytes', value: 'terabytes', isDisabled: false },\n  ];\n\n  const getItemsForType = (type: string) => {\n    switch (type) {\n      case 'time':\n        return timeUnits;\n      case 'memory':\n        return memoryUnits;\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem grow={{ default: 'grow' }}>\n        <NumberInput\n          inputName={inputName}\n          onChange={onChange}\n          onPlus={onPlus}\n          onMinus={onMinus}\n          value={value}\n          plusBtnProps={plusBtnProps}\n          minusBtnProps={minusBtnProps}\n        />\n      </FlexItem>\n      <FlexItem>\n        <DropdownWithToggle\n          id={id}\n          toggleId={toggleId}\n          ariaLabel={ariaLabel}\n          onSelectOption={onSelectOption}\n          items={getItemsForType(type)}\n          name={name}\n          value={dropdownValue || ''}\n        />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import React from 'react';\nimport {\n  ActionGroup,\n  Button,\n  JumpLinks,\n  JumpLinksItem,\n  PageSection,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  Stack,\n  StackItem,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  NumberInput,\n  Form,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nimport { useTranslation } from 'react-i18next';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { kebabToCamel, kebabToDotSeparated } from '../utils';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { IAdvancedTopic } from './CreateTopicWizard';\n\ninterface ITopicAdvanceConfig {\n  isCreate: boolean;\n  saveTopic: () => void;\n  handleCancel: () => void;\n  topicData: IAdvancedTopic;\n  setTopicData: (val: IAdvancedTopic) => void;\n}\n\nexport const TopicAdvanceConfig: React.FunctionComponent<ITopicAdvanceConfig> = ({\n  isCreate,\n  saveTopic,\n  handleCancel,\n  topicData,\n  setTopicData,\n}) => {\n  const { t } = useTranslation();\n\n  const actionText = isCreate === true ? 'Create Topic' : 'Save';\n\n  const clearOptions: IDropdownOption[] = [\n    { key: 'compact', value: 'compact', label: 'Compact', isDisabled: false },\n    { key: 'delete', value: 'delete', label: 'Delete', isDisabled: false },\n    {\n      key: 'compact-delete',\n      value: 'compact, delete',\n      label: 'Compact, Delete',\n      isDisabled: false,\n    },\n    {\n      key: 'delete-compact',\n      value: 'delete, compact',\n      label: 'Delete, Compact',\n      isDisabled: false,\n    },\n  ];\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName } = event.currentTarget;\n    setTopicData({ ...topicData, [kebabToCamel(fieldName)]: value });\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    setTopicData({ ...topicData, [kebabToDotSeparated(fieldName)]: value });\n  };\n\n  const onPartitionsChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { name: fieldName, value } = event.currentTarget;\n    setTopicData({ ...topicData, [kebabToCamel(fieldName)]: Number(value) });\n  };\n\n  const handleTouchSpinPlusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    setTopicData({\n      ...topicData,\n      [fieldName]: Number(topicData[fieldName]) + 1,\n    });\n  };\n\n  const handleTouchSpinMinusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    setTopicData({\n      ...topicData,\n      [fieldName]: Number(topicData[fieldName]) - 1,\n    });\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    setTopicData({\n      ...topicData,\n      [kebabToDotSeparated(fieldName)]: Number(value),\n    });\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    setTopicData({\n      ...topicData,\n      [fieldName]: Number(topicData[fieldName]) + 1,\n    });\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    setTopicData({\n      ...topicData,\n      [fieldName]: Number(topicData[fieldName]) - 1,\n    });\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    setTopicData({ ...topicData, [kebabToDotSeparated(fieldName)]: value });\n  };\n\n  return (\n    <>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='.pf-c-page__main:first-of-type'\n            style={{ position: 'sticky' }}\n            offset={-164} // for header\n            expandable={{ default: 'expandable', md: 'nonExpandable' }}\n            isExpanded={false}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <PageSection\n            className='kafka-ui--topics-advanced-config'\n            padding={{ default: 'noPadding' }}\n            hasOverflowScroll\n            id='topic-advance-config-scroll-container'\n          >\n            <Stack hasGutter>\n              <StackItem>\n                <TextContent>\n                  <Text\n                    component={TextVariants.h2}\n                    tabIndex={-1}\n                    id='core-configuration'\n                  >\n                    Core configuration\n                  </Text>\n                  <Text component={TextVariants.p} className='section-info'>\n                    {t('createTopic.coreConfigInfo')}\n                  </Text>\n                </TextContent>\n                <Form>\n                  {isCreate ? (\n                    <FormGroupWithPopover\n                      labelHead={t('createTopic.topicNameLabelHead')}\n                      fieldId='create-topic-name'\n                      fieldLabel='Topic name'\n                      labelBody={t('createTopic.topicNameLabelBody')}\n                      buttonAriaLabel='More info for topic name field'\n                    >\n                      <TextInput\n                        isRequired\n                        type='text'\n                        id='create-topic-name'\n                        name='name'\n                        value={topicData.name}\n                        onChange={handleTextInputChange}\n                        label='Topic name'\n                        placeholder='Enter topic name'\n                      />\n                    </FormGroupWithPopover>\n                  ) : (\n                    <TextWithLabelPopover\n                      btnAriaLabel='topic detail name'\n                      fieldLabel='Name'\n                      fieldValue={topicData.name}\n                      popoverBody={t('createTopic.topicNameLabelBody')}\n                      popoverHeader={t('createTopic.topicNameLabelHead')}\n                    />\n                  )}\n                  <FormGroupWithPopover\n                    fieldId='create-topic-partitions'\n                    fieldLabel='Partitions'\n                    labelHead={t('createTopic.partitionsLabelHead')}\n                    labelBody={t('createTopic.partitionsLabelBody')}\n                    buttonAriaLabel='More info for partitions field'\n                  >\n                    <NumberInput\n                      id='create-topic-partitions'\n                      inputName='num-partitions'\n                      onChange={onPartitionsChange}\n                      onPlus={handleTouchSpinPlusCamelCase}\n                      onMinus={handleTouchSpinMinusCamelCase}\n                      value={Number(topicData.numPartitions)}\n                      plusBtnProps={{ name: 'num-partitions' }}\n                      minusBtnProps={{ name: 'num-partitions' }}\n                    />\n                  </FormGroupWithPopover>\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail replicas'\n                    fieldLabel='Replicas'\n                    fieldValue={'3'}\n                    popoverBody={t('createTopic.replicasLabelBody')}\n                    popoverHeader={t('createTopic.replicasLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min-in-sync replica'\n                    fieldLabel='Minimum in-sync replicas'\n                    fieldValue={'2'}\n                    popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n                    popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n                  />\n                  <FormGroupWithPopover\n                    fieldId='retention'\n                    fieldLabel='Retention time'\n                    labelHead={t('createTopic.retentionTimeLabelHead')}\n                    labelBody={t('createTopic.retentionTimeLabelBody')}\n                    buttonAriaLabel='More info for retention time field'\n                  >\n                    <SizeTimeFormGroup\n                      inputName='retention-ms'\n                      onChange={handleTouchSpinInputChange}\n                      onPlus={handleTouchSpinPlus}\n                      onMinus={handleTouchSpinMinus}\n                      value={Number(topicData['retention.ms'])}\n                      plusBtnProps={{ name: 'retention-ms' }}\n                      minusBtnProps={{ name: 'retention-ms' }}\n                      id='core-config-retention-time-unit'\n                      toggleId='core-config-retention-dropdowntoggle'\n                      name='retention-ms-unit'\n                      dropdownValue={topicData['retention.ms.unit']}\n                      ariaLabel='select unit from dropdown'\n                      onSelectOption={onDropdownChange}\n                      type='time'\n                    />\n                  </FormGroupWithPopover>\n                  <FormGroupWithPopover\n                    fieldId='retention-size'\n                    fieldLabel='Retention size'\n                    labelHead={t('createTopic.retentionBytesLabelHead')}\n                    labelBody={t('createTopic.retentionBytesLabelBody')}\n                    buttonAriaLabel='More info for retention size field'\n                  >\n                    <SizeTimeFormGroup\n                      inputName='retention-bytes'\n                      onChange={handleTouchSpinInputChange}\n                      onPlus={handleTouchSpinPlus}\n                      onMinus={handleTouchSpinMinus}\n                      value={Number(topicData['retention.bytes'])}\n                      plusBtnProps={{ name: 'retention-bytes' }}\n                      minusBtnProps={{ name: 'retention-bytes' }}\n                      id='core-config-retention-size-unit'\n                      toggleId='core-config-retention-size-dropdowntoggle'\n                      name='retention-bytes-unit'\n                      dropdownValue={topicData['retention.bytes.unit']}\n                      ariaLabel='select unit from dropdown'\n                      onSelectOption={onDropdownChange}\n                      type='memory'\n                    />\n                  </FormGroupWithPopover>\n                </Form>\n              </StackItem>\n              <StackItem>\n                <TextContent className='section-margin'>\n                  <Text component={TextVariants.h2} tabIndex={-1} id='messages'>\n                    Messages\n                  </Text>\n                  <Text component={TextVariants.p} className='section-info'>\n                    {t('createTopic.messageSectionInfo')}\n                  </Text>\n                </TextContent>\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail max message bytes'\n                  fieldLabel='Maximum message bytes'\n                  fieldValue={'1048588'}\n                  popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n                  popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n                  unit={'bytes'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail message timestamp type'\n                  fieldLabel='Message timestamp type'\n                  fieldValue={'CreateTime'}\n                  popoverBody={t('createTopic.messageTimestampLabelBody')}\n                  popoverHeader={t('createTopic.messageTimestampLabelHead')}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail message timestamp difference'\n                  fieldLabel='Maximum message timestamp difference'\n                  fieldValue={'9223372036854775807'}\n                  popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n                  popoverHeader={t('createTopic.messageTimestampDiffLabelHead')}\n                  unit={'ms'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail compression type'\n                  fieldLabel='Compression type'\n                  fieldValue={'Producer'}\n                  popoverBody={t('createTopic.compressionTypeLabelBody')}\n                  popoverHeader={t('createTopic.compressionTypeLabelHead')}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail message format version'\n                  fieldLabel='Message format version'\n                  fieldValue={'2.7-IV2'}\n                  popoverBody={t('createTopic.messageFormatLabelBody')}\n                  popoverHeader={t('createTopic.messageFormatLabelHead')}\n                />\n              </StackItem>\n\n              <StackItem>\n                <TextContent className='section-margin'>\n                  <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                    Log\n                  </Text>\n                  <Text\n                    component={TextVariants.p}\n                    className='section-info-head'\n                  >\n                    {t('createTopic.logSectionInfo')}\n                  </Text>\n                  <Text\n                    component={TextVariants.small}\n                    className='section-info-note'\n                  >\n                    {t('createTopic.logSectionInfoNote')}\n                  </Text>\n                </TextContent>\n\n                <FormGroupWithPopover\n                  fieldId='cleanup-policy'\n                  fieldLabel='Cleanup policy'\n                  labelHead={t('createTopic.cleanupPolicyLabelHead')}\n                  labelBody={t('createTopic.cleanupPolicyLabelBody')}\n                  buttonAriaLabel='More info for cleanup policy field'\n                >\n                  <DropdownWithToggle\n                    id='log-section-policy-type-dropdown'\n                    toggleId='log-section-policy-type-dropdowntoggle'\n                    ariaLabel='select policy type from dropdown'\n                    onSelectOption={onDropdownChangeDotSeparated}\n                    items={clearOptions}\n                    name='cleanup-policy'\n                    value={topicData['cleanup.policy'] || ''}\n                  />\n                </FormGroupWithPopover>\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail retention bytes'\n                  fieldLabel='Delete retention time'\n                  fieldValue={'86400000'}\n                  popoverBody={t('createTopic.deleteRetentionLabelBody')}\n                  popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n                  unit={'ms'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail min cleanable dirty ratio'\n                  fieldLabel='Minimum cleanable dirty ratio'\n                  fieldValue={'0.5'}\n                  popoverBody={t('createTopic.minRatioLabelBody')}\n                  popoverHeader={t('createTopic.minRatioLabelHead')}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail min compaction lag time'\n                  fieldLabel='Minimum compaction lag time'\n                  fieldValue={'0'}\n                  popoverBody={t('createTopic.minLagLabelBody')}\n                  popoverHeader={t('createTopic.minLagLabelHead')}\n                  unit={'ms'}\n                />\n              </StackItem>\n\n              <StackItem>\n                <TextContent className='section-margin'>\n                  <Text\n                    component={TextVariants.h2}\n                    tabIndex={-1}\n                    id='replication'\n                  >\n                    Replication\n                  </Text>\n                  <Text\n                    component={TextVariants.p}\n                    className='section-info-head'\n                  >\n                    {t('createTopic.replicationSectionInfo')}\n                  </Text>\n                  <Text\n                    component={TextVariants.small}\n                    className='section-info-note'\n                  >\n                    {t('createTopic.replicationSectionInfoNote')}\n                  </Text>\n                </TextContent>\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail unclean leader election'\n                  fieldLabel='Unclean leader election'\n                  fieldValue={'Disabled'}\n                  popoverBody={t('createTopic.leaderElectionLabelBody')}\n                  popoverHeader={t('createTopic.leaderElectionLabelHead')}\n                />\n              </StackItem>\n\n              <StackItem>\n                <TextContent className='section-margin'>\n                  <Text component={TextVariants.h2} tabIndex={-1} id='cleanup'>\n                    Cleanup\n                  </Text>\n                  <Text component={TextVariants.p} className='section-info'>\n                    {t('createTopic.cleanupSectionInfo')}\n                  </Text>\n                </TextContent>\n\n                <TextWithLabelPopover\n                  btnAriaLabel='topic detail log segment bytes'\n                  fieldLabel='Log segment size'\n                  fieldValue={'1073741824'}\n                  popoverBody={t('createTopic.logSegmentLabelHead')}\n                  popoverHeader={t('createTopic.logSegmentLabelBody')}\n                  unit={'bytes'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='segment time'\n                  fieldLabel='Segment time'\n                  fieldValue={'604800000'}\n                  popoverBody={t('createTopic.segementTimeLabelBody')}\n                  popoverHeader={t('createTopic.segementTimeLabelHead')}\n                  unit={'ms'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='segment jitter time'\n                  fieldLabel='Segment jitter time'\n                  fieldValue={'0'}\n                  popoverBody={t('createTopic.jitterTimeLabelBody')}\n                  popoverHeader={t('createTopic.jitterTimeLabelHead')}\n                  unit={'ms'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='file delete delay'\n                  fieldLabel='File delete delay'\n                  fieldValue={'60000'}\n                  popoverBody={t('createTopic.deleteDelayLabelBody')}\n                  popoverHeader={t('createTopic.deleteDelayLabelHead')}\n                  unit={'ms'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='preallocation log segment files'\n                  fieldLabel='Preallocation log segment files'\n                  fieldValue={'Disabled'}\n                  popoverBody={t('createTopic.preallocateLabelBody')}\n                  popoverHeader={t('createTopic.preallocateLabelHead')}\n                />\n              </StackItem>\n\n              <StackItem>\n                <TextContent className='section-margin'>\n                  <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                    Index\n                  </Text>\n                  <Text component={TextVariants.p} className='section-info'>\n                    {t('createTopic.indexSectionInfo')}\n                  </Text>\n                </TextContent>\n\n                <TextWithLabelPopover\n                  btnAriaLabel='index interval size'\n                  fieldLabel='Index interval size'\n                  fieldValue={'4096'}\n                  popoverBody={t('createTopic.indexIntervalLabelBody')}\n                  popoverHeader={t('createTopic.indexIntervalLabelHead')}\n                  unit={'bytes'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='segment index size'\n                  fieldLabel='Segment index size'\n                  fieldValue={'10485760'}\n                  popoverBody={t('createTopic.segementIntervalLabelBody')}\n                  popoverHeader={t('createTopic.segementIntervalLabelHead')}\n                  unit={'bytes'}\n                />\n              </StackItem>\n\n              <StackItem>\n                <TextContent className='section-margin'>\n                  <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                    Flush\n                  </Text>\n                  <Text component={TextVariants.p} className='section-info'>\n                    {t('createTopic.flushSectionInfo')}\n                  </Text>\n                </TextContent>\n\n                <TextWithLabelPopover\n                  btnAriaLabel='flush interval messages'\n                  fieldLabel='Flush interval messages'\n                  fieldValue={'9223372036854775807'}\n                  popoverBody={t('createTopic.intervalMessagesLabelBody')}\n                  popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n                  unit={'ms'}\n                />\n\n                <TextWithLabelPopover\n                  btnAriaLabel='flush interval time'\n                  fieldLabel='Flush interval time'\n                  fieldValue={'9223372036854775807'}\n                  popoverBody={t('createTopic.intervalTimeLabelBody')}\n                  popoverHeader={t('createTopic.intervalTimeLabelHead')}\n                  unit={'ms'}\n                />\n              </StackItem>\n            </Stack>\n          </PageSection>\n          <ActionGroup className='kafka-ui--sticky-footer'>\n            <Button\n              onClick={saveTopic}\n              variant='primary'\n              data-testid={\n                isCreate\n                  ? 'topicAdvanceCreate-actionCreate'\n                  : 'tabProperties-actionSave'\n              }\n            >\n              {actionText}\n            </Button>\n            <Button\n              onClick={handleCancel}\n              variant='link'\n              data-testid={\n                isCreate\n                  ? 'topicAdvanceCreate-actionCancel'\n                  : 'tabProperties-actionCancel'\n              }\n            >\n              Cancel\n            </Button>\n          </ActionGroup>\n        </SidebarContent>\n      </Sidebar>\n    </>\n  );\n};\n","import { ConfigEntry, NewTopicInput } from '../../../OpenApi';\nimport { IAdvancedTopic } from './Components/CreateTopicWizard';\n\nconst capitalizeText = (text: string) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nexport const kebabToCamel = function (kebabCase: string): string {\n  const words: string[] = kebabCase.split('-');\n\n  const camelCased: string[] = words.map((word: string, index: number) => {\n    return index > 0 ? capitalizeText(word) : word;\n  });\n\n  return camelCased.join('');\n};\n\nexport const kebabToDotSeparated = (val: string): string => {\n  return val.replaceAll('-', '.');\n};\n\nconst unitsToBytes = {\n  bytes: 1,\n  kilobytes: 1000,\n  megabytes: 1000000,\n  gigabytes: 1000000000,\n  terabytes: 1000000000000,\n};\n\nconst unitsToMilliSecond = {\n  milliseconds: 1,\n  seconds: 1000,\n  days: 86400000,\n  months: 2592000000,\n  years: 31536000000,\n};\n\nexport const convertUnits = (topicData: IAdvancedTopic): IAdvancedTopic => {\n  const topic = { ...topicData };\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'ms') {\n      topic[key] = String(\n        Number(topic[key]) *\n          unitsToMilliSecond[topic[`${key}.unit`] || 'milliseconds']\n      );\n    }\n    if (key.split('.').pop() === 'bytes') {\n      topic[key] = String(\n        Number(topic[key]) * unitsToBytes[topic[`${key}.unit`] || 'bytes']\n      );\n    }\n  }\n\n  if (topic['flush.messages']) {\n    topic['flush.messages'] = String(\n      Number(topic['flush.messages']) *\n        unitsToMilliSecond[topic['flush.messages.unit'] || 'milliseconds']\n    );\n  }\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'unit') {\n      delete topic[key];\n    }\n  }\n\n  return topic;\n};\n\nexport const formatTopicRequest = (topic: IAdvancedTopic): NewTopicInput => {\n  const { name, numPartitions, ...configEntries } = topic;\n\n  const config: ConfigEntry[] = [];\n\n  for (const key in configEntries) {\n    if (key) {\n      config.push({\n        key,\n        value: configEntries[key].toString(),\n      });\n    }\n  }\n\n  return {\n    name,\n    settings: {\n      numPartitions: Number(numPartitions),\n      config,\n    },\n  };\n};\n"],"sourceRoot":""}