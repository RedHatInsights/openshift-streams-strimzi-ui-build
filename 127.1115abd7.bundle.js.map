{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/plus-circle-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/search-icon.js","webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/SearchTopics.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/EmptyTopics.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/EmptySearch.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/DeleteTopicsModal.tsx","webpack://kafka-ui/./src/Components/Loading/Loading.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/TopicsList.tsx","webpack://kafka-ui/./src/Hooks/useTimeOut.ts","webpack://kafka-ui/./src/Panels/Topics/FederatedView.tsx"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","AlertContext","createContext","SearchTopics","search","setSearch","onClear","InputGroup","SearchInput","id","type","placeholder","value","onChange","EmptyTopics","onCreateTopic","EmptyState","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","Button","variant","className","onClick","EmptySearch","getTopics","config","getToken","accessToken","basePath","getTopicsList","data","deleteTopic","topicName","DeleteTopics","setDeleteModal","deleteModal","addAlert","useContext","history","onClose","Modal","ModalVariant","isOpen","title","titleIconVariant","showClose","Text","Flex","FlexItem","AlertVariant","response","err","push","Loading","Bullseye","Spinner","TopicsListComponent","callback","delay","savedCallback","useState","loading","setLoading","page","setPage","perPage","setPerPage","offset","setOffset","topics","setTopics","filteredTopics","setFilteredTopics","setTopicName","fetchTopic","topicsList","useEffect","useRef","current","setTimeout","clearInterval","onSetPage","_event","pageNumber","onPerPageSelect","tableColumns","transforms","sortable","rowData","items","map","topic","isInline","onTopicClick","toString","partitions","p","replicas","length","reduce","previousValue","currentValue","trim","filter","topicsFiltered","includes","prevState","undefined","actions","_","rowId","onDelete","Card","Toolbar","ToolbarContent","ToolbarItem","Pagination","itemCount","widgetId","Table","TableVariant","cells","rows","slice","TableHeader","TableBody","Divider","PaginationVariant","FederatedTopics","apiBasePath","PageSection","PageSectionVariants"],"mappings":"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","file":"127.1115abd7.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PlusCircleIcon = require('../createIcon').createIcon(exports.PlusCircleIconConfig);\nexports[\"default\"] = exports.PlusCircleIcon;","\"use strict\"\nexports.__esModule = true;\nexports.SearchIconConfig = {\n  name: 'SearchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.SearchIcon = require('../createIcon').createIcon(exports.SearchIconConfig);\nexports[\"default\"] = exports.SearchIcon;","import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\n\nexport interface ISearchTopicsProps {\n  setSearch: (value: string) => void;\n  search: string;\n  onClear: () => void;\n}\nconst SearchTopics: React.FunctionComponent<ISearchTopicsProps> = ({\n  search,\n  setSearch,\n  onClear,\n}) => {\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n  };\n\n  const onClearHandler = () => {\n    onClear();\n    setSearch('');\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-topics-input'\n        type='search'\n        aria-label='search input '\n        placeholder='Search'\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClearHandler}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchTopics };\n","import React from 'react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport PlusIcon from '@patternfly/react-icons/dist/js/icons/plus-circle-icon';\n\nexport interface IEmptyTopic {\n  onCreateTopic?: () => void;\n}\n\nexport const EmptyTopics: React.FunctionComponent<IEmptyTopic> = ({\n  onCreateTopic,\n}) => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={PlusIcon} />\n      <Title headingLevel='h5' size='lg'>\n        You don&apos;t have any topics yet\n      </Title>\n      <EmptyStateBody>\n        Create a topic by clicking the button below to get started\n      </EmptyStateBody>\n      <Button\n        variant='primary'\n        className='topics-empty-page'\n        onClick={onCreateTopic}\n      >\n        Create Topic\n      </Button>\n    </EmptyState>\n  );\n};\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/js/icons/search-icon';\n\nexport const EmptySearch: React.FunctionComponent = () => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel='h5' size='lg'>\n        No results found\n      </Title>\n      <EmptyStateBody>\n        No result match the filter criteria. Remove filter or clear all filters\n        to show results\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport { DefaultApi, Topic, TopicSettings, TopicsList } from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length;\n\n  topicObj.replicationFactor = topic?.partitions\n    ?.map((p) => p.replicas?.length)\n    .reduce(\n      (previousValue = 0, currentValue = 0) => previousValue + currentValue\n    );\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n","import React, { useContext } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Flex,\n  Text,\n  FlexItem,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '../../../../Services/TopicServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { useHistory } from 'react-router';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteTopics {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  topicName?: string;\n}\nexport const DeleteTopics: React.FunctionComponent<IDeleteTopics> = ({\n  setDeleteModal,\n  deleteModal,\n  topicName,\n}) => {\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      topicName && (await deleteTopic(topicName, config));\n      addAlert(`Successfully deleted topic ${topicName}`, AlertVariant.success);\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    history.push('/topics');\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Modal warning example'\n      title=' Delete Topic  ?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='no-header-example'\n      onClose={onClose}\n      // onClick={onSave}\n    >\n      <Text> The Topic will be deleted </Text>\n\n      <br />\n      <Flex>\n        <FlexItem>\n          <Button variant='danger' onClick={onDelete}>\n            Delete Topic\n          </Button>\n        </FlexItem>\n        <FlexItem>\n          <Button variant='link' onClick={onClose}>\n            Cancel\n          </Button>\n        </FlexItem>\n      </Flex>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  AlertVariant,\n  Button,\n  Card,\n  Divider,\n  Pagination,\n  PaginationVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  sortable,\n} from '@patternfly/react-table';\nimport { useTimeout } from '../../../../Hooks/useTimeOut';\nimport { SearchTopics } from './SearchTopics';\nimport { EmptyTopics } from './EmptyTopics';\nimport { EmptySearch } from './EmptySearch';\nimport { getTopics } from '../../../../Services';\nimport { DeleteTopics } from './DeleteTopicsModal';\nimport { useHistory } from 'react-router';\nimport { ConfigContext } from '../../../../Contexts';\nimport { TopicsList } from '../../../../OpenApi';\nimport { Loading } from '../../../../Components/Loading/Loading';\nimport { AlertContext } from '../../../../Contexts/Alert';\n\nimport './TopicList.css';\n\nexport interface ITopic {\n  name: string;\n  replicas: number;\n  partitions: number;\n}\n\nexport interface ITopicProps {\n  rows: ITopic[];\n}\n\nexport interface ITopicList {\n  onCreateTopic: () => void;\n}\n\nexport const TopicsListComponent: React.FunctionComponent<ITopicList> = ({\n  onCreateTopic,\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState<number>(0);\n  const [search, setSearch] = useState('');\n  const [topics, setTopics] = useState<TopicsList>();\n  const [filteredTopics, setFilteredTopics] = useState<TopicsList>();\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [topicName, setTopicName] = useState<string | undefined>();\n  const history = useHistory();\n\n  const { addAlert } = useContext(AlertContext);\n\n  const config = useContext(ConfigContext);\n\n  const fetchTopic = async () => {\n    try {\n      const topicsList = await getTopics(config);\n      if (topicsList) {\n        setTopics(topicsList);\n        setFilteredTopics(topicsList);\n      }\n    } catch (err) {\n      addAlert(err.response.data.err, AlertVariant.danger);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    fetchTopic();\n  }, [deleteModal]);\n\n  useTimeout(() => fetchTopic(), 5000);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n  const onTopicClick = (topic: string) => {\n    history.push(`/topic/${topic}`);\n  };\n\n  const tableColumns = [\n    { title: 'Name' },\n    { title: 'Replicas', transforms: [sortable] },\n    { title: 'Partitions', transforms: [sortable] },\n  ];\n  const rowData =\n    filteredTopics?.items?.map((topic) => [\n      {\n        title: (\n          <Button\n            variant='link'\n            isInline\n            onClick={() =>\n              onTopicClick((topic && topic.name && topic.name.toString()) || '')\n            }\n          >\n            {topic?.name}\n          </Button>\n        ),\n      },\n      topic.partitions\n        ?.map((p) => (p.replicas ? p.replicas.length : 0))\n        .reduce(\n          (previousValue, currentValue) => previousValue + currentValue,\n          0\n        ),\n      topic.partitions?.length,\n    ]) || [];\n\n  useEffect(() => {\n    if (\n      search &&\n      search.trim() != '' &&\n      topics?.items &&\n      topics.items.length > 0\n    ) {\n      const filterSearch = topics?.items.filter(\n        (topicsFiltered) =>\n          topicsFiltered?.name && topicsFiltered.name.includes(search)\n      );\n      setFilteredTopics((prevState) =>\n        prevState\n          ? {\n              ...prevState,\n              items: filterSearch,\n            }\n          : undefined\n      );\n    } else {\n      setFilteredTopics(topics);\n    }\n  }, [search]);\n\n  const onClear = () => {\n    setFilteredTopics(topics);\n  };\n  const onDelete = (rowId: any) => {\n    if (filteredTopics?.items) {\n      setTopicName(filteredTopics.items[rowId].name);\n    }\n    setDeleteModal(true);\n  };\n\n  const actions = [\n    { title: 'Delete', onClick: (_, rowId) => onDelete(rowId) },\n    { title: 'Edit' },\n  ];\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <>\n      {deleteModal && (\n        <DeleteTopics\n          topicName={topicName}\n          setDeleteModal={setDeleteModal}\n          deleteModal={deleteModal}\n        />\n      )}\n      {rowData.length < 1 && search.length < 1 ? (\n        <EmptyTopics onCreateTopic={onCreateTopic} />\n      ) : (\n        <Card>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem className='pf-c-toolbar-item--search'>\n                <SearchTopics\n                  onClear={onClear}\n                  search={search}\n                  setSearch={setSearch}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Button\n                  id='topic-list-create-topic-button'\n                  className='topics-per-page'\n                  onClick={() => {\n                    onCreateTopic();\n                  }}\n                >\n                  Create topic\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem variant='pagination'>\n                <Pagination\n                  itemCount={rowData.length}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId='topic-list-pagination-top'\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n\n          <Table\n            aria-label='Compact Table'\n            variant={TableVariant.compact}\n            cells={tableColumns}\n            rows={\n              page != 1\n                ? rowData.slice(offset, offset + perPage)\n                : rowData.slice(0, perPage)\n            }\n            actions={actions}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </Card>\n      )}\n      <Divider />\n      {rowData.length < 1 && search.length > 1 && <EmptySearch />}\n      {rowData.length > 1 && (\n        <Card>\n          <Pagination\n            itemCount={rowData.length}\n            perPage={perPage}\n            page={page}\n            onSetPage={onSetPage}\n            widgetId='topic-list-pagination-bottom'\n            onPerPageSelect={onPerPageSelect}\n            offset={0}\n            variant={PaginationVariant.bottom}\n          />\n        </Card>\n      )}\n    </>\n  );\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useTimeout: any = (callback: any, delay: number) => {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { TopicsListComponent } from '../../Modules/Topics/TopicList/Components/TopicsList';\nimport { ConfigContext } from '../../Contexts';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\n\nexport type FederatedTopicsProps = {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  onCreateTopic: () => void;\n};\n\nconst FederatedTopics: FunctionComponent<FederatedTopicsProps> = ({\n  getToken,\n  apiBasePath,\n  onCreateTopic,\n}) => {\n  return (\n    <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n      <PageSection variant={PageSectionVariants.light}>\n        <TopicsListComponent onCreateTopic={onCreateTopic} />\n      </PageSection>\n    </ConfigContext.Provider>\n  );\n};\n\nexport { FederatedTopics };\n\nexport default FederatedTopics;\n"],"sourceRoot":""}