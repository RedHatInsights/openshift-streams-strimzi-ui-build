{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Utils/axios.ts"],"names":["topic","deleteTopic","updateTopic","t","useTranslation","PageSection","className","Sidebar","hasGutter","SidebarPanel","variant","JumpLinks","isVertical","label","scrollableSelector","style","position","JumpLinksItem","key","href","SidebarContent","PageGroup","hasOverflowScroll","id","padding","default","Split","SplitItem","isFilled","TextContent","Text","component","TextVariants","tabIndex","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","name","popoverBody","popoverHeader","numPartitions","unit","Divider","Button","onClick","TopicDetailGroup","topicName","onUpdateTopic","getTopicListPath","onClickTopicList","onDeleteTopic","onError","eventKey","useState","topicDetail","setTopicDetail","activeTabKey","setActiveTabKey","config","useContext","deleteModal","setDeleteModal","addAlert","history","useEffect","response","undefined","data","code","error_message","status","AlertVariant","fetchTopicDetail","TopicDetailHead","PageSectionVariants","Tabs","activeKey","onSelect","event","isBox","Tab","title","TabTitleText","onDeleteConsumerGroup","push","consumerGroupByTopic"],"mappings":"6LA+Ba,EAAiE,SAAC,G,IAC7EA,EAAK,QACLC,EAAW,cACXC,EAAW,cAEHC,GAAM,IAAAC,kBAAgB,EAE9B,OACE,kBAAC,EAAAC,YAAW,CAACC,UAAU,gDACrB,kBAAC,EAAAC,QAAO,CAACC,WAAS,GAChB,kBAAC,EAAAC,aAAY,CAACC,QAAQ,UACpB,kBAAC,EAAAC,UAAS,CACRC,YAAU,EACVC,MAAM,kBACNC,mBAAmB,qBACnBC,MAAO,CAAEC,SAAU,aAEnB,kBAAC,EAAAC,cAAa,CAACC,IAAK,EAAGC,KAAK,uBAAqB,sBAGjD,kBAAC,EAAAF,cAAa,CAACC,IAAK,EAAGC,KAAK,aAAW,YAGvC,kBAAC,EAAAF,cAAa,CAACC,IAAK,EAAGC,KAAK,QAAM,OAGlC,kBAAC,EAAAF,cAAa,CAACC,IAAK,EAAGC,KAAK,gBAAc,eAG1C,kBAAC,EAAAF,cAAa,CAACC,IAAK,EAAGC,KAAK,YAAU,WAGtC,kBAAC,EAAAF,cAAa,CAACC,IAAK,EAAGC,KAAK,UAAQ,SAGpC,kBAAC,EAAAF,cAAa,CAACC,IAAK,EAAGC,KAAK,UAAQ,SAGpC,kBAAC,EAAAF,cAAa,CAACC,IAAK,EAAGC,KAAK,WAAS,YAKzC,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,UAAS,CAACC,mBAAiB,EAACC,GAAG,qBAC9B,kBAAC,EAAAlB,YAAW,CAACmB,QAAS,CAAEC,QAAS,cAC/B,kBAAC,EAAAC,MAAK,KACJ,kBAAC,EAAAC,UAAS,CAACC,UAAQ,GACjB,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CACHC,UAAW,EAAAC,aAAA,GACXC,UAAW,EACXV,GAAG,sBAAoB,sBAIzB,kBAAC,EAAAO,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgB1B,UAAU,gBACxCH,EAAE,gCAIP,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,oBACbC,WAAW,OACXC,WAAYrC,EAAMsC,KAClBC,YAAapC,EAAE,kCACfqC,cAAerC,EAAE,oCAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,yBACbC,WAAW,aACXC,WAAYrC,EAAMyC,cAClBF,YAAapC,EAAE,mCACfqC,cAAerC,EAAE,qCAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,wBACbC,WAAW,WACXC,WAAY,IACZE,YAAapC,EAAE,iCACfqC,cAAerC,EAAE,mCAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,mCACbC,WAAW,2BACXC,WAAY,IACZE,YAAapC,EAAE,uCACfqC,cAAerC,EAAE,yCAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,8BACbC,WAAW,iBACXC,WAAYrC,EAAM,gBAClBuC,YAAapC,EAAE,sCACfqC,cAAerC,EAAE,sCACjBuC,KAAM,OAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,8BACbC,WAAW,iBACXC,WAAYrC,EAAM,mBAClBwC,cAAerC,EAAE,uCACjBoC,YAAapC,EAAE,uCACfuC,KAAM,UAGR,kBAAC,EAAAb,YAAW,CAACvB,UAAU,kBACrB,kBAAC,EAAAwB,KAAI,CACHC,UAAW,EAAAC,aAAA,GACXC,UAAW,EACXV,GAAG,YAAU,YAIf,kBAAC,EAAAO,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgB1B,UAAU,gBACxCH,EAAE,oCAIP,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,iCACbC,WAAW,wBACXC,WAAY,UACZE,YAAapC,EAAE,uCACfqC,cAAerC,EAAE,uCACjBuC,KAAM,UAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,sCACbC,WAAW,yBACXC,WAAY,aACZE,YAAapC,EAAE,yCACfqC,cAAerC,EAAE,2CAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,4CACbC,WAAW,uCACXC,WAAY,sBACZE,YAAapC,EAAE,6CACfqC,cAAerC,EACb,6CAEFuC,KAAM,OAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,gCACbC,WAAW,mBACXC,WAAW,WACXE,YAAapC,EAAE,wCACfqC,cAAerC,EAAE,0CAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,sCACbC,WAAW,yBACXC,WAAW,UACXE,YAAapC,EAAE,sCACfqC,cAAerC,EAAE,wCAGnB,kBAAC,EAAA0B,YAAW,CAACvB,UAAU,kBACrB,kBAAC,EAAAwB,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBC,UAAW,EAAGV,GAAG,OAAK,OAGxD,kBAAC,EAAAO,KAAI,CACHC,UAAW,EAAAC,aAAA,EACX1B,UAAU,qBAETH,EAAE,+BAEL,kBAAC,EAAA2B,KAAI,CACHC,UAAW,EAAAC,aAAA,MACX1B,UAAU,qBAETH,EAAE,oCAIP,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,8BACbC,WAAW,iBACXC,WAAYrC,EAAM,kBAClBuC,YAAapC,EAAE,sCACfqC,cAAerC,EAAE,wCAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,+BACbC,WAAW,wBACXC,WAAY,WACZE,YAAapC,EAAE,wCACfqC,cAAerC,EAAE,wCACjBuC,KAAM,OAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,yCACbC,WAAW,gCACXC,WAAY,MACZE,YAAapC,EAAE,iCACfqC,cAAerC,EAAE,mCAGnB,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,uCACbC,WAAW,8BACXC,WAAY,IACZE,YAAapC,EAAE,+BACfqC,cAAerC,EAAE,+BACjBuC,KAAM,OAGR,kBAAC,EAAAb,YAAW,CAACvB,UAAU,kBACrB,kBAAC,EAAAwB,KAAI,CACHC,UAAW,EAAAC,aAAA,GACXC,UAAW,EACXV,GAAG,eAAa,eAIlB,kBAAC,EAAAO,KAAI,CACHC,UAAW,EAAAC,aAAA,EACX1B,UAAU,qBAETH,EAAE,uCAEL,kBAAC,EAAA2B,KAAI,CACHC,UAAW,EAAAC,aAAA,MACX1B,UAAU,qBAETH,EAAE,4CAIP,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,uCACbC,WAAW,0BACXC,WAAY,WACZE,YAAapC,EAAE,uCACfqC,cAAerC,EAAE,yCAGnB,kBAAC,EAAA0B,YAAW,CAACvB,UAAU,kBACrB,kBAAC,EAAAwB,KAAI,CACHC,UAAW,EAAAC,aAAA,GACXC,UAAW,EACXV,GAAG,WAAS,WAId,kBAAC,EAAAO,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgB1B,UAAU,gBACxCH,EAAE,oCAIP,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,iCACbC,WAAW,mBACXC,WAAY,aACZE,YAAapC,EAAE,mCACfqC,cAAerC,EAAE,mCACjBuC,KAAM,UAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,eACbC,WAAW,eACXC,WAAY,YACZE,YAAapC,EAAE,qCACfqC,cAAerC,EAAE,qCACjBuC,KAAM,OAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,sBACbC,WAAW,sBACXC,WAAY,IACZE,YAAapC,EAAE,mCACfqC,cAAerC,EAAE,mCACjBuC,KAAM,OAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,oBACbC,WAAW,oBACXC,WAAY,QACZE,YAAapC,EAAE,oCACfqC,cAAerC,EAAE,oCACjBuC,KAAM,OAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,kCACbC,WAAW,kCACXC,WAAY,WACZE,YAAapC,EAAE,oCACfqC,cAAerC,EAAE,sCAGnB,kBAAC,EAAA0B,YAAW,CAACvB,UAAU,kBACrB,kBAAC,EAAAwB,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBC,UAAW,EAAGV,GAAG,SAAO,SAG1D,kBAAC,EAAAO,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgB1B,UAAU,gBACxCH,EAAE,kCAIP,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,sBACbC,WAAW,sBACXC,WAAY,OACZE,YAAapC,EAAE,sCACfqC,cAAerC,EAAE,sCACjBuC,KAAM,UAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,qBACbC,WAAW,qBACXC,WAAY,WACZE,YAAapC,EAAE,yCACfqC,cAAerC,EAAE,yCACjBuC,KAAM,UAGR,kBAAC,EAAAb,YAAW,CAACvB,UAAU,kBACrB,kBAAC,EAAAwB,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBC,UAAW,EAAGV,GAAG,SAAO,SAG1D,kBAAC,EAAAO,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgB1B,UAAU,gBACxCH,EAAE,kCAIP,kBAAC+B,EAAA,EAAoB,CACnBC,aAAa,0BACbC,WAAW,0BACXC,WAAY,sBACZE,YAAapC,EAAE,yCACfqC,cAAerC,EAAE,yCACjBuC,KAAM,OAGR,kBAACR,EAAA,EAAoB,CACnBC,aAAa,sBACbC,WAAW,sBACXC,WAAY,sBACZE,YAAapC,EAAE,qCACfqC,cAAerC,EAAE,qCACjBuC,KAAM,OAGR,kBAAC,EAAAC,QAAO,MAER,kBAAC,EAAAd,YAAW,CAACvB,UAAU,kBACrB,kBAAC,EAAAwB,KAAI,CAACC,UAAW,EAAAC,aAAA,GAAiBC,UAAW,EAAGV,GAAG,UAAQ,+BAG3D,kBAAC,EAAAO,KAAI,CAACC,UAAW,EAAAC,aAAA,EAAgB1B,UAAU,gBACxCH,EAAE,iCAIP,kBAAC,EAAAyC,OAAM,CACLlC,QAAQ,SACRJ,UAAU,iBACVuC,QAAS5C,GAAW,iBAKxB,kBAAC,EAAA0B,UAAS,KACR,kBAAC,EAAAiB,OAAM,CAAClC,QAAQ,UAAUmC,QAAS3C,GAAW,2B,qEC9XnD4C,EAAoD,SAAC,G,IAChEC,EAAS,YACTC,EAAa,gBACbC,EAAgB,mBAChBC,EAAgB,mBAChBC,EAAa,gBACbC,EAAO,UACPC,EAAQ,WAEF,GAAgC,IAAAC,UAAwB,MAAvDC,EAAW,KAAEC,EAAc,KAC5B,GAAkC,IAAAF,UAASD,GAA1CI,EAAY,KAAEC,EAAe,KAC9BC,GAAS,IAAAC,YAAW,KACpB,GAAgC,IAAAN,WAAS,GAAxCO,EAAW,KAAEC,EAAc,KAC1BC,GAAa,IAAAH,YAAW,KAAa,SACvCI,GAAU,UAoChB,OAXA,IAAAC,YAAU,YAxBe,SAAOlB,G,mBAAiB,E,OAAA,E,EAAA,W,smCAC9B,IAAbM,EAAA,Y,iBAEiB,O,sBAAA,IAAM,QAAeN,EAAWY,I,cAA3CO,EAAW,SACjBV,EAAeU,G,yBC9CYC,K,cDiDrBf,GACFA,EAAoB,QAAZ,IAAIc,gBAAQ,eAAEE,KAAKC,KAAkB,QAAZ,IAAIH,gBAAQ,eAAEE,KAAKE,eAEzB,OAAb,QAAZ,IAAIJ,gBAAQ,eAAEK,UAEhBR,EAAS,SAAShB,EAAS,kBAAmB,EAAAyB,aAAA,QAC9CtB,M,wCAbuC,K,kQAyB/CuB,CAAiB1B,KAChB,CAACA,IAUF,oCACE,kBAAC2B,EAAA,EAAe,CACd3B,UAAWA,EACXE,iBAAkBA,EAClBC,iBAAkBA,IAEpB,kBAAC,EAAA7C,YAAW,CACVK,QAAS,EAAAiE,oBAAA,MACTnD,QAAS,CAAEC,QAAS,cAEpB,kBAAC,EAAAmD,KAAI,CACHC,UAAWpB,EACXqB,SA7Be,SAACC,EAAO9C,GAC7ByB,EAAgBzB,IA6BV+C,OAAO,EACP1E,UAAU,yBAEV,kBAAC,EAAA2E,IAAG,CACF5B,SAAU,EAAC,cACC,yBACZ6B,MAAO,kBAAC,EAAAC,aAAY,yBAEpB,kBAAC,IAAkB,CACjBC,sBA3Ba,WACvBpB,EAAQqB,KAAK,oBA2BHC,sBAAsB,EACtBtF,MAAO+C,KAGX,kBAAC,EAAAkC,IAAG,CACF5B,SAAU,EACV6B,MAAO,kBAAC,EAAAC,aAAY,mBAA0B,cAClC,2BAEZ,kBAAC,EAAA9E,YAAW,CAACmB,QAAS,CAAEC,QAAS,cAC/B,kBAAC,EAAe,CACdzB,MAAOuD,EACPtD,YA3CM,WAClB6D,GAAe,IA2CH5D,YAAa8C,OAKpBa,GACC,kBAAC,IAAY,CACXd,UAAWA,EACXc,YAAaA,EACbC,eAAgBA,EAChBX,cAAeA","file":"545.ff870e86.bundle.js","sourcesContent":["import React from 'react';\nimport {\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { AdvancedTopic } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: AdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection className='kafka-ui--page__main-section--adjust-padding'>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='#topic-detail-view'\n            style={{ position: 'absolute' }}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n            <JumpLinksItem key={7} href='#delete'>\n              Delete\n            </JumpLinksItem>\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <PageGroup hasOverflowScroll id='topic-detail-view'>\n            <PageSection padding={{ default: 'noPadding' }}>\n              <Split>\n                <SplitItem isFilled>\n                  <TextContent>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='core-configuration'\n                    >\n                      Core configuration\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.coreConfigInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail name'\n                    fieldLabel='Name'\n                    fieldValue={topic.name}\n                    popoverBody={t('createTopic.topicNameLabelBody')}\n                    popoverHeader={t('createTopic.topicNameLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail partition'\n                    fieldLabel='Partitions'\n                    fieldValue={topic.numPartitions}\n                    popoverBody={t('createTopic.partitionsLabelBody')}\n                    popoverHeader={t('createTopic.partitionsLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail replicas'\n                    fieldLabel='Replicas'\n                    fieldValue={'3'}\n                    popoverBody={t('createTopic.replicasLabelBody')}\n                    popoverHeader={t('createTopic.replicasLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min-in-sync replica'\n                    fieldLabel='Minimum in-sync replicas'\n                    fieldValue={'2'}\n                    popoverBody={t('createTopic.inSyncReplicasLabelBody')}\n                    popoverHeader={t('createTopic.inSyncReplicasLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention time'\n                    fieldLabel='Retention Time'\n                    fieldValue={topic['retention.ms']}\n                    popoverBody={t('createTopic.retentionTimeLabelBody')}\n                    popoverHeader={t('createTopic.retentionTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention size'\n                    fieldLabel='Retention Size'\n                    fieldValue={topic['retention.bytes']}\n                    popoverHeader={t('createTopic.retentionBytesLabelHead')}\n                    popoverBody={t('createTopic.retentionBytesLabelBody')}\n                    unit={'bytes'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='messages'\n                    >\n                      Messages\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.messageSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail max message bytes'\n                    fieldLabel='Maximum message bytes'\n                    fieldValue={'1048588'}\n                    popoverBody={t('createTopic.maxMessageSizeLabelBody')}\n                    popoverHeader={t('createTopic.maxMessageSizeLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message timestamp type'\n                    fieldLabel='Message timestamp type'\n                    fieldValue={'CreateTime'}\n                    popoverBody={t('createTopic.messageTimestampLabelBody')}\n                    popoverHeader={t('createTopic.messageTimestampLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message timestamp difference'\n                    fieldLabel='Maximum message timestamp difference'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.messageTimestampDiffLabelBody')}\n                    popoverHeader={t(\n                      'createTopic.messageTimestampDiffLabelHead'\n                    )}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail compression type'\n                    fieldLabel='Compression type'\n                    fieldValue='Producer'\n                    popoverBody={t('createTopic.compressionTypeLabelBody')}\n                    popoverHeader={t('createTopic.compressionTypeLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail message format version'\n                    fieldLabel='Message format version'\n                    fieldValue='2.7-IV2'\n                    popoverBody={t('createTopic.messageFormatLabelBody')}\n                    popoverHeader={t('createTopic.messageFormatLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                      Log\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('createTopic.logSectionInfo')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('createTopic.logSectionInfoNote')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail cleanup policy'\n                    fieldLabel='Cleanup policy'\n                    fieldValue={topic['cleanup.policy']}\n                    popoverBody={t('createTopic.cleanupPolicyLabelBody')}\n                    popoverHeader={t('createTopic.cleanupPolicyLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail retention bytes'\n                    fieldLabel='Delete retention time'\n                    fieldValue={'86400000'}\n                    popoverBody={t('createTopic.deleteRetentionLabelBody')}\n                    popoverHeader={t('createTopic.deleteRetentionLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min cleanable dirty ratio'\n                    fieldLabel='Minimum cleanable dirty ratio'\n                    fieldValue={'0.5'}\n                    popoverBody={t('createTopic.minRatioLabelBody')}\n                    popoverHeader={t('createTopic.minRatioLabelHead')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail min compaction lag time'\n                    fieldLabel='Minimum compaction lag time'\n                    fieldValue={'0'}\n                    popoverBody={t('createTopic.minLagLabelBody')}\n                    popoverHeader={t('createTopic.minLagLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='replication'\n                    >\n                      Replication\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('createTopic.replicationSectionInfo')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('createTopic.replicationSectionInfoNote')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail unclean leader election'\n                    fieldLabel='Unclean leader election'\n                    fieldValue={'Disabled'}\n                    popoverBody={t('createTopic.leaderElectionLabelBody')}\n                    popoverHeader={t('createTopic.leaderElectionLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='cleanup'\n                    >\n                      Cleanup\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.cleanupSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='topic detail max message bytes'\n                    fieldLabel='Log segment size'\n                    fieldValue={'1073741824'}\n                    popoverBody={t('createTopic.logSegmentLabelHead')}\n                    popoverHeader={t('createTopic.logSegmentLabelBody')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment time'\n                    fieldLabel='Segment time'\n                    fieldValue={'604800000'}\n                    popoverBody={t('createTopic.segementTimeLabelBody')}\n                    popoverHeader={t('createTopic.segementTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment jitter time'\n                    fieldLabel='Segment jitter time'\n                    fieldValue={'0'}\n                    popoverBody={t('createTopic.jitterTimeLabelBody')}\n                    popoverHeader={t('createTopic.jitterTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='file delete delay'\n                    fieldLabel='File delete delay'\n                    fieldValue={'60000'}\n                    popoverBody={t('createTopic.deleteDelayLabelBody')}\n                    popoverHeader={t('createTopic.deleteDelayLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='preallocation log segment files'\n                    fieldLabel='Preallocation log segment files'\n                    fieldValue={'Disabled'}\n                    popoverBody={t('createTopic.preallocateLabelBody')}\n                    popoverHeader={t('createTopic.preallocateLabelHead')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                      Index\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.indexSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='index interval size'\n                    fieldLabel='Index interval size'\n                    fieldValue={'4096'}\n                    popoverBody={t('createTopic.indexIntervalLabelBody')}\n                    popoverHeader={t('createTopic.indexIntervalLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='segment index size'\n                    fieldLabel='Segment index size'\n                    fieldValue={'10485760'}\n                    popoverBody={t('createTopic.segementIntervalLabelBody')}\n                    popoverHeader={t('createTopic.segementIntervalLabelHead')}\n                    unit={'bytes'}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                      Flush\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.flushSectionInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='flush interval messages'\n                    fieldLabel='Flush interval messages'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.intervalMessagesLabelBody')}\n                    popoverHeader={t('createTopic.intervalMessagesLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel='flush interval time'\n                    fieldLabel='Flush interval time'\n                    fieldValue={'9223372036854775807'}\n                    popoverBody={t('createTopic.intervalTimeLabelBody')}\n                    popoverHeader={t('createTopic.intervalTimeLabelHead')}\n                    unit={'ms'}\n                  />\n\n                  <Divider />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                      Delete topic (irreversible)\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('createTopic.deleteTopicInfo')}\n                    </Text>\n                  </TextContent>\n\n                  <Button\n                    variant='danger'\n                    className='section-margin'\n                    onClick={deleteTopic}\n                  >\n                    Delete topic\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <Button variant='primary' onClick={updateTopic}>\n                    Edit properties\n                  </Button>\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport { AdvancedTopic, initialState } from '../../../Contexts/Topic';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupsList } from '../../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\nimport { isAxiosError } from '../../../Utils/axios';\nimport { AlertContext } from '../../../Contexts/Alert';\nimport { useHistory } from 'react-router';\n\nexport type TopicDetailGroupProps = {\n  topicName: string;\n  onUpdateTopic: () => void;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onDeleteTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n  eventKey: number;\n};\n\nexport const TopicDetailGroup: React.FC<TopicDetailGroupProps> = ({\n  topicName,\n  onUpdateTopic,\n  getTopicListPath,\n  onClickTopicList,\n  onDeleteTopic,\n  onError,\n  eventKey,\n}) => {\n  const [topicDetail, setTopicDetail] = useState<AdvancedTopic>(initialState);\n  const [activeTabKey, setActiveTabKey] = useState(eventKey);\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n  const fetchTopicDetail = async (topicName: string) => {\n    if (eventKey === 2) {\n      try {\n        const response = await getTopicDetail(topicName, config);\n        setTopicDetail(response);\n      } catch (err) {\n        if (isAxiosError(err)) {\n          if (onError) {\n            onError(err.response?.data.code, err.response?.data.error_message);\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert(`Topic ${topicName} does not exist`, AlertVariant.danger);\n            onClickTopicList();\n          }\n        }\n      }\n    }\n  };\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n  const onDeleteConsumer = () => {\n    history.push('/consumerGroups');\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        getTopicListPath={getTopicListPath}\n        onClickTopicList={onClickTopicList}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          isBox={false}\n          className='kafka-ui--tab-padding'\n        >\n          <Tab\n            eventKey={1}\n            data-testid='pageTopic-tabConsumers'\n            title={<TabTitleText>Consumer Groups</TabTitleText>}\n          >\n            <ConsumerGroupsList\n              onDeleteConsumerGroup={onDeleteConsumer}\n              consumerGroupByTopic={true}\n              topic={topicName}\n            />\n          </Tab>\n          <Tab\n            eventKey={2}\n            title={<TabTitleText>Properties</TabTitleText>}\n            data-testid='pageTopic-tabProperties'\n          >\n            <PageSection padding={{ default: 'noPadding' }}>\n              <TopicDetailView\n                topic={topicDetail}\n                deleteTopic={deleteTopic}\n                updateTopic={onUpdateTopic}\n              />\n            </PageSection>\n          </Tab>\n        </Tabs>\n        {deleteModal && (\n          <DeleteTopics\n            topicName={topicName}\n            deleteModal={deleteModal}\n            setDeleteModal={setDeleteModal}\n            onDeleteTopic={onDeleteTopic}\n          />\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"sourceRoot":""}