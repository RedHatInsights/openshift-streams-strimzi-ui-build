{"version":3,"sources":["webpack://kafka-ui/./src/modules/Topics/components/CreateTopicHead/CreateTopicHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepTopicName/StepTopicName.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepPartitions/StepPartitions.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepMessageRetention/StepMessageRetention.tsx","webpack://kafka-ui/./src/modules/Topics/components/StepReplicas/StepReplicas.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/WizardCustomFooter.tsx","webpack://kafka-ui/./src/modules/Topics/components/CreateTopicWizard/CreateTopicWizard.tsx","webpack://kafka-ui/./src/modules/Topics/pages/CreateTopic/CreateTopicPage.tsx"],"names":["CreateTopichead","isSwitchChecked","setIsSwitchChecked","kafkaName","kafkaPageLink","t","useTranslation","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","className","PageSection","variant","PageSectionVariants","Title","headingLevel","size","Switch","id","label","labelOff","isChecked","onChange","StepTopicName","topicData","setTopicData","topicNameValidated","setTopicNameValidated","invalidText","setInvalidText","topicNameInput","Form","onSubmit","event","preventDefault","FormSection","title","titleElement","TextContent","Text","component","TextVariants","FormGroup","fieldId","helperText","helperTextInvalid","validated","isRequired","TextInput","type","name","value","legalNameChars","RegExp","length","test","validationCheck","placeholder","StepPartitions","partitionTouchspinValue","setPartitionTouchspinValue","NumberInput","onPlus","onMinus","inputName","num","Number","target","widthChars","min","StepMessageRetention","RetentionTimeOption","RetentionSizeOption","setMsgRetentionValue","currentPeriod","currentSize","setCurrentPeriod","setCurrentSize","setRetentionSize","useState","retentionTimeTouchspinValue","setRetentionTimeTouchspinValue","retentionSizeTouchspinValue","setRetentionSizeTouchspinValue","isRetentionTimeSelectOpen","setIsRetentionTimeSelectOpen","isRetentionSizeSelectOpen","setIsRetentionSizeSelectOpen","selectedTime","setSelectedTime","selectedSize","setSelectedSize","DAY","retentionTimeFactor","setRetentionTimeFactor","BYTE","retentionSizeFactor","setRetentionSizeFactor","useEffect","WEEK","UNLIMITED","CUSTOM","handleMessageRetention","_","Stack","hasGutter","Radio","Flex","FlexItem","Select","SelectVariant","onToggle","onSelect","selection","MILLISECOND","SECOND","MINUTE","HOUR","selections","isOpen","SelectOption","key","isPlaceholder","KILOBYTE","MEGABYTE","GIGABYTE","TERABYTE","StepReplicas","replicationFactor","minInSyncReplica","Alert","isInline","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","toString","popoverBody","popoverHeader","WizardCustomFooter","isLoading","onValidate","closeWizard","WizardFooter","WizardContextConsumer","activeStep","onNext","onBack","Button","onClick","isDisabled","onCloseCreateTopic","config","useContext","addAlert","useAlert","msgRetentionValue","retentionSize","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","setIsLoading","numPartitions","saveTopic","topic","settings","basePath","accessToken","getToken","createTopic","then","res","AlertVariant","catch","err","response","data","error_message","steps","enableNext","trim","canJumpTo","nextButtonText","Divider","TopicAdvanceConfig","isCreate","handleCancel","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","footer","topicName","status","fetchTopic","CreateTopicPage","kafkaInstanceLink"],"mappings":"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","file":"568.c5c9e72d.bundle.js","sourcesContent":["import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Breadcrumb,\n  BreadcrumbItem,\n} from \"@patternfly/react-core\";\n\nexport type CreateTopicProps = {\n  isSwitchChecked: boolean;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  setIsSwitchChecked: (value: boolean) => void;\n};\n\nexport const CreateTopichead: React.FC<CreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n  kafkaName,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : \"#\"}>\n        Kafka Instances\n      </BreadcrumbItem>\n      <BreadcrumbItem to=\"#\" isActive>\n        {kafkaName ? kafkaName : t(\"common.kafka_instance_name\")}\n      </BreadcrumbItem>\n      <BreadcrumbItem to=\"#\" isActive>\n        {t(\"topic.create_topic\")}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className=\"pf-c-page__main-breadcrumb\">\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel=\"h1\" size=\"2xl\">\n          {t(\"topic.create_topic\")}\n        </Title>\n        <br />\n        <Switch\n          id=\"simple-switch\"\n          label={t(\"topic.show_all_options\")}\n          labelOff={t(\"topic.show_all_options\")}\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className=\"create-topic-wizard\"\n        />\n      </PageSection>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Form,\n  FormGroup,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  FormSection,\n} from \"@patternfly/react-core\";\nimport \"../CreateTopicWizard/CreateTopicWizard.css\";\nexport type StepTopicNameProps = {\n  topicData: any;\n  setTopicData: (value: any) => void;\n  topicNameValidated: \"error\" | \"default\";\n  setTopicNameValidated: (value: \"error\" | \"default\") => void;\n  invalidText: string;\n  setInvalidText: (value: string) => void;\n};\n\nexport const StepTopicName: React.FC<StepTopicNameProps> = ({\n  topicData,\n  setTopicData,\n  topicNameValidated,\n  setTopicNameValidated,\n  invalidText,\n  setInvalidText,\n}) => {\n  const { t } = useTranslation();\n\n  const topicNameInput = topicData && topicData[\"name\"];\n\n  const validationCheck = (topicNameInput) => {\n    const legalNameChars = new RegExp('^[a-zA-Z0-9._-]+$');\n    if (topicNameInput.length && !legalNameChars.test(topicNameInput)) {\n      setInvalidText(t(\"topic.topic_name_helper_text\"));\n      setTopicNameValidated(\"error\");\n    } else if (topicNameInput.length > 249) {\n      setTopicNameValidated(\"error\");\n      setInvalidText(t(\"topic.cannot_exceed_characters\"));\n    } else if (topicNameInput === '.' || topicNameInput === '..') {\n      setTopicNameValidated('error');\n      setInvalidText(t('topic.invalid_name_with_dot'));\n    } else setTopicNameValidated(\"default\");\n  };\n\n  const handleTopicNameChange = (value) => {\n    validationCheck(value);\n    setTopicData({ ...topicData, name: value });\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Form onSubmit={preventFormSubmit}>\n      <FormSection\n        title={t(\"topic.topic_name\")}\n        id=\"topic-name\"\n        titleElement={\"h2\"}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t(\"topic.topic_name_info\")}</Text>\n          <Text component={TextVariants.small}>\n            {t(\"topic.topic_name_info_note\")}\n          </Text>\n        </TextContent>\n        <FormGroup\n          label={t(\"topic.topic_name\")}\n          fieldId=\"step-topic-name-form\"\n          helperText={t(\"topic.topic_name_helper_text\")}\n          helperTextInvalid={invalidText}\n          validated={topicNameValidated}\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"step-topic-name-input\"\n            name=\"step-topic-name\"\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder={t(\"topic.enter_name\")}\n            validated={topicNameValidated}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  FormSection,\n} from \"@patternfly/react-core\";\nimport \"../CreateTopicWizard/CreateTopicWizard.css\";\n\nexport type StepPartitionsProps = {\n  setPartitionTouchspinValue: (value: number) => void;\n  partitionTouchspinValue: number;\n};\n\nexport const StepPartitions: React.FC<StepPartitionsProps> = ({\n  partitionTouchspinValue,\n  setPartitionTouchspinValue,\n}) => {\n  const minValue = 1;\n\n  const { t } = useTranslation();\n\n  const handleOnPlus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue + 1);\n  };\n  const handleOnMinus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue - 1);\n  };\n  const handlePartitionTouchspinChange = (event) => {\n    let num = Number(event.target.value);\n    if (num < minValue) {\n      num = minValue;\n    }\n    setPartitionTouchspinValue(num);\n  };\n\n  return (\n    <Form>\n      <FormSection\n        title={t(\"topic.partitions\")}\n        id=\"partitions\"\n        titleElement={\"h2\"}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t(\"topic.partition_info\")}</Text>\n          <Text component={TextVariants.small}>\n            {t(\"topic.partition_info_note\")}\n          </Text>\n        </TextContent>\n\n        <FormGroup\n          label=\"Partitions\"\n          fieldId=\"step-topic-name-form\"\n          helperText={t(\"topic.partition_helper_text\")}\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={partitionTouchspinValue}\n            inputName=\"input\"\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n            min={minValue}\n          />\n        </FormGroup>\n      </FormSection>\n    </Form>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  FormSection,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport \"../CreateTopicWizard/CreateTopicWizard.css\";\n\nexport type StepMessageRetentionProps = {\n  setMsgRetentionValue: (value: number) => void;\n  currentPeriod: string | number;\n  currentSize: string | number;\n  setCurrentPeriod: (value: string | number) => void;\n  setCurrentSize: (value: string | number) => void;\n  setRetentionSize: (value: number) => void;\n};\n\nexport const StepMessageRetention: React.FC<StepMessageRetentionProps> = ({\n  setMsgRetentionValue,\n  currentPeriod,\n  currentSize,\n  setCurrentPeriod,\n  setCurrentSize,\n  setRetentionSize,\n}) => {\n  const { t } = useTranslation();\n\n  enum RetentionTimeOption {\n    MILLISECOND = 1,\n    SECOND = 1000,\n    MINUTE = 60000,\n    HOUR = 3600000,\n    DAY = 86400000,\n    WEEK = 604800000,\n    CUSTOM = \"custom\",\n    UNLIMITED = -1,\n  }\n\n  enum RetentionSizeOption {\n    BYTE = 1,\n    KILOBYTE = 1000,\n    MEGABYTE = 1000000,\n    GIGABYTE = 1000000000,\n    TERABYTE = 1000000000000,\n    CUSTOM = \"custom\",\n    UNLIMITED = -1,\n  }\n  const [\n    retentionTimeTouchspinValue,\n    setRetentionTimeTouchspinValue,\n  ] = useState<number>(7);\n  const [\n    retentionSizeTouchspinValue,\n    setRetentionSizeTouchspinValue,\n  ] = useState<number>(1);\n  const [\n    isRetentionTimeSelectOpen,\n    setIsRetentionTimeSelectOpen,\n  ] = useState<boolean>(false);\n  const [\n    isRetentionSizeSelectOpen,\n    setIsRetentionSizeSelectOpen,\n  ] = useState<boolean>(false);\n  const [selectedTime, setSelectedTime] = useState<boolean>(false);\n  const [selectedSize, setSelectedSize] = useState<boolean>(false);\n  const [retentionTimeFactor, setRetentionTimeFactor] = useState<number>(\n    RetentionTimeOption.DAY\n  );\n  const [retentionSizeFactor, setRetentionSizeFactor] = useState<number>(\n    RetentionSizeOption.BYTE\n  );\n\n  useEffect(() => {\n    if (currentPeriod === RetentionTimeOption.DAY) {\n      setMsgRetentionValue(RetentionTimeOption.DAY);\n    } else if (currentPeriod === RetentionTimeOption.WEEK) {\n      setMsgRetentionValue(RetentionTimeOption.WEEK);\n    } else if (currentPeriod === RetentionTimeOption.UNLIMITED) {\n      setMsgRetentionValue(RetentionTimeOption.UNLIMITED);\n    } else if (currentPeriod === RetentionTimeOption.CUSTOM) {\n      setMsgRetentionValue(retentionTimeFactor * retentionTimeTouchspinValue);\n    }\n\n    if (currentSize === RetentionSizeOption.UNLIMITED) {\n      setRetentionSize(RetentionSizeOption.UNLIMITED);\n    } else if (currentSize === RetentionSizeOption.CUSTOM) {\n      setRetentionSize(retentionSizeFactor * retentionSizeTouchspinValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    currentPeriod,\n    currentSize,\n    retentionTimeTouchspinValue,\n    retentionSizeTouchspinValue,\n    retentionTimeFactor,\n    retentionSizeFactor,\n  ]);\n\n  const handleMessageRetention = (_, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === \"radioDay\") {\n      setCurrentPeriod(RetentionTimeOption.DAY);\n    } else if (name === \"radioWeek\") {\n      setCurrentPeriod(RetentionTimeOption.WEEK);\n    } else if (name === \"radioUnlimitedTime\") {\n      setCurrentPeriod(RetentionTimeOption.UNLIMITED);\n    } else if (name === \"radioCustomTime\") {\n      setCurrentPeriod(RetentionTimeOption.CUSTOM);\n    }\n\n    if (name === \"radioCustomSize\") {\n      setCurrentSize(RetentionSizeOption.CUSTOM);\n    } else if (name === \"radioUnlimitedSize\") {\n      setCurrentSize(RetentionSizeOption.UNLIMITED);\n    }\n  };\n\n  const onRetentionTimeToggle = (isRetentionTimeSelectOpen) => {\n    setIsRetentionTimeSelectOpen(isRetentionTimeSelectOpen);\n  };\n\n  const onRetentionSizeToggle = (isRetentionSizeSelectOpen) => {\n    setIsRetentionSizeSelectOpen(isRetentionSizeSelectOpen);\n  };\n\n  const onRetentionTimeSelect = (event, selection) => {\n    if (selection === \"days\") {\n      setRetentionTimeFactor(RetentionTimeOption.DAY);\n    } else if (selection === \"unlimited\") {\n      setRetentionTimeFactor(RetentionTimeOption.UNLIMITED);\n    } else if (selection === \"milliseconds\") {\n      setRetentionTimeFactor(RetentionTimeOption.MILLISECOND);\n    } else if (selection === \"seconds\") {\n      setRetentionTimeFactor(RetentionTimeOption.SECOND);\n    } else if (selection === \"minutes\") {\n      setRetentionTimeFactor(RetentionTimeOption.MINUTE);\n    } else if (selection === \"hours\") {\n      setRetentionTimeFactor(RetentionTimeOption.HOUR);\n    }\n    setSelectedTime(selection);\n    setIsRetentionTimeSelectOpen(false);\n  };\n\n  const onRetentionSizeSelect = (event, selection) => {\n    if (selection === \"unlimited\") {\n      setRetentionSizeFactor(RetentionSizeOption.UNLIMITED);\n    } else if (selection === \"bytes\") {\n      setRetentionSizeFactor(RetentionSizeOption.BYTE);\n    } else if (selection === \"kilobytes\") {\n      setRetentionSizeFactor(RetentionSizeOption.KILOBYTE);\n    } else if (selection === \"megabytes\") {\n      setRetentionSizeFactor(RetentionSizeOption.MEGABYTE);\n    } else if (selection === \"gigabytes\") {\n      setRetentionSizeFactor(RetentionSizeOption.GIGABYTE);\n    } else if (selection === \"terabytes\") {\n      setRetentionSizeFactor(RetentionSizeOption.TERABYTE);\n    }\n    setSelectedSize(selection);\n    setIsRetentionSizeSelectOpen(false);\n  };\n\n  const handleRetentionTimePlusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue + 1);\n  };\n\n  const handleRetentionTimeMinusClick = () => {\n    setRetentionTimeTouchspinValue(retentionTimeTouchspinValue - 1);\n  };\n\n  const handleRetentionTimeTouchSpinChange = (event) => {\n    setRetentionTimeTouchspinValue(Number(event.target.value));\n  };\n\n  const handleRetentionSizePlusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue + 1);\n  };\n\n  const handleRetentionSizeMinusClick = () => {\n    setRetentionSizeTouchspinValue(retentionSizeTouchspinValue - 1);\n  };\n\n  const handleRetentionSizeTouchSpinChange = (event) => {\n    setRetentionSizeTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Form onSubmit={preventFormSubmit}>\n        <FormSection\n          title={t(\"topic.message_retention\")}\n          id=\"message-retention\"\n          titleElement={\"h2\"}\n        >\n          <TextContent>\n            <Text component={TextVariants.p}>\n              {t(\"topic.message_retention_info\")}\n            </Text>\n            <Text component={TextVariants.small}>\n              {t(\"topic.message_retention_info_note\")}\n            </Text>\n          </TextContent>\n\n          <FormGroup\n            fieldId=\"form-group-retention-time-in-wizard\"\n            label={t(\"topic.retention_time\")}\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.DAY}\n                name=\"radioDay\"\n                onChange={handleMessageRetention}\n                label=\"A day\"\n                aria-label=\"A day\"\n                id=\"radio-controlled-1\"\n                value=\"day\"\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.WEEK}\n                name=\"radioWeek\"\n                onChange={handleMessageRetention}\n                label=\"A week\"\n                aria-label=\"A week\"\n                id=\"radio-controlled-2\"\n                value=\"week\"\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.CUSTOM}\n                name=\"radioCustomTime\"\n                onChange={handleMessageRetention}\n                label=\"Custom duration\"\n                aria-label=\"custom input\"\n                id=\"radio-controlled-4\"\n                value=\"custom\"\n              />\n              <div className=\"kafka-ui--radio__parameters\">\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionTimeMinusClick}\n                      onPlus={handleRetentionTimePlusClick}\n                      value={retentionTimeTouchspinValue}\n                      onChange={handleRetentionTimeTouchSpinChange}\n                      min={0}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label=\"Select Input\"\n                      onToggle={onRetentionTimeToggle}\n                      onSelect={onRetentionTimeSelect}\n                      selections={selectedTime}\n                      isOpen={isRetentionTimeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={0} value=\"days\" isPlaceholder />\n                      <SelectOption key={1} value=\"seconds\" />\n                      <SelectOption key={2} value=\"minutes\" />\n                      <SelectOption key={3} value=\"hours\" />\n                      <SelectOption key={4} value=\"milliseconds\" />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n              <Radio\n                isChecked={currentPeriod === RetentionTimeOption.UNLIMITED}\n                name=\"radioUnlimitedTime\"\n                onChange={handleMessageRetention}\n                label=\"Unlimited\"\n                aria-label=\"Unlimited\"\n                id=\"radio-controlled-3\"\n                value=\"unlimited\"\n              />\n            </Stack>\n          </FormGroup>\n          <FormGroup\n            fieldId=\"form-group-retention-size-in-wizard\"\n            label=\"Retention size\"\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.UNLIMITED}\n                name=\"radioUnlimitedSize\"\n                onChange={handleMessageRetention}\n                label=\"Unlimited\"\n                aria-label=\"Unlimited\"\n                id=\"radio-controlled-6\"\n                value=\"unlimited\"\n              />\n              <Radio\n                isChecked={currentSize === RetentionSizeOption.CUSTOM}\n                name=\"radioCustomSize\"\n                onChange={handleMessageRetention}\n                label=\"Custom size\"\n                aria-label=\"custom input\"\n                id=\"radio-controlled-5\"\n                value=\"custom\"\n              />\n              <div className=\"kafka-ui--radio__parameters\">\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleRetentionSizeMinusClick}\n                      onPlus={handleRetentionSizePlusClick}\n                      value={retentionSizeTouchspinValue}\n                      onChange={handleRetentionSizeTouchSpinChange}\n                      min={0}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label=\"Select Input\"\n                      onToggle={onRetentionSizeToggle}\n                      onSelect={onRetentionSizeSelect}\n                      selections={selectedSize}\n                      isOpen={isRetentionSizeSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={5} value=\"bytes\" isPlaceholder />\n                      <SelectOption key={6} value=\"kilobytes\" />\n                      <SelectOption key={7} value=\"megabytes\" />\n                      <SelectOption key={8} value=\"gigabytes\" />\n                      <SelectOption key={9} value=\"terabytes\" />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n            </Stack>\n          </FormGroup>\n        </FormSection>\n      </Form>\n    </>\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Text,\n  TextContent,\n  TextVariants,\n  Form,\n  FormSection,\n} from \"@patternfly/react-core\";\nimport \"../CreateTopicWizard/CreateTopicWizard.css\";\nimport { TextWithLabelPopover } from \"@app/components/TextWithLabelPopover\";\n\nexport type StepReplicasProps = {\n  replicationFactor: number;\n  minInSyncReplica: number;\n};\n\nexport const StepReplicas: React.FC<StepReplicasProps> = ({\n  replicationFactor,\n  minInSyncReplica,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Form>\n      <FormSection\n        title={t(\"common.replicas\")}\n        id=\"replica-section\"\n        titleElement={\"h2\"}\n      >\n        <TextContent>\n          <Text component={TextVariants.p}>{t(\"topic.replicas_info\")}</Text>\n          <Text component={TextVariants.small}>\n            {t(\"topic.replicas_detail\")}\n          </Text>\n        </TextContent>\n        <Alert\n          variant=\"info\"\n          isInline\n          title={t(\"topic.replicas_helper_text\")}\n        />\n\n        <TextWithLabelPopover\n          fieldId=\"replicas\"\n          btnAriaLabel={t(\"common.replicas\")}\n          fieldLabel={t(\"common.replicas\")}\n          fieldValue={replicationFactor.toString()}\n          popoverBody={t(\"topic.replicas_description\")}\n          popoverHeader={t(\"topic.replicas\")}\n        />\n\n        <TextWithLabelPopover\n          fieldId=\"min-insync-replicas\"\n          btnAriaLabel=\"topic detail min-in-sync replica\"\n          fieldLabel=\"Minimum in-sync replicas\"\n          fieldValue={minInSyncReplica.toString()}\n          popoverBody={t(\"topic.min_insync_replicas_description\")}\n          popoverHeader={t(\"topic.min_insync_replicas\")}\n        />\n      </FormSection>\n    </Form>\n  );\n};\n","import React from \"react\";\nimport {\n  WizardContextConsumer,\n  Button,\n  WizardFooter,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nexport interface IWizardFooter {\n  isLoading: boolean;\n  onValidate: (value: () => void) => void;\n  topicNameValidated: \"error\" | \"default\";\n  closeWizard: () => void;\n}\nexport const WizardCustomFooter: React.FC<IWizardFooter> = ({\n  isLoading,\n  onValidate,\n  topicNameValidated,\n  closeWizard,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, onNext, onBack }) => {\n          if (activeStep.name == t(\"topic.topic_name\")) {\n            return (\n              <>\n                <Button\n                  variant=\"primary\"\n                  type=\"submit\"\n                  isLoading={isLoading}\n                  onClick={() => onValidate(onNext)}\n                  isDisabled={topicNameValidated == \"default\" ? false : true}\n                >\n                  {t(\"common.next\")}\n                </Button>\n                <Button variant=\"secondary\" isDisabled={true}>\n                  {t(\"common.back\")}\n                </Button>\n                <Button variant=\"link\" onClick={closeWizard}>\n                  {t(\"common.cancel\")}\n                </Button>\n              </>\n            );\n          }\n\n          if (activeStep.name == \"Replicas\") {\n            return (\n              <>\n                <Button\n                  variant=\"primary\"\n                  type=\"submit\"\n                  onClick={onNext}\n                  isLoading={isLoading}\n                >\n                  {t(\"common.finish\")}\n                </Button>\n                <Button variant=\"secondary\" onClick={onBack}>\n                  {t(\"common.back\")}\n                </Button>\n                <Button variant=\"link\" onClick={closeWizard}>\n                  {t(\"common.cancel\")}\n                </Button>\n              </>\n            );\n          }\n          return (\n            <>\n              <Button variant=\"primary\" type=\"submit\" onClick={onNext}>\n                {t(\"common.next\")}\n              </Button>\n              <Button variant=\"secondary\" onClick={onBack}>\n                {t(\"common.back\")}\n              </Button>\n              <Button variant=\"link\" onClick={closeWizard}>\n                {t(\"common.cancel\")}\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  AlertVariant,\n  Divider,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from \"@patternfly/react-core\";\nimport {\n  StepTopicName,\n  StepPartitions,\n  StepMessageRetention,\n  StepReplicas,\n  TopicAdvanceConfig,\n  WizardCustomFooter,\n} from \"@app/modules/Topics/components\";\nimport { DefaultApi, NewTopicInput } from \"@app/openapi/api\";\nimport { convertUnits, formatTopicRequest } from \"@app/modules/Topics/utils\";\nimport { ConfigContext } from \"@app/contexts\";\nimport { Configuration } from \"@app/openapi\";\nimport { getTopic } from \"@app/services\";\nimport { useAlert } from \"@bf2/ui-shared\";\nimport \"./CreateTopicWizard.css\";\n\nexport type CreateTopicWizardProps = {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n  onCloseCreateTopic: () => void;\n};\n\nexport interface IAdvancedTopic {\n  /** unique identifier for a topic within the cluster */\n  name: string;\n  /** ordered list of messages that make up a topic */\n  numPartitions: string;\n  /** the length of time that messages are retained before they are deleted */\n  \"retention.ms\"?: string;\n  /** unit for retention time */\n  \"retention.ms.unit\"?: string;\n  /** maximum total size of a partition's log segments before old log segments are deleted */\n  \"retention.bytes\"?: string;\n  /** unit for retention bytes */\n  \"retention.bytes.unit\"?: string;\n  /** determines whether messages that reach the retention window are deleted or compacted */\n  \"cleanup.policy\"?: string;\n}\n\nexport const CreateTopicWizard: React.FC<CreateTopicWizardProps> = ({\n  isSwitchChecked,\n  onCloseCreateTopic,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n  const { addAlert } = useAlert();\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [retentionSize, setRetentionSize] = useState(1);\n  const [partitionTouchspinValue, setPartitionTouchspinValue] = useState(1);\n  const [replicationFactorTouchspinValue] = useState(3);\n  const [minInSyncReplicaTouchspinValue] = useState(2);\n  const [topicNameValidated, setTopicNameValidated] =\n    useState<\"error\" | \"default\">(\"default\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [invalidText, setInvalidText] = useState<string>(\"\");\n  const [topicData, setTopicData] = useState<IAdvancedTopic>({\n    name: \"\",\n    numPartitions: \"1\",\n    \"retention.ms\": \"7\",\n    \"retention.ms.unit\": \"days\",\n    \"retention.bytes\": \"-1\",\n    \"retention.bytes.unit\": \"bytes\",\n    \"cleanup.policy\": \"delete\",\n  });\n\n  const [currentPeriod, setCurrentPeriod] =\n    React.useState<string | number>(604800000);\n  const [currentSize, setCurrentSize] = React.useState<string | number>(-1);\n\n  const closeWizard = () => {\n    onCloseCreateTopic && onCloseCreateTopic();\n  };\n\n  const saveTopic = () => {\n    // Object may change based on schema\n    setIsLoading(true);\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(topicData))\n      : {\n          name: topicData?.name,\n          settings: {\n            numPartitions: partitionTouchspinValue,\n            config: [\n              {\n                key: \"retention.ms\",\n                value: msgRetentionValue.toString(),\n              },\n              { key: \"retention.bytes\", value: retentionSize.toString() },\n            ],\n          },\n        };\n\n    new DefaultApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then((res) => {\n        addAlert({\n          variant: AlertVariant.success,\n          title: t(\"topic.topic_successfully_created\"),\n        });\n        setIsLoading(false);\n        closeWizard();\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        addAlert({\n          variant: AlertVariant.danger,\n          title: err.response.data.error_message,\n        });\n        closeWizard();\n      });\n  };\n\n  const fetchTopic = async (topicName, onNext) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      if (topicRes) {\n        setInvalidText(t(\"topic.already_exists\", { name: topicName }));\n        setTopicNameValidated(\"error\");\n        setIsLoading(false);\n      }\n    } catch (error) {\n      if (error.response.status == \"404\") {\n        setTopicNameValidated(\"default\");\n        setIsLoading(false);\n        onNext();\n      }\n    }\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: t(\"topic.topic_name\"),\n      enableNext:\n        topicData?.name.trim() !== \"\" && topicNameValidated === \"default\",\n      component: (\n        <StepTopicName\n          topicData={topicData}\n          setTopicData={setTopicData}\n          topicNameValidated={topicNameValidated}\n          setTopicNameValidated={setTopicNameValidated}\n          invalidText={invalidText}\n          setInvalidText={setInvalidText}\n        />\n      ),\n    },\n    {\n      name: t(\"common.partitions\"),\n      canJumpTo: topicData?.name.trim() !== \"\",\n      component: (\n        <StepPartitions\n          partitionTouchspinValue={partitionTouchspinValue}\n          setPartitionTouchspinValue={setPartitionTouchspinValue}\n        />\n      ),\n    },\n    {\n      name: t(\"topic.message_retention\"),\n      canJumpTo: topicData?.name.trim() !== \"\",\n      component: (\n        <StepMessageRetention\n          setMsgRetentionValue={setMsgRetentionValue}\n          currentPeriod={currentPeriod}\n          currentSize={currentSize}\n          setCurrentPeriod={setCurrentPeriod}\n          setCurrentSize={setCurrentSize}\n          setRetentionSize={setRetentionSize}\n        />\n      ),\n    },\n    {\n      name: t(\"common.replicas\"),\n      canJumpTo: topicData?.name.trim() !== \"\",\n      component: (\n        <StepReplicas\n          replicationFactor={replicationFactorTouchspinValue}\n          minInSyncReplica={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: t(\"common.finish\"),\n    },\n  ];\n\n  const title = t(\"topic.wizard_title\");\n\n  const onValidate = (onNext) => {\n    if (topicData?.name.length < 1) {\n      setInvalidText(t('topic.required'));\n      setTopicNameValidated('error');\n    } else if (topicData?.name === '.' || topicData?.name === '..') {\n      setInvalidText(t('topic.invalid_name_with_dot'));\n      setTopicNameValidated('error');\n    } else {\n      setIsLoading(true);\n      fetchTopic(topicData?.name, onNext);\n    }\n  };\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <Divider className=\"kafka-ui--divider--FlexShrink\" />\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig\n              isCreate={true}\n              saveTopic={saveTopic}\n              handleCancel={onCloseCreateTopic}\n              topicData={topicData}\n              setTopicData={setTopicData}\n            />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n            data-testid=\"topicBasicCreate-Wizard\"\n            footer={\n              <WizardCustomFooter\n                isLoading={isLoading}\n                onValidate={onValidate}\n                topicNameValidated={topicNameValidated}\n                closeWizard={closeWizard}\n              />\n            }\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  CreateTopichead,\n  CreateTopicWizard,\n} from \"@app/modules/Topics/components\";\nimport { useFederated } from \"@app/contexts\";\nimport \"../style.css\";\n\nexport type CreateTopicPageProps = {\n  onCloseCreateTopic: () => void;\n};\n\nexport const CreateTopicPage: React.FC<CreateTopicPageProps> = ({\n  onCloseCreateTopic,\n}) => {\n  const { kafkaName, kafkaPageLink, kafkaInstanceLink } = useFederated();\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n        kafkaName={kafkaName}\n        kafkaInstanceLink={kafkaInstanceLink}\n        kafkaPageLink={kafkaPageLink}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        onCloseCreateTopic={onCloseCreateTopic}\n      />\n    </>\n  );\n};\n"],"sourceRoot":""}