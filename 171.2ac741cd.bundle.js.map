{"version":3,"sources":["webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailView.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/TopicDetailPage.tsx","webpack://kafka-ui/./src/Utils/axios.ts"],"names":["TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","topic","deleteTopic","updateTopic","padding","default","Sidebar","hasGutter","SidebarPanel","JumpLinks","isVertical","label","scrollableSelector","offset","style","position","JumpLinksItem","key","href","SidebarContent","PageGroup","hasOverflowScroll","id","Split","SplitItem","isFilled","tabIndex","TextWithLabelPopover","btnAriaLabel","fieldLabel","fieldValue","name","popoverBody","popoverHeader","numPartitions","Number","showUnlimited","Divider","Button","onClick","TopicDetailGroup","onUpdateTopic","onClickTopicList","onDeleteTopic","onError","eventKey","useState","topicDetail","setTopicDetail","activeTabKey","setActiveTabKey","config","useContext","deleteModal","setDeleteModal","addAlert","history","contentRefConsumerGroup","contentRefProperties","useEffect","response","data","code","error_message","status","AlertVariant","fetchTopicDetail","Tabs","activeKey","onSelect","event","isBox","Tab","title","TabTitleText","tabContentId","tabContentRef","TabContent","ref","hidden","onDeleteConsumerGroup","push","consumerGroupByTopic","rowDataId","detailsDataId","isAxiosError","error","undefined"],"mappings":"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","file":"171.2ac741cd.bundle.js","sourcesContent":["import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink ? kafkaInstanceLink : '#'}>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  PageSection,\n  PageGroup,\n  JumpLinks,\n  JumpLinksItem,\n  TextContent,\n  Text,\n  TextVariants,\n  Button,\n  Divider,\n  Sidebar,\n  SidebarContent,\n  SidebarPanel,\n  SplitItem,\n  Split,\n} from '@patternfly/react-core';\nimport {\n  DEFAULT_MESSAGE_TIMESTAMP_TYPE,\n  DEFAULT_DELETE_RETENTION_TIME,\n  DEFAULT_FILE_DELETE_DELAY,\n  DEFAULT_INDEX_INTERVAL_SIZE,\n  DEFAULT_LOG_SEGMENT_SIZE,\n  DEFAULT_MAXIMUM_MESSAGE_BYTES,\n  DEFAULT_MINIMUM_COMPACTION_LAG_TIME,\n  DEFAULT_MIN_CLEANBLE_RATIO,\n  DEFAULT_MIN_INSYNC_REPLICAS,\n  DEFAULT_REPLICAS,\n  DEFAULT_SEGMENT_INDEX_SIZE,\n  DEFAULT_SEGMENT_JITTER_TIME,\n  DEFAULT_SEGMENT_TIME,\n  DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF,\n  DEFAULT_FLUSH_INTERVAL_MESSAGES,\n  DEFAULT_FLUSH_INTERVAL_TIME\n} from '../../../../Constant';\nimport './TopicDetailView.css';\nimport { TextWithLabelPopover } from '../../../../Components/TextWithLabelPopover/TextWithLabelPopover';\nimport { useTranslation } from 'react-i18next';\nimport { IAdvancedTopic } from '../../CreateTopic/Components/CreateTopicWizard';\nimport { convertRetentionSize, convertRetentionTime } from '../../CreateTopic/utils';\n\nexport type TopicViewDetailProps = {\n  /** Topic details */\n  topic: IAdvancedTopic;\n  /** Method to delete topic */\n  deleteTopic: () => void;\n  /** Method to update topic */\n  updateTopic: () => void;\n};\n\nexport const TopicDetailView: React.FunctionComponent<TopicViewDetailProps> = ({\n  topic,\n  deleteTopic,\n  updateTopic,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }}>\n      <Sidebar hasGutter>\n        <SidebarPanel variant='sticky'>\n          <JumpLinks\n            isVertical\n            label={t('topic.jump_to_section')}\n            scrollableSelector='#scrollablePageMain'\n            offset={-164} // for header\n            style={{ position: 'sticky' }}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              {t('topic.core_configuration')}\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              {t('topic.messages')}\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              {t('topic.log')}\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              {t('topic.replication')}\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              {t('common.cleanup')}\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              {t('topic.index')}\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              {t('topic.flush')}\n            </JumpLinksItem>\n            <JumpLinksItem key={7} href='#delete'>\n              {t('common.delete')}\n            </JumpLinksItem>\n          </JumpLinks>\n        </SidebarPanel>\n        <SidebarContent>\n          <PageGroup hasOverflowScroll id='topic-detail-view'>\n            <PageSection padding={{ default: 'noPadding' }}>\n              <Split>\n                <SplitItem isFilled>\n                  <TextContent>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='core-configuration'\n                    >\n                      {t('topic.core_configuration')}\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('topic.core_config_info')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('common.name')}\n                    fieldLabel={t('topic.topic_name')}\n                    fieldValue={topic.name}\n                    popoverBody={t('topic.topic_name_description')}\n                    popoverHeader={t('topic.topic_name')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.partitions')}\n                    fieldLabel={t('topic.partitions')}\n                    fieldValue={topic.numPartitions}\n                    popoverBody={t('topic.partitions_description')}\n                    popoverHeader={t('topic.partitions')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.replicas')}\n                    fieldLabel={t('topic.replicas')}\n                    fieldValue={DEFAULT_REPLICAS}\n                    popoverBody={t('topic.replicas_description')}\n                    popoverHeader={t('topic.replicas')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.min_insync_replicas')}\n                    fieldLabel={t('topic.min_insync_replicas')}\n                    fieldValue={DEFAULT_MIN_INSYNC_REPLICAS}\n                    popoverBody={t('topic.min_insync_replicas_description')}\n                    popoverHeader={t('topic.min_insync_replicas')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.retention_time')}\n                    fieldLabel={t('topic.retention_time')}\n                    fieldValue={convertRetentionTime(Number(topic['retention.ms']))}\n                    popoverBody={t('topic.retention_time_description')}\n                    popoverHeader={t('topic.retention_time')}\n                    showUnlimited={true}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.retention_size')}\n                    fieldLabel={t('topic.retention_size')}\n                    fieldValue={convertRetentionSize(Number(topic['retention.bytes']))}\n                    popoverHeader={t('topic.retention_size')}\n                    popoverBody={t('topic.retention_size_description')}\n                    showUnlimited={true}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='messages'\n                    >\n                      {t('topic.messages')}\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('topic.message_section_info')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.max_message_size')}\n                    fieldLabel={t('topic.max_message_size')}\n                    fieldValue={DEFAULT_MAXIMUM_MESSAGE_BYTES}\n                    popoverBody={t('topic.max_message_size_description')}\n                    popoverHeader={t('topic.max_message_size')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.message_timestamp_type')}\n                    fieldLabel={t('topic.message_timestamp_type')}\n                    fieldValue={DEFAULT_MESSAGE_TIMESTAMP_TYPE}\n                    popoverBody={t('topic.message_timestamp_type_description')}\n                    popoverHeader={t('topic.message_timestamp_type')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.max_message_timestamp_diff')}\n                    fieldLabel={t('topic.max_message_timestamp_diff')}\n                    fieldValue={DEFAULT_MAX_MESSAGE_TIMESTAMP_DIFF}\n                    popoverBody={t(\n                      'topic.max_message_timestamp_diff_description'\n                    )}\n                    popoverHeader={t('topic.max_message_timestamp_diff')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.compression_type')}\n                    fieldLabel={t('topic.compression_type')}\n                    fieldValue='Producer'\n                    popoverBody={t('topic.compression_type_description')}\n                    popoverHeader={t('topic.compression_type')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.message_format')}\n                    fieldLabel={t('topic.message_format')}\n                    fieldValue='2.7-IV2'\n                    popoverBody={t('topic.message_format_description')}\n                    popoverHeader={t('topic.message_format')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='log'>\n                      {t('topic.log')}\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('topic.log_section_info')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('topic.log_section_info_note')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.cleanup_policy')}\n                    fieldLabel={t('topic.cleanup_policy')}\n                    fieldValue={topic['cleanup.policy']}\n                    popoverBody={t('topic.cleanup_policy_description')}\n                    popoverHeader={t('topic.cleanup_policy')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.delete_retention_time')}\n                    fieldLabel={t('topic.delete_retention_time')}\n                    fieldValue={DEFAULT_DELETE_RETENTION_TIME}\n                    popoverBody={t('topic.delete_retention_time_description')}\n                    popoverHeader={t('topic.delete_retention_time')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.min_cleanable_ratio')}\n                    fieldLabel={t('topic.min_cleanable_ratio')}\n                    fieldValue={DEFAULT_MIN_CLEANBLE_RATIO}\n                    popoverBody={t('topic.min_cleanable_ratio_description')}\n                    popoverHeader={t('topic.min_cleanable_ratio')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.min_compaction_lag_time')}\n                    fieldLabel={t('topic.min_compaction_lag_time')}\n                    fieldValue={DEFAULT_MINIMUM_COMPACTION_LAG_TIME}\n                    popoverBody={t('topic.min_compaction_lag_time_description')}\n                    popoverHeader={t('topic.min_compaction_lag_time')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='replication'\n                    >\n                      {t('topic.replication')}\n                    </Text>\n                    <Text\n                      component={TextVariants.p}\n                      className='section-info-head'\n                    >\n                      {t('topic.replication_section_info')}\n                    </Text>\n                    <Text\n                      component={TextVariants.small}\n                      className='section-info-note'\n                    >\n                      {t('topic.replication_section_info_note')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.unclean_leader_election')}\n                    fieldLabel={t('topic.unclean_leader_election')}\n                    fieldValue={t('common.disabled')}\n                    popoverBody={t('topic.unclean_leader_election_description')}\n                    popoverHeader={t('topic.unclean_leader_election')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text\n                      component={TextVariants.h2}\n                      tabIndex={-1}\n                      id='cleanup'\n                    >\n                      {t('common.cleanup')}\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('topic.cleanup_section_info')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.log_segment_size')}\n                    fieldLabel={t('topic.log_segment_size')}\n                    fieldValue={DEFAULT_LOG_SEGMENT_SIZE}\n                    popoverBody={t('topic.log_segment_size_description')}\n                    popoverHeader={t('topic.log_segment_size')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.segement_time')}\n                    fieldLabel={t('topic.segement_time')}\n                    fieldValue={DEFAULT_SEGMENT_TIME}\n                    popoverBody={t('topic.segement_time_description')}\n                    popoverHeader={t('topic.segement_time')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.segment_jitter_time')}\n                    fieldLabel={t('topic.segment_jitter_time')}\n                    fieldValue={DEFAULT_SEGMENT_JITTER_TIME}\n                    popoverBody={t('topic.segment_jitter_time_description')}\n                    popoverHeader={t('topic.segment_jitter_time')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.file_delete_delay')}\n                    fieldLabel={t('topic.file_delete_delay')}\n                    fieldValue={DEFAULT_FILE_DELETE_DELAY}\n                    popoverBody={t('topic.file_delete_delay_description')}\n                    popoverHeader={t('topic.file_delete_delay')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.preallocate_log_segment_files')}\n                    fieldLabel={t('topic.preallocate_log_segment_files')}\n                    fieldValue={t('common.disabled')}\n                    popoverBody={t(\n                      'topic.preallocate_log_segment_files_description'\n                    )}\n                    popoverHeader={t('topic.preallocate_log_segment_files')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='index'>\n                      {t('topic.index')}\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('topic.index_section_info')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.index_interval_size')}\n                    fieldLabel={t('topic.index_interval_size')}\n                    fieldValue={DEFAULT_INDEX_INTERVAL_SIZE}\n                    popoverBody={t('topic.index_interval_size_description')}\n                    popoverHeader={t('topic.index_interval_size')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.segment_index_size')}\n                    fieldLabel={t('topic.segment_index_size')}\n                    fieldValue={DEFAULT_SEGMENT_INDEX_SIZE}\n                    popoverBody={t('topic.segment_index_size_description')}\n                    popoverHeader={t('topic.segment_index_size')}\n                  />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='flush'>\n                      {t('topic.flush')}\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('topic.flush_section_info')}\n                    </Text>\n                  </TextContent>\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.flush_interval_messages')}\n                    fieldLabel={t('topic.flush_interval_messages')}\n                    fieldValue={DEFAULT_FLUSH_INTERVAL_MESSAGES}\n                    popoverBody={t('topic.flush_interval_messages_description')}\n                    popoverHeader={t('topic.flush_interval_messages')}\n                  />\n\n                  <TextWithLabelPopover\n                    btnAriaLabel={t('topic.flush_interval_time')}\n                    fieldLabel={t('topic.flush_interval_time')}\n                    fieldValue={DEFAULT_FLUSH_INTERVAL_TIME}\n                    popoverBody={t('topic.flush_interval_time_description')}\n                    popoverHeader={t('topic.flush_interval_time')}\n                  />\n\n                  <Divider />\n\n                  <TextContent className='section-margin'>\n                    <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                      {t('topic.delete_topic')}\n                    </Text>\n                    <Text component={TextVariants.p} className='section-info'>\n                      {t('topic.delete_topic_info')}\n                    </Text>\n                  </TextContent>\n\n                  <Button\n                    variant='danger'\n                    className='section-margin'\n                    onClick={deleteTopic}\n                    data-testid='tabProperties-actionDelete'\n                  >\n                    {t('common.delete_topic')}\n                  </Button>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant='primary'\n                    onClick={updateTopic}\n                    data-testid='tabProperties-actionEdit'\n                  >\n                    {t('common.edit_props')}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </PageSection>\n          </PageGroup>\n        </SidebarContent>\n      </Sidebar>\n    </PageSection>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { TopicDetailHead } from '../../../Modules/Topics/TopicDetails/Components/TopicDetailHead';\nimport { TopicDetailView } from './Components/TopicDetailView';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n} from '@patternfly/react-core';\nimport { getTopicDetail } from '../../../Services';\nimport { ConfigContext } from '../../../Contexts';\nimport { ConsumerGroupsList } from '../../ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\nimport { DeleteTopics } from '../TopicList/Components/DeleteTopicsModal';\nimport { isAxiosError } from '../../../Utils/axios';\nimport { AlertContext } from '../../../Contexts/Alert';\nimport { useHistory } from 'react-router';\nimport { IAdvancedTopic } from '../CreateTopic/Components/CreateTopicWizard';\nimport { useTranslation } from 'react-i18next';\n\nexport type TopicDetailGroupProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onUpdateTopic: () => void;\n  onClickTopicList: () => void;\n  onDeleteTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n  eventKey: number;\n};\n\nexport const TopicDetailGroup: React.FC<TopicDetailGroupProps> = ({\n  topicName,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onUpdateTopic,\n  onClickTopicList,\n  onDeleteTopic,\n  onError,\n  eventKey,\n}) => {\n  const [topicDetail, setTopicDetail] = useState<IAdvancedTopic>({\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  });\n  const [activeTabKey, setActiveTabKey] = useState(eventKey);\n  const config = useContext(ConfigContext);\n  const [deleteModal, setDeleteModal] = useState(false);\n  const { addAlert } = useContext(AlertContext);\n  const history = useHistory();\n\n  const { t } = useTranslation();\n\n  const fetchTopicDetail = async (topicName: string) => {\n    if (eventKey === 2) {\n      try {\n        const response = await getTopicDetail(topicName, config);\n        setTopicDetail(response);\n      } catch (err) {\n        if (isAxiosError(err)) {\n          if (onError) {\n            onError(err.response?.data.code, err.response?.data.error_message);\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert(\n              t('topic.topic_not_found', { name: topicName }),\n              AlertVariant.danger\n            );\n            onClickTopicList();\n          }\n        }\n      }\n    }\n  };\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  // Make the get request\n  useEffect(() => {\n    fetchTopicDetail(topicName);\n  }, [topicName]);\n\n  const deleteTopic = () => {\n    setDeleteModal(true);\n  };\n  const onDeleteConsumer = () => {\n    history.push('/consumerGroups');\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n        className='pf-c-page__main-tabs'\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={1}\n            data-testid='pageTopic-tabConsumers'\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroupList'\n            tabContentRef={contentRefConsumerGroup}\n          >\n          </Tab>\n          <Tab\n            eventKey={2}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            data-testid='pageTopic-tabProperties'\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          />\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 2\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentConsumerGroupList'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden\n        >\n          <ConsumerGroupsList\n            onDeleteConsumerGroup={onDeleteConsumer}\n            consumerGroupByTopic={true}\n            topic={topicName}\n            rowDataId='tableTopicConsumers-row'\n            detailsDataId='tableTopicConsumers-actionDetails'\n          />\n        </TabContent>\n        <TabContent\n          eventKey={2}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties.'\n        >\n          <TopicDetailView\n            topic={topicDetail}\n            deleteTopic={deleteTopic}\n            updateTopic={onUpdateTopic}\n          />\n        </TabContent>\n      </PageSection>\n      {deleteModal && (\n        <DeleteTopics\n          topicName={topicName}\n          deleteModal={deleteModal}\n          setDeleteModal={setDeleteModal}\n          onDeleteTopic={onDeleteTopic}\n        />\n      )}\n    </>\n  );\n};\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"sourceRoot":""}