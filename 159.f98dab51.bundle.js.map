{"version":3,"sources":["webpack://kafka-ui/./src/modules/Topics/components/TopicsTable/TopicsToolbar.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicsTable/TopicsTable.tsx","webpack://kafka-ui/./src/modules/Topics/Topics.tsx","webpack://kafka-ui/./src/modules/Topics/pages/MainView/MainView.tsx"],"names":["TopicsToolbar","total","page","perPage","setFilteredValue","filteredValue","onCreateTopic","t","useTranslation","useState","topicInputValue","setTopicInputValue","toggleGroupItems","ToolbarFilter","chips","deleteChip","categoryName","InputGroup","TextInput","name","id","type","placeholder","value","onChange","Button","variant","ButtonVariant","isDisabled","length","onClick","SearchIcon","toolbarItems","item","className","push","MASPagination","widgetId","itemCount","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","alignment","default","MASToolbar","toolbarProps","clearAllFilters","collapseListedFiltersBreakpoint","inset","xl","toggleGroupProps","toggleIcon","breakpoint","TopicsTable","tableRow","topicItems","rowDataTestId","onEdit","onDeleteTopic","refreshTopics","onSort","sortBy","showModal","onConnectToRoute","getConnectToRoutePath","tableColumns","title","transforms","sortable","onSelectKebabDropdownOption","event","originalData","action","topicName","target","parentElement","previousSibling","focus","rows","map","row","partitions","config","cells","Link","to","e","preventDefault","Number","filter","element","key","MASTable","tableProps","actionResolver","rowData","shouldDefaultCustomRowWrapper","TableVariant","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","PaginationVariant","Topics","onEditTopic","dispatchKafkaAction","onError","addAlert","useAlert","useContext","location","useLocation","searchParams","URLSearchParams","search","parseInt","get","setTopics","setTopicItems","searchTopicName","setSearchTopicName","offset","setOffset","order","setOrder","orderKey","setOrderKey","index","direction","setSortBy","useEffect","fetchTopic","onClickCreateTopic","_event","then","response","items","data","code","error_message","AlertVariant","Card","undefined","PageSection","PageSectionVariants","padding","MASLoading","buttonProps","slice","MainView","activeTab","kafkaPageLink","kafkaName","handleInstanceDrawer","setIsOpenDeleteInstanceModal","showMetrics","activeTabKey","setActiveTabKey","contentRefConsumerGroups","contentRefTopics","contentRefDashboard","isOpen","setIsOpen","onSelectKebabOption","dropdownItems","DropdownItem","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","isActive","Level","Title","headingLevel","Dropdown","onSelect","toggle","KebabToggle","onToggle","isPlain","position","DropdownPosition","Tabs","activeKey","tabIndex","Tab","TabTitleText","eventKey","tabContentRef","tabContentId","isFilled","TabContent","ref","hidden","ConsumerGroups","consumerGroupByTopic"],"mappings":"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","file":"159.f98dab51.bundle.js","sourcesContent":["import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  ButtonVariant,\n  InputGroup,\n  TextInput,\n  ToolbarFilter,\n} from '@patternfly/react-core';\nimport { SearchIcon } from '@patternfly/react-icons';\nimport { MASToolbar, ToolbarItemProps, MASPagination } from '@app/components';\n\nexport type TopicsToolbarProps = {\n  total: number;\n  page: number;\n  perPage: number;\n  setFilteredValue: (value: string) => void;\n  filteredValue: string;\n  onCreateTopic?: () => void;\n};\n\nconst TopicsToolbar: React.FC<TopicsToolbarProps> = ({\n  total = 0,\n  page,\n  perPage,\n  setFilteredValue,\n  filteredValue = '',\n  onCreateTopic,\n}) => {\n  const { t } = useTranslation();\n  const [topicInputValue, setTopicInputValue] = useState<string>('');\n\n  const onClear = () => {\n    setFilteredValue('');\n  };\n\n  const onChangeInput = (value: string) => {\n    setTopicInputValue(value);\n  };\n\n  const onSearch = () => {\n    setFilteredValue(topicInputValue);\n    setTopicInputValue('');\n  };\n\n  const onDeleteChip = () => {\n    setFilteredValue('');\n  };\n\n  const toggleGroupItems = (\n    <>\n      <ToolbarFilter\n        chips={filteredValue ? [filteredValue] : []}\n        deleteChip={onDeleteChip}\n        categoryName={''}\n      >\n        <InputGroup>\n          <TextInput\n            name='searchName'\n            id='search-topics-input'\n            type='search'\n            aria-label={t('topic.topic_search_input')}\n            placeholder={t('common.search')}\n            value={topicInputValue}\n            onChange={onChangeInput}\n          />\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={topicInputValue.length ? false : true}\n            onClick={onSearch}\n            aria-label={t('topic.topic_search')}\n          >\n            <SearchIcon />\n          </Button>\n        </InputGroup>\n      </ToolbarFilter>\n    </>\n  );\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          id='topic-list-create-topic-button'\n          className='topics-per-page'\n          data-testid='actionCreateTopic'\n          onClick={onCreateTopic}\n        >\n          {t('topic.create_topic')}\n        </Button>\n      ),\n    },\n  ];\n\n  if (total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='consumer-group-pagination-options-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.minimal_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: '', breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { TopicsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\nimport { PaginationVariant } from '@patternfly/react-core';\nimport {\n  TableVariant,\n  sortable,\n  IRowData,\n  OnSort,\n  ISortBy,\n} from '@patternfly/react-table';\nimport {\n  MASTable,\n  MASPagination,\n  EmptyState,\n  MASEmptyStateVariant,\n} from '@app/components';\nimport { Topic } from '@rhoas/kafka-instance-sdk';\nimport { useFederated } from '@app/contexts';\nimport { TopicsToolbar, TopicsToolbarProps } from './TopicsToolbar';\nimport { convertRetentionSize, convertRetentionTime } from '@app/utils';\nimport { useRootModalContext, MODAL_TYPES } from '@app/components';\n\nexport type TopicsTableProps = TopicsToolbarProps & {\n  topicItems: Topic[];\n  rowDataTestId?: string;\n  filteredValue: string;\n  onEdit?: (topicName?: string | undefined) => void;\n  onDeleteTopic?: () => void;\n  refreshTopics: () => void;\n  onSort: OnSort;\n  sortBy: ISortBy;\n};\n\nconst TopicsTable: React.FC<TopicsTableProps> = ({\n  total,\n  page,\n  perPage,\n  setFilteredValue,\n  filteredValue,\n  onCreateTopic,\n  topicItems,\n  rowDataTestId,\n  onEdit,\n  onDeleteTopic,\n  refreshTopics,\n  onSort,\n  sortBy,\n}) => {\n  const { t } = useTranslation();\n  const { showModal } = useRootModalContext();\n  const { onConnectToRoute, getConnectToRoutePath } = useFederated();\n\n  const tableColumns = [\n    { title: t('common.name') },\n    { title: t('common.partitions'), transforms: [sortable] },\n    { title: t('topic.retention_time'), transforms: [sortable] },\n    { title: t('topic.retention_size'), transforms: [sortable] },\n  ];\n\n  const onDelete = (topicName: string) => {\n    showModal(MODAL_TYPES.DELETE_TOPIC, {\n      topicName,\n      onDeleteTopic,\n      refreshTopics,\n    });\n  };\n\n  const onSelectKebabDropdownOption = (\n    event: any,\n    originalData: Topic,\n    action: string\n  ) => {\n    const { name = '' } = originalData;\n    if (action === 'delete') {\n      onDelete(name);\n    } else if (action === 'edit') {\n      onEdit && onEdit(name);\n    }\n    // Set focus back on previous selected element i.e. kebab button\n    event?.target?.parentElement?.parentElement?.previousSibling?.focus();\n  };\n\n  const actionResolver = (rowData: IRowData) => {\n    const originalData: Topic = rowData.originalData;\n    const resolver = [\n      {\n        title: t('common.delete'),\n        ['data-testid']: 'tableTopics-actionDelete',\n        onClick: (event: any) =>\n          onSelectKebabDropdownOption(event, originalData, 'delete'),\n      },\n      {\n        title: t('common.edit'),\n        ['data-testid']: 'tableTopics-actionEdit',\n        onClick: (event: any) =>\n          onSelectKebabDropdownOption(event, originalData, 'edit'),\n      },\n    ];\n    return resolver;\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    topicItems?.map((row: IRowData) => {\n      const { name, partitions, config } = row;\n      tableRow.push({\n        cells: [\n          {\n            title: (\n              <Link\n                data-testid='tableTopics-linkTopic'\n                to={\n                  (getConnectToRoutePath &&\n                    getConnectToRoutePath(`topics/${name}`, name)) ||\n                  ''\n                }\n                onClick={(e) => {\n                  e.preventDefault();\n                  onConnectToRoute && onConnectToRoute(`topics/${name}`);\n                }}\n              >\n                {name}\n              </Link>\n            ),\n          },\n          partitions?.length,\n          convertRetentionTime(\n            Number(\n              config?.filter((element) => element.key === 'retention.ms')[0]\n                ?.value || 0\n            )\n          ),\n          convertRetentionSize(\n            Number(\n              config?.filter((element) => element.key === 'retention.bytes')[0]\n                ?.value || 0\n            )\n          ),\n        ],\n        originalData: row,\n      });\n    });\n    return tableRow;\n  };\n\n  const rows = preparedTableCells();\n\n  return (\n    <>\n      <TopicsToolbar\n        total={total}\n        page={page}\n        perPage={perPage}\n        onCreateTopic={onCreateTopic}\n        setFilteredValue={setFilteredValue}\n        filteredValue={filteredValue}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows,\n          'aria-label': t('topic.topic_list_table'),\n          actionResolver: actionResolver,\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          onSort,\n          sortBy,\n        }}\n        rowDataTestId={rowDataTestId || 'tableTopics-row'}\n      />\n      {topicItems?.length < 1 && filteredValue.length > 0 && (\n        <EmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoResult,\n          }}\n          titleProps={{\n            title: t('common.no_results_title'),\n          }}\n          emptyStateBodyProps={{\n            body: t('common.no_results_body'),\n          }}\n        />\n      )}\n      {total > 0 && (\n        <MASPagination\n          widgetId='consumer-group-pagination-options-menu-bottom'\n          itemCount={total}\n          variant={PaginationVariant.bottom}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.full_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport { TopicsTable };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  Card,\n  PageSectionVariants,\n  PageSection,\n} from '@patternfly/react-core';\nimport { useTimeout } from '@app/hooks/useTimeOut';\nimport { TopicsTable } from './components';\nimport { EmptyState, MASEmptyStateVariant, MASLoading } from '@app/components';\nimport { getTopics, OrderKey } from '@app/services';\nimport { ConfigContext, useFederated } from '@app/contexts';\nimport { TopicsList, Topic } from '@rhoas/kafka-instance-sdk';\nimport { KafkaActions } from '@app/utils';\nimport { useAlert } from '@bf2/ui-shared';\nimport './Topics.css';\nimport { ISortBy, OnSort, SortByDirection } from '@patternfly/react-table';\n\nexport type ITopic = {\n  name: string;\n  replicas: number;\n  partitions: number;\n};\n\nexport type ITopicProps = {\n  rows: ITopic[];\n};\n\nexport type TopicsProps = {\n  onCreateTopic?: () => void;\n  onEditTopic?: (topicName?: string | undefined) => void;\n};\n\nexport const Topics: React.FC<TopicsProps> = ({\n  onCreateTopic,\n  onEditTopic,\n}) => {\n  const { dispatchKafkaAction, onError } = useFederated();\n  const { t } = useTranslation();\n  const { addAlert } = useAlert();\n  const config = useContext(ConfigContext);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  const [topics, setTopics] = useState<TopicsList>();\n  const [topicItems, setTopicItems] = useState<Topic[]>();\n  const [searchTopicName, setSearchTopicName] = useState<string>('');\n  const [offset, setOffset] = useState<number>(0);\n  const [order, setOrder] = useState<SortByDirection>();\n  const [orderKey, setOrderKey] = useState<OrderKey>();\n  const [sortBy, setSortBy] = useState<ISortBy>({ index: 0, direction: 'asc' });\n\n  useEffect(() => {\n    fetchTopic();\n  }, [searchTopicName, order, orderKey]);\n\n  useTimeout(() => fetchTopic(), 5000);\n\n  useEffect(() => {\n    const offset = Number(perPage) * Number(page - 1);\n    setOffset(offset);\n  }, [page, perPage]);\n\n  const onClickCreateTopic = () => {\n    onCreateTopic && onCreateTopic();\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.CreateTopic);\n  };\n\n  const onSort: OnSort = (_event, index, direction) => {\n    const sortableCols = {\n      '0': 'name',\n      '1': 'partitions',\n      '2': 'retention.ms',\n      '3': 'retention.bytes',\n    };\n\n    setOrderKey(sortableCols[index]);\n    setOrder(direction);\n    setSortBy({ index, direction });\n  };\n\n  const fetchTopic = async () => {\n    try {\n      await getTopics(\n        config,\n        100,\n        perPage,\n        searchTopicName,\n        offset,\n        order,\n        orderKey\n      ).then((response) => {\n        setTopics(response);\n        setTopicItems(response?.items);\n      });\n    } catch (err) {\n      //TODO: Update the api to allow suppress alerts if the application does not want to show them as well.\n      if (onError && err.response.data.code === 401) {\n        onError(err.response.data.code, err.response.data.error_message);\n      } else {\n        addAlert({\n          title: err.response.data.error_message,\n          variant: AlertVariant.danger,\n        });\n      }\n    }\n  };\n\n  const renderTopicsTable = () => {\n    if (topicItems === undefined) {\n      return (\n        <PageSection\n          className='kafka-ui-m-full-height'\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (topicItems.length < 1 && searchTopicName.length < 1) {\n      return (\n        <EmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoItems,\n            'data-ouia-page-id': 'emptyStateTopics',\n          }}\n          titleProps={{\n            title: t('topic.empty_topics_title'),\n          }}\n          emptyStateBodyProps={{\n            body: t('topic.empty_topics_body'),\n          }}\n          buttonProps={{\n            title: t('topic.create_topic'),\n            onClick: onClickCreateTopic,\n            'data-testid': 'actionCreateTopic',\n          }}\n        />\n      );\n    } else if (topicItems) {\n      return (\n        <TopicsTable\n          total={topicItems.length || 0}\n          page={page}\n          perPage={perPage}\n          onCreateTopic={onCreateTopic}\n          topicItems={\n            searchTopicName\n              ? topicItems?.slice(0, perPage)\n              : topicItems?.slice(offset, offset + perPage)\n          }\n          filteredValue={searchTopicName}\n          setFilteredValue={setSearchTopicName}\n          refreshTopics={fetchTopic}\n          onEdit={onEditTopic}\n          onSort={onSort}\n          sortBy={sortBy}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <>\n      <Card className='kafka-ui-m-full-height' data-ouia-page-id='tableTopics'>\n        {renderTopicsTable()}\n      </Card>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Tabs,\n  Level,\n  Tab,\n  TabTitleText,\n  TabContent,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n  DropdownItem,\n} from '@patternfly/react-core';\nimport { Topics, TopicsProps } from '@app/modules/Topics/Topics';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport type MainViewProps = TopicsProps & {\n  activeTab?: number;\n};\n\nexport const MainView: React.FC<MainViewProps> = ({\n  onCreateTopic,\n  onEditTopic,\n  activeTab,\n}) => {\n  const { t } = useTranslation();\n  const {\n    kafkaPageLink,\n    kafkaName,\n    handleInstanceDrawer,\n    setIsOpenDeleteInstanceModal,\n    showMetrics,\n  } = useFederated();\n\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n  const contentRefConsumerGroups = React.createRef<HTMLElement>();\n  const contentRefTopics = React.createRef<HTMLElement>();\n  const contentRefDashboard = React.createRef<HTMLElement>();\n\n  const handleTabClick = (_event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelectKebabOption = (activeTab: string) => {\n    handleInstanceDrawer && handleInstanceDrawer(true, activeTab);\n  };\n\n  const onDeleteInstance = () => {\n    setIsOpenDeleteInstanceModal && setIsOpenDeleteInstanceModal(true);\n  };\n\n  const dropdownItems = [\n    <DropdownItem\n      key='view-kafka'\n      onClick={() => onSelectKebabOption('details')}\n    >\n      {t('common.view_instance')}\n    </DropdownItem>,\n    <DropdownItem\n      key='connect-kafka'\n      onClick={() => onSelectKebabOption('connection')}\n    >\n      {t('common.view_connection')}\n    </DropdownItem>,\n    <DropdownItem key='delete-kafka' onClick={onDeleteInstance}>\n      {t('common.delete_instance')}\n    </DropdownItem>,\n  ];\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>\n        {t('common.kafka_instance')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <Title headingLevel='h1'>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </Title>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id='toggle-data-plane' />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          />\n        </Level>\n      </PageSection>\n      <PageSection\n        variant={PageSectionVariants.light}\n        padding={{ default: 'noPadding' }}\n        className='pf-c-page__main-tabs'\n      >\n        <Tabs\n          activeKey={activeTabKey}\n          onSelect={handleTabClick}\n          data-testid='pageKafka-tabProperties'\n          className='pf-m-page-insets'\n        >\n          <Tab\n            title={<TabTitleText>{t('dashboard.dashboard')}</TabTitleText>}\n            eventKey={1}\n            data-testid='pageKafka-tabDashboard'\n            id='dashboard-tab-section'\n            aria-label={t('dashboard.dashboard')}\n            tabContentRef={contentRefDashboard}\n            tabContentId='kafka-ui-TabcontentDashboard'\n            // className=\"kafka-ui-m-full-height\"\n          />\n          <Tab\n            title={<TabTitleText>{t('topic.topics')}</TabTitleText>}\n            eventKey={2}\n            data-testid='pageKafka-tabTopics'\n            id='topics-tab-section'\n            aria-label={t('topic.topics')}\n            tabContentRef={contentRefTopics}\n            tabContentId='kafka-ui-TabcontentTopicsList'\n            // className=\"kafka-ui-m-full-height\"\n          />\n          <Tab\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            eventKey={3}\n            data-testid='pageKafka-tabConsumers'\n            id='consumer-groups-tab-section'\n            aria-label={t('consumerGroup.consumer_groups')}\n            tabContentRef={contentRefConsumerGroups}\n            tabContentId='kafka-ui-TabcontentConsumersList'\n            // className='kafka-ui-m-full-height'\n          />\n        </Tabs>\n      </PageSection>\n      <PageSection isFilled>\n        <TabContent\n          eventKey={1}\n          ref={contentRefDashboard}\n          id='kafka-ui-TabcontentDashboard'\n          className='kafka-ui-m-full-height'\n          aria-label={t('dashboard.dashboard')}\n        >\n          {showMetrics}\n        </TabContent>\n        <TabContent\n          eventKey={2}\n          ref={contentRefTopics}\n          id='kafka-ui-TabcontentTopicsList'\n          className='kafka-ui-m-full-height'\n          aria-label={t('topic.topics')}\n          hidden\n        >\n          <Topics onCreateTopic={onCreateTopic} onEditTopic={onEditTopic} />\n        </TabContent>\n        <TabContent\n          eventKey={3}\n          ref={contentRefConsumerGroups}\n          id='kafka-ui-TabcontentConsumersList'\n          className='kafka-ui-m-full-height'\n          aria-label={t('consumerGroup.consumer_groups')}\n          hidden\n        >\n          <ConsumerGroups consumerGroupByTopic={false} />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n"],"sourceRoot":""}