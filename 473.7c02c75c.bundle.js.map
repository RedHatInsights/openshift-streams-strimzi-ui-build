{"version":3,"sources":["webpack://kafka-ui/./src/components/RootModal/RootModal.tsx","webpack://kafka-ui/./src/modules/Topics/dialogs/DeleteTopic/DeleteTopic.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/dialogs/DeleteConsumerGroup/DeleteConsumerGroup.tsx","webpack://kafka-ui/./src/modules/Topics/dialogs/PartitionsChange/PartitionsChange.tsx","webpack://kafka-ui/./src/contexts/Api/Context.tsx","webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/i18n/locale/index.ts","webpack://kafka-ui/./src/i18n/index.ts","webpack://kafka-ui/./src/services/consumer-groups.ts","webpack://kafka-ui/./src/services/topics.ts","webpack://kafka-ui/./src/utils/common.ts"],"names":["MODAL_TYPES","DELETE_TOPIC","DELETE_CONSUMER_GROUP","UPDATE_PARTITIONS","MODAL_COMPONENTS","useRootModalContext","store","hideModal","config","useContext","t","useTranslation","modalProps","topicName","onDeleteTopic","refreshTopics","useState","verificationText","setVerificationText","addAlert","useAlert","isLoading","setIsLoading","onClose","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","then","name","AlertVariant","response","data","error_message","key","isDisabled","toUpperCase","Text","id","htmlFor","dangerouslySetInnerHTML","__html","TextInput","value","type","onChange","autoFocus","consumerName","refreshConsumerGroups","onSaveTopic","RootModalContext","createContext","showModal","RootModal","ModalComponent","children","setStore","modalType","Provider","newState","Object","assign","ConfigContext","undefined","FederatedContext","onConnectToRoute","getConnectToRoutePath","activeTab","kafkaName","kafkaPageLink","kafkaInstanceLink","onError","handleInstanceDrawer","setIsOpenDeleteInstanceModal","dispatchKafkaAction","useFederated","resources","en","translation","de","kafkai18n","use","initReactI18next","init","detection","order","caches","fallbackLng","debug","interpolation","escapeValue","getConsumerGroups","offset","limit","size","page","topic","groupIdFilter","getToken","accessToken","DefaultApi","Configuration","basePath","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","getTopics","filter","getTopicDetail","getTopic","convertTopicResponse","topicObj","forEach","numPartitions","partitions","length","updateTopicModel","topicSettings","updateTopic","status","answer","push","map","p","replicas","reduce","previousValue","currentValue","toString","deleteTopic","KafkaActions","convertRetentionTime","milliseconds","convertedValue","Math","round","convertRetentionSize","byte","convertedByteValue","abs"],"mappings":"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","file":"473.7c02c75c.bundle.js","sourcesContent":["import React, { useState, createContext, useContext } from \"react\";\nimport { DeleteTopic, PartitionsChange } from \"@app/modules/Topics/dialogs\";\nimport { DeleteConsumerGroup } from \"@app/modules/ConsumerGroups/dialogs\";\n\nexport const MODAL_TYPES = {\n  DELETE_TOPIC: \"DELETE_TOPIC\",\n  DELETE_CONSUMER_GROUP: \"DELETE_CONSUMER_GROUP\",\n  UPDATE_PARTITIONS: \"UPDATE_PARTITIONS\",\n};\n\nconst MODAL_COMPONENTS: any = {\n  [MODAL_TYPES.DELETE_TOPIC]: DeleteTopic,\n  [MODAL_TYPES.DELETE_CONSUMER_GROUP]: DeleteConsumerGroup,\n  [MODAL_TYPES.UPDATE_PARTITIONS]: PartitionsChange,\n};\n\ntype RootModalContext = {\n  showModal: (modalType: string, modalProps?: any) => void;\n  hideModal: () => void;\n  store: any;\n};\n\nconst initalState: RootModalContext = {\n  showModal: () => \"\",\n  hideModal: () => \"\",\n  store: \"\",\n};\n\nconst RootModalContext = createContext(initalState);\nexport const useRootModalContext = (): RootModalContext =>\n  useContext(RootModalContext);\n\nexport const RootModal: React.FC = ({ children }) => {\n  const [store, setStore] = useState<any>();\n  const { modalType, modalProps } = store || { modalType: \"\", modalProps: \"\" };\n\n  const showModal = (modalType: string, modalProps: any) => {\n    const newState = Object.assign({}, store);\n    setStore({\n      newState,\n      modalType,\n      modalProps,\n    });\n  };\n\n  const hideModal = () => {\n    const newState = Object.assign({}, store);\n    setStore({\n      newState,\n      modalType: null,\n      modalProps: \"\",\n    });\n  };\n\n  const renderComponent = () => {\n    const ModalComponent = MODAL_COMPONENTS[modalType];\n    if (!modalType || !ModalComponent) {\n      return null;\n    }\n    return <ModalComponent id=\"root-modal\" {...modalProps} />;\n  };\n\n  return (\n    <RootModalContext.Provider value={{ store, showModal, hideModal }}>\n      {renderComponent()}\n      {children}\n    </RootModalContext.Provider>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { deleteTopic } from \"@app/services\";\nimport { ConfigContext } from \"@app/contexts\";\nimport { useRootModalContext } from \"@app/components/RootModal\";\nimport { useAlert } from \"@bf2/ui-shared\";\n\nexport const DeleteTopic: React.FC = () => {\n  const { store, hideModal } = useRootModalContext();\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n  const { topicName, onDeleteTopic, refreshTopics } = store?.modalProps || {};\n  const [verificationText, setVerificationText] = useState<string>(\"\");\n  const { addAlert } = useAlert();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (topicName) {\n        setIsLoading(true);\n        await deleteTopic(topicName, config).then(() => {\n          addAlert({\n            title: t(\"topic.topic_successfully_deleted\", { name: topicName }),\n            variant: AlertVariant.success,\n          });\n          onDeleteTopic && onDeleteTopic();\n          refreshTopics && refreshTopics();\n        });\n      }\n    } catch (err) {\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n    onClose();\n  };\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t(\"topic.delete_modal_title\")}\n      title={t(\"topic.delete_modal_title\")}\n      titleIconVariant=\"warning\"\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={onClose}\n      actions={[\n        <Button\n          variant=\"danger\"\n          onClick={onDelete}\n          key={1}\n          data-testid=\"modalDeleteTopic-buttonDelete\"\n          isDisabled={verificationText.toUpperCase() != \"DELETE\"}\n          isLoading={isLoading}\n        >\n          {t(\"common.delete\")}\n        </Button>,\n        <Button variant=\"link\" onClick={onClose} key={2}>\n          {t(\"common.cancel\")}\n        </Button>,\n      ]}\n    >\n      <Text id=\"modal-message\">\n        {\" \"}\n        <label\n          htmlFor=\"instance-name-input\"\n          dangerouslySetInnerHTML={{\n            __html: t(\"common.confirm_delete_modal_text\", { name: topicName }),\n          }}\n        />\n      </Text>\n\n      <br />\n      <label htmlFor=\"delete-text-input\">{t(\"common.confirm_delete\")}</label>\n      <TextInput\n        value={verificationText}\n        id=\"delete-text-input\"\n        name=\"delete-text-input\"\n        type=\"text\"\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { deleteConsumerGroup } from \"@app/services\";\nimport { ConfigContext } from \"@app/contexts\";\nimport { useRootModalContext } from \"@app/components/RootModal\";\nimport { useAlert } from \"@bf2/ui-shared\";\n\nexport const DeleteConsumerGroup: React.FC = () => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { store, hideModal } = useRootModalContext();\n  const { consumerName, refreshConsumerGroups } = store?.modalProps || {};\n  const [verificationText, setVerificationText] = useState<string>(\"\");\n  const { addAlert } = useAlert();\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (consumerName) {\n        await deleteConsumerGroup(consumerName, config).then(() => {\n          addAlert({\n            variant: AlertVariant.success,\n            title: t(\"consumerGroup.consumergroup_successfully_deleted\", {\n              name: consumerName,\n            }),\n          });\n\n          refreshConsumerGroups && refreshConsumerGroups();\n        });\n      }\n    } catch (err) {\n      addAlert({\n        variant: AlertVariant.danger,\n        title: err.response.data.error_message,\n      });\n    }\n    onClose();\n  };\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t(\"consumerGroup.delete\")}\n      title={t(\"consumerGroup.delete\")}\n      titleIconVariant=\"warning\"\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={onClose}\n      actions={[\n        <Button\n          variant=\"danger\"\n          onClick={onDelete}\n          key={1}\n          isDisabled={verificationText.toUpperCase() != \"DELETE\"}\n        >\n          {t(\"common.delete\")}\n        </Button>,\n        <Button variant=\"link\" onClick={onClose} key={2}>\n          {t(\"common.cancel\")}\n        </Button>,\n      ]}\n    >\n      <Text id=\"modal-message\">\n        <label\n          htmlFor=\"instance-name-input\"\n          dangerouslySetInnerHTML={{\n            __html: t(\"common.confirm_delete_modal_text\", {\n              name: consumerName,\n            }),\n          }}\n        />\n      </Text>\n\n      <br />\n      <label htmlFor=\"delete-text-input\">{t(\"common.confirm_delete\")}</label>\n      <TextInput\n        value={verificationText}\n        id=\"delete-text-input\"\n        name=\"delete-text-input\"\n        type=\"text\"\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import React from \"react\";\nimport { Modal, ModalVariant, Button } from \"@patternfly/react-core\";\nimport { useRootModalContext } from \"@app/components/RootModal\";\n\nexport const PartitionsChange: React.FC = () => {\n  const { store, hideModal } = useRootModalContext();\n  const { onSaveTopic } = store?.modalProps || {};\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label=\"Confirm change of partitions\"\n      title=\"Increase the number of partitions?\"\n      titleIconVariant=\"warning\"\n      showClose={true}\n      aria-describedby=\"modal-message\"\n      onClose={onClose}\n      actions={[\n        <Button variant=\"primary\" onClick={onSaveTopic} key={1}>\n          Yes\n        </Button>,\n        <Button variant=\"link\" onClick={onClose} key={2}>\n          No, return to form\n        </Button>,\n      ]}\n    >\n      Messages might have the same key from two different partitions, which can\n      potentially break the message ordering guarantees that apply to a single\n      partition.\n    </Modal>\n  );\n};\n","import React from 'react';\n\nexport type IConfiguration = {\n  basePath: string;\n  getToken: () => Promise<string>;\n};\n\nexport const ConfigContext = React.createContext<IConfiguration | undefined>(\n  undefined\n);\n","import React, { useContext } from 'react';\n\nexport type FederatedProps = {\n  onConnectToRoute?: (routePath: string) => void;\n  getConnectToRoutePath?: (routePath: string, key?: string) => string;\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  dispatchKafkaAction?: (action: string, topicName?: string | undefined) => void;\n}\n\nconst initialState: FederatedProps = {\n  onConnectToRoute: () => \"\",\n  getConnectToRoutePath: () => \"\",\n  activeTab: 0,\n  kafkaName: \"\",\n  kafkaPageLink: \"\",\n  kafkaInstanceLink: \"\",\n  topicName: \"\", \n  onError: () => \"\",\n  handleInstanceDrawer: () => \"\",\n  setIsOpenDeleteInstanceModal: () => \"\",\n  dispatchKafkaAction: () => \"\"\n};\n\nexport const FederatedContext = React.createContext<FederatedProps>(initialState);\nexport const useFederated = (): FederatedProps => useContext(FederatedContext);","import en from './en.json';\nimport de from './de.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst kafkai18n = i18n.createInstance();\n\nkafkai18n\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    detection: {\n      order: ['htmlTag', 'navigator'],\n      caches: [],\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    resources,\n  });\n\nexport default kafkai18n;\n","import { AxiosResponse } from 'axios';\nimport { Configuration, DefaultApi, ConsumerGroupList, ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?:number,\n  limit?:number,\n  size?:number,\n  page?:number,\n  topic?:string,\n  groupIdFilter?:string\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> = await api.getConsumerGroups(\n    offset,\n    limit,\n    size,\n    page,\n    topic,\n    groupIdFilter\n  );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nexport {\n  getConsumerGroups,\n  deleteConsumerGroup,\n  getConsumerGroupDetail\n};\n","import { AxiosResponse } from 'axios';\nimport {\n  ConfigEntry,\n  DefaultApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { IAdvancedTopic } from '@app/modules/Topics/components/CreateTopicWizard/CreateTopicWizard';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined,\n  limit?: number,\n  size?: number,\n  filter?: string,\n  offset?: number | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopics(\n    offset,\n    limit,\n    size,\n    filter\n  );\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<IAdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): IAdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length || 0;\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n","export interface FederatedProps {\n  onError: (errorCode: number, message: string) => void;\n}\n\nexport enum KafkaActions {\n  ViewTopics = \"ViewTopics\",\n  CreateTopic = \"CreateTopic\",\n  DetailsTopic = \"DetailsTopic\",\n  UpdateTopic = \"UpdateTopic\"\n}\n\n\nexport const convertRetentionTime = (milliseconds: number): string => {\n  let convertedValue;\n  if (milliseconds === -1) {\n    return 'Unlimited';\n  } else if (milliseconds < 60000) {\n    if (milliseconds === 1) return milliseconds + ' ' + 'millisecond';\n    else return milliseconds + ' ' + 'milliseconds';\n  } else if (milliseconds >= 60000 && milliseconds < 3.6e6) {\n    convertedValue = milliseconds / 60000;\n    convertedValue = Math.round(convertedValue * 100) / 100;\n    if (convertedValue === 1) return convertedValue + ' ' + 'minute';\n    else return convertedValue + ' ' + 'minutes';\n  } else if (milliseconds >= 3.6e6 && milliseconds < 1.728e8) {\n    convertedValue = milliseconds / 3.6e6;\n    convertedValue = Math.round(convertedValue * 100) / 100;\n    if (convertedValue === 1) return convertedValue + ' ' + 'hour';\n    else return convertedValue + ' ' + 'hours';\n  } else if (milliseconds >= 1.728e8) {\n    convertedValue = milliseconds / 8.64e7;\n    convertedValue = Math.round(convertedValue * 100) / 100;\n    return convertedValue + ' ' + 'days';\n  }\n  return milliseconds.toString();\n};\n\nexport const convertRetentionSize = (byte: number): string => {\n  let convertedByteValue;\n  if (byte === -1) {\n    return 'Unlimited';\n  } else if (Math.abs(byte) < 1000) {\n    if (byte === 1) return byte + ' ' + 'byte';\n    else return byte + ' ' + 'bytes';\n  } else if (Math.abs(byte) >= 1000 && Math.abs(byte) < 1000000) {\n    convertedByteValue = byte / 1000;\n    if (convertedByteValue === 1)\n      return convertedByteValue + ' ' + 'kilobyte';\n    else return convertedByteValue + ' ' + 'kilobytes';\n  } else if (Math.abs(byte) >= 1000000 && Math.abs(byte) < 1000000000) {\n    convertedByteValue = byte / 1000000;\n    if (convertedByteValue === 1)\n      return convertedByteValue + ' ' + 'megabyte';\n    else return convertedByteValue + ' ' + 'megabytes';\n  } else if (Math.abs(byte) >= 1000000000 && Math.abs(byte) < 1000000000000) {\n    convertedByteValue = byte / 1000000000;\n    if (convertedByteValue === 1)\n      return convertedByteValue + ' ' + 'gigabyte';\n    else return convertedByteValue + ' ' + 'gigabytes';\n  } else if (Math.abs(byte) >= 1000000000000) {\n    convertedByteValue = byte / 1000000000000;\n    if (convertedByteValue === 1)\n      return convertedByteValue + ' ' + 'terabyte';\n    else return convertedByteValue + ' ' + 'terabytes';\n  }\n  return byte.toString();\n};"],"sourceRoot":""}