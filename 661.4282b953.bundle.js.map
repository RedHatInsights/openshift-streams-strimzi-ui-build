{"version":3,"file":"661.4282b953.bundle.js","mappings":"8hDA2GA,QAtFE,SAAC,G,IAAEA,EAAY,eAAEC,EAAqB,wBAAEC,EAAS,YACvCC,GAAM,IAAAC,kBAAgB,EACxBC,GAAS,IAAAC,YAAW,KACpB,GAA0C,IAAAC,UAAiB,IAA1DC,EAAgB,KAAEC,EAAmB,KACpCC,GAAa,IAAAC,YAAU,SAEzBC,EAAU,WACdV,KA8BF,OACE,kBAAC,EAAAW,MAAK,CACJC,QAAS,EAAAC,aAAA,MACTC,QAAQ,EAAI,aACAb,EAAE,wBACdc,MAAOd,EAAE,wBACTe,iBAAiB,UACjBC,WAAW,EAAI,mBACE,gBACjBP,QAASA,EACTQ,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLP,QAAQ,SACRQ,QAxCS,qD,qFAETtB,EACF,IAAM,OAAoBA,EAAcK,GAAQkB,MAAK,WACnDb,EAAS,CACPI,QAAS,EAAAU,aAAA,QACTP,MAAOd,EAAE,mDAAoD,CAC3DsB,KAAMzB,MAIVC,GAAyBA,QATzB,M,OACF,S,sDAYFS,EAAS,CACPI,QAAS,EAAAU,aAAA,OACTP,MAAO,EAAIS,SAASC,KAAKC,gB,oBAG7BhB,I,YAqBMiB,IAAK,EACLC,WAA8C,UAAlCtB,EAAiBuB,eAE5B5B,EAAE,kBAEL,kBAAC,EAAAkB,OAAM,CAACP,QAAQ,OAAOQ,QAASV,EAASiB,IAAK,GAC3C1B,EAAE,oBAIP,kBAAC,EAAA6B,KAAI,CAACC,GAAG,iBACP,2BACEC,QAAQ,sBACRC,wBAAyB,CACvBC,OAAQjC,EAAE,mCAAoC,CAC5CsB,KAAMzB,QAMd,6BACA,2BAAOkC,QAAQ,qBAAqB/B,EAAE,0BACtC,kBAAC,EAAAkC,UAAS,CACRC,MAAO9B,EACPyB,GAAG,oBACHR,KAAK,oBACLc,KAAK,OACLC,SA9C+B,SAACF,GACpC7B,EAAoB6B,IA8ChBG,WAAW,O,i5CC3FfC,EAAoB,SACxBrC,EACAsC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,G,YADA,IAAAD,IAAAA,EAAyB,EAAAE,gBAAA,K,2FAGL,SAAM9C,MAAAA,OAAM,EAANA,EAAQ+C,Y,OAShC,OATIC,EAAc,SASlB,GAPU,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBF,YAAW,EACXG,SAAUnD,MAAAA,OAAM,EAANA,EAAQmD,YAIVd,kBACRC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,I,OAEJ,MAAO,CAAP,EAVE,SAUcvB,cAGZ8B,EAAsB,SAC1BC,EACArD,GAAkC,0C,wDAEd,SAAMA,MAAAA,OAAM,EAANA,EAAQ+C,Y,OAQlC,OARMC,EAAc,SAQpB,GANY,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBF,YAAW,EACXG,SAAUnD,MAAAA,OAAM,EAANA,EAAQmD,YAGZG,wBAAwBD,I,OAClC,OADA,SACA","sources":["webpack://kafka-ui/./src/modules/ConsumerGroups/dialogs/DeleteConsumerGroup/DeleteConsumerGroup.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteConsumerGroup } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { useAlert } from '@bf2/ui-shared';\nimport { BaseModalProps } from '@app/components/KafkaModal/ModalTypes';\n\nexport type DeleteConsumerGroupProps = {\n  consumerName: string;\n  refreshConsumerGroups?: () => void;\n};\n\nconst DeleteConsumerGroup: React.FC<DeleteConsumerGroupProps & BaseModalProps> =\n  ({ consumerName, refreshConsumerGroups, hideModal }) => {\n    const { t } = useTranslation();\n    const config = useContext(ConfigContext);\n    const [verificationText, setVerificationText] = useState<string>('');\n    const { addAlert } = useAlert();\n\n    const onClose = () => {\n      hideModal();\n    };\n\n    const onDelete = async () => {\n      try {\n        if (consumerName) {\n          await deleteConsumerGroup(consumerName, config).then(() => {\n            addAlert({\n              variant: AlertVariant.success,\n              title: t('consumerGroup.consumergroup_successfully_deleted', {\n                name: consumerName,\n              }),\n            });\n\n            refreshConsumerGroups && refreshConsumerGroups();\n          });\n        }\n      } catch (err) {\n        addAlert({\n          variant: AlertVariant.danger,\n          title: err.response.data.error_message,\n        });\n      }\n      onClose();\n    };\n\n    const handleVerificationTextChange = (value) => {\n      setVerificationText(value);\n    };\n\n    return (\n      <Modal\n        variant={ModalVariant.small}\n        isOpen={true}\n        aria-label={t('consumerGroup.delete')}\n        title={t('consumerGroup.delete')}\n        titleIconVariant='warning'\n        showClose={true}\n        aria-describedby='modal-message'\n        onClose={onClose}\n        actions={[\n          <Button\n            variant='danger'\n            onClick={onDelete}\n            key={1}\n            isDisabled={verificationText.toUpperCase() != 'DELETE'}\n          >\n            {t('common.delete')}\n          </Button>,\n          <Button variant='link' onClick={onClose} key={2}>\n            {t('common.cancel')}\n          </Button>,\n        ]}\n      >\n        <Text id='modal-message'>\n          <label\n            htmlFor='instance-name-input'\n            dangerouslySetInnerHTML={{\n              __html: t('common.confirm_delete_modal_text', {\n                name: consumerName,\n              }),\n            }}\n          />\n        </Text>\n\n        <br />\n        <label htmlFor='delete-text-input'>{t('common.confirm_delete')}</label>\n        <TextInput\n          value={verificationText}\n          id='delete-text-input'\n          name='delete-text-input'\n          type='text'\n          onChange={handleVerificationTextChange}\n          autoFocus={true}\n        />\n      </Modal>\n    );\n  };\n\nexport default DeleteConsumerGroup;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  GroupsApi,\n  ConsumerGroupList,\n  ConsumerGroup,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nexport { getConsumerGroups, deleteConsumerGroup, getConsumerGroupDetail };\n"],"names":["consumerName","refreshConsumerGroups","hideModal","t","useTranslation","config","useContext","useState","verificationText","setVerificationText","addAlert","useAlert","onClose","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","then","AlertVariant","name","response","data","error_message","key","isDisabled","toUpperCase","Text","id","htmlFor","dangerouslySetInnerHTML","__html","TextInput","value","type","onChange","autoFocus","getConsumerGroups","offset","limit","size","page","topic","groupIdFilter","order","orderKey","SortByDirection","getToken","accessToken","GroupsApi","Configuration","basePath","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById"],"sourceRoot":""}