{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/SearchTopics.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/TopicsList.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedMainView.tsx"],"names":["AlertContext","createContext","SearchTopics","search","setSearch","onClear","t","useTranslation","InputGroup","SearchInput","name","id","type","placeholder","value","onChange","TopicsListComponent","onCreateTopic","getTopicDetailsPath","onClickTopic","onDeleteTopic","onError","useState","loading","setLoading","page","setPage","perPage","setPerPage","offset","setOffset","topics","setTopics","filteredTopics","setFilteredTopics","deleteModal","setDeleteModal","topicName","setTopicName","addAlert","useContext","config","fetchTopic","topicsList","response","data","code","error_message","AlertVariant","useEffect","onSetPage","_event","pageNumber","onPerPageSelect","tableColumns","title","transforms","sortable","rowData","items","map","topic","Link","to","onClick","e","preventDefault","partitions","length","Number","filter","element","key","trim","topicsFiltered","includes","prevState","undefined","actions","_","rowId","onDelete","onEdit","Loading","Card","className","EmptyState","emptyStateProps","variant","titleProps","emptyStateBodyProps","body","buttonProps","Toolbar","ToolbarContent","ToolbarItem","Button","Pagination","itemCount","widgetId","Table","TableVariant","cells","rows","slice","TableHeader","TableBody","Divider","PaginationVariant","FederatedMainView","mainBreadcrumbs","getToken","activeTab","apiBasePath","kafkaName","kafkaPageLink","onDeleteConsumer","alertContext","activeTabKey","setActiveTabKey","contentRefTopics","contentRefConsumers","BrowserRouter","I18nextProvider","i18n","basePath","Breadcrumb","BreadcrumbItem","isActive","PageSection","Level","Title","headingLevel","PageSectionVariants","isWidthLimited","padding","default","Tabs","activeKey","onSelect","event","tabIndex","Tab","TabTitleText","eventKey","tabContentId","tabContentRef","TabContent","ref","hidden","onDeleteConsumerGroup","consumerGroupByTopic"],"mappings":"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","file":"299.9b6bada3.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React from 'react';\nimport { InputGroup, SearchInput } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport interface ISearchTopicsProps {\n  setSearch: (value: string) => void;\n  search: string;\n  onClear: () => void;\n}\nconst SearchTopics: React.FunctionComponent<ISearchTopicsProps> = ({\n  search,\n  setSearch,\n  onClear,\n}) => {\n  const { t } = useTranslation();\n\n  const onChangeInput = (value: string) => {\n    setSearch(value);\n  };\n\n  const onClearHandler = () => {\n    onClear();\n    setSearch('');\n  };\n  return (\n    <InputGroup>\n      <SearchInput\n        name='searchName'\n        id='search-topics-input'\n        type='search'\n        aria-label={t('topic.topic_search_input')}\n        placeholder={t('common.search')}\n        value={search}\n        onChange={onChangeInput}\n        onClear={onClearHandler}\n      />\n    </InputGroup>\n  );\n};\nexport { SearchTopics };\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  AlertVariant,\n  Button,\n  Card,\n  Divider,\n  Pagination,\n  PaginationVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  sortable,\n} from '@patternfly/react-table';\nimport { useTimeout } from '../../../../Hooks/useTimeOut';\nimport { SearchTopics } from './SearchTopics';\nimport {\n  EmptyState,\n  MASEmptyStateVariant,\n} from '../../../../Components/EmptyState/EmptyState';\nimport { getTopics } from '../../../../Services';\nimport { DeleteTopics } from './DeleteTopicsModal';\nimport { ConfigContext } from '../../../../Contexts';\nimport { TopicsList } from '../../../../OpenApi';\nimport { Loading } from '../../../../Components/Loading/Loading';\nimport { AlertContext } from '../../../../Contexts/Alert';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport './TopicList.css';\nimport { convertRetentionSize, convertRetentionTime } from '../../CreateTopic/utils';\n\nexport interface ITopic {\n  name: string;\n  replicas: number;\n  partitions: number;\n}\n\nexport interface ITopicProps {\n  rows: ITopic[];\n}\n\nexport interface ITopicList {\n  onCreateTopic: () => void;\n  onClickTopic: (topicName: string | undefined) => void;\n  getTopicDetailsPath: (topic: string | undefined) => string;\n  onDeleteTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n}\n\nexport const TopicsListComponent: React.FunctionComponent<ITopicList> = ({\n  onCreateTopic,\n  getTopicDetailsPath,\n  onClickTopic,\n  onDeleteTopic,\n  onError,\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState<number>(1);\n  const [perPage, setPerPage] = useState<number>(10);\n  const [offset, setOffset] = useState<number>(0);\n  const [search, setSearch] = useState('');\n  const [topics, setTopics] = useState<TopicsList>();\n  const [filteredTopics, setFilteredTopics] = useState<TopicsList>();\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [topicName, setTopicName] = useState<string | undefined>();\n\n  const { t } = useTranslation();\n\n  const { addAlert } = useContext(AlertContext);\n\n  const config = useContext(ConfigContext);\n\n  const fetchTopic = async () => {\n    try {\n      const topicsList = await getTopics(config);\n      if (topicsList) {\n        setTopics(topicsList);\n        setFilteredTopics(topicsList);\n      }\n    } catch (err) {\n      //TODO: Update the api to allow suppress alerts if the application does not want to show them as well.\n      if (onError && err.response.data.code === 401) {\n        onError(err.response.data.code, err.response.data.error_message);\n      } else {\n        addAlert(err.response.data.error_message, AlertVariant.danger);\n      }\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n    fetchTopic();\n  }, [deleteModal]);\n\n  useTimeout(() => fetchTopic(), 5000);\n\n  const onSetPage = (_event, pageNumber: number) => {\n    setPage(pageNumber);\n    setOffset(page * perPage);\n  };\n\n  const onPerPageSelect = (_event, perPage: number) => {\n    setPerPage(perPage);\n  };\n\n  const tableColumns = [\n    { title: t('common.name') },\n    { title: t('common.partitions'), transforms: [sortable] },\n    { title: t('topic.retention_time'), transforms: [sortable] },\n    { title: t('topic.retention_size'), transforms: [sortable] },\n  ];\n\n  const rowData =\n    filteredTopics?.items?.map((topic) => [\n      {\n        title: (\n          <Link\n            data-testid='tableTopics-linkTopic'\n            to={getTopicDetailsPath(topic.name)}\n            onClick={(e) => {\n              e.preventDefault();\n              onClickTopic(topic.name);\n            }}\n          >\n            {topic?.name}\n          </Link>\n        ),\n      },\n      topic.partitions?.length,\n\n      convertRetentionTime(\n        Number(\n          topic.config?.filter((element) => element.key === 'retention.ms')[0]\n            ?.value || 0\n        )\n      ),\n\n      convertRetentionSize(\n        Number(\n          topic.config?.filter(\n            (element) => element.key === 'retention.bytes'\n          )[0]?.value || 0\n        )\n      ),\n    ]) || [];\n\n  useEffect(() => {\n    if (\n      search &&\n      search.trim() != '' &&\n      topics?.items &&\n      topics.items.length > 0\n    ) {\n      const filterSearch = topics?.items.filter(\n        (topicsFiltered) =>\n          topicsFiltered?.name && topicsFiltered.name.includes(search)\n      );\n      setFilteredTopics((prevState) =>\n        prevState\n          ? {\n              ...prevState,\n              items: filterSearch,\n            }\n          : undefined\n      );\n    } else {\n      setFilteredTopics(topics);\n    }\n  }, [search, topics]);\n\n  const onClear = () => {\n    setFilteredTopics(topics);\n  };\n  const onDelete = (rowId: any) => {\n    if (filteredTopics?.items) {\n      setTopicName(filteredTopics.items[rowId].name);\n    }\n    setDeleteModal(true);\n  };\n\n  const onEdit = (rowId: any) => {\n    if (filteredTopics?.items) {\n      onClickTopic(filteredTopics.items[rowId].name);\n    }\n  };\n\n  const actions = [\n    {\n      title: t('common.delete'),\n      ['data-testid']: 'tableTopics-actionDelete',\n      onClick: (_, rowId) => onDelete(rowId),\n    },\n    {\n      title: t('common.edit'),\n      ['data-testid']: 'tableTopics-actionEdit',\n      onClick: (_, rowId) => onEdit(rowId),\n    },\n  ];\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <>\n      {deleteModal && (\n        <DeleteTopics\n          topicName={topicName}\n          setDeleteModal={setDeleteModal}\n          deleteModal={deleteModal}\n          onDeleteTopic={onDeleteTopic}\n        />\n      )}\n      <Card className='kafka-ui-m-full-height'>\n        {rowData.length < 1 && search.length < 1 ? (\n          <EmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoItems,\n            }}\n            titleProps={{\n              title: t('topic.empty_topics_title'),\n            }}\n            emptyStateBodyProps={{\n              body: t('topic.empty_topics_body'),\n            }}\n            buttonProps={{\n              title: t('topic.create_topic'),\n              onClick: () => onCreateTopic(),\n            }}\n          />\n        ) : (\n          <Card>\n            <Toolbar>\n              <ToolbarContent>\n                <ToolbarItem className='pf-c-toolbar-item--search'>\n                  <SearchTopics\n                    onClear={onClear}\n                    search={search}\n                    setSearch={setSearch}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    id='topic-list-create-topic-button'\n                    className='topics-per-page'\n                    data-testid='tabTopics-actionCreate'\n                    onClick={() => {\n                      onCreateTopic();\n                    }}\n                  >\n                    {t('topic.create_topic')}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem variant='pagination'>\n                  <Pagination\n                    itemCount={rowData.length}\n                    perPage={perPage}\n                    page={page}\n                    onSetPage={onSetPage}\n                    widgetId='topic-list-pagination-top'\n                    onPerPageSelect={onPerPageSelect}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n\n            <Table\n              aria-label={t('topic.topic_list_table')}\n              variant={TableVariant.compact}\n              cells={tableColumns}\n              rows={\n                page != 1\n                  ? rowData.slice(offset, offset + perPage)\n                  : rowData.slice(0, perPage)\n              }\n              actions={actions}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          </Card>\n        )}\n        {rowData.length < 1 && search.length > 1 && (\n          <EmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.NoResult,\n            }}\n            titleProps={{\n              title: t('common.no_results_title'),\n            }}\n            emptyStateBodyProps={{\n              body: t('common.no_results_body'),\n            }}\n          />\n        )}\n        {rowData.length > 1 && (\n          <Card>\n            <Divider />\n            <Pagination\n              itemCount={rowData.length}\n              perPage={perPage}\n              page={page}\n              onSetPage={onSetPage}\n              widgetId='topic-list-pagination-bottom'\n              onPerPageSelect={onPerPageSelect}\n              offset={0}\n              variant={PaginationVariant.bottom}\n            />\n          </Card>\n        )}\n      </Card>\n    </>\n  );\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport './style.scss';\nimport { TopicsListComponent } from '../../Modules/Topics/TopicList/Components/TopicsList';\nimport { ConfigContext } from '../../Contexts';\nimport {\n  AlertVariant,\n  Breadcrumb,\n  BreadcrumbItem,\n  Title,\n  Tabs,\n  Level,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport kafkai18n from '../../i18n';\nimport { I18nextProvider, useTranslation } from 'react-i18next';\nimport { AlertContext, AlertContextProps } from '../../Contexts/Alert';\nimport { BrowserRouter } from 'react-router-dom';\nimport { FederatedProps } from '../../Utils';\nimport { ConsumerGroupsList } from '../../Modules/ConsumerGroups/ConsumerGroupList/Components/ConsumerGroupList';\n\nexport interface FederatedMainViewProps extends FederatedProps {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  onCreateTopic: () => void;\n  onClickTopic: (topicName: string | undefined) => void;\n  getTopicDetailsPath: (topic: string | undefined) => string;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  onDeleteConsumer: () => void;\n  onDeleteTopic: () => void;\n}\n\nconst FederatedMainView: FunctionComponent<FederatedMainViewProps> = ({\n  getToken,\n  activeTab = 0,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  onCreateTopic,\n  getTopicDetailsPath,\n  onClickTopic,\n  addAlert,\n  onDeleteConsumer,\n  onDeleteTopic,\n  onError,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefTopics = React.createRef<HTMLElement>();\n  const contentRefConsumers = React.createRef<HTMLElement>();\n  const { t } = useTranslation();\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const buildMainView = () => {\n    const mainBreadcrumbs = (\n      <Breadcrumb>\n        <BreadcrumbItem to={kafkaPageLink ? kafkaPageLink : '#'}>\n          Kafka Instances\n        </BreadcrumbItem>\n        <BreadcrumbItem to='#' isActive>\n          {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n\n    return (\n      <>\n        <section className='pf-c-page__main-breadcrumb'>\n          {mainBreadcrumbs}\n        </section>\n\n        <PageSection variant='light'>\n          <Level>\n            <Title headingLevel='h1'>\n              {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n            </Title>\n            {/* TODO: Add this back once we get the options available to us for this menu <Button variant='plain' iconPosition='right'>\n            <EllipsisVIcon />\n          </Button> */}\n          </Level>\n        </PageSection>\n\n        <PageSection\n          variant={PageSectionVariants.light}\n          className='pf-c-page__main-tabs'\n          isWidthLimited\n          padding={{ default: 'noPadding' }}\n        >\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n            className='pf-m-page-insets'\n          >\n            <Tab\n              title={<TabTitleText>Topics</TabTitleText>}\n              eventKey={0}\n              id='topics-tab-section'\n              aria-label='Topics Tab.'\n              data-testid='pageKafka-tabTopics'\n              tabContentId='kafka-ui-TabcontentTopics'\n              tabContentRef={contentRefTopics}\n            />\n            <Tab\n              title={<TabTitleText>Consumer groups</TabTitleText>}\n              eventKey={1}\n              id='consumer-groups-tab-section'\n              aria-label='Consumer Groups Tab.'\n              data-testid='pageKafka-tabConsumers'\n              tabContentId='kafka-ui-TabcontentConsumers'\n              tabContentRef={contentRefConsumers}\n              className={activeTabKey === 1 ? 'kafka-ui--consumer-content' : ''}\n            />\n          </Tabs>\n        </PageSection>\n        <PageSection\n          variant={\n            activeTabKey === 1\n              ? PageSectionVariants.default\n              : PageSectionVariants.default\n          }\n        >\n          <TabContent\n            eventKey={0}\n            id='kafka-ui-TabcontentTopics'\n            ref={contentRefTopics}\n            className='kafka-ui-m-full-height'\n            aria-label='Topics.'\n          >\n            <TopicsListComponent\n              onCreateTopic={onCreateTopic}\n              onClickTopic={onClickTopic}\n              getTopicDetailsPath={getTopicDetailsPath}\n              onDeleteTopic={onDeleteTopic}\n              onError={onError}\n            />\n          </TabContent>\n          <TabContent\n            eventKey={1}\n            id='kafka-ui-TabcontentConsumers'\n            ref={contentRefConsumers}\n            className='kafka-ui-m-full-height'\n            aria-label='Consumer groups.'\n            hidden\n          >\n            <ConsumerGroupsList\n              onDeleteConsumerGroup={onDeleteConsumer}\n              consumerGroupByTopic={false}\n            />\n          </TabContent>\n        </PageSection>\n      </>\n    );\n  };\n\n  return (\n    // TODO don't add BrowserRouter here - see  https://github.com/bf2fc6cc711aee1a0c2a/mk-ui-frontend/issues/74\n    <BrowserRouter>\n      <I18nextProvider i18n={kafkai18n}>\n        <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n          <AlertContext.Provider value={alertContext}>\n            {buildMainView()}\n          </AlertContext.Provider>\n        </ConfigContext.Provider>\n      </I18nextProvider>\n    </BrowserRouter>\n  );\n};\n\nexport { FederatedMainView };\n\nexport default FederatedMainView;\n"],"sourceRoot":""}