{"version":3,"file":"2546.71f54e19.js","mappings":"iPAqBA,MA8FA,EA5FI,EAAGA,aAAAA,EAAcC,sBAAAA,EAAuBC,UAAAA,EAAWC,MAAAA,MACrD,MAAM,EAAEC,IAAM,IAAAC,gBAAe,CAAC,wBACxBC,GAAS,IAAAC,YAAW,MACpB,SAAEC,IAAa,IAAAC,aAAc,CACjCD,SAAU,QAINE,EAAsBP,IAAU,EAAAQ,mBAAA,OAEhCC,EAAU,KACdV,KA8BF,OACE,UAAC,EAAAW,MAAK,eACJC,QAAS,EAAAC,aAAA,MACTC,QAAQ,EAAI,aACAZ,EAAE,wBACda,MAAOb,EAAE,wBACTc,WAAW,EAAI,mBACE,gBACjBN,QAASA,EACTO,QAAS,EACP,SAAC,EAAAC,OAAM,eACLN,QAAS,EAAAO,cAAA,QACTC,QAvCS,KAAY,iD,MAC3B,IACMtB,UACI,QAAoBA,EAAcM,GAAQiB,MAAK,KACnDf,EAAS,CACPM,QAAS,EAAAU,aAAA,QACTP,MAAOb,EAAE,mDAAoD,CAC3DqB,KAAMzB,MAIVC,GAAyBA,QAG7B,MAAOyB,GACP,IAAIC,EACAD,IAAO,OAAaA,KACtBC,EAAsB,QAAZ,EAAAD,EAAIE,gBAAQ,eAAEC,KAAKC,eAE/BtB,EAAS,CACPM,QAAS,EAAAU,aAAA,OACTP,MAAOU,GAAW,KAGtBf,OAiBMmB,WAAYrB,GAAmB,UAE9BN,EAAE,mBAHE,IAKP,SAAC,EAAAgB,OAAM,eAACN,QAAQ,OAAOQ,QAASV,GAAO,UACpCR,EAAE,mBADyC,KAG/C,YAECM,IACA,SAAC,EAAAsB,KAAI,eAACC,GAAG,iBAAe,WACtB,kBACEC,QAAQ,sBACRC,wBAAyB,CACvBC,OAAQhC,EAAE,mCAAoC,CAC5CqB,KAAMzB,UAMfU,IACC,SAAC,EAAA2B,MAAK,eACJC,UAAU,cACVxB,QAAQ,SACRyB,UAAQ,EACRtB,MAAOb,EAAE,sDAAuD,CAC9DqB,KAAMzB,KACN,WAEF,uBAAII,EAAE,iE,uFChGhB,MAAMoC,EAAoB,CACxBlC,EACAmC,EACAC,EACAC,EACAC,EACAC,EAAyB,EAAAC,gBAAA,IACzBC,KAC+B,iDAC/B,MAAMC,QAAoB1C,MAAAA,OAAM,EAANA,EAAQ2C,WAE5BC,EAAM,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBJ,YAAAA,EACAK,SAAU/C,MAAAA,OAAM,EAANA,EAAQ+C,YActB,aAVQH,EAAIV,uBACRc,OACAA,EACAb,EACAC,EACAC,EACAC,EACAC,EACAE,IAEYlB,QAGZ0B,EAAsB,CAC1BC,EACAlD,KACkB,iDAClB,MAAM0C,QAAoB1C,MAAAA,OAAM,EAANA,EAAQ2C,WAE5BC,EAAM,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBJ,YAAAA,EACAK,SAAU/C,MAAAA,OAAM,EAANA,EAAQ+C,kBAGhBH,EAAIO,wBAAwBD,MAsB9BE,EAA2B,CAC/BpD,EACAkD,EACAG,EACAhB,EACAiB,EACAC,KAC2D,iDAC3D,MAAMb,QAAoB1C,MAAAA,OAAM,EAANA,EAAQ2C,WAE5BC,EAAM,IAAI,EAAAC,UACd,IAAI,EAAAC,cAAc,CAChBJ,YAAAA,EACAK,SAAU/C,MAAAA,OAAM,EAANA,EAAQ+C,YAStB,aALQH,EAAIY,yBAAyBN,EAAiB,CAClDK,MAAAA,EACAF,OAAAA,EACAI,OAAQ,CAAC,CAAEpB,MAAAA,EAAOiB,WAAAA,U,gCC1FjB,MAAMI,EACXC,QAE4CX,IAApCW","sources":["webpack://kafka-ui/./src/modules/ConsumerGroups/dialogs/DeleteConsumerGroup/DeleteConsumerGroup.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Modal,\n  ModalVariant,\n  Text,\n} from '@patternfly/react-core';\nimport { deleteConsumerGroup } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { ConsumerGroupState } from '@rhoas/kafka-instance-sdk';\nimport { isAxiosError } from '@app/utils/axios';\nimport {\n  BaseModalProps,\n  DeleteConsumerGroupProps,\n  useAlert,\n} from '@rhoas/app-services-ui-shared';\n\nconst DeleteConsumerGroup: React.FC<\n  DeleteConsumerGroupProps & BaseModalProps\n> = ({ consumerName, refreshConsumerGroups, hideModal, state }) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const isConsumerConnected = state === ConsumerGroupState.Stable;\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (consumerName) {\n        await deleteConsumerGroup(consumerName, config).then(() => {\n          addAlert({\n            variant: AlertVariant.success,\n            title: t('consumerGroup.consumergroup_successfully_deleted', {\n              name: consumerName,\n            }),\n          });\n\n          refreshConsumerGroups && refreshConsumerGroups();\n        });\n      }\n    } catch (err) {\n      let message: string | undefined;\n      if (err && isAxiosError(err)) {\n        message = err.response?.data.error_message;\n      }\n      addAlert({\n        variant: AlertVariant.danger,\n        title: message || '',\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t('consumerGroup.delete')}\n      title={t('consumerGroup.delete')}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant={ButtonVariant.primary}\n          onClick={onDelete}\n          key={1}\n          isDisabled={isConsumerConnected}\n        >\n          {t('common.delete')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      {!isConsumerConnected && (\n        <Text id='modal-message'>\n          <label\n            htmlFor='instance-name-input'\n            dangerouslySetInnerHTML={{\n              __html: t('common.confirm_delete_modal_text', {\n                name: consumerName,\n              }),\n            }}\n          />\n        </Text>\n      )}\n      {isConsumerConnected && (\n        <Alert\n          className='modal-alert'\n          variant='danger'\n          isInline\n          title={t('consumerGroup.delete_consumer_connected_alert_title', {\n            name: consumerName,\n          })}\n        >\n          <p>{t('consumerGroup.delete_consumer_connected_alert_body')}</p>\n        </Alert>\n      )}\n    </Modal>\n  );\n};\n\nexport default DeleteConsumerGroup;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  ConsumerGroup,\n  ConsumerGroupList,\n  OffsetType,\n  ConsumerGroupResetOffsetResult,\n  GroupsApi,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      undefined,\n      undefined,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nconst consumerGroupResetOffset = async (\n  config: IConfiguration | undefined,\n  consumerGroupId: string,\n  offset: OffsetType,\n  topic: string,\n  partitions: number[],\n  value?: string\n): Promise<AxiosResponse<ConsumerGroupResetOffsetResult>> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupResetOffsetResult> =\n    await api.resetConsumerGroupOffset(consumerGroupId, {\n      value,\n      offset,\n      topics: [{ topic, partitions }],\n    });\n  return response;\n};\n\nexport {\n  getConsumerGroups,\n  deleteConsumerGroup,\n  getConsumerGroupDetail,\n  consumerGroupResetOffset,\n};\n","import { AxiosError } from 'axios';\n\nexport type ErrorData = {\n  code: number;\n  error_message: string;\n};\n\nexport const isAxiosError = (\n  error: unknown\n): error is AxiosError<ErrorData> => {\n  return (error as AxiosError<ErrorData>) !== undefined;\n};\n"],"names":["consumerName","refreshConsumerGroups","hideModal","state","t","useTranslation","config","useContext","addAlert","useAlert","isConsumerConnected","ConsumerGroupState","onClose","Modal","variant","ModalVariant","isOpen","title","showClose","actions","Button","ButtonVariant","onClick","then","AlertVariant","name","err","message","response","data","error_message","isDisabled","Text","id","htmlFor","dangerouslySetInnerHTML","__html","Alert","className","isInline","getConsumerGroups","size","page","topic","groupIdFilter","order","SortByDirection","orderKey","accessToken","getToken","api","GroupsApi","Configuration","basePath","undefined","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","consumerGroupResetOffset","offset","partitions","value","resetConsumerGroupOffset","topics","isAxiosError","error"],"sourceRoot":""}