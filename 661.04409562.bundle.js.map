{"version":3,"sources":["webpack://kafka-ui/./src/modules/ConsumerGroups/dialogs/DeleteConsumerGroup/DeleteConsumerGroup.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts"],"names":["t","useTranslation","config","useContext","store","hideModal","modalProps","consumerName","refreshConsumerGroups","useState","verificationText","setVerificationText","addAlert","useAlert","onClose","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","then","AlertVariant","name","response","data","error_message","key","isDisabled","toUpperCase","Text","id","htmlFor","dangerouslySetInnerHTML","__html","TextInput","value","type","onChange","autoFocus","getConsumerGroups","offset","limit","size","page","topic","groupIdFilter","order","orderKey","SortByDirection","getToken","accessToken","DefaultApi","Configuration","basePath","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById"],"mappings":"yiDAuGA,QAxFsC,WAC5B,IAAAA,GAAM,IAAAC,kBAAgB,EACxBC,GAAS,IAAAC,YAAW,KACpB,GAAuB,UAArBC,EAAK,QAAEC,EAAS,YAClB,GAA0CD,aAAK,EAALA,EAAOE,aAAc,GAA7DC,EAAY,eAAEC,EAAqB,wBACrC,GAA0C,IAAAC,UAAiB,IAA1DC,EAAgB,KAAEC,EAAmB,KACpCC,GAAa,IAAAC,YAAU,SAEzBC,EAAU,WACdT,KA8BF,OACE,kBAAC,EAAAU,MAAK,CACJC,QAAS,EAAAC,aAAA,MACTC,QAAQ,EAAI,aACAlB,EAAE,wBACdmB,MAAOnB,EAAE,wBACToB,iBAAiB,UACjBC,WAAW,EAAI,mBACE,gBACjBP,QAASA,EACTQ,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLP,QAAQ,SACRQ,QAxCS,qD,qFAETjB,EACF,IAAM,OAAoBA,EAAcL,GAAQuB,MAAK,WACnDb,EAAS,CACPI,QAAS,EAAAU,aAAA,QACTP,MAAOnB,EAAE,mDAAoD,CAC3D2B,KAAMpB,MAIVC,GAAyBA,QATzB,M,OACF,S,sDAYFI,EAAS,CACPI,QAAS,EAAAU,aAAA,OACTP,MAAO,EAAIS,SAASC,KAAKC,gB,oBAG7BhB,I,YAqBMiB,IAAK,EACLC,WAA8C,UAAlCtB,EAAiBuB,eAE5BjC,EAAE,kBAEL,kBAAC,EAAAuB,OAAM,CAACP,QAAQ,OAAOQ,QAASV,EAASiB,IAAK,GAC3C/B,EAAE,oBAIP,kBAAC,EAAAkC,KAAI,CAACC,GAAG,iBACP,2BACEC,QAAQ,sBACRC,wBAAyB,CACvBC,OAAQtC,EAAE,mCAAoC,CAC5C2B,KAAMpB,QAMd,6BACA,2BAAO6B,QAAQ,qBAAqBpC,EAAE,0BACtC,kBAAC,EAAAuC,UAAS,CACRC,MAAO9B,EACPyB,GAAG,oBACHR,KAAK,oBACLc,KAAK,OACLC,SA9C+B,SAACF,GACpC7B,EAAoB6B,IA8ChBG,WAAW,O,85CCvFbC,EAAoB,SACxB1C,EACA2C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,G,YADA,IAAAD,MAAyB,EAAAE,gBAAA,K,2FAGL,SAAMnD,aAAM,EAANA,EAAQoD,Y,OAShC,OATIC,EAAc,SASlB,GAPU,IAAI,EAAAC,WACd,IAAI,EAAAC,cAAc,CAChBF,YAAW,EACXG,SAAUxD,aAAM,EAANA,EAAQwD,YAIVd,kBACRC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,I,OAEJ,MAAO,CAAP,EAVE,SAUcvB,cAGZ8B,EAAsB,SAC1BC,EACA1D,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQoD,Y,OAQlC,OARMC,EAAc,SAQpB,GANY,IAAI,EAAAC,WACd,IAAI,EAAAC,cAAc,CAChBF,YAAW,EACXG,SAAUxD,aAAM,EAANA,EAAQwD,YAGZG,wBAAwBD,I,OAClC,OADA,SACA","file":"661.04409562.bundle.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteConsumerGroup } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { useRootModalContext } from '@app/components/RootModal';\nimport { useAlert } from '@bf2/ui-shared';\n\nconst DeleteConsumerGroup: React.FC = () => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { store, hideModal } = useRootModalContext();\n  const { consumerName, refreshConsumerGroups } = store?.modalProps || {};\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useAlert();\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (consumerName) {\n        await deleteConsumerGroup(consumerName, config).then(() => {\n          addAlert({\n            variant: AlertVariant.success,\n            title: t('consumerGroup.consumergroup_successfully_deleted', {\n              name: consumerName,\n            }),\n          });\n\n          refreshConsumerGroups && refreshConsumerGroups();\n        });\n      }\n    } catch (err) {\n      addAlert({\n        variant: AlertVariant.danger,\n        title: err.response.data.error_message,\n      });\n    }\n    onClose();\n  };\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t('consumerGroup.delete')}\n      title={t('consumerGroup.delete')}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n        >\n          {t('common.delete')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        <label\n          htmlFor='instance-name-input'\n          dangerouslySetInnerHTML={{\n            __html: t('common.confirm_delete_modal_text', {\n              name: consumerName,\n            }),\n          }}\n        />\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>{t('common.confirm_delete')}</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n\nexport default DeleteConsumerGroup;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  DefaultApi,\n  ConsumerGroupList,\n  ConsumerGroup,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nexport { getConsumerGroups, deleteConsumerGroup, getConsumerGroupDetail };\n"],"sourceRoot":""}