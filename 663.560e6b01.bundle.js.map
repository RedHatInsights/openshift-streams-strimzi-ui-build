{"version":3,"file":"663.560e6b01.bundle.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/MASDrawer/MASDrawer.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/ConsumerGroups.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts"],"sourcesContent":["import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/components';\nimport './MASDrawer.css';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading?: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: React.ReactNode;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = false,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n  inlineAlertMessage,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } =\n    drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent\n      widths={widths || { default: 'width_50' }}\n      {...restDrawerPanelContentProps}\n    >\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text\n                  component={text?.component || TextVariants.small}\n                  className={\n                    text?.className || 'kafka-ui-mas-drawer__top-label'\n                  }\n                >\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'kafka-ui-mas-drawer__title'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      onExpand={onExpand}\n      data-ouia-app-id={dataOuiaAppId}\n    >\n      <DrawerContent\n        panelContent={panelContent}\n        className={\n          notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''\n        }\n      >\n        <DrawerContentBody className='kafka-ui-mas-drawer__drawer-content-body'>\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useContext, useState, useEffect, lazy, Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport {\n  EmptyState,\n  MASEmptyStateVariant,\n  MASLoading,\n  MASDrawer,\n} from '@app/components';\nimport { getConsumerGroups } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { ConsumerGroupList, ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { useTimeout } from '@app/hooks/useTimeOut';\nimport { ISortBy, OnSort, SortByDirection } from '@patternfly/react-table';\n\nconst ConsumerGroupDetail = lazy(\n  () => import('./components/ConsumerGroupDetail/ConsumerGroupDetail')\n);\nconst ConsumerGroupsTable = lazy(\n  () => import('./components/ConsumerGroupsTable/ConsumerGroupsTable')\n);\n\nexport type ConsumerGroupsProps = {\n  consumerGroupByTopic: boolean;\n  topic?: string;\n  rowDataTestId?: string;\n};\n\nconst ConsumerGroups: React.FunctionComponent<ConsumerGroupsProps> = ({\n  consumerGroupByTopic,\n  topic,\n  rowDataTestId,\n}) => {\n  const [offset, setOffset] = useState<number>(0);\n  const [order, setOrder] = useState<SortByDirection>();\n  const [orderKey, setOrderKey] = useState<'name' | undefined>();\n  const [sortBy, setSortBy] = useState<ISortBy>({\n    index: undefined,\n    direction: 'asc',\n  });\n  const [consumerGroups, setConsumerGroups] = useState<ConsumerGroupList>();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>('');\n  const [consumerGroupDetail, setConsumerGroupDetail] =\n    useState<ConsumerGroup>();\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  useEffect(() => {\n    setOffset(perPage * (page - 1));\n  }, [page, perPage]);\n\n  const onSort: OnSort = (_event, index, direction) => {\n    setOrder(direction);\n    setOrderKey('name');\n    setSortBy({ index, direction });\n  };\n\n  const fetchConsumerGroups = async () => {\n    const limit = 100;\n    try {\n      await getConsumerGroups(\n        config,\n        offset,\n        limit,\n        perPage,\n        page,\n        topic,\n        search,\n        order,\n        orderKey\n      ).then((response) => {\n        setConsumerGroups(response);\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  useEffect(() => {\n    fetchConsumerGroups();\n  }, [search, order]);\n\n  useTimeout(() => fetchConsumerGroups(), 5000);\n\n  const panelBodyContent = (\n    <ConsumerGroupDetail\n      consumerDetail={consumerGroupDetail}\n      consumerGroupByTopic={consumerGroupByTopic}\n    />\n  );\n\n  const onClose = () => {\n    setIsExpanded(false);\n  };\n\n  const onViewConsumerGroup = (consumerGroup) => {\n    setIsExpanded(true);\n    setConsumerGroupDetail(consumerGroup);\n  };\n\n  const renderConsumerTable = () => {\n    if (consumerGroups === undefined) {\n      return (\n        <PageSection\n          className='kafka-ui-m-full-height'\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (\n      (!consumerGroups?.items?.length || consumerGroups?.items?.length < 1) &&\n      search.length < 1\n    ) {\n      return (\n        <EmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoConsumerGroups,\n          }}\n          titleProps={{\n            title: t('consumerGroup.empty_consumer_title'),\n          }}\n          emptyStateBodyProps={{\n            body: t('consumerGroup.empty_consumer_body'),\n          }}\n        />\n      );\n    } else if (consumerGroups) {\n      return (\n        <ConsumerGroupsTable\n          consumerGroups={consumerGroups?.items?.slice(\n            offset,\n            offset + perPage\n          )}\n          total={consumerGroups?.items?.length || 0}\n          page={page}\n          perPage={perPage}\n          search={search}\n          setSearch={setSearch}\n          rowDataTestId={rowDataTestId}\n          onViewConsumerGroup={onViewConsumerGroup}\n          isDrawerOpen={isExpanded}\n          refreshConsumerGroups={fetchConsumerGroups}\n          consumerGroupByTopic={consumerGroupByTopic}\n          onSort={onSort}\n          sortBy={sortBy}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <Suspense fallback={<MASLoading />}>\n      <MASDrawer\n        isExpanded={isExpanded}\n        onClose={onClose}\n        panelBodyContent={panelBodyContent}\n        drawerHeaderProps={{\n          text: { label: t('consumerGroup.consumer_group_id') },\n          title: { value: consumerGroupDetail?.groupId, headingLevel: 'h1' },\n        }}\n        data-ouia-app-id='dataPlane-consumerGroupDetails'\n      >\n        {renderConsumerTable()}\n      </MASDrawer>\n    </Suspense>\n  );\n};\n\nexport { ConsumerGroups };\nexport default ConsumerGroups;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  DefaultApi,\n  ConsumerGroupList,\n  ConsumerGroup,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nexport { getConsumerGroups, deleteConsumerGroup, getConsumerGroupDetail };\n"],"names":["MASDrawer","onClose","isLoading","drawerPanelContentProps","drawerHeaderProps","isExpanded","children","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","widths","restDrawerPanelContentProps","text","title","panelContent","DrawerPanelContent","default","MASLoading","DrawerHead","TextContent","label","Text","component","TextVariants","className","value","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","onClick","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","ConsumerGroupDetail","lazy","ConsumerGroupsTable","ConsumerGroups","consumerGroupByTopic","topic","rowDataTestId","useState","offset","setOffset","order","setOrder","orderKey","setOrderKey","index","undefined","direction","sortBy","setSortBy","consumerGroups","setConsumerGroups","setIsExpanded","search","setSearch","consumerGroupDetail","setConsumerGroupDetail","config","useContext","t","useTranslation","location","useLocation","searchParams","URLSearchParams","page","parseInt","get","perPage","useEffect","onSort","_event","fetchConsumerGroups","limit","then","response","consumerDetail","onViewConsumerGroup","consumerGroup","Suspense","fallback","groupId","PageSection","variant","PageSectionVariants","padding","items","length","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","slice","total","isDrawerOpen","refreshConsumerGroups","renderConsumerTable","getConsumerGroups","groupIdFilter","SortByDirection","getToken","accessToken","DefaultApi","Configuration","basePath","data","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById"],"sourceRoot":""}