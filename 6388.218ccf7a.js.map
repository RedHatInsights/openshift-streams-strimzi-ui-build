{"version":3,"file":"6388.218ccf7a.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/modules/Permissions/components/ManagePermissionsDialog/SolidLabel.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/Cells.tsx","webpack://kafka-ui/./src/modules/Permissions/utils.ts","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData, RowWrapperProps } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.MouseEvent<HTMLTableRowElement, MouseEvent>,\n    rowIndex?: number,\n    row?: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (\n  rowWrapperProps: RowWrapperProps\n): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps || {};\n  const { isExpanded, originalData } = row || {};\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={typeof trRef === 'function' ? undefined : trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event) => onRowClick && onRowClick(event, rowIndex, row)}\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelProps } from '@patternfly/react-core';\nimport './SolidLabel.css';\n\nexport type SolidLabelProps = {\n  variant: AclResourceType;\n};\n\nexport const SolidLabel: React.FunctionComponent<SolidLabelProps> = ({\n  variant,\n}) => {\n  const variantSwitch = (): {\n    labelColor: LabelProps['color'];\n    content: string;\n  } => {\n    switch (variant) {\n      case AclResourceType.Group:\n        return { labelColor: 'green', content: 'G' };\n      case AclResourceType.Cluster:\n        return { labelColor: 'grey', content: 'KI' };\n      case AclResourceType.Topic:\n        return { labelColor: 'blue', content: 'T' };\n      case AclResourceType.TransactionalId:\n        return { labelColor: 'orange', content: 'TI' };\n    }\n  };\n  const { labelColor, content } = variantSwitch();\n  return (\n    <Label color={labelColor} className={`mas-m-solid`}>\n      {content}\n    </Label>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { ICell } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport {\n  AclPatternType,\n  AclPermissionType,\n  AclResourceType,\n} from '@rhoas/kafka-instance-sdk';\nimport { Label, LabelGroup, Tooltip } from '@patternfly/react-core';\nimport { EnhancedAclBinding } from '@app/services/acls';\nimport {\n  PrincipalType,\n  usePrincipals,\n  useAuth,\n} from '@rhoas/app-services-ui-shared';\nimport { sentenceCase } from 'sentence-case';\nimport { displayName } from '@app/modules/Permissions/utils';\nimport { useFederated } from '@app/contexts';\nimport { SolidLabel } from '@app/modules/Permissions/components/ManagePermissionsDialog/SolidLabel';\n\nexport type CellBuilder<T extends EnhancedAclBinding> = (\n  item: T,\n  row: number\n) => ICell | string;\n\nconst AllAccountsPrincipal: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  return (\n    <div>\n      <Label variant='outline'>{t('permission.table.all_accounts')}</Label>\n    </div>\n  );\n};\n\ntype PrincipalWithTooltipProps = {\n  acl: EnhancedAclBinding;\n};\nconst PrincipalWithTooltip: React.FunctionComponent<PrincipalWithTooltipProps> =\n  ({ acl }) => {\n    const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n      string | undefined\n    >();\n    const auth = useAuth();\n    const { kafka } = useFederated() || {};\n\n    const principals = usePrincipals()\n      .getAllPrincipals()\n      .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n    const locatedPrincipals = principals.filter((p) => p.id === acl.principal);\n\n    useEffect(() => {\n      const getUsername = async () => {\n        const username = await auth?.getUsername();\n        setCurrentlyLoggedInuser(username);\n      };\n      getUsername();\n    }, [auth]);\n\n    if (locatedPrincipals.length === 1) {\n      if (locatedPrincipals[0].principalType === PrincipalType.ServiceAccount) {\n        return (\n          <Tooltip\n            content={\n              <div>\n                Type: {locatedPrincipals[0].principalType} <br />\n              </div>\n            }\n          >\n            <span tabIndex={0}>\n              {' '}\n              {acl.principal} <InfoCircleIcon color='grey' />\n            </span>\n          </Tooltip>\n        );\n      } else {\n        return (\n          <Tooltip\n            content={\n              <div>\n                Type: {locatedPrincipals[0].principalType} <br />\n                Name: {locatedPrincipals[0].displayName} <br />\n                Email: {locatedPrincipals[0].emailAddress}\n              </div>\n            }\n          >\n            <span tabIndex={0}>\n              {' '}\n              {acl.principal} <InfoCircleIcon color='grey' />\n            </span>\n          </Tooltip>\n        );\n      }\n    }\n    return <span> {acl.principal}</span>;\n  };\n\nexport const principalCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  if (item.principal === '*') {\n    return {\n      title: <AllAccountsPrincipal />,\n      props: {},\n    };\n  } else {\n    return {\n      title: <PrincipalWithTooltip acl={item} />,\n      props: {},\n    };\n  }\n};\n\nexport const permissionOperationCell: CellBuilder<EnhancedAclBinding> = (\n  item\n) => {\n  return {\n    title: (\n      <LabelGroup>\n        <Label\n          variant='outline'\n          color={item.permission === AclPermissionType.Deny ? 'red' : undefined}\n        >\n          {sentenceCase(item.permission)}\n        </Label>\n        <Label variant='outline'>{sentenceCase(item.operation)}</Label>\n      </LabelGroup>\n    ),\n    props: {},\n  } as ICell;\n};\n\nexport const resourceCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  const PatternType: React.FunctionComponent = () => {\n    const { t } = useTranslation(['kafkaTemporaryFixMe']);\n    if (item.patternType === AclPatternType.Prefixed) {\n      return t('permission.cells.pattern_type_prefixed');\n    } else {\n      return t('permission.cells.pattern_type_literal');\n    }\n  };\n  if (item.resourceType === AclResourceType.Cluster) {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)}\n        </div>\n      ),\n    };\n  } else {\n    return {\n      title: (\n        <div>\n          <SolidLabel variant={item.resourceType} />{' '}\n          {displayName(item.resourceType)} <PatternType /> \"{item.resourceName}\"\n        </div>\n      ),\n    };\n  }\n};\n","import { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { sentenceCase } from 'sentence-case';\n\nexport const displayName = (resourceType: AclResourceType): string => {\n  switch (resourceType) {\n    case AclResourceType.Group:\n      return 'Consumer group';\n      break;\n    case AclResourceType.Topic:\n      return 'Topic';\n      break;\n    case AclResourceType.Cluster:\n      return 'Kafka instance';\n      break;\n    case AclResourceType.TransactionalId:\n      return 'Transactional ID';\n      break;\n    default:\n      return sentenceCase(resourceType);\n      break;\n  }\n};\n","import { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type EnhancedAclBinding = AclBinding & {\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const usePermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = async (\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage> => {\n    const accessToken = await config?.getToken();\n\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n      filter.resourceType,\n      filter.resourceName,\n      filter.patternType,\n      filter.principal,\n      filter.operation,\n      filter.permissionType,\n      page,\n      size\n    );\n    return enhanceAclBindingListPage(response);\n  };\n\n  const addPermission = async (acl: AclBinding) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.createAcl(acl);\n  };\n\n  const deletePermission = async (acl: AclFilter) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.deleteAcls(\n      acl.resourceType,\n      acl.resourceName,\n      acl.patternType,\n      acl.principal,\n      acl.operation,\n      acl.permissionType\n    );\n  };\n\n  const getResourceOperations = async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return await api\n      .getAclResourceOperations()\n      .then((response) => response.data);\n  };\n\n  return {\n    getPermissions,\n    addPermission,\n    deletePermission,\n    getResourceOperations,\n  } as PermissionsService;\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        return {\n          ...item,\n          // Strip out the \"User:\" prefix\n          principal: item.principal.substring(5),\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","rowDataTestId","trRef","className","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","undefined","css","rowId","hidden","onClick","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","children","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","SolidLabel","AclResourceType","labelColor","content","variantSwitch","Label","color","AllAccountsPrincipal","t","useTranslation","PrincipalWithTooltip","acl","useState","currentlyLoggedInuser","setCurrentlyLoggedInuser","auth","useAuth","kafka","locatedPrincipals","usePrincipals","getAllPrincipals","filter","p","id","owner","principal","useEffect","getUsername","username","length","principalType","PrincipalType","Tooltip","InfoCircleIcon","displayName","emailAddress","principalCell","item","title","permissionOperationCell","LabelGroup","permission","AclPermissionType","sentenceCase","operation","resourceCell","resourceType","patternType","AclPatternType","resourceName","convertEnum","Object","entries","find","toString","usePermissionsService","config","getPermissions","size","page","Promise","getToken","accessToken","AclsApi","Configuration","basePath","getAcls","permissionType","response","enhanceAclBindingListPage","addPermission","createAcl","deletePermission","deleteAcls","getResourceOperations","getAclResourceOperations","then","data","total","items","map","substring","hash","sort","a","b","localeCompare","getPermissionsTypes","values","getOperations","AclOperation","getResourceTypes","getPatternTypes"],"sourceRoot":""}