{"version":3,"file":"984.0bd6b764.bundle.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport {\n  TopicAdvanceConfig,\n  IAdvancedTopic,\n} from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigEntry, TopicSettings } from '@rhoas/kafka-instance-sdk';\nimport { ConfigContext } from '@app/contexts';\nimport { convertUnits } from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert } from '@bf2/ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onCancelUpdateTopic,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert();\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  };\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const fetchTopic = async (topicName) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      const configEntries: any = {};\n      topicRes.config?.forEach((configItem) => {\n        configEntries[configItem.key || ''] = configItem.value || '';\n      });\n\n      setTopicData({\n        ...topicData,\n        numPartitions: topicRes?.partitions?.length.toString() || '',\n        replicationFactor: topicRes?.partitions && topicRes?.partitions[0].replicas?.length.toString() || '', \n        'cleanup.policy': configEntries['cleanup.policy'] || 'delete',\n        'retention.bytes': configEntries['retention.bytes'] || '-1',\n        'retention.ms': configEntries['retention.ms'] || '604800000',\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        if (onError) {\n          onError(err.response?.data.code, err.response?.data.error_message);\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert({\n            variant: AlertVariant.danger,\n            title: `Topic ${topicName} does not exist`,\n          });\n          onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n    const newConfig: ConfigEntry[] = [];\n    setIsLoading(true);\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== 'numPartitions') {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      await updateTopicModel(name, topicSettings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      if (onError) {\n        onError(err.response.data.code, err.response.data.error_message);\n      }\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport type UpdateTopicPageProps = {\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n};\n\nexport const UpdateTopicPage: React.FunctionComponent<UpdateTopicPageProps> = ({\n  onCancelUpdateTopic,\n  onDeleteTopic,\n  onSaveTopic,\n}) => {\n  const { t } = useTranslation();\n  const {\n    topicName = '',\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 0,\n  } = useFederated();\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onCancelUpdateTopic={onCancelUpdateTopic}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { BrowserRouter } from 'react-router-dom';\nimport { UpdateTopicPage } from '@app/modules/Topics/pages/UpdateTopic';\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\nimport kafkai18n from '@app/i18n';\nimport { KafkaActions } from '@app/utils';\nimport { ModalProvider } from '@app/components/KafkaModal';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  topicName,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n  dispatchKafkaAction,\n  onConnectToRoute,\n}) => {\n  const onCancelUpdateTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.DetailsTopic);\n  };\n\n  const onDeleteTopic = () => {\n    onConnectToRoute && onConnectToRoute('');\n  };\n\n  const onSaveTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.DetailsTopic);\n  };\n\n  return (\n    <BrowserRouter>\n      <I18nextProvider i18n={kafkai18n}>\n        <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n          <FederatedContext.Provider\n            value={{\n              activeTab: 1,\n              topicName,\n              kafkaName,\n              kafkaPageLink,\n              kafkaInstanceLink,\n              onError,\n            }}\n          >\n            <ModalProvider>\n              <UpdateTopicPage\n                onCancelUpdateTopic={onCancelUpdateTopic}\n                onDeleteTopic={onDeleteTopic}\n                onSaveTopic={onSaveTopic}\n              />\n            </ModalProvider>\n          </FederatedContext.Provider>\n        </ConfigContext.Provider>\n      </I18nextProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default UpdateTopicFederated;\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"names":["TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onCancelUpdateTopic","onSaveTopic","onError","config","useContext","addAlert","useAlert","initialState","name","numPartitions","useState","topicData","setTopicData","isLoading","setIsLoading","useEffect","topicRes","forEach","configItem","key","value","partitions","length","toString","replicationFactor","replicas","response","data","code","error_message","status","AlertVariant","title","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","configEntries","newConfig","push","toLowerCase","topicSettings","Number","then","handleCancel","isLoadingSave","UpdateTopicPage","onDeleteTopic","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","getToken","apiBasePath","dispatchKafkaAction","onConnectToRoute","BrowserRouter","I18nextProvider","i18n","basePath","isAxiosError","error","undefined"],"sourceRoot":""}