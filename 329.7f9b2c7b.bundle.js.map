{"version":3,"sources":["webpack://kafka-ui/./src/modules/Topics/dialogs/DeleteTopic/DeleteTopic.tsx","webpack://kafka-ui/./src/services/topics.ts"],"names":["store","hideModal","config","useContext","t","useTranslation","modalProps","topicName","onDeleteTopic","refreshTopics","useState","verificationText","setVerificationText","addAlert","useAlert","isLoading","setIsLoading","onClose","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","then","name","AlertVariant","response","data","error_message","key","isDisabled","toUpperCase","Text","id","htmlFor","dangerouslySetInnerHTML","__html","TextInput","value","type","onChange","autoFocus","OrderKey","getTopics","limit","size","filter","offset","order","orderKey","SortByDirection","getToken","accessToken","DefaultApi","Configuration","basePath","undefined","getTopicDetail","getTopic","convertTopicResponse","topic","topicObj","forEach","numPartitions","partitions","length","updateTopicModel","topicSettings","updateTopic","status","answer","push","map","p","replicas","reduce","previousValue","currentValue","toString","deleteTopic"],"mappings":"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","file":"329.7f9b2c7b.bundle.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { useRootModalContext } from '@app/components/RootModal';\nimport { useAlert } from '@bf2/ui-shared';\n\nconst DeleteTopic: React.FC = () => {\n  const { store, hideModal } = useRootModalContext();\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n  const { topicName, onDeleteTopic, refreshTopics } = store?.modalProps || {};\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useAlert();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (topicName) {\n        setIsLoading(true);\n        await deleteTopic(topicName, config).then(() => {\n          addAlert({\n            title: t('topic.topic_successfully_deleted', { name: topicName }),\n            variant: AlertVariant.success,\n          });\n          onDeleteTopic && onDeleteTopic();\n          refreshTopics && refreshTopics();\n        });\n      }\n    } catch (err) {\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n    onClose();\n  };\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t('topic.delete_modal_title')}\n      title={t('topic.delete_modal_title')}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          data-testid='modalDeleteTopic-buttonDelete'\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n          isLoading={isLoading}\n        >\n          {t('common.delete')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <label\n          htmlFor='instance-name-input'\n          dangerouslySetInnerHTML={{\n            __html: t('common.confirm_delete_modal_text', { name: topicName }),\n          }}\n        />\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>{t('common.confirm_delete')}</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n\nexport default DeleteTopic;\n","import { AxiosResponse } from 'axios';\nimport {\n  ConfigEntry,\n  DefaultApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { IAdvancedTopic } from '@app/modules/Topics/components/CreateTopicWizard/CreateTopicWizard';\nimport { SortByDirection } from '@patternfly/react-table';\n\nexport enum OrderKey {\n  name = 'name',\n  partitions = 'partitions',\n  retentionMs = 'retention.ms',\n  retentionSize = 'retention.bytes',\n}\n\nexport const getTopics = async (\n  config: IConfiguration | undefined,\n  limit?: number,\n  size?: number,\n  filter?: string,\n  offset?: number | undefined,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: OrderKey\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopics(\n    offset,\n    limit,\n    size,\n    filter,\n    undefined,\n    order,\n    orderKey\n  );\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<IAdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): IAdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length || 0;\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"sourceRoot":""}