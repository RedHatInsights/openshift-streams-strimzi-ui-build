{"version":3,"file":"6444.d6b6be5d.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/KafkaModal/KafkaModals.tsx","webpack://kafka-ui/./src/components/MASLoading/MASLoading.tsx","webpack://kafka-ui/./src/components/MASPagination/MASPagination.tsx","webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx"],"sourcesContent":["// A map of modal components to their lazy loaded implementations\nimport React from 'react';\n\nimport { useTranslation } from 'react-i18next';\nimport {\n  ConsumerGroupResetOffsetProps,\n  DeleteConsumerGroupProps,\n  DeleteTopicProps,\n  ManagePermissionsProps,\n  ModalRegistry,\n  ModalType,\n  PartitionsChangeProps,\n  useModal,\n} from '@rhoas/app-services-ui-shared';\n\nexport const useKafkaModals = (): ModalRegistry => {\n  const { t } = useTranslation();\n  return {\n    [ModalType.KafkaDeleteTopic]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/Topics/dialogs/DeleteTopic/DeleteTopic'\n          )\n      ) as React.LazyExoticComponent<React.FunctionComponent<DeleteTopicProps>>,\n      variant: 'small',\n    },\n    [ModalType.KafkaUpdatePartitions]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/Topics/dialogs/PartitionsChange/PartitionsChange'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<PartitionsChangeProps>\n      >,\n      variant: 'small',\n    },\n    [ModalType.KafkaDeleteConsumerGroup]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ConsumerGroups/dialogs/DeleteConsumerGroup/DeleteConsumerGroup'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<DeleteConsumerGroupProps>\n      >,\n      variant: 'small',\n    },\n    [ModalType.KafkaConsumerGroupResetOffset]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/ConsumerGroups/dialogs/ConsumerGroupResetOffset/ConsumerGroupResetOffset'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<ConsumerGroupResetOffsetProps>\n      >,\n      variant: 'large',\n    },\n    [ModalType.KafkaManagePermissions]: {\n      lazyComponent: React.lazy(\n        () =>\n          import(\n            /* webpackPrefetch: true */ '@app/modules/Permissions/dialogs/ManagePermissions/ManagePermissions'\n          )\n      ) as React.LazyExoticComponent<\n        React.FunctionComponent<ManagePermissionsProps>\n      >,\n      variant: 'large',\n      title: t('permission.manage_permissions_dialog.title'),\n    },\n  };\n};\n\nexport const KafkaModalLoader: React.FunctionComponent = () => {\n  const { registerModals } = useModal();\n  const kafkaModals = useKafkaModals();\n  registerModals(kafkaModals);\n  return <></>;\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  BullseyeProps,\n  Spinner,\n  SpinnerProps,\n} from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React, {\n  useCallback,\n  FunctionComponent,\n  createContext,\n  useContext,\n  useState,\n} from 'react';\nimport {\n  Pagination as PFPagination,\n  PaginationProps as PFPaginationProps,\n  PaginationVariant,\n} from '@patternfly/react-core';\n\nexport type PaginationProps = Omit<PFPaginationProps, 'children' | 'ref'>;\n\nexport type PaginationContextProps = {\n  page: number | undefined;\n  perPage: number | undefined;\n  setPage: (page: number | undefined) => void;\n  setPerPage: (perPage: number | undefined) => void;\n};\n\nexport const PaginationContext = createContext<\n  PaginationContextProps | undefined\n>(undefined);\nexport const usePaginationParams = (): PaginationContextProps | undefined =>\n  useContext(PaginationContext);\n\nexport const PaginationProvider: React.FC = ({ children }) => {\n  const [page, setPage] = useState<number | undefined>(1);\n  const [perPage, setPerPage] = useState<number | undefined>(10);\n\n  return (\n    <PaginationContext.Provider value={{ page, perPage, setPage, setPerPage }}>\n      {children}\n    </PaginationContext.Provider>\n  );\n};\n\nconst MASPagination: FunctionComponent<PaginationProps> = ({\n  itemCount,\n  variant = PaginationVariant.top,\n  isCompact,\n  titles,\n  ...restProps\n}) => {\n  const { setPage, setPerPage, perPage, page } = usePaginationParams() || {};\n\n  const onSetPage = useCallback((_: unknown, newPage: number) => {\n    setPage && setPage(newPage);\n  }, []);\n\n  const onPerPageSelect = useCallback((_: unknown, newPerPage: number) => {\n    setPage && setPage(1);\n    setPerPage && setPerPage(newPerPage);\n  }, []);\n\n  return (\n    <PFPagination\n      itemCount={itemCount}\n      perPage={perPage}\n      page={page}\n      onSetPage={onSetPage}\n      variant={variant}\n      onPerPageSelect={onPerPageSelect}\n      isCompact={isCompact}\n      {...restProps}\n      titles={titles}\n    />\n  );\n};\n\nexport { MASPagination };\n","import React, { useContext } from 'react';\n\nexport type FederatedProps = {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport {\n  IAdvancedTopic,\n  TopicAdvanceConfig,\n} from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigEntry, TopicSettings } from '@rhoas/kafka-instance-sdk';\nimport { ConfigContext } from '@app/contexts';\nimport { convertUnits } from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  };\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onCancelUpdateTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const fetchTopic = async (topicName) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      const configEntries: ConfigEntry = {};\n      topicRes.config?.forEach((configItem) => {\n        configEntries[configItem.key || ''] = configItem.value || '';\n      });\n\n      setTopicData({\n        ...topicData,\n        numPartitions: topicRes?.partitions?.length.toString() || '',\n        replicationFactor:\n          (topicRes?.partitions &&\n            topicRes?.partitions[0].replicas?.length.toString()) ||\n          '',\n        'cleanup.policy': configEntries['cleanup.policy'] || 'delete',\n        'retention.bytes': configEntries['retention.bytes'] || '-1',\n        'retention.ms': configEntries['retention.ms'] || '604800000',\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        let message: string | undefined;\n        let code: number | undefined;\n        if (err && isAxiosError(err)) {\n          code = err.response?.data.code;\n          message = err.response?.data.error_message;\n        }\n        if (onError) {\n          onError(code || -1, message || '');\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert({\n            variant: AlertVariant.danger,\n            title: `Topic ${topicName} does not exist`,\n          });\n          onCancelUpdateTopic && onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n    const newConfig: ConfigEntry[] = [];\n    setIsLoading(true);\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== 'numPartitions' && key !== 'replicationFactor') {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      await updateTopicModel(name, topicSettings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      let message: string | undefined;\n      let code: number | undefined;\n      if (err && isAxiosError(err)) {\n        code = err.response?.data.code;\n        message = err.response?.data.error_message;\n      }\n      if (onError) {\n        onError(code || -1, message || '');\n      }\n      setIsLoading(false);\n      addAlert({\n        title: message || '',\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useBasename } from '@rhoas/app-services-ui-shared';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const UpdateTopicPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n  const { topicName } = useParams<{ topicName: string }>();\n  const {\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 1,\n  } = useFederated() || {};\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const onDeleteTopic = () => {\n    history.push(basename);\n  };\n\n  const onSaveTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { UpdateTopicPage } from '@app/modules/Topics/pages/UpdateTopic';\nimport {\n  ConfigContext,\n  FederatedContext,\n  FederatedProps,\n  IConfiguration,\n} from '@app/contexts';\nimport kafkai18n from '@app/i18n';\nimport { KafkaModalLoader } from '@app/components/KafkaModal';\nimport { ModalProvider } from '@rhoas/app-services-ui-components';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n}) => {\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <FederatedContext.Provider\n          value={{\n            activeTab: 1,\n            kafkaName,\n            kafkaPageLink,\n            kafkaInstanceLink,\n            onError,\n          }}\n        >\n          <ModalProvider>\n            <UpdateTopicPage />\n            <KafkaModalLoader />\n          </ModalProvider>\n        </FederatedContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default UpdateTopicFederated;\n"],"names":["KafkaModalLoader","t","registerModals","useModal","useTranslation","ModalType","lazyComponent","variant","title","MASLoading","bullseyeProps","spinnerProps","Bullseye","Spinner","PaginationContext","createContext","undefined","usePaginationParams","useContext","PaginationProvider","children","useState","page","setPage","perPage","setPerPage","Provider","value","MASPagination","itemCount","PaginationVariant","isCompact","titles","restProps","onSetPage","useCallback","_","newPage","onPerPageSelect","newPerPage","FederatedContext","useFederated","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","className","Breadcrumb","BreadcrumbItem","to","PageSection","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onSaveTopic","onError","config","addAlert","useAlert","history","useHistory","basename","getBasename","useBasename","initialState","name","numPartitions","topicData","setTopicData","isLoading","setIsLoading","onCancelUpdateTopic","push","useEffect","topicRes","forEach","configItem","key","partitions","length","toString","replicationFactor","replicas","message","code","response","data","error_message","status","AlertVariant","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","configEntries","newConfig","toLowerCase","topicSettings","Number","then","handleCancel","isLoadingSave","UpdateTopicPage","useParams","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","onDeleteTopic","getToken","apiBasePath","I18nextProvider","i18n","basePath","ModalProvider"],"sourceRoot":""}