{"version":3,"sources":["webpack://kafka-ui/./src/Contexts/Alert/Context.tsx","webpack://kafka-ui/./src/Contexts/Topic/Context.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicDetails/Components/TopicDetailHead.tsx","webpack://kafka-ui/./src/Modules/Topics/TopicList/Components/DeleteTopicsModal.tsx","webpack://kafka-ui/./src/Panels/Topics/FederatedUpdateTopicView.tsx","webpack://kafka-ui/./src/Services/TopicServices.tsx"],"names":["AlertContext","createContext","initialState","name","numPartitions","replicationFactor","preallocate","TopicContext","TopicContextProvider","children","useState","store","setStore","Provider","value","updateStore","toString","updateBulkStore","advanceConfig","TopicDetailHead","topicName","getTopicListPath","onClickTopicList","className","Breadcrumb","BreadcrumbItem","onClick","e","preventDefault","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","DeleteTopics","setDeleteModal","deleteModal","onDeleteTopic","verificationText","setVerificationText","addAlert","useContext","onClose","config","Modal","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","AlertVariant","response","data","error","key","isDisabled","toUpperCase","id","htmlFor","TextInput","type","onChange","autoFocus","FederatedUpdateTopicView","getToken","apiBasePath","currentTopic","onCancelUpdateTopic","onSaveTopic","onError","alertContext","I18nextProvider","i18n","basePath","getTopics","accessToken","getTopicsList","getTopicDetail","getTopic","convertTopicResponse","topic","topicObj","forEach","partitions","length","updateTopicModel","topicSettings","updateTopic","status","answer","push","map","p","replicas","reduce","previousValue","currentValue","deleteTopic"],"mappings":"8IAKaA,G,SAAe,IAAAC,eAC1B,M,6RCCWC,EAA8B,CACzCC,KAAM,GACNC,cAAe,GACfC,kBAAmB,GACnB,sBAAuB,GACvB,eAAgB,IAChB,oBAAqB,OACrB,oBAAqB,GACrB,yBAA0B,QAC1B,yBAA0B,aAC1B,sCAAuC,GACvC,2CAA4C,eAC5C,mBAAoB,GACpB,6BAA8B,GAC9B,iBAAkB,GAClB,kBAAmB,KACnB,uBAAwB,QACxB,oBAAqB,GACrB,yBAA0B,QAC1B,iCAAkC,GAClC,0CAA2C,GAC3C,wCAAyC,GACzC,sBAAuB,GACvB,2BAA4B,eAC5B,4BAA6B,GAC7B,wBAAyB,GACzB,6BAA8B,eAC9B,aAAc,GACd,kBAAmB,eACnB,oBAAqB,GACrB,yBAA0B,eAC1B,uBAAwB,GACxB,4BAA6B,eAC7BC,YAAa,GACb,uBAAwB,GACxB,4BAA6B,QAC7B,sBAAuB,GACvB,2BAA4B,QAC5B,iBAAkB,GAClB,sBAAuB,eACvB,WAAY,GACZ,gBAAiB,gBAGNC,GAAe,IAAAN,eAAc,IAE7BO,EAAsD,SAAC,G,IAClEC,EAAQ,WAEF,GAAoB,IAAAC,UAAwBR,GAA3CS,EAAK,KAAEC,EAAQ,KAgBtB,OACE,kBAACL,EAAaM,SAAQ,CAACC,MAAO,CAAEH,MAAK,EAAEI,YAfrB,SAACZ,EAAcW,G,MACjCF,EAAS,EAAD,KACHD,KAAK,MACPR,GAAOW,EAAME,WAAU,MAY0BC,gBAR9B,SAACC,GACvBN,EAAS,EAAD,KACHD,GACAO,OAMFT,K,8ECxDMU,G,QAAkD,SAAC,G,IAC9DC,EAAS,YACTC,EAAgB,mBAChBC,EAAgB,mBAEhB,OACE,oCACE,6BAASC,UAAU,8BACjB,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,CACbC,QAAS,SAACC,GACRA,EAAEC,iBACFN,KAEFO,GAAIR,KAAkB,UAIxB,kBAAC,EAAAI,eAAc,KAAEL,KAGrB,kBAAC,EAAAU,YAAW,CAACC,QAAS,EAAAC,oBAAA,OACpB,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,KAAI,CAACC,UAAW,EAAAC,aAAA,IAAkBhB,S,2GCvBhCiB,EAAuD,SAAC,G,IACnEC,EAAc,iBACdC,EAAW,cACXnB,EAAS,YACToB,EAAa,gBAEP,GAA0C,IAAA9B,UAAiB,IAA1D+B,EAAgB,KAAEC,EAAmB,KACpCC,GAAa,IAAAC,YAAW,KAAa,SACvCC,EAAU,WACdP,GAAe,IAcXQ,GAAS,IAAAF,YAAW,KAM1B,OACE,kBAAC,EAAAG,MAAK,CACJhB,QAAS,EAAAiB,aAAA,MACTC,OAAQV,EAAW,aACR,gBACXW,MAAM,gBACNC,iBAAiB,UACjBC,WAAW,EAAI,mBACE,gBACjBP,QAASA,EACTQ,QAAS,CACP,kBAAC,EAAAC,OAAM,CACLvB,QAAQ,SACRL,QA9BS,kB,OAAA,E,OAAA,E,EAAA,W,wnCAEbN,EAAc,IAAM,QAAYA,EAAW0B,IAA3C,M,OAAc,S,wBACdH,EAAS,8BAA8BvB,EAAa,EAAAmC,aAAA,S,+BAEpDZ,EAAS,EAAIa,SAASC,KAAKC,MAAO,EAAAH,aAAA,Q,oBAEpCf,IACAF,GAAe,G,qBARA,K,+QA+BTqB,IAAK,EAAC,cACM,gCACZC,WAA8C,UAAlCnB,EAAiBoB,eAAyB,UAIxD,kBAAC,EAAAP,OAAM,CAACvB,QAAQ,OAAOL,QAASmB,EAASc,IAAK,GAAC,YAKjD,kBAAC,EAAAzB,KAAI,CAAC4B,GAAG,iBACN,IACD,2BAAI1C,G,oBAAgC,KAGtC,6BACA,2BAAO2C,QAAQ,qBAAmB,2BAClC,kBAAC,EAAAC,UAAS,CACRlD,MAAO2B,EACPqB,GAAG,oBACH3D,KAAK,oBACL8D,KAAK,OACLC,SAzC+B,SAACpD,GACpC4B,EAAoB5B,IAyChBqD,WAAW,O,sLC/DbC,EAAyE,SAAC,G,IAC9EC,EAAQ,WACRC,EAAW,cACXC,EAAY,eACZlD,EAAgB,mBAChBC,EAAgB,mBAChBkD,EAAmB,sBACnB7B,EAAQ,WACRH,EAAa,gBACbiC,EAAW,cACXC,EAAO,UAEDC,EAAe,CACnBhC,SAAQ,GAEV,OACE,kBAAC,EAAAiC,gBAAe,CAACC,KAAM,KACrB,kBAAC,aAAsB,CAAC/D,MAAO,CAAEgE,SAAUR,EAAaD,SAAQ,IAC9D,kBAAC,aAAqB,CAACvD,MAAO6D,GAC5B,kBAAC,KAAoB,KACnB,kBAAC,IAAe,CACdvD,UAAWmD,EACXlD,iBAAkBA,EAClBC,iBAAkBA,EAClBkD,oBAAqBA,EACrBhC,cAAeA,EACfiC,YAAaA,EACbC,QAASA,SAWvB,W,u7CChDaK,EAAY,SACvBjC,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQuB,Y,OAQU,OARtCW,EAAc,SAQwB,GANhC,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXF,SAAUhC,aAAM,EAANA,EAAQgC,YAGgCG,iB,OACtD,MAAO,CAAP,EAD4C,SAC5BxB,cAGLyB,EAAiB,SAC5B9D,EACA0B,GAAkC,0C,0DAEd,SAAMA,aAAM,EAANA,EAAQuB,Y,OAQjB,OARXW,EAAc,SAQH,GANL,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXF,SAAUhC,aAAM,EAANA,EAAQgC,YAGKK,SAAS/D,I,OAEpC,OAFQqC,EAAS,SAA6B,KAEvC,CAAP,EAAO2B,EAAqB3B,YAGxB2B,EAAuB,SAACC,G,QACtBC,EAAgB,GAYtB,OAVAA,EAASnF,KAAOkF,EAAMlF,KAEV,QAAZ,EAAAkF,EAAMvC,cAAM,SAAEyC,SAAQ,SAACzC,GACjBA,EAAOa,MACT2B,EAASxC,EAAOa,KAAOb,EAAOhC,UAIlCwE,EAASlF,eAAiC,QAAjB,EAAAiF,aAAK,EAALA,EAAOG,kBAAU,eAAEC,SAAU,EAE/CH,GAGII,EAAmB,SAC9BtE,EACAuE,EACA7C,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQuB,Y,OAQK,OARjCW,EAAc,SAQmB,GAN3B,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXF,SAAUhC,aAAM,EAANA,EAAQgC,YAG2Bc,YAC/CxE,EACAuE,I,OAEF,MAAO,CAAP,EAJuC,SAIvBE,gBAGLV,EAAW,SACtB/D,EACA0B,GAAkC,0C,kEAEd,SAAMA,aAAM,EAANA,EAAQuB,Y,OAQjB,OARXW,EAAc,SAQH,GANL,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXF,SAAUhC,aAAM,EAANA,EAAQgC,YAGKK,SAAS/D,I,OAapC,OAbMoC,EAAW,UAEXsC,EAAStC,EAASC,MACjBX,OAASgD,EAAOhD,QAAW,GAClCgD,EAAOhD,OAAOiD,KAAK,CACjBpC,IAAK,oBACL7C,MAIG,QAJI,EAAyB,QAAzB,EAAa,QAAb,EAAA0C,EAASC,YAAI,eAAE+B,kBAAU,eAC5BQ,KAAI,SAACC,GAAC,MAAK,OAAU,QAAV,EAAAA,EAAEC,gBAAQ,eAAET,UACxBU,QACC,SAACC,EAAmBC,GAAqB,YAAxC,IAAAD,MAAA,QAAmB,IAAAC,MAAA,GAAqBD,EAAgBC,YAC1D,eACCrF,aAEC,CAAP,EAAOwC,EAASC,cAGL6C,EAAc,SACzBlF,EACA0B,GAAkC,0C,wDAEd,SAAMA,aAAM,EAANA,EAAQuB,Y,OAQlC,OARMW,EAAc,SAQpB,GANY,IAAI,KACd,IAAI,KAAc,CAChBA,YAAW,EACXF,SAAUhC,aAAM,EAANA,EAAQgC,YAGZwB,YAAYlF,I,OACtB,OADA,SACA","file":"983.c8f6e09e.bundle.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { ServerAlertGroup } from '../../Components/ServerAlertGroup/ServerAlertGroup';\nimport { AlertType, AlertContextProps, TimeOut } from './Alert.types';\n\nexport const AlertContext = createContext<AlertContextProps>(\n  {} as AlertContextProps\n);\n\nexport const AlertProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer?.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert.key))\n      .map((alert) => {\n        const timeOut = setTimeout(() => hideAlert(alert.key), 8000);\n        return { key: alert.key, timeOut };\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const hideAlert = (key: number) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.key !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const createId = () => new Date().getTime();\n\n  const addAlert = (\n    message: string,\n    variant: AlertVariant = AlertVariant.default\n  ) => {\n    setAlerts([...alerts, { key: createId(), message, variant }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <ServerAlertGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React, { createContext, useState } from 'react';\nimport {\n  AdvancedTopic,\n  ITopicProviderProps,\n  TopicContextProp,\n} from './Topic.types';\n\nexport const initialState: AdvancedTopic = {\n  name: '',\n  numPartitions: '',\n  replicationFactor: '',\n  'min.insync.replicas': '',\n  'retention.ms': '7',\n  'retention.ms.unit': 'days',\n  'max.message.bytes': '',\n  'max.message.bytes.unit': 'bytes',\n  'message.timestamp.type': 'CreateTime',\n  'message.timestamp.difference.max.ms': '',\n  'message.timestamp.difference.max.ms.unit': 'milliseconds',\n  'compression.type': '',\n  'log.message.format.version': '',\n  'cleanup.policy': '',\n  'retention.bytes': '-1',\n  'retention.bytes.unit': 'bytes',\n  'log.segment.bytes': '',\n  'log.segment.bytes.unit': 'bytes',\n  'unclean.leader.election.enable': '',\n  'follower.replication.throttled.replicas': '',\n  'leader.replication.throttled.replicas': '',\n  'delete.retention.ms': '',\n  'delete.retention.ms.unit': 'milliseconds',\n  'min.cleanable.dirty.ratio': '',\n  'min.compaction.lag.ms': '',\n  'min.compaction.lag.ms.unit': 'milliseconds',\n  'segment.ms': '',\n  'segment.ms.unit': 'milliseconds',\n  'segment.jitter.ms': '',\n  'segment.jitter.ms.unit': 'milliseconds',\n  'file.delete.delay.ms': '',\n  'file.delete.delay.ms.unit': 'milliseconds',\n  preallocate: '',\n  'index.interval.bytes': '',\n  'index.interval.bytes.unit': 'bytes',\n  'segment.index.bytes': '',\n  'segment.index.bytes.unit': 'bytes',\n  'flush.messages': '',\n  'flush.messages.unit': 'milliseconds',\n  'flush.ms': '',\n  'flush.ms.unit': 'milliseconds',\n};\n\nexport const TopicContext = createContext({} as TopicContextProp);\n\nexport const TopicContextProvider: React.FC<ITopicProviderProps> = ({\n  children,\n}) => {\n  const [store, setStore] = useState<AdvancedTopic>(initialState);\n\n  const updateStore = (name: string, value: string | boolean | number) => {\n    setStore({\n      ...store,\n      [name]: value.toString(),\n    });\n  };\n\n  const updateBulkStore = (advanceConfig: AdvancedTopic) => {\n    setStore({\n      ...store,\n      ...advanceConfig,\n    });\n  };\n\n  return (\n    <TopicContext.Provider value={{ store, updateStore, updateBulkStore }}>\n      {children}\n    </TopicContext.Provider>\n  );\n};\n","import {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport './TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  getTopicListPath,\n  onClickTopicList,\n}) => {\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem\n            onClick={(e) => {\n              e.preventDefault();\n              onClickTopicList();\n            }}\n            to={getTopicListPath()}\n          >\n            Topics\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Text,\n  AlertVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '../../../../Services/TopicServices';\nimport { ConfigContext } from '../../../../Contexts';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\nexport interface IDeleteTopics {\n  setDeleteModal: (value: boolean) => void;\n  deleteModal: boolean;\n  topicName?: string;\n  onDeleteTopic: () => void;\n}\nexport const DeleteTopics: React.FunctionComponent<IDeleteTopics> = ({\n  setDeleteModal,\n  deleteModal,\n  topicName,\n  onDeleteTopic,\n}) => {\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useContext(AlertContext);\n  const onClose = () => {\n    setDeleteModal(false);\n  };\n\n  const onDelete = async () => {\n    try {\n      topicName && (await deleteTopic(topicName, config));\n      addAlert(`Successfully deleted topic ${topicName}`, AlertVariant.success);\n    } catch (err) {\n      addAlert(err.response.data.error, AlertVariant.danger);\n    }\n    onDeleteTopic();\n    setDeleteModal(false);\n  };\n\n  const config = useContext(ConfigContext);\n\n  const handleVerificationTextChange = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={deleteModal}\n      aria-label='Delete topic?'\n      title='Delete topic?'\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          data-testid='modalDeleteTopic-buttonDelete'\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n        >\n          Delete\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <b>{topicName}</b> will be deleted.{' '}\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>Type DELETE to confirm:</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './style.scss';\nimport { UpdateTopicPage } from '../../Modules/Topics/UpdateTopic/UpdateTopicPage';\nimport { ConfigContext, TopicContextProvider } from '../../Contexts';\nimport { AlertVariant } from '@patternfly/react-core';\nimport kafkai18n from '../../i18n';\nimport { I18nextProvider } from 'react-i18next';\nimport { AlertContext, AlertContextProps } from '../../Contexts/Alert';\nimport { FederatedProps } from '../../Utils';\n\nexport interface FederatedUpdateTopicProps extends FederatedProps {\n  getToken: () => Promise<string>;\n  apiBasePath: string;\n  currentTopic: string;\n  getTopicListPath: () => string;\n  onClickTopicList: () => void;\n  onCancelUpdateTopic: () => void;\n  addAlert: (message: string, variant?: AlertVariant) => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n}\n\nconst FederatedUpdateTopicView: FunctionComponent<FederatedUpdateTopicProps> = ({\n  getToken,\n  apiBasePath,\n  currentTopic,\n  getTopicListPath,\n  onClickTopicList,\n  onCancelUpdateTopic,\n  addAlert,\n  onDeleteTopic,\n  onSaveTopic,\n  onError,\n}) => {\n  const alertContext = {\n    addAlert,\n  } as AlertContextProps;\n  return (\n    <I18nextProvider i18n={kafkai18n}>\n      <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n        <AlertContext.Provider value={alertContext}>\n          <TopicContextProvider>\n            <UpdateTopicPage\n              topicName={currentTopic}\n              getTopicListPath={getTopicListPath}\n              onClickTopicList={onClickTopicList}\n              onCancelUpdateTopic={onCancelUpdateTopic}\n              onDeleteTopic={onDeleteTopic}\n              onSaveTopic={onSaveTopic}\n              onError={onError}\n            />\n          </TopicContextProvider>\n        </AlertContext.Provider>\n      </ConfigContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport { FederatedUpdateTopicView };\n\nexport default FederatedUpdateTopicView;\n","import { AxiosResponse } from 'axios';\nimport { AdvancedTopic } from '../Contexts/Topic';\nimport {\n  ConfigEntry,\n  DefaultApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n} from '../OpenApi/api';\nimport { Configuration } from '../OpenApi';\nimport { IConfiguration } from '../Contexts';\n\nexport const getTopics = async (\n  config: IConfiguration | undefined\n): Promise<TopicsList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopicsList();\n  return response.data;\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<AdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): AdvancedTopic => {\n  const topicObj: any = {};\n\n  topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key) {\n      topicObj[config.key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length || 0;\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: response.data?.partitions\n      ?.map((p) => p.replicas?.length)\n      .reduce(\n        (previousValue = 0, currentValue = 0) => previousValue + currentValue\n      )\n      ?.toString(),\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n"],"sourceRoot":""}