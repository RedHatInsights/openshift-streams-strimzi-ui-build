{"version":3,"file":"861.f1895ca1.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./src/components/DropdownWithToggle/DropdownWithToggle.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/dialogs/ConsumerGroupResetOffset/ConsumerGroupResetOffset.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'parent' | 'inline';\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n  menuAppendTo,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value = e.currentTarget.textContent;\n    if (onSelectOption) {\n      e.target.name = name;\n      onSelectOption(value, e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {value}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n      menuAppendTo={menuAppendTo}\n    />\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Checkbox,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Stack,\n  StackItem,\n  TextInput,\n  Title,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { ConfigContext } from '@app/contexts';\nimport {\n  IRowData,\n  Table,\n  TableBody,\n  TableHeader,\n} from '@patternfly/react-table';\nimport {\n  Consumer,\n  ConsumerGroup,\n  ConsumerGroupResetOffsetParametersOffsetEnum,\n  ConsumerGroupStateEnum,\n} from '@rhoas/kafka-instance-sdk';\nimport './ConsumerGroupResetOffset.css';\nimport { BaseModalProps } from '@app/components/KafkaModal/ModalTypes';\nimport { consumerGroupResetOffset } from '@app/services';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '@app/components/DropdownWithToggle';\nimport { useAlert } from '@rhoas/app-services-ui-shared';\n\nexport type ConsumerGroupResetOffsetProps = {\n  consumerGroupData: ConsumerGroup | undefined;\n  refreshConsumerGroups?: () => void;\n};\n\nexport type ConsumerRow = Consumer & {\n  selected?: boolean;\n};\n\nconst ConsumerGroupResetOffset: React.FC<\n  ConsumerGroupResetOffsetProps & BaseModalProps\n> = ({ consumerGroupData, refreshConsumerGroups, hideModal }) => {\n  const config = useContext(ConfigContext);\n\n  const { t } = useTranslation();\n\n  const [confirmCheckboxChecked, setConfirmCheckboxChecked] =\n    useState<boolean>(false);\n  const [isDisconnected, setIsDisconnected] = useState<boolean>(false);\n  const [selectedTopic, setSelectedTopic] = useState<string>('');\n  const [selectedOffset, setOffset] =\n    useState<ConsumerGroupResetOffsetParametersOffsetEnum>();\n  const [customOffsetValue, setCustomOffsetValue] = useState<string>('');\n  const [consumers, setConsumers] = useState<ConsumerRow[]>([]);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n\n  const onCustomOffsetChange = (value: string) => {\n    setCustomOffsetValue(value);\n  };\n\n  const preparedTableCells = () => {\n    const tableRow: (IRowData | string[])[] | undefined = [];\n    consumers &&\n      consumers.forEach((row: ConsumerRow) => {\n        const {\n          partition,\n          groupId,\n          memberId,\n          offset: currentOffset,\n          logEndOffset,\n          lag,\n          selected,\n        } = row;\n        tableRow.push({\n          cells: [\n            partition,\n            groupId + memberId,\n            currentOffset,\n            logEndOffset,\n            lag,\n            {\n              title:\n                selected && selectedOffset\n                  ? selectedOffset ===\n                    ConsumerGroupResetOffsetParametersOffsetEnum.Absolute\n                    ? customOffsetValue\n                    : selectedOffset\n                  : '-',\n            },\n          ],\n          originalData: row,\n          selected,\n        });\n      });\n    return tableRow;\n  };\n\n  const getTopics = (consumerGroupDetail) => {\n    const topics = consumerGroupDetail.consumers.map(\n      (consumer) => consumer.topic\n    );\n    const distinctTopics = topics.filter(\n      (topic: string, i: number) => topics.indexOf(topic) === i\n    );\n    return distinctTopics.map((topic: string) => ({\n      key: topic,\n      value: topic,\n      isDisabled: false,\n    }));\n  };\n\n  const offsetOptions: IDropdownOption[] = [\n    {\n      key: ConsumerGroupResetOffsetParametersOffsetEnum.Absolute,\n      value: ConsumerGroupResetOffsetParametersOffsetEnum.Absolute,\n      isDisabled: false,\n    },\n    {\n      key: ConsumerGroupResetOffsetParametersOffsetEnum.Latest,\n      value: ConsumerGroupResetOffsetParametersOffsetEnum.Latest,\n      isDisabled: false,\n    },\n    {\n      key: ConsumerGroupResetOffsetParametersOffsetEnum.Earliest,\n      value: ConsumerGroupResetOffsetParametersOffsetEnum.Earliest,\n      isDisabled: false,\n    },\n  ];\n\n  useEffect(() => {\n    const filteredConsumers =\n      consumerGroupData &&\n      consumerGroupData.consumers.filter(\n        (consumer) => consumer.topic === selectedTopic\n      );\n    setConsumers(filteredConsumers || []);\n  }, [selectedTopic]);\n\n  useEffect(() => {\n    consumerGroupData?.state &&\n      setIsDisconnected(getIsDisconnected(consumerGroupData.state));\n  }, [consumerGroupData?.state]);\n\n  const onConfirmationChange = (checked: boolean) => {\n    setConfirmCheckboxChecked(checked);\n  };\n\n  const getIsDisconnected = (state: string) => {\n    if (state === ConsumerGroupStateEnum.Stable) {\n      return false;\n    }\n    return true;\n  };\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const columns = [\n    t('consumerGroup.partition'),\n    `${t('consumerGroup.client_id')} + ${t('consumerGroup.member_id')}`,\n    t('consumerGroup.current_offset'),\n    t('consumerGroup.log_end_offset'),\n    t('consumerGroup.offset_lag'),\n    t('consumerGroup.new_offset'),\n  ];\n\n  const onTopicSelect = (_: string, event) => {\n    setSelectedTopic(event.currentTarget.textContent);\n  };\n\n  const onOffsetSlect = (_: string, event) => {\n    setOffset(event.currentTarget.textContent);\n  };\n\n  const handleConsumerGroupResetOffset = async () => {\n    try {\n      const partitions = consumers\n        .filter(({ selected }) => selected === true)\n        .map(({ partition }) => partition);\n      if (\n        selectedOffset === ConsumerGroupResetOffsetParametersOffsetEnum.Absolute\n      ) {\n        consumerGroupData &&\n          (await consumerGroupResetOffset(\n            config,\n            consumerGroupData.groupId,\n            ConsumerGroupResetOffsetParametersOffsetEnum.Absolute,\n            selectedTopic,\n            partitions,\n            customOffsetValue.toString()\n          ));\n      } else {\n        consumerGroupData &&\n          selectedOffset &&\n          (await consumerGroupResetOffset(\n            config,\n            consumerGroupData.groupId,\n            selectedOffset,\n            selectedTopic,\n            partitions\n          ));\n      }\n      addAlert({\n        variant: AlertVariant.success,\n        title: t('consumerGroup.offset_successfully_reset'),\n      });\n      refreshConsumerGroups && refreshConsumerGroups();\n    } catch (err) {\n      let message: string | undefined;\n      if (err && isAxiosError(err)) {\n        message = err.response?.data.error_message;\n      }\n      addAlert({\n        variant: AlertVariant.danger,\n        title: message || '',\n      });\n    }\n\n    onClose();\n  };\n\n  const onSelect = (\n    _: React.FormEvent<HTMLInputElement>,\n    isSelected: boolean,\n    rowId: number\n  ) => {\n    let newConsumers = [...consumers];\n    if (rowId === -1) {\n      newConsumers = consumers.map((consumer) => {\n        consumer.selected = isSelected;\n        return consumer;\n      });\n    } else {\n      newConsumers[rowId].selected = isSelected;\n    }\n    setConsumers(newConsumers);\n  };\n\n  const isResetOffsetDisabled = (): boolean => {\n    return (\n      selectedTopic === '' ||\n      !confirmCheckboxChecked ||\n      !isDisconnected ||\n      !selectedOffset ||\n      consumers.filter(({ selected }) => selected === true).length === 0\n    );\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      isOpen={true}\n      aria-label={'Modal for resetting offset of Kafka consumergroup'}\n      title={t('consumerGroup.reset_offset')}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={handleConsumerGroupResetOffset}\n          key={1}\n          isDisabled={isResetOffsetDisabled()}\n        >\n          {t('consumerGroup.reset_offset')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <Form isHorizontal>\n            <FormGroup label='Consumer group' fieldId='horizontal-form-name'>\n              <Title className='form-title' headingLevel='h4' size='md'>\n                {consumerGroupData?.groupId}\n              </Title>\n            </FormGroup>\n            {isDisconnected && (\n              <FormGroup label='Topic' fieldId='horizontal-form-name'>\n                <DropdownWithToggle\n                  id='topic-dropdown'\n                  toggleId='topic-dropdowntoggle'\n                  ariaLabel='topic-select-dropdown'\n                  onSelectOption={onTopicSelect}\n                  items={getTopics(consumerGroupData)}\n                  name='cleanup-policy'\n                  value={selectedTopic ? selectedTopic : t('common.select')}\n                  menuAppendTo={'parent'}\n                />\n              </FormGroup>\n            )}\n            {isDisconnected && selectedTopic && (\n              <FormGroup label='New offset' fieldId='offset-dropdown'>\n                <DropdownWithToggle\n                  id='offset-dropdown'\n                  toggleId='offset-dropdowntoggle'\n                  ariaLabel='offset-select-dropdown'\n                  onSelectOption={onOffsetSlect}\n                  items={offsetOptions}\n                  name='offset-dropdown'\n                  value={selectedOffset ? selectedOffset : t('common.select')}\n                  menuAppendTo={'parent'}\n                />\n              </FormGroup>\n            )}\n\n            {isDisconnected &&\n              selectedTopic &&\n              selectedOffset ===\n                ConsumerGroupResetOffsetParametersOffsetEnum.Absolute && (\n                <FormGroup label='Custom offset' fieldId='custom-offset-input'>\n                  <TextInput\n                    id='custom-offset-input'\n                    value={customOffsetValue}\n                    onChange={onCustomOffsetChange}\n                    type='number'\n                  />\n                </FormGroup>\n              )}\n          </Form>\n        </StackItem>\n        <StackItem>\n          {!isDisconnected && (\n            <Alert\n              className='modal-alert'\n              variant='danger'\n              isInline\n              title={t('consumerGroup.reset_offset_connected_alert_title')}\n            >\n              <p>{t('consumerGroup.reset_offset_connected_alert_body')}</p>\n            </Alert>\n          )}\n        </StackItem>\n        <StackItem>\n          {isDisconnected && consumers?.length > 0 && selectedTopic && (\n            <Stack hasGutter>\n              <StackItem>\n                <Table\n                  onSelect={onSelect}\n                  canSelectAll={true}\n                  aria-label='Selectable Table'\n                  cells={columns}\n                  rows={preparedTableCells()}\n                  className='consumer-table'\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              </StackItem>\n              <StackItem>\n                <Checkbox\n                  label={t('consumerGroup.reset_offset_accept')}\n                  aria-label='uncontrolled checkbox example'\n                  id='check-5'\n                  isChecked={confirmCheckboxChecked}\n                  onChange={onConfirmationChange}\n                />\n              </StackItem>\n            </Stack>\n          )}\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nexport default ConsumerGroupResetOffset;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  ConsumerGroup,\n  ConsumerGroupList,\n  ConsumerGroupResetOffsetParametersOffsetEnum,\n  ConsumerGroupResetOffsetResult,\n  GroupsApi,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nconst consumerGroupResetOffset = async (\n  config: IConfiguration | undefined,\n  consumerGroupId: string,\n  offset: ConsumerGroupResetOffsetParametersOffsetEnum,\n  topic: string,\n  partitions: number[],\n  value?: string\n): Promise<AxiosResponse<ConsumerGroupResetOffsetResult>> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupResetOffsetResult> =\n    await api.resetConsumerGroupOffset(consumerGroupId, {\n      value,\n      offset,\n      topics: [{ topic, partitions }],\n    });\n  return response;\n};\n\nexport {\n  getConsumerGroups,\n  deleteConsumerGroup,\n  getConsumerGroupDetail,\n  consumerGroupResetOffset,\n};\n"],"names":["exports","__esModule","CaretDownIconConfig","name","height","width","svgPath","yOffset","xOffset","CaretDownIcon","DropdownWithToggle","id","toggleId","items","value","ariaLabel","onSelectOption","menuAppendTo","useState","isOpen","setIsOpen","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","Dropdown","onSelect","e","currentTarget","textContent","target","toggle","dropdownItems","options","map","option","key","label","DropdownItem","getItems","consumerGroupData","refreshConsumerGroups","hideModal","config","useContext","t","useTranslation","confirmCheckboxChecked","setConfirmCheckboxChecked","isDisconnected","setIsDisconnected","selectedTopic","setSelectedTopic","selectedOffset","setOffset","customOffsetValue","setCustomOffsetValue","consumers","setConsumers","addAlert","useAlert","offsetOptions","ConsumerGroupResetOffsetParametersOffsetEnum","isDisabled","useEffect","filteredConsumers","filter","consumer","topic","state","getIsDisconnected","tableRow","consumerGroupDetail","topics","ConsumerGroupStateEnum","onClose","columns","Modal","variant","ModalVariant","title","showClose","actions","Button","onClick","partitions","groupId","toString","AlertVariant","message","isAxiosError","response","data","error_message","length","Stack","hasGutter","StackItem","Form","isHorizontal","FormGroup","fieldId","Title","className","headingLevel","size","_","event","i","indexOf","TextInput","onChange","type","Alert","isInline","Table","isSelected","rowId","newConsumers","selected","canSelectAll","cells","rows","forEach","row","partition","memberId","currentOffset","logEndOffset","lag","push","originalData","TableHeader","TableBody","Checkbox","isChecked","checked","getConsumerGroups","offset","limit","page","groupIdFilter","order","orderKey","SortByDirection","Promise","getToken","accessToken","GroupsApi","Configuration","basePath","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","consumerGroupResetOffset","resetConsumerGroupOffset"],"sourceRoot":""}