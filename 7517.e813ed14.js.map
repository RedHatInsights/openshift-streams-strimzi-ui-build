{"version":3,"file":"7517.e813ed14.js","mappings":"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","sources":["webpack://kafka-ui/./src/contexts/federated.ts","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { KafkaInstance } from '@rhoas/app-services-ui-shared';\n\nexport type KafkaInstanceWithTopicConfig = KafkaInstance & {\n  size?: {\n    replication_factor?: number;\n    min_in_sync_replicas?: number;\n  };\n};\n\nexport type FederatedProps = {\n  activeTab?: number;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  topicName?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  onClickCreateTopic?: () => void;\n  onEditTopic?: (topicName: string | undefined) => void;\n  onCancelUpdateTopic?: () => void;\n  updateTopic?: (topicName?: string | undefined) => void;\n  showSchemas?: JSX.Element | undefined;\n  redirectAfterDeleteInstance?: () => void;\n  onDeleteInstance?: () => void;\n  kafka: KafkaInstanceWithTopicConfig;\n  replicationFactor?: number;\n  minInSyncReplicas?: number;\n  isMultiAZ?: boolean;\n  showSettings?: JSX.Element | undefined;\n};\n\nexport const FederatedContext = React.createContext<FederatedProps | undefined>(\n  undefined\n);\nexport const useFederated = (): FederatedProps | undefined =>\n  useContext(FederatedContext);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\nimport { Link } from 'react-router-dom';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem\n            render={() => (\n              <Link to={kafkaPageLink || '#'}>\n                {t('common.kafka_instance')}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem\n            render={() => (\n              <Link to={kafkaInstanceLink || '#'}>\n                {kafkaName || t('common.kafka_instance_name')}\n              </Link>\n            )}\n          />\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { TopicAdvanceConfig } from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport {\n  serializeTopic,\n  deserializeTopic,\n  IAdvancedTopic,\n} from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert, useBasename } from '@rhoas/app-services-ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '7',\n    'retention.ms.unit': 'days',\n    'retention.bytes': '1',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n    isRetentionTimeUnlimited: false,\n    isRetentionSizeUnlimited: true,\n  };\n\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onCancelUpdateTopic = useCallback(() => {\n    history.push(`${basename}/topics/${topicName}`);\n  }, [basename, history, topicName]);\n\n  const fetchTopic = useCallback(\n    async (topicName: string) => {\n      try {\n        await getTopic(topicName, config).then((topicRes) => {\n          const deserializedTopic = deserializeTopic(topicRes);\n\n          setTopicData({\n            ...topicData,\n            ...deserializedTopic,\n            numPartitions: topicRes?.partitions?.length.toString() || '',\n            replicationFactor:\n              (topicRes?.partitions &&\n                topicRes?.partitions[0].replicas?.length.toString()) ||\n              '',\n          });\n        });\n      } catch (err) {\n        if (isAxiosError(err)) {\n          let message: string | undefined;\n          let code: number | undefined;\n          if (err && isAxiosError(err)) {\n            code = err.response?.data.code;\n            message = err.response?.data.error_message;\n          }\n          if (onError) {\n            onError(code || -1, message || '');\n          }\n          if (err.response?.status === 404) {\n            // then it's a non-existent topic\n            addAlert({\n              variant: AlertVariant.danger,\n              title: `Topic ${topicName} does not exist`,\n            });\n            onCancelUpdateTopic && onCancelUpdateTopic();\n          }\n        }\n      }\n    },\n    [addAlert, config, onCancelUpdateTopic, onError, topicData]\n  );\n\n  const previousTopicName = useRef<string>();\n  useEffect(() => {\n    if (previousTopicName.current !== topicName) {\n      previousTopicName.current = topicName;\n      fetchTopic(topicName);\n    }\n  }, [fetchTopic, topicName]);\n\n  const saveTopic = async () => {\n    const { name, settings } = serializeTopic(topicData, ['cleanup.policy']);\n    setIsLoading(true);\n\n    try {\n      await updateTopicModel(name, settings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      let message: string | undefined;\n      let code: number | undefined;\n      if (err && isAxiosError(err)) {\n        code = err.response?.data.code;\n        message = err.response?.data.error_message;\n      }\n      if (onError) {\n        onError(code || -1, message || '');\n      }\n      setIsLoading(false);\n      addAlert({\n        title: message || '',\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useBasename } from '@rhoas/app-services-ui-shared';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n  TabsProps,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport const UpdateTopicPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n  const { topicName } = useParams<{ topicName: string }>();\n  const {\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 1,\n  } = useFederated() || {};\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const onDeleteTopic = () => {\n    history.push(basename);\n  };\n\n  const onSaveTopic = () => {\n    history.push(`${basename}/topics/${topicName}`);\n  };\n\n  const handleTabClick: TabsProps['onSelect'] = (_, tabIndex) => {\n    setActiveTabKey(tabIndex as number);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { UpdateTopicPage } from '@app/modules/Topics/pages/UpdateTopic';\nimport {\n  ConfigContext,\n  FederatedContext,\n  FederatedProps,\n  IConfiguration,\n} from '@app/contexts';\nimport { KafkaModalLoader, PaginationProvider } from '@app/components';\nimport { ModalProvider } from '@rhoas/app-services-ui-components';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n  kafka,\n}) => {\n  const { replication_factor, min_in_sync_replicas } = kafka?.size || {};\n\n  return (\n    <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n      <FederatedContext.Provider\n        value={{\n          activeTab: 1,\n          kafkaName,\n          kafkaPageLink,\n          kafkaInstanceLink,\n          onError,\n          kafka: {},\n          replicationFactor: replication_factor,\n          minInSyncReplicas: min_in_sync_replicas,\n        }}\n      >\n        <ModalProvider>\n          <PaginationProvider>\n            <UpdateTopicPage />\n          </PaginationProvider>\n          <KafkaModalLoader />\n        </ModalProvider>\n      </FederatedContext.Provider>\n    </ConfigContext.Provider>\n  );\n};\n\nexport default UpdateTopicFederated;\n"],"names":["FederatedContext","undefined","useFederated","useContext","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","t","useTranslation","className","Breadcrumb","BreadcrumbItem","render","Link","to","PageSection","variant","PageSectionVariants","TextContent","Text","component","TextVariants","UpdateTopicView","onSaveTopic","onError","config","addAlert","useAlert","history","useHistory","getBasename","useBasename","basename","initialState","name","numPartitions","isRetentionTimeUnlimited","isRetentionSizeUnlimited","topicData","setTopicData","useState","isLoading","setIsLoading","onCancelUpdateTopic","useCallback","push","fetchTopic","then","topicRes","deserializedTopic","partitions","length","toString","replicationFactor","replicas","err","message","code","response","data","error_message","status","AlertVariant","title","previousTopicName","useRef","useEffect","current","TopicAdvanceConfig","isCreate","saveTopic","settings","handleCancel","isLoadingSave","UpdateTopicPage","useParams","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","padding","default","Tabs","onSelect","_","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","ConsumerGroups","topic","consumerGroupByTopic","onDeleteTopic","getToken","apiBasePath","kafka","replication_factor","min_in_sync_replicas","size","value","basePath","minInSyncReplicas","ModalProvider"],"sourceRoot":""}