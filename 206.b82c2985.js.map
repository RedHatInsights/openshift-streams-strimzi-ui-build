{"version":3,"file":"206.b82c2985.js","mappings":"yYAgBaA,GAAe,IAAAC,oBAE1BC,GAEWC,EAAW,WACtB,IAAMC,GAAS,IAAAC,YAAWL,GAC1B,QAAeE,IAAXE,EACF,MAAM,IAAIE,MAAM,6BAElB,OAAOF,GAaHG,EAAwE,SAAC,G,IAC7EC,EAAO,UACPC,EAAS,YACTC,EAAK,QAEL,OACE,kBAAC,EAAAC,MAAK,CACJC,GAAG,iBACHJ,QAASA,EACTK,QAAQ,EAAI,aACA,iBACZC,WAAW,EAAI,mBACE,gBACjBC,QAASN,EACTC,MAAOA,GAEP,kBAAC,IAAU,CACTM,cAAe,CACbC,UAAW,iBAOfC,EAAsE,SAAC,G,IAC3EC,EAAW,cACXV,EAAS,YACTW,EAAa,gBAEb,QAAoBlB,IAAhBiB,EACF,OAAO,qCAGT,IAAME,EAAQD,EAAcE,QAC1BH,EAAYI,WAGRC,EAAiBH,EAAMI,cAC7B,OACE,kBAAC,aAAc,CACbC,SACE,kBAACnB,EAAa,CACZE,UAAWA,EACXD,QAASa,EAAMb,QACfE,MAAOW,EAAMX,SAIjB,kBAACc,EAAc,GACbf,UAAWA,EACXC,MAAOW,EAAMX,MACbF,QAASa,EAAMb,SACXW,EAAYQ,eAMXC,EAAyC,SAAC,G,IAAEC,EAAQ,WACzD,GAAgC,IAAAC,YAA/BX,EAAW,KAAEY,EAAc,KAG5BX,GAAgB,IAAAY,QAAsB,IAEtCL,EAA2C,CAC/CM,eAAgB,SAACC,GACfd,EAAcE,QAAU,EAAH,KAAQF,GAAkBc,IAGjDzB,UAAW,WACTsB,OAAe7B,IAGjBiC,UAAW,SAACZ,EAAWI,GACrBI,EAAe,CACbR,UAAS,EACTI,WAAU,MAKhB,OACE,oCACE,kBAACT,EAAY,CACXC,YAAaA,EACbV,UAAWkB,EAAWlB,UACtBW,cAAeA,IAEjB,kBAACpB,EAAaoC,SAAQ,CAACC,MAAOV,GAC3BE,M,gBC3HT,IAAYS,E,iBAAZ,SAAYA,GACV,sCACA,sDACA,gDACA,gEACA,kDALF,CAAYA,IAAAA,EAAS,M,mRCQRC,EAAuD,SAAC,G,IACnEvB,EAAa,gBACbwB,EAAY,eACS,OACrB,kBAAC,EAAAC,SAAQ,KAAKzB,GACZ,kBAAC,EAAA0B,QAAO,KAAKF,O,+CCXJG,E,MAAgB,sBAC3BzC,I,wFCLK,IAAM0C,EAAY,CACvBC,GAAI,CACFC,Y,kymBAEFC,GAAI,CACFD,Y,mfCAEE,EAAY,qBAElBA,EAEGC,IAAI,EAAAC,kBACJD,IAAI,KAGJE,KAAK,CACJC,UAAW,CACTC,MAAO,CAAC,UAAW,aACnBC,OAAQ,IAEVC,YAAa,KACbC,OAAO,EAEPC,cAAe,CACbC,aAAa,GAEfd,UAAS,IAGb","sources":["webpack://kafka-ui/./src/components/KafkaModal/shared/ModalContext.tsx","webpack://kafka-ui/./src/components/KafkaModal/shared/modals.ts","webpack://kafka-ui/./src/components/MASLoading/MASLoading.tsx","webpack://kafka-ui/./src/contexts/Api/Context.tsx","webpack://kafka-ui/./src/i18n/locale/index.ts","webpack://kafka-ui/./src/i18n/index.ts"],"sourcesContent":["import React, {\n  createContext,\n  MutableRefObject,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport { MASLoading, ModalRegistryEntry } from '@app/components';\nimport {\n  ActiveModalProps,\n  ModalContextProps,\n  ModalRegistry,\n} from '@app/components/KafkaModal/shared/types';\nimport { ModalType } from '@app/components/KafkaModal/shared/modals';\nimport { Modal, ModalProps } from '@patternfly/react-core';\n\nexport const ModalContext = createContext<\n  ModalContextProps<ModalType> | undefined\n>(undefined);\n\nexport const useModal = <T extends ModalType>(): ModalContextProps<T> => {\n  const answer = useContext(ModalContext);\n  if (answer === undefined) {\n    throw new Error('not inside modal provider');\n  }\n  return answer;\n};\n\ntype ModalWrapperProps<T extends ModalType> = {\n  activeModal?: ActiveModalProps<T>;\n  hideModal: () => void;\n  modalRegistry: MutableRefObject<ModalRegistry>;\n};\n\ntype FallbackModalProps<T extends ModalType> = Pick<ModalProps, 'variant'> &\n  Pick<ModalWrapperProps<T>, 'hideModal'> &\n  Pick<ModalProps, 'title'>;\n\nconst FallbackModal: React.FunctionComponent<FallbackModalProps<ModalType>> = ({\n  variant,\n  hideModal,\n  title,\n}) => {\n  return (\n    <Modal\n      id='fallback-modal'\n      variant={variant}\n      isOpen={true}\n      aria-label={'fallback modal'}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={hideModal}\n      title={title}\n    >\n      <MASLoading\n        bullseyeProps={{\n          className: 'pf-u-p-xl',\n        }}\n      />\n    </Modal>\n  );\n};\n\nconst ModalWrapper: React.FunctionComponent<ModalWrapperProps<ModalType>> = ({\n  activeModal,\n  hideModal,\n  modalRegistry,\n}) => {\n  if (activeModal === undefined) {\n    return <></>;\n  }\n\n  const entry = modalRegistry.current[\n    activeModal.modalType\n  ] as ModalRegistryEntry<ModalType>;\n\n  const ModalComponent = entry.lazyComponent;\n  return (\n    <React.Suspense\n      fallback={\n        <FallbackModal\n          hideModal={hideModal}\n          variant={entry.variant}\n          title={entry.title}\n        />\n      }\n    >\n      <ModalComponent\n        hideModal={hideModal}\n        title={entry.title}\n        variant={entry.variant}\n        {...activeModal.modalProps}\n      />\n    </React.Suspense>\n  );\n};\n\nexport const ModalProvider: React.FunctionComponent = ({ children }) => {\n  const [activeModal, setActiveModal] = useState<\n    ActiveModalProps<ModalType> | undefined\n  >();\n  const modalRegistry = useRef<ModalRegistry>({} as ModalRegistry);\n\n  const modalProps: ModalContextProps<ModalType> = {\n    registerModals: (modals) => {\n      modalRegistry.current = { ...modalRegistry, ...modals };\n    },\n\n    hideModal: () => {\n      setActiveModal(undefined);\n    },\n\n    showModal: (modalType, modalProps) => {\n      setActiveModal({\n        modalType,\n        modalProps,\n      });\n    },\n  };\n\n  return (\n    <>\n      <ModalWrapper\n        activeModal={activeModal}\n        hideModal={modalProps.hideModal}\n        modalRegistry={modalRegistry}\n      />\n      <ModalContext.Provider value={modalProps}>\n        {children}\n      </ModalContext.Provider>\n    </>\n  );\n};\n","import React from 'react';\nimport { ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { EnhancedAclBinding } from '@app/services/acls';\n\n// The available types of modal\nexport enum ModalType {\n  KafkaDeleteTopic = 'KafkaDeleteTopic',\n  KafkaDeleteConsumerGroup = 'KafkaDeleteConsumerGroup',\n  KafkaUpdatePartitions = 'KafkaUpdatePartitions',\n  KafkaConsumerGroupResetOffset = 'KafkaConsumerGroupResetOffset',\n  KafkaManagePermissions = 'KafkaManagePermissions',\n}\n\nexport type DeleteTopicProps = {\n  topicName?: string;\n  onDeleteTopic?: () => void;\n  refreshTopics?: () => void;\n};\n\nexport type PartitionsChangeProps = {\n  onSaveTopic: React.MouseEventHandler<HTMLButtonElement>;\n};\n\nexport type DeleteConsumerGroupProps = {\n  consumerName: string;\n  refreshConsumerGroups?: () => void;\n  state?: string;\n};\n\nexport type ConsumerGroupResetOffsetProps = {\n  consumerGroupData: ConsumerGroup | undefined;\n  refreshConsumerGroups?: () => void;\n};\n\nexport type ManagePermissionsProps = {\n  onSave?: () => Promise<void>;\n  kafkaName?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n  selectedAccountId?: string;\n  acls: Array<EnhancedAclBinding>;\n};\n\n// A map of modal types to their props\nexport interface ModalTypePropsMap {\n  [ModalType.KafkaDeleteTopic]: DeleteTopicProps;\n  [ModalType.KafkaUpdatePartitions]: PartitionsChangeProps;\n  [ModalType.KafkaDeleteConsumerGroup]: DeleteConsumerGroupProps;\n  [ModalType.KafkaConsumerGroupResetOffset]: ConsumerGroupResetOffsetProps;\n  [ModalType.KafkaManagePermissions]: ManagePermissionsProps;\n}\n\nexport type ManagePermissionsModalProps = ManagePermissionsProps & {\n  resourceOperations: { [key: string]: Array<string> } | undefined;\n  hideModal: () => void;\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  BullseyeProps,\n  Spinner,\n  SpinnerProps,\n} from '@patternfly/react-core';\n\nexport type MASLoadingProps = {\n  bullseyeProps?: Omit<BullseyeProps, 'children'>;\n  spinnerProps?: SpinnerProps;\n};\n\nexport const MASLoading: React.FunctionComponent<MASLoadingProps> = ({\n  bullseyeProps,\n  spinnerProps,\n}: MASLoadingProps) => (\n  <Bullseye {...bullseyeProps}>\n    <Spinner {...spinnerProps} />\n  </Bullseye>\n);\n","import React from 'react';\n\nexport type IConfiguration = {\n  basePath: string;\n  getToken: () => Promise<string>;\n};\n\nexport const ConfigContext = React.createContext<IConfiguration | undefined>(\n  undefined\n);\n","import en from './en.json';\nimport de from './de.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst kafkai18n = i18n.createInstance();\n\nkafkai18n\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    detection: {\n      order: ['htmlTag', 'navigator'],\n      caches: [],\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    resources,\n  });\n\nexport default kafkai18n;\n"],"names":["ModalContext","createContext","undefined","useModal","answer","useContext","Error","FallbackModal","variant","hideModal","title","Modal","id","isOpen","showClose","onClose","bullseyeProps","className","ModalWrapper","activeModal","modalRegistry","entry","current","modalType","ModalComponent","lazyComponent","fallback","modalProps","ModalProvider","children","useState","setActiveModal","useRef","registerModals","modals","showModal","Provider","value","ModalType","MASLoading","spinnerProps","Bullseye","Spinner","ConfigContext","resources","en","translation","de","kafkai18n","use","initReactI18next","init","detection","order","caches","fallbackLng","debug","interpolation","escapeValue"],"sourceRoot":""}