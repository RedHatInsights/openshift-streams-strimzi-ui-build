{"version":3,"sources":["webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/caret-down-icon.js","webpack://kafka-ui/./node_modules/@patternfly/react-icons/dist/js/icons/help-icon.js","webpack://kafka-ui/./src/Components/DropdownWithToggle.tsx","webpack://kafka-ui/./src/Components/FormGroupWithPopover/FormGroupWithPopover.tsx","webpack://kafka-ui/./src/Components/SizeTimeFormGroup/SizeTimeFormGroup.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/MessageSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CoreConfiguration.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/LogSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/ReplicationSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/IndexSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/FlushSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CleanupSection.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/TopicAdvanceConfig.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicHead.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepTopicName.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepPartitions.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepMessageRetention.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/StepReplicas.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/Components/CreateTopicWizard.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/CreateTopicPage.tsx","webpack://kafka-ui/./src/Modules/Topics/CreateTopic/utils.ts"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","DropdownWithToggle","options","id","toggleId","items","value","ariaLabel","onSelectOption","useState","isOpen","setIsOpen","dropdownToggle","DropdownToggle","onToggle","toggleIndicator","Dropdown","onSelect","e","currentTarget","textContent","target","toggle","dropdownItems","map","option","key","label","DropdownItem","FormGroupWithPopover","children","labelHead","fieldId","fieldLabel","labelBody","buttonAriaLabel","FormGroup","labelIcon","Popover","headerContent","bodyContent","onClick","event","preventDefault","className","noVerticalAlign","SizeTimeFormGroup","dropdownValue","inputName","onChange","onPlus","onMinus","plusBtnProps","minusBtnProps","type","timeUnits","isDisabled","memoryUnits","Flex","FlexItem","grow","default","NumberInput","getItemsForType","timeStampOptions","messageCompressionTypes","MessageSection","store","updateStore","t","useTranslation","handleTouchSpinInputChange","fieldName","Number","handleTouchSpinPlus","handleTouchSpinMinus","onDropdownChange","onDropdownChangeDotSeparated","Stack","hasGutter","TextContent","Title","headingLevel","size","tabIndex","Text","component","TextVariants","Form","CoreConfiguration","handleTouchSpinInputChangeCamelCase","handleTouchSpinPlusCamelCase","handleTouchSpinMinusCamelCase","TextInput","isRequired","placeholder","numPartitions","replicationFactor","clearOptions","LogSection","ReplicationSection","handleTextInputChange","Checkbox","isChecked","Boolean","checked","InputGroup","IndexSection","FlushSection","CleanupSection","preallocate","TopicAdvanceConfig","isCreate","saveTopic","deleteTopic","updateBulkStore","actionText","useEffect","Grid","GridItem","span","JumpLinks","isVertical","scrollableSelector","style","position","top","JumpLinksItem","href","PageSection","hasOverflowScroll","padding","StackItem","ActionGroup","Button","variant","Divider","CreateTopichead","isSwitchChecked","setIsSwitchChecked","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","PageSectionVariants","Switch","labelOff","StepTopicName","topicNameInput","setTopicNameInput","onSubmit","helperText","StepPartitions","partitionTouchspinValue","setPartitionTouchspinValue","widthChars","StepMessageRetention","RetentionOption","setMsgRetentionValue","currentPeriod","setCurrentPeriod","msgTouchspinValue","setMsgTouchspinValue","isMsgSelectOpen","setIsMsgSelectOpen","selected","setSelected","retentionFactor","setRetentionFactor","DAY","WEEK","MONTH","CUSTOM","handleMessageRetention","Radio","Select","SelectVariant","selection","selections","SelectOption","isPlaceholder","StepReplicas","ReplicationOption","setReplicationFactorTouchspinValue","setMinInSyncReplicaTouchspinValue","replicationFactorTouchspinValue","minInSyncReplicaTouchspinValue","ONE","currentReplicationFactor","setCurrentReplicationFactor","handleChangeReplicationFactor","TWO","Alert","isInline","title","description","setIsCreateTopic","config","useContext","addAlert","msgRetentionValue","closeWizard","topic","settings","toString","basePath","accessToken","getToken","createTopic","then","res","status","AlertVariant","catch","err","response","data","steps","enableNext","trim","canJumpTo","nextButtonText","PageSectionTypes","isFilled","Wizard","navAriaLabel","mainAriaLabel","onClose","onSave","CreateTopicPage","kebabToCamel","kebabCase","split","word","index","text","charAt","toUpperCase","slice","join","kebabToDotSeparated","val","replaceAll","unitsToBytes","bytes","kilobytes","megabytes","gigabytes","terabytes","unitsToMilliSecond","milliseconds","seconds","days","months","years","convertUnits","topicData","pop","String","formatTopicRequest","configEntries","push"],"mappings":"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","file":"410.6133acc5.bundle.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.CaretDownIconConfig = {\n  name: 'CaretDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.CaretDownIcon = require('../createIcon').createIcon(exports.CaretDownIconConfig);\nexports[\"default\"] = exports.CaretDownIcon;","\"use strict\"\nexports.__esModule = true;\nexports.HelpIconConfig = {\n  name: 'HelpIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M521.3,576 C627.5,576 713.7,502 713.7,413.7 C713.7,325.4 627.6,253.6 521.3,253.6 C366,253.6 334.5,337.7 329.2,407.2 C329.2,414.3 335.2,416 343.5,416 L445,416 C450.5,416 458,415.5 460.8,406.5 C460.8,362.6 582.9,357.1 582.9,413.6 C582.9,441.9 556.2,470.9 521.3,473 C486.4,475.1 447.3,479.8 447.3,521.7 L447.3,553.8 C447.3,570.8 456.1,576 472,576 C487.9,576 521.3,576 521.3,576 M575.3,751.3 L575.3,655.3 C575.313862,651.055109 573.620137,646.982962 570.6,644 C567.638831,640.947672 563.552355,639.247987 559.3,639.29884 L463.3,639.29884 C459.055109,639.286138 454.982962,640.979863 452,644 C448.947672,646.961169 447.247987,651.047645 447.29884,655.3 L447.29884,751.3 C447.286138,755.544891 448.979863,759.617038 452,762.6 C454.961169,765.652328 459.047645,767.352013 463.3,767.30116 L559.3,767.30116 C563.544891,767.313862 567.617038,765.620137 570.6,762.6 C573.659349,759.643612 575.360354,755.553963 575.3,751.3 M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.8,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 M512.1,0 C229.7,0 0,229.8 0,512 C0,794.2 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.HelpIcon = require('../createIcon').createIcon(exports.HelpIconConfig);\nexports[\"default\"] = exports.HelpIcon;","import React, { useState } from 'react';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\n\ninterface IDropdownWithToggleProps {\n  id: string;\n  toggleId: string;\n  value: string;\n  name: string;\n  items: IDropdownOption[];\n  onSelectOption?: (value: string, event) => void;\n  ariaLabel?: string;\n}\n\nexport interface IDropdownOption {\n  value?: string;\n  label?: string;\n  key?: string;\n  isDisabled?: boolean;\n}\n\nexport const DropdownWithToggle: React.FC<IDropdownWithToggleProps> = ({\n  id,\n  toggleId,\n  items,\n  value,\n  ariaLabel,\n  onSelectOption,\n  name,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = () => {\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const onSelect = (e) => {\n    const value = e.currentTarget.textContent;\n    if (onSelectOption) {\n      e.target.name = name;\n      onSelectOption(value, e);\n    }\n    setIsOpen((isOpen) => !isOpen);\n  };\n\n  const getItems = (options: IDropdownOption[]) => {\n    const items = options.map((option) => {\n      const { key, value, label } = option;\n\n      return (\n        <DropdownItem key={key} value={value}>\n          {label || value}\n        </DropdownItem>\n      );\n    });\n\n    return items;\n  };\n\n  const dropdownToggle = (\n    <DropdownToggle\n      id={toggleId}\n      onToggle={onToggle}\n      toggleIndicator={CaretDownIcon}\n    >\n      {value}\n    </DropdownToggle>\n  );\n\n  return (\n    <Dropdown\n      name={name}\n      id={id}\n      onSelect={onSelect}\n      toggle={dropdownToggle}\n      isOpen={isOpen}\n      aria-label={ariaLabel}\n      dropdownItems={getItems(items)}\n    />\n  );\n};\n","import { FormGroup, Popover } from '@patternfly/react-core';\nimport HelpIcon from '@patternfly/react-icons/dist/js/icons/help-icon';\nimport React from 'react';\n\ninterface IFormGroupWithPopoverProps {\n  children: React.ReactNode;\n  labelHead: string;\n  fieldId: string;\n  fieldLabel: string;\n  labelBody: string;\n  buttonAriaLabel: string;\n}\n\nexport const FormGroupWithPopover: React.FC<IFormGroupWithPopoverProps> = ({\n  children,\n  labelHead,\n  fieldId,\n  fieldLabel,\n  labelBody,\n  buttonAriaLabel,\n}) => {\n  const preventButtonSubmit = (event) => event.preventDefault();\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={fieldLabel}\n      labelIcon={\n        <Popover\n          headerContent={<div>{labelHead}</div>}\n          bodyContent={<div>{labelBody}</div>}\n        >\n          <button\n            aria-label={buttonAriaLabel}\n            onClick={preventButtonSubmit}\n            className='pf-c-form__group-label-help'\n          >\n            <HelpIcon noVerticalAlign />\n          </button>\n        </Popover>\n      }\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import {\n  Flex,\n  FlexItem,\n  NumberInput,\n  NumberInputProps,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { DropdownWithToggle, IDropdownOption } from '../DropdownWithToggle';\n\nexport interface SizeTimeFormGroup extends NumberInputProps {\n  /** id of dropdown element */\n  id: string;\n  /** id of dropdown toggle button */\n  toggleId: string;\n  /** id of dropdown element */\n  dropdownValue?: string;\n  /** name attribute of dropdown element */\n  name: string;\n  /** handler method of dropdown */\n  onSelectOption?: (value: string, event) => void;\n  /** aria label for dropdown element */\n  ariaLabel?: string;\n  /** determines whether to display memory units or time units */\n  type: string;\n}\n\nexport const SizeTimeFormGroup: React.FC<SizeTimeFormGroup> = ({\n  id,\n  toggleId,\n  dropdownValue,\n  ariaLabel,\n  onSelectOption,\n  name,\n  inputName,\n  onChange,\n  onPlus,\n  onMinus,\n  value,\n  plusBtnProps,\n  minusBtnProps,\n  type,\n}) => {\n  const timeUnits: IDropdownOption[] = [\n    { key: 'milliseconds', value: 'milliseconds', isDisabled: false },\n    { key: 'seconds', value: 'seconds', isDisabled: false },\n    { key: 'days', value: 'days', isDisabled: false },\n    { key: 'months', value: 'months', isDisabled: false },\n    { key: 'years', value: 'years', isDisabled: false },\n  ];\n\n  const memoryUnits: IDropdownOption[] = [\n    { key: 'bytes', value: 'bytes', isDisabled: false },\n    { key: 'kilobytes', value: 'kilobytes', isDisabled: false },\n    { key: 'megabytes', value: 'megabytes', isDisabled: false },\n    { key: 'gigabytes', value: 'gigabytes', isDisabled: false },\n    { key: 'terabytes', value: 'terabytes', isDisabled: false },\n  ];\n\n  const getItemsForType = (type: string) => {\n    switch (type) {\n      case 'time':\n        return timeUnits;\n      case 'memory':\n        return memoryUnits;\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Flex>\n      <FlexItem grow={{ default: 'grow' }}>\n        <NumberInput\n          inputName={inputName}\n          onChange={onChange}\n          onPlus={onPlus}\n          onMinus={onMinus}\n          value={value}\n          plusBtnProps={plusBtnProps}\n          minusBtnProps={minusBtnProps}\n        />\n      </FlexItem>\n      <FlexItem>\n        <DropdownWithToggle\n          id={id}\n          toggleId={toggleId}\n          ariaLabel={ariaLabel}\n          onSelectOption={onSelectOption}\n          items={getItemsForType(type)}\n          name={name}\n          value={dropdownValue || ''}\n        />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import {\n  TextVariants,\n  Text,\n  TextContent,\n  Form,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nconst timeStampOptions: IDropdownOption[] = [\n  { key: 'create-time', value: 'CreateTime', isDisabled: false },\n  { key: 'log-append-time', value: 'LogAppendTime', isDisabled: false },\n];\n\nconst messageCompressionTypes: IDropdownOption[] = [\n  { key: 'Producer', value: 'Producer', isDisabled: false },\n  { key: 'Gzip', value: 'Gzip', isDisabled: false },\n  { key: 'Snappy', value: 'Snappy', isDisabled: false },\n  { key: 'LZ4', value: 'LZ4', isDisabled: false },\n  { key: 'Zstandard', value: 'Zstandard', isDisabled: false },\n  { key: 'Uncompressed', value: 'Uncompressed', isDisabled: false },\n];\n\nconst MessageSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='messages' tabIndex={-1}>\n          Messages\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.messageSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='maxsize'\n          fieldLabel='Maximum message size'\n          labelHead={t('createTopic.maxMessageSizeLabelHead')}\n          labelBody={t('createTopic.maxMessageSizeLabelBody')}\n          buttonAriaLabel='More info for maximum message size field'\n        >\n          <SizeTimeFormGroup\n            inputName='max-message-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['max.message.bytes'])}\n            plusBtnProps={{ name: 'max-message-bytes' }}\n            minusBtnProps={{ name: 'max-message-bytes' }}\n            id='msg-section-units-dropdown'\n            toggleId='msg-section-units-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='max-message-bytes-unit'\n            dropdownValue={store['max.message.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='timestamp'\n          fieldLabel='Message timestamp type'\n          labelHead={t('createTopic.messageTimestampLabelHead')}\n          labelBody={t('createTopic.messageTimestampLabelBody')}\n          buttonAriaLabel='More info for message timestamp field'\n        >\n          <DropdownWithToggle\n            id='msg-section-timestamp-dropdown'\n            toggleId='msg-section-timestamp-dropdowntoggle'\n            ariaLabel='select timestamp type from dropdown'\n            name='message-timestamp-type'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={timeStampOptions}\n            value={store['message.timestamp.type'] || ''}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='max-difference'\n          fieldLabel='Message timestamp difference'\n          labelHead={t('createTopic.messageTimestampDiffLabelHead')}\n          labelBody={t('createTopic.messageTimestampDiffLabelBody')}\n          buttonAriaLabel='More info for maximum message timestamp difference field'\n        >\n          <SizeTimeFormGroup\n            inputName='message-timestamp-difference-max-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['message.timestamp.difference.max.ms'])}\n            plusBtnProps={{ name: 'message-timestamp-difference-max-ms' }}\n            minusBtnProps={{ name: 'message-timestamp-difference-max-ms' }}\n            id='msg-section-timestamp-diff-units-dropdown'\n            toggleId='msg-section-timestamp-diff-units-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='message-timestamp-difference-max-ms-unit'\n            dropdownValue={store['message.timestamp.difference.max.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='compression-type'\n          fieldLabel='Compression type'\n          labelHead={t('createTopic.compressionTypeLabelHead')}\n          labelBody={t('createTopic.compressionTypeLabelBody')}\n          buttonAriaLabel='More info for comprssion type field'\n        >\n          <DropdownWithToggle\n            id='compression-type'\n            toggleId='msg-section-compression-type-dropdowntoggle'\n            ariaLabel='select timestamp type from dropdown'\n            name='compression-type'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={messageCompressionTypes}\n            value={store['compression.type'] || ''}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n\nexport { MessageSection };\n","import {\n  Form,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  Title,\n  NumberInput,\n  Stack,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToCamel, kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nconst CoreConfiguration: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToCamel(fieldName), value);\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinInputChangeCamelCase = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToCamel(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinPlusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const handleTouchSpinMinusCamelCase = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToCamel(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title\n          headingLevel='h2'\n          size='xl'\n          id='core-configuration'\n          tabIndex={-1}\n        >\n          Core configuration\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.coreConfigInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          labelHead={t('createTopic.topicNameLabelHead')}\n          fieldId='create-topic-name'\n          fieldLabel='Topic name'\n          labelBody={t('createTopic.topicNameLabelBody')}\n          buttonAriaLabel='More info for topic name field'\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='create-topic-name'\n            name='name'\n            value={store.name}\n            onChange={handleTextInputChange}\n            label='Topic name'\n            placeholder='Enter topic name'\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='create-topic-partitions'\n          fieldLabel='Partitions'\n          labelHead={t('createTopic.partitionsLabelHead')}\n          labelBody={t('createTopic.partitionsLabelBody')}\n          buttonAriaLabel='More info for partitions field'\n        >\n          <NumberInput\n            id='create-topic-partitions'\n            inputName='num-partitions'\n            onChange={handleTouchSpinInputChangeCamelCase}\n            onPlus={handleTouchSpinPlusCamelCase}\n            onMinus={handleTouchSpinMinusCamelCase}\n            value={Number(store.numPartitions)}\n            plusBtnProps={{ name: 'num-partitions' }}\n            minusBtnProps={{ name: 'num-partitions' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='replicas'\n          fieldLabel='Replicas'\n          labelHead={t('createTopic.replicasLabelHead')}\n          labelBody={t('createTopic.replicasLabelBody')}\n          buttonAriaLabel='More info for replicas field'\n        >\n          <NumberInput\n            inputName='replication-factor'\n            onChange={handleTouchSpinInputChangeCamelCase}\n            onPlus={handleTouchSpinPlusCamelCase}\n            onMinus={handleTouchSpinMinusCamelCase}\n            value={Number(store.replicationFactor)}\n            plusBtnProps={{ name: 'replication-factor' }}\n            minusBtnProps={{ name: 'replication-factor' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='insyncreplicas'\n          fieldLabel='Minimum in-sync replicas'\n          labelHead={t('createTopic.inSyncReplicasLabelHead')}\n          labelBody={t('createTopic.inSyncReplicasLabelBody')}\n          buttonAriaLabel='More info for minimum in-sync replicas field'\n        >\n          <NumberInput\n            id='insyncreplicas'\n            inputName='min-insync-replicas'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.insync.replicas'])}\n            plusBtnProps={{ name: 'min-insync-replicas' }}\n            minusBtnProps={{ name: 'min-insync-replicas' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='retention'\n          fieldLabel='Retention time'\n          labelHead={t('createTopic.retentionTimeLabelHead')}\n          labelBody={t('createTopic.retentionTimeLabelBody')}\n          buttonAriaLabel='More info for retention time field'\n        >\n          <SizeTimeFormGroup\n            inputName='retention-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['retention.ms'])}\n            plusBtnProps={{ name: 'retention-ms' }}\n            minusBtnProps={{ name: 'retention-ms' }}\n            id='core-config-retention-time-unit'\n            toggleId='core-config-retention-dropdowntoggle'\n            name='retention-ms-unit'\n            dropdownValue={store['retention.ms.unit']}\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n\nexport { CoreConfiguration };\n","import {\n  TextVariants,\n  Text,\n  TextContent,\n  Form,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport {\n  DropdownWithToggle,\n  IDropdownOption,\n} from '../../../../Components/DropdownWithToggle';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nconst clearOptions: IDropdownOption[] = [\n  { key: 'compact', value: 'compact', isDisabled: false },\n  { key: 'delete', value: 'delete', isDisabled: false },\n  { key: 'compact-delete', value: 'compact, delete', isDisabled: false },\n  { key: 'delete-compact', value: 'delete, compact', isDisabled: false },\n];\n\nconst LogSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const onDropdownChangeDotSeparated = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='log' tabIndex={-1}>\n          Log\n        </Title>\n\n        <Text component={TextVariants.p}>\n          {t('createTopic.logSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='cleanup-policy'\n          fieldLabel='Cleanup policy'\n          labelHead={t('createTopic.cleanupPolicyLabelHead')}\n          labelBody={t('createTopic.cleanupPolicyLabelBody')}\n          buttonAriaLabel='More info for cleanup policy field'\n        >\n          <DropdownWithToggle\n            id='log-section-policy-type-dropdown'\n            toggleId='log-section-policy-type-dropdowntoggle'\n            ariaLabel='select policy type from dropdown'\n            onSelectOption={onDropdownChangeDotSeparated}\n            items={clearOptions}\n            name='log-cleanup-policy'\n            value={store['log.cleanup.policy'] || ''}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='retention-bytes'\n          fieldLabel='Retention bytes'\n          labelHead={t('createTopic.retentionBytesLabelHead')}\n          labelBody={t('createTopic.retentionBytesLabelBody')}\n          buttonAriaLabel='More info for retention bytes field'\n        >\n          <SizeTimeFormGroup\n            inputName='log-retention-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['log.retention.bytes'])}\n            plusBtnProps={{ name: 'log-retention-bytes' }}\n            minusBtnProps={{ name: 'log-retention-bytes' }}\n            id='log-section-retention-unit-dropdown'\n            toggleId='log-section-retention-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='log-retention-bytes-unit'\n            dropdownValue={store['log.retention.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n\n        <FormGroupWithPopover\n          fieldId='log-type'\n          fieldLabel='Log segment types'\n          labelHead={t('createTopic.logSegmentLabelHead')}\n          labelBody={t('createTopic.logSegmentLabelBody')}\n          buttonAriaLabel='More info for log segment types field'\n        >\n          <SizeTimeFormGroup\n            inputName='log-segment-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['log.segment.bytes'])}\n            plusBtnProps={{ name: 'log-segment-bytes' }}\n            minusBtnProps={{ name: 'log-segment-bytes' }}\n            id='log-section-segment-unit-dropdown'\n            toggleId='log-section-segment-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            name='log-segment-bytes-unit'\n            dropdownValue={store['log.segment.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n\nexport { LogSection };\n","import {\n  TextContent,\n  Text,\n  Checkbox,\n  Form,\n  InputGroup,\n  TextInput,\n  TextVariants,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { kebabToDotSeparated } from '../utils';\nimport { useTranslation } from 'react-i18next';\n\nexport const ReplicationSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTextInputChange = (\n    value: string,\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleCheckboxSelect = (checked: boolean, event) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), checked);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='replication' tabIndex={-1}>\n          Replication\n        </Title>\n\n        <Text component={TextVariants.p}>\n          {t('createTopic.replicationSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='unclean-leader-election'\n          fieldLabel='Unclean leader election'\n          labelHead={t('createTopic.leaderElectionLabelHead')}\n          labelBody={t('createTopic.leaderElectionLabelBody')}\n          buttonAriaLabel='More info for leader election field'\n        >\n          <Checkbox\n            isChecked={Boolean(store['unclean.leader.election.enable'])}\n            label='Allow unclean leader election'\n            aria-label='uncontrolled checkbox example'\n            id='leader-election'\n            onChange={handleCheckboxSelect}\n            name='unclean-leader-election-enable'\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='follower-replicas'\n          fieldLabel='Follower replication throttled replicas'\n          labelHead={t('createTopic.followerReplicaLabelHead')}\n          labelBody={t('createTopic.followerReplicaLabelBody')}\n          buttonAriaLabel='More info for follower throttled replicas field'\n        >\n          <InputGroup>\n            <TextInput\n              name='follower-replication-throttled-replicas'\n              type='text'\n              aria-label='Text'\n              onChange={handleTextInputChange}\n              value={store['follower.replication.throttled.replicas']}\n            />\n          </InputGroup>\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='leader-replicas'\n          fieldLabel='Leader replication throttled replicas'\n          labelHead={t('createTopic.leaderReplicaLabelHead')}\n          labelBody={t('createTopic.leaderReplicaLabelBody')}\n          buttonAriaLabel='More info for leader throttled replicas field'\n        >\n          <InputGroup>\n            <TextInput\n              name='leader-replication-throttled-replicas'\n              type='text'\n              aria-label='Text'\n              onChange={handleTextInputChange}\n              value={store['leader.replication.throttled.replicas']}\n            />\n          </InputGroup>\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import {\n  TextContent,\n  Text,\n  Form,\n  TextVariants,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport const IndexSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='index' tabIndex={-1}>\n          Index\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.indexSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='interval-bytes'\n          fieldLabel='Index interval bytes'\n          labelHead={t('createTopic.indexIntervalLabelHead')}\n          labelBody={t('createTopic.indexIntervalLabelBody')}\n          buttonAriaLabel='More info for index interval bytes field'\n        >\n          <SizeTimeFormGroup\n            id='index-interval-size'\n            inputName='index-interval-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['index.interval.bytes'])}\n            plusBtnProps={{ name: 'index-interval-bytes' }}\n            minusBtnProps={{ name: 'index-interval-bytes' }}\n            toggleId='index-interval-unit-dropdowntoggle'\n            name='index-interval-bytes-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            dropdownValue={store['index.interval.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='int-bytes'\n          fieldLabel='Segment interval bytes'\n          labelHead={t('createTopic.segementIntervalLabelHead')}\n          labelBody={t('createTopic.segementIntervalLabelBody')}\n          buttonAriaLabel='More info for segment interval bytes field'\n        >\n          <SizeTimeFormGroup\n            id='segment-index-size'\n            inputName='segment-index-bytes'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.index.bytes'])}\n            plusBtnProps={{ name: 'segment-index-bytes' }}\n            minusBtnProps={{ name: 'segment-index-bytes' }}\n            toggleId='segment-index-unit-dropdowntoggle'\n            name='segment-index-bytes-unit'\n            ariaLabel='select duration from dropdown'\n            onSelectOption={onDropdownChange}\n            type='memory'\n            dropdownValue={store['segment.index.bytes.unit']}\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import {\n  TextContent,\n  Text,\n  Form,\n  TextVariants,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport React from 'react';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { useTranslation } from 'react-i18next';\n\nexport const FlushSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name: fieldName, value } = event.currentTarget;\n    updateStore(kebabToDotSeparated(fieldName), Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='flush' tabIndex={-1}>\n          Flush\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.flushSectionInfo')}\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroupWithPopover\n          fieldId='interval-messages'\n          fieldLabel='Flush interval messages'\n          labelHead={t('createTopic.intervalMessagesLabelHead')}\n          labelBody={t('createTopic.intervalMessagesLabelBody')}\n          buttonAriaLabel='More info for flush interval messages field'\n        >\n          <SizeTimeFormGroup\n            inputName='flush-messages'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['flush.messages'])}\n            plusBtnProps={{ name: 'flush-messages' }}\n            minusBtnProps={{ name: 'flush-messages' }}\n            id='interval-messages-unit-dropdown'\n            toggleId='interval-messages-unit-dropdowntoggle'\n            name='flush-messages-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            dropdownValue={store['flush.messages.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='flush'\n          fieldLabel='Flush interval time'\n          labelHead={t('createTopic.intervalTimeLabelHead')}\n          labelBody={t('createTopic.intervalTimeLabelBody')}\n          buttonAriaLabel='More info for flush interval time field'\n        >\n          <SizeTimeFormGroup\n            inputName='flush-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['flush.ms'])}\n            plusBtnProps={{ name: 'flush-ms' }}\n            minusBtnProps={{ name: 'flush-ms' }}\n            id='interval-time-unit-dropdown'\n            toggleId='interval-time-unit-dropdowntoggle'\n            name='flush-ms-unit'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            dropdownValue={store['flush.ms.unit']}\n            type='time'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  Checkbox,\n  Form,\n  TextContent,\n  TextVariants,\n  NumberInput,\n  Text,\n  Stack,\n  Title,\n} from '@patternfly/react-core';\nimport { FormGroupWithPopover } from '../../../../Components/FormGroupWithPopover/FormGroupWithPopover';\nimport { kebabToDotSeparated } from '../utils';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { SizeTimeFormGroup } from '../../../../Components/SizeTimeFormGroup/SizeTimeFormGroup';\nimport { useTranslation } from 'react-i18next';\n\nexport const CleanupSection: React.FC = () => {\n  const { store, updateStore } = React.useContext(TopicContext);\n\n  const { t } = useTranslation();\n\n  const handleTouchSpinInputChange = (\n    event: React.FormEvent<HTMLInputElement>\n  ) => {\n    const { name, value } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(value));\n  };\n\n  const handleTouchSpinPlus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) + 1);\n  };\n\n  const handleTouchSpinMinus = (event) => {\n    const { name } = event.currentTarget;\n    const fieldName = kebabToDotSeparated(name);\n    updateStore(fieldName, Number(store[fieldName]) - 1);\n  };\n\n  const onDropdownChange = (value: string, event) => {\n    const { name: fieldName } = event.target;\n    updateStore(kebabToDotSeparated(fieldName), value);\n  };\n\n  const handleCheckboxSelect = (checked: boolean, event) => {\n    const { name: fieldName } = event.currentTarget;\n    updateStore(fieldName, checked);\n  };\n\n  return (\n    <Stack hasGutter>\n      <TextContent>\n        <Title headingLevel='h2' size='xl' id='cleanup' tabIndex={-1}>\n          Cleanup\n        </Title>\n        <Text component={TextVariants.p}>\n          {t('createTopic.cleanupSectionInfo')}\n        </Text>\n      </TextContent>\n\n      <Form>\n        <FormGroupWithPopover\n          fieldId='delete-retention'\n          fieldLabel='Delete retention'\n          labelHead={t('createTopic.deleteRetentionLabelHead')}\n          labelBody={t('createTopic.deleteRetentionLabelBody')}\n          buttonAriaLabel='More info for delete retention field'\n        >\n          <SizeTimeFormGroup\n            inputName='delete.retention.ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['delete.retention.ms'])}\n            plusBtnProps={{ name: 'delete-retention-ms' }}\n            minusBtnProps={{ name: 'delete-retention-ms' }}\n            id='delete-retention-unit'\n            toggleId='delete-retention-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='delete-retention-ms-unit'\n            dropdownValue={store['delete.retention.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='dirty-ratio'\n          fieldLabel='Minimum cleanable dirty ratio'\n          labelHead={t('createTopic.minRatioLabelHead')}\n          labelBody={t('createTopic.minRatioLabelBody')}\n          buttonAriaLabel='More info for minimum cleanable ratio field'\n        >\n          <NumberInput\n            inputName='min.cleanable.dirty.ratio'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.cleanable.dirty.ratio'])}\n            plusBtnProps={{ name: 'min-cleanable-dirty-ratio' }}\n            minusBtnProps={{ name: 'min-cleanable-dirty-ratio' }}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='compaction'\n          fieldLabel='Minimum compaction lag time'\n          labelHead={t('createTopic.minLagLabelHead')}\n          labelBody={t('createTopic.minLagLabelBody')}\n          buttonAriaLabel='More info for minimum compaction log time field'\n        >\n          <SizeTimeFormGroup\n            inputName='min-compaction-lag-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['min.compaction.lag.ms'])}\n            plusBtnProps={{ name: 'min-compaction-lag-ms' }}\n            minusBtnProps={{ name: 'min-compaction-lag-ms' }}\n            id='min-lag-unit'\n            toggleId='min-lag-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='min-compaction-lag-ms-unit'\n            dropdownValue={store['min.compaction.lag.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='segment-time'\n          fieldLabel='Segment time'\n          labelHead={t('createTopic.segementTimeLabelHead')}\n          labelBody={t('createTopic.segementTimeLabelBody')}\n          buttonAriaLabel='More info for segment time field'\n        >\n          <SizeTimeFormGroup\n            inputName='segment-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.ms'])}\n            plusBtnProps={{ name: 'segment-ms' }}\n            minusBtnProps={{ name: 'segment-ms' }}\n            id='segment-time-unit'\n            toggleId='segment-time-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='segment-ms-unit'\n            dropdownValue={store['segment.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='jitter'\n          fieldLabel='Segment jitter time'\n          labelHead={t('createTopic.jitterTimeLabelHead')}\n          labelBody={t('createTopic.jitterTimeLabelBody')}\n          buttonAriaLabel='More info for segment jitter time field'\n        >\n          <SizeTimeFormGroup\n            inputName='segment-jitter-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['segment.jitter.ms'])}\n            plusBtnProps={{ name: 'segment.jitter.ms' }}\n            minusBtnProps={{ name: 'segment.jitter.ms' }}\n            id='jitter-time-unit'\n            toggleId='jitter-time-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='segment-jitter-ms-unit'\n            dropdownValue={store['segment.jitter.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='delete'\n          fieldLabel='File delete delay'\n          labelHead={t('createTopic.deleteDelayLabelHead')}\n          labelBody={t('createTopic.deleteDelayLabelBody')}\n          buttonAriaLabel='More info for file delete delay field'\n        >\n          <SizeTimeFormGroup\n            inputName='file-delete-delay-ms'\n            onChange={handleTouchSpinInputChange}\n            onPlus={handleTouchSpinPlus}\n            onMinus={handleTouchSpinMinus}\n            value={Number(store['file.delete.delay.ms'])}\n            plusBtnProps={{ name: 'file-delete-delay-ms' }}\n            minusBtnProps={{ name: 'file-delete-delay-ms' }}\n            id='delete-delay-unit'\n            toggleId='delete-delay-unit-dropdowntoggle'\n            ariaLabel='select unit from dropdown'\n            onSelectOption={onDropdownChange}\n            type='time'\n            name='file-delete-delay-ms-unit'\n            dropdownValue={store['file.delete.delay.ms.unit']}\n          />\n        </FormGroupWithPopover>\n        <FormGroupWithPopover\n          fieldId='log-preallocation'\n          fieldLabel='Preallocate log segment files'\n          labelHead={t('createTopic.preallocateLabelHead')}\n          labelBody={t('createTopic.preallocateLabelBody')}\n          buttonAriaLabel='More info for preallocation field'\n        >\n          <Checkbox\n            isChecked={Boolean(store.preallocate)}\n            label='Allow preallocation of log segment files'\n            aria-label='log segment files pre allocation'\n            id='log-preallocation'\n            onChange={handleCheckboxSelect}\n            name='preallocate'\n          />\n        </FormGroupWithPopover>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useEffect } from 'react';\nimport {\n  ActionGroup,\n  Button,\n  Divider,\n  Grid,\n  GridItem,\n  JumpLinks,\n  JumpLinksItem,\n  PageSection,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nimport { MessageSection } from './MessageSection';\nimport { CoreConfiguration } from './CoreConfiguration';\nimport { LogSection } from './LogSection';\nimport { ReplicationSection } from './ReplicationSection';\nimport { IndexSection } from './IndexSection';\nimport { FlushSection } from './FlushSection';\nimport { CleanupSection } from './CleanupSection';\nimport { initialState, TopicContext } from '../../../../Contexts/Topic';\n\ninterface ITopicAdvanceConfig {\n  isCreate: boolean;\n  saveTopic: () => void;\n  deleteTopic?: () => void;\n}\n\nexport const TopicAdvanceConfig: React.FunctionComponent<ITopicAdvanceConfig> = ({\n  isCreate,\n  saveTopic,\n  deleteTopic,\n}) => {\n  const { updateBulkStore } = React.useContext(TopicContext);\n  const actionText = isCreate === true ? 'Create Topic' : 'Save';\n\n  useEffect(() => {\n    updateBulkStore(initialState);\n  }, [])\n\n  const handleOnSave = () => {\n    saveTopic();\n    updateBulkStore(initialState);\n  }\n\n  return (\n    <>\n      <Grid hasGutter>\n        <GridItem span={2}>\n          <JumpLinks\n            isVertical\n            label='JUMP TO SECTION'\n            scrollableSelector='#advanced-create-topic'\n            style={{ position: 'sticky', top: 0 }}\n          >\n            <JumpLinksItem key={0} href='#core-configuration'>\n              Core configuration\n            </JumpLinksItem>\n            <JumpLinksItem key={1} href='#messages'>\n              Messages\n            </JumpLinksItem>\n            <JumpLinksItem key={2} href='#log'>\n              Log\n            </JumpLinksItem>\n            <JumpLinksItem key={3} href='#replication'>\n              Replication\n            </JumpLinksItem>\n            <JumpLinksItem key={4} href='#cleanup'>\n              Cleanup\n            </JumpLinksItem>\n            <JumpLinksItem key={5} href='#index'>\n              Index\n            </JumpLinksItem>\n            <JumpLinksItem key={6} href='#flush'>\n              Flush\n            </JumpLinksItem>\n            {isCreate ? (\n              <></>\n            ) : (\n              <JumpLinksItem key={7} href='#delete'>\n                Delete\n              </JumpLinksItem>\n            )}\n          </JumpLinks>\n        </GridItem>\n        <GridItem span={10}>\n          <PageSection\n            hasOverflowScroll\n            id='advanced-create-topic'\n            className='kafka-ui--topics-advanced-config'\n            padding={{ default: 'noPadding' }}\n          >\n            <Stack hasGutter className='kafka-ui--topic-advanced-config__stack'>\n              <StackItem>\n                <CoreConfiguration />\n              </StackItem>\n\n              <StackItem>\n                <MessageSection />\n              </StackItem>\n\n              <StackItem>\n                <LogSection />\n              </StackItem>\n\n              <StackItem>\n                <ReplicationSection />\n              </StackItem>\n\n              <StackItem>\n                <CleanupSection />\n              </StackItem>\n\n              <StackItem>\n                <IndexSection />\n              </StackItem>\n\n              <StackItem>\n                <FlushSection />\n              </StackItem>\n\n              <StackItem>\n                <ActionGroup>\n                  <Button onClick={handleOnSave} variant='primary'>\n                    {actionText}\n                  </Button>\n                  <Button variant='link'>Cancel</Button>\n                </ActionGroup>\n              </StackItem>\n            </Stack>\n\n            {isCreate ? (\n              <></>\n            ) : (\n              <>\n                <br />\n                <Divider />\n                <br />\n                <br />\n                <TextContent className='section-margin'>\n                  <Text component={TextVariants.h2} tabIndex={-1} id='delete'>\n                    Delete topic (irreversible)\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    This permanently removes this topic from this instance of\n                    Strimzi. Applications will no longer have access to this\n                    topic.\n                  </Text>\n                </TextContent>\n                <br />\n                <Button\n                  variant='danger'\n                  className='section-margin'\n                  onClick={deleteTopic}\n                >\n                  Delete topic\n                </Button>\n              </>\n            )}\n          </PageSection>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import {\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Switch,\n  Divider,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nexport interface ICreateTopicProps {\n  isSwitchChecked: boolean;\n  setIsSwitchChecked: (value: boolean) => void;\n}\n\nexport const CreateTopichead: React.FC<ICreateTopicProps> = ({\n  isSwitchChecked,\n  setIsSwitchChecked,\n}) => {\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to='/openshiftstreams'>\n        Red Hat OpenShift Streams for Apache Kafka\n      </BreadcrumbItem>\n      <BreadcrumbItem to='/openshiftstreams'>\n        MK Cluster Instance\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        Create topic\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <Title headingLevel='h1' size='2xl'>\n          Create topic\n        </Title>\n        <br />\n        <Switch\n          id='simple-switch'\n          label='Show all available options'\n          labelOff='Show all available options'\n          isChecked={isSwitchChecked}\n          onChange={setIsSwitchChecked}\n          className='create-topic-wizard'\n        />\n      </PageSection>\n      <Divider />\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Form,\n  FormGroup,\n  TextContent,\n  Text,\n  TextVariants,\n  TextInput,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepTopicName {\n  topicNameInput: string;\n  setTopicNameInput: (value: string) => void;\n}\n\nexport const StepTopicName: React.FC<IStepTopicName> = ({\n  topicNameInput,\n  setTopicNameInput,\n}) => {\n  const handleTopicNameChange = (topicNameInput) => {\n    setTopicNameInput(topicNameInput);\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Topic name</Text>\n        <Text component={TextVariants.p}>\n          Unique name used to recognize your topic\n        </Text>\n        <Text component={TextVariants.small}>\n          The topic name is also used by your producers and consumers as part of\n          the connection information, so make it something easy to recognize.\n        </Text>\n      </TextContent>\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          label='Topic name'\n          fieldId='step-topic-name-form'\n          helperText='Must be letters (Aa-Zz), numbers, underscores( _ ), or hyphens ( - ).'\n          isRequired\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='step-topic-name-input'\n            name='step-topic-name'\n            aria-describedby='step-topic-name-helper'\n            value={topicNameInput}\n            onChange={handleTopicNameChange}\n            placeholder='Enter topic name'\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React from 'react';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  NumberInput,\n  FormGroup,\n  Form,\n  Stack,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\nexport interface IStepPartitions {\n  setPartitionTouchspinValue: (value: number) => void;\n  partitionTouchspinValue: number;\n}\n\nexport const StepPartitions: React.FC<IStepPartitions> = ({\n  partitionTouchspinValue,\n  setPartitionTouchspinValue,\n}) => {\n  const handleOnPlus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue + 1);\n  };\n  const handleOnMinus = () => {\n    setPartitionTouchspinValue(partitionTouchspinValue - 1);\n  };\n  const handlePartitionTouchspinChange = (event) => {\n    setPartitionTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Partitions</Text>\n        <Text component={TextVariants.p}>An ordered list of messages</Text>\n        <Text component={TextVariants.small}>\n          One or more partitions make up a topic. Partitions are distributed\n          across the brokers to increase the salability of your topic. You can\n          also use them to distribute messages across the members of the\n          consumer group.\n        </Text>\n      </TextContent>\n      <Form>\n        <FormGroup\n          label='Partitions'\n          fieldId='step-topic-name-form'\n          helperText='One partition is sufficient for getting started, but production systems often have more.'\n          isRequired\n        >\n          <NumberInput\n            onPlus={handleOnPlus}\n            onMinus={handleOnMinus}\n            value={partitionTouchspinValue}\n            inputName='input'\n            onChange={handlePartitionTouchspinChange}\n            widthChars={20}\n          />\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepMessageRetention {\n  setMsgRetentionValue: (value: number) => void;\n  currentPeriod: string | number;\n  setCurrentPeriod: (value: string | number) => void;\n}\n\nexport const StepMessageRetention: React.FC<IStepMessageRetention> = ({\n  setMsgRetentionValue,\n  currentPeriod,\n  setCurrentPeriod,\n}) => {\n  enum RetentionOption {\n    DAY = 1,\n    WEEK = 7,\n    MONTH = 30,\n    CUSTOM = 'custom',\n  }\n  const [msgTouchspinValue, setMsgTouchspinValue] = useState(7);\n  const [isMsgSelectOpen, setIsMsgSelectOpen] = useState(false);\n  const [selected, setSelected] = useState(false);\n  const [retentionFactor, setRetentionFactor] = useState(1);\n\n  useEffect(() => {\n    if (currentPeriod === RetentionOption.DAY) {\n      setMsgRetentionValue(RetentionOption.DAY * 86400000);\n    } else if (currentPeriod === RetentionOption.WEEK) {\n      setMsgRetentionValue(RetentionOption.WEEK * 86400000);\n    } else if (currentPeriod === RetentionOption.MONTH) {\n      setMsgRetentionValue(RetentionOption.MONTH * 86400000);\n    } else if (currentPeriod === RetentionOption.CUSTOM) {\n      setMsgRetentionValue(retentionFactor * msgTouchspinValue * 86400000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPeriod, msgTouchspinValue, retentionFactor]);\n\n  const handleMessageRetention = (checked, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radio1') {\n      setCurrentPeriod(RetentionOption.DAY);\n    } else if (name === 'radio2') {\n      setCurrentPeriod(RetentionOption.WEEK);\n    } else if (name === 'radio3') {\n      setCurrentPeriod(RetentionOption.MONTH);\n    } else if (name === 'radio4') {\n      setCurrentPeriod(RetentionOption.CUSTOM);\n    }\n  };\n\n  const onMsgToggle = (isMsgSelectOpen) => {\n    setIsMsgSelectOpen(isMsgSelectOpen);\n  };\n\n  const onMsgSelect = (event, selection) => {\n    if (selection === 'days') {\n      setRetentionFactor(RetentionOption.DAY);\n    } else if (selection === 'weeks') {\n      setRetentionFactor(RetentionOption.WEEK);\n    } else if (selection === 'months') {\n      setRetentionFactor(RetentionOption.MONTH);\n    }\n    setSelected(selection);\n    setIsMsgSelectOpen(false);\n  };\n\n  const handlePlusClick = () => {\n    setMsgTouchspinValue(msgTouchspinValue + 1);\n  };\n\n  const handleMinusClick = () => {\n    setMsgTouchspinValue(msgTouchspinValue - 1);\n  };\n\n  const handleMsgTouchSpinChange = (event) => {\n    setMsgTouchspinValue(Number(event.target.value));\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  return (\n    <>\n      <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n        <TextContent>\n          <Text component={TextVariants.h2}>Message retention</Text>\n          <Text component={TextVariants.p}>\n            How long messages are retained and the maximum total size of all log\n            segments in a partition before they are deleted to free up space\n          </Text>\n          <Text component={TextVariants.small}>\n            Messages that aren't read by a consumer within this time will be\n            missed. By default, a limit is only applied to retention time.\n          </Text>\n        </TextContent>\n\n        <Form onSubmit={preventFormSubmit}>\n          <FormGroup\n            fieldId='form-group-in-wizard'\n            label='Retention time'\n            // className='form-group-radio'\n          >\n            <Stack hasGutter>\n              <Radio\n                isChecked={currentPeriod === RetentionOption.DAY}\n                name='radio1'\n                onChange={handleMessageRetention}\n                label='A day'\n                aria-label='A day'\n                id='radio-controlled-1'\n                value='day'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionOption.WEEK}\n                name='radio2'\n                onChange={handleMessageRetention}\n                label='A week'\n                aria-label='A week'\n                id='radio-controlled-2'\n                value='week'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionOption.MONTH}\n                name='radio3'\n                onChange={handleMessageRetention}\n                label='A month'\n                aria-label='A month'\n                id='radio-controlled-3'\n                value='month'\n              />\n              <Radio\n                isChecked={currentPeriod === RetentionOption.CUSTOM}\n                name='radio4'\n                onChange={handleMessageRetention}\n                label='Custom duration'\n                aria-label='custom input'\n                id='radio-controlled-4'\n                value='custom'\n              />\n              <div className='kafka-ui--radio__parameters'>\n                <Flex>\n                  <FlexItem>\n                    <NumberInput\n                      onMinus={handleMinusClick}\n                      onPlus={handlePlusClick}\n                      value={msgTouchspinValue}\n                      onChange={handleMsgTouchSpinChange}\n                    />\n                  </FlexItem>\n                  <FlexItem>\n                    <Select\n                      variant={SelectVariant.single}\n                      aria-label='Select Input'\n                      onToggle={onMsgToggle}\n                      onSelect={onMsgSelect}\n                      selections={selected}\n                      isOpen={isMsgSelectOpen}\n                      // aria-labelledby={titleId}\n                    >\n                      <SelectOption key={0} value='days' isPlaceholder />\n                      <SelectOption key={1} value='weeks' />\n                      <SelectOption key={2} value='months' />\n                    </Select>\n                  </FlexItem>\n                </Flex>\n              </div>\n            </Stack>\n          </FormGroup>\n        </Form>\n      </Stack>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Alert,\n  Form,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Stack,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport './CreateTopicWizard.css';\n\nexport interface IStepReplicas {\n  setReplicationFactorTouchspinValue: (value: number) => void;\n  setMinInSyncReplicaTouchspinValue: (value: number) => void;\n  replicationFactorTouchspinValue: number;\n  minInSyncReplicaTouchspinValue: number;\n}\n\nexport const StepReplicas: React.FC<IStepReplicas> = ({\n  setReplicationFactorTouchspinValue,\n  setMinInSyncReplicaTouchspinValue,\n  replicationFactorTouchspinValue,\n  minInSyncReplicaTouchspinValue,\n}) => {\n  enum ReplicationOption {\n    ONE = 1,\n    TWO = 2,\n    CUSTOM = 'custom',\n  }\n\n  const [\n    currentReplicationFactor,\n    setCurrentReplicationFactor,\n  ] = React.useState<string | number>(ReplicationOption.ONE);\n  const handleChangeReplicationFactor = (checked, event) => {\n    const target = event.target;\n    const name = target.name;\n\n    if (name === 'radio4') {\n      setCurrentReplicationFactor(ReplicationOption.ONE);\n      setMinInSyncReplicaTouchspinValue(ReplicationOption.ONE);\n      setReplicationFactorTouchspinValue(ReplicationOption.ONE);\n    } else if (name === 'radio5') {\n      setCurrentReplicationFactor(ReplicationOption.TWO);\n      setMinInSyncReplicaTouchspinValue(ReplicationOption.TWO);\n      setReplicationFactorTouchspinValue(ReplicationOption.TWO);\n    } else if (name === 'radio6') {\n      setCurrentReplicationFactor(ReplicationOption.CUSTOM);\n      setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue);\n      setReplicationFactorTouchspinValue(replicationFactorTouchspinValue);\n    }\n  };\n\n  const preventFormSubmit = (event) => event.preventDefault();\n\n  const handleOnPlusReplicationFactor = () => {\n    setReplicationFactorTouchspinValue(replicationFactorTouchspinValue + 1);\n  };\n  const handleOnMinusReplicationFactor = () => {\n    setReplicationFactorTouchspinValue(replicationFactorTouchspinValue - 1);\n  };\n  const handleReplicationFactorChange = (event) => {\n    setReplicationFactorTouchspinValue(Number(event.target.value));\n  };\n\n  const handleOnPlusMinInSyncReplicaFactor = () => {\n    setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue + 1);\n  };\n  const handleOnMinusMinInSyncReplicaFactor = () => {\n    setMinInSyncReplicaTouchspinValue(minInSyncReplicaTouchspinValue - 1);\n  };\n  const handleMinInSyncReplicaChange = (event) => {\n    setMinInSyncReplicaTouchspinValue(Number(event.target.value));\n  };\n\n  return (\n    <Stack hasGutter className='kafka-ui--wizard-main-body__stack'>\n      <TextContent>\n        <Text component={TextVariants.h2}>Replicas</Text>\n        <Text component={TextVariants.p}>\n          How many copies of a topic will be made for high availability.\n        </Text>\n        <Text component={TextVariants.small}>\n          The partitions of each topic can be replicated across a configurable\n          number of brokers.\n        </Text>\n      </TextContent>\n      <Alert\n        variant='info'\n        isInline\n        title='Streams for Apache Kafka only supports 3 replicas and a minimum in-sync replica factor of 2.'\n      />\n      <Form onSubmit={preventFormSubmit}>\n        <FormGroup\n          fieldId='create-wizard-replica-form-group'\n          label='Replicas'\n          className='form-group-radio'\n        >\n          <Stack hasGutter>\n            <Radio\n              isChecked={currentReplicationFactor === ReplicationOption.ONE}\n              name='radio4'\n              onChange={handleChangeReplicationFactor}\n              label='Replication factor: 1'\n              id='radio-controlled-4'\n              value='radio4'\n              description='Minimum in-sync replicas: 1'\n            />\n            <Radio\n              isChecked={currentReplicationFactor === ReplicationOption.TWO}\n              name='radio5'\n              onChange={handleChangeReplicationFactor}\n              label='Replication factor: 2'\n              id='radio-controlled-5'\n              value='radio5'\n              description='Minimum in-sync replicas: 2'\n            />\n            <Radio\n              isChecked={currentReplicationFactor === ReplicationOption.CUSTOM}\n              name='radio6'\n              onChange={handleChangeReplicationFactor}\n              label='Replication factor'\n              id='radio-controlled-6'\n              value='radio6'\n            />\n            <div className='kafka-ui--radio__parameters'>\n              <NumberInput\n                value={replicationFactorTouchspinValue}\n                onMinus={handleOnMinusReplicationFactor}\n                onPlus={handleOnPlusReplicationFactor}\n                onChange={handleReplicationFactorChange}\n              />\n              <Text\n                component={TextVariants.small}\n                className='minimum-in-sync-replicas'\n              >\n                Minimum in-sync replicas\n              </Text>\n              <NumberInput\n                value={minInSyncReplicaTouchspinValue}\n                onMinus={handleOnMinusMinInSyncReplicaFactor}\n                onPlus={handleOnPlusMinInSyncReplicaFactor}\n                onChange={handleMinInSyncReplicaChange}\n              />\n            </div>\n          </Stack>\n        </FormGroup>\n      </Form>\n    </Stack>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionTypes,\n  PageSectionVariants,\n  Wizard,\n  WizardStep,\n} from '@patternfly/react-core';\nimport { StepTopicName } from './StepTopicName';\nimport { StepPartitions } from './StepPartitions';\nimport { StepMessageRetention } from './StepMessageRetention';\nimport { StepReplicas } from './StepReplicas';\nimport './CreateTopicWizard.css';\nimport { TopicAdvanceConfig } from './TopicAdvanceConfig';\nimport { DefaultApi, NewTopicInput } from '../../../../OpenApi/api';\nimport { TopicContext } from '../../../../Contexts/Topic';\nimport { convertUnits, formatTopicRequest } from '../utils';\nimport { ConfigContext } from '../../../../Contexts';\nimport { Configuration } from '../../../../OpenApi';\nimport { AlertContext } from '../../../../Contexts/Alert/Context';\n\ninterface ICreateTopicWizard {\n  isSwitchChecked: boolean;\n  setIsCreateTopic?: (value: boolean) => void;\n}\n\nexport const CreateTopicWizard: React.FC<ICreateTopicWizard> = ({\n  setIsCreateTopic,\n  isSwitchChecked,\n}) => {\n  const config = useContext(ConfigContext);\n  const { addAlert } = useContext(AlertContext);\n  const [msgRetentionValue, setMsgRetentionValue] = useState(1);\n  const [topicNameInput, setTopicNameInput] = useState('');\n  const [partitionTouchspinValue, setPartitionTouchspinValue] = useState(1);\n  const [\n    replicationFactorTouchspinValue,\n    setReplicationFactorTouchspinValue,\n  ] = useState(1);\n  const [\n    minInSyncReplicaTouchspinValue,\n    setMinInSyncReplicaTouchspinValue,\n  ] = useState(1);\n\n  const [currentPeriod, setCurrentPeriod] = React.useState<string | number>(1);\n  const { store } = React.useContext(TopicContext);\n\n  const closeWizard = () => {\n    if (setIsCreateTopic) {\n      setIsCreateTopic(false);\n    }\n  };\n\n  const saveTopic = () => {\n    //Object may change based on schema\n\n    const topic: NewTopicInput = isSwitchChecked\n      ? formatTopicRequest(convertUnits(store))\n      : {\n          name: topicNameInput,\n          settings: {\n            numPartitions: partitionTouchspinValue,\n            replicationFactor: replicationFactorTouchspinValue,\n            config: [\n              {\n                key: 'retention.ms',\n                value: msgRetentionValue.toString(),\n              },\n            ],\n          },\n        };\n\n    new DefaultApi(\n      new Configuration({\n        basePath: config?.basePath,\n        accessToken: config?.getToken,\n      })\n    )\n      .createTopic(topic)\n      .then((res) => {\n        if (res.status === 200) {\n          addAlert(\n            'The topic was successfully created in the Kafka instance',\n            AlertVariant.success\n          );\n        }\n        closeWizard();\n      })\n      .catch((err) => {\n        addAlert(err.response.data.err, AlertVariant.danger);\n        closeWizard();\n      });\n  };\n\n  const steps: WizardStep[] = [\n    {\n      name: 'Topic name',\n      enableNext: topicNameInput.trim() !== '',\n      component: (\n        <StepTopicName\n          topicNameInput={topicNameInput}\n          setTopicNameInput={setTopicNameInput}\n        />\n      ),\n    },\n    {\n      name: 'Partitions',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepPartitions\n          partitionTouchspinValue={partitionTouchspinValue}\n          setPartitionTouchspinValue={setPartitionTouchspinValue}\n        />\n      ),\n    },\n    {\n      name: 'Message retention',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepMessageRetention\n          setMsgRetentionValue={setMsgRetentionValue}\n          currentPeriod={currentPeriod}\n          setCurrentPeriod={setCurrentPeriod}\n        />\n      ),\n    },\n    {\n      name: 'Replicas',\n      canJumpTo: topicNameInput.trim() !== '',\n      component: (\n        <StepReplicas\n          setReplicationFactorTouchspinValue={\n            setReplicationFactorTouchspinValue\n          }\n          setMinInSyncReplicaTouchspinValue={setMinInSyncReplicaTouchspinValue}\n          replicationFactorTouchspinValue={replicationFactorTouchspinValue}\n          minInSyncReplicaTouchspinValue={minInSyncReplicaTouchspinValue}\n        />\n      ),\n      nextButtonText: 'Finish',\n    },\n  ];\n\n  const title = 'Create topics wizard';\n\n  return (\n    <>\n      {isSwitchChecked ? (\n        <>\n          <PageSection variant={PageSectionVariants.light}>\n            <TopicAdvanceConfig isCreate={true} saveTopic={saveTopic} />\n          </PageSection>\n        </>\n      ) : (\n        <PageSection\n          variant={PageSectionVariants.light}\n          type={PageSectionTypes.wizard}\n          isFilled\n        >\n          <Wizard\n            navAriaLabel={`${title} steps`}\n            mainAriaLabel={`${title} content`}\n            steps={steps}\n            onClose={closeWizard}\n            onSave={saveTopic}\n          />\n        </PageSection>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { CreateTopichead } from './Components/CreateTopicHead';\nimport { CreateTopicWizard } from './Components/CreateTopicWizard';\n\ninterface ICreateTopicPageProps {\n  setIsCreateTopic?: (value: boolean) => void;\n}\n\nexport const CreateTopicPage: React.FC<ICreateTopicPageProps> = ({\n  setIsCreateTopic,\n}) => {\n  const [isSwitchChecked, setIsSwitchChecked] = useState<boolean>(false);\n  return (\n    <>\n      <CreateTopichead\n        isSwitchChecked={isSwitchChecked}\n        setIsSwitchChecked={setIsSwitchChecked}\n      />\n      <CreateTopicWizard\n        isSwitchChecked={isSwitchChecked}\n        setIsCreateTopic={setIsCreateTopic}\n      />\n    </>\n  );\n};\n","import { AdvancedTopic } from '../../../Contexts/Topic';\nimport { ConfigEntry, NewTopicInput } from '../../../OpenApi';\n\nconst capitalizeText = (text: string) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nexport const kebabToCamel = function (kebabCase: string): string {\n  const words: string[] = kebabCase.split('-');\n\n  const camelCased: string[] = words.map((word: string, index: number) => {\n    return index > 0 ? capitalizeText(word) : word;\n  });\n\n  return camelCased.join('');\n};\n\nexport const kebabToDotSeparated = (val: string): string => {\n  return val.replaceAll('-', '.');\n};\n\nconst unitsToBytes = {\n  bytes: 1,\n  kilobytes: 1000,\n  megabytes: 1000000,\n  gigabytes: 1000000000,\n  terabytes: 1000000000000,\n};\n\nconst unitsToMilliSecond = {\n  milliseconds: 1,\n  seconds: 1000,\n  days: 86400000,\n  months: 2592000000,\n  years: 31536000000,\n};\n\nexport const convertUnits = (topicData: AdvancedTopic): AdvancedTopic => {\n  const topic = { ...topicData };\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'ms') {\n      topic[key] = String(\n        Number(topic[key]) *\n          unitsToMilliSecond[topic[`${key}.unit`] || 'milliseconds']\n      );\n    }\n    if (key.split('.').pop() === 'bytes') {\n      topic[key] = String(\n        Number(topic[key]) * unitsToBytes[topic[`${key}.unit`] || 'bytes']\n      );\n    }\n  }\n\n  if (topic['flush.messages']) {\n    topic['flush.messages'] = String(\n      Number(topic['flush.messages']) *\n        unitsToMilliSecond[topic['flush.messages.unit'] || 'milliseconds']\n    );\n  }\n\n  for (const key in topic) {\n    if (key.split('.').pop() === 'unit') {\n      delete topic[key];\n    }\n  }\n\n  return topic;\n};\n\nexport const formatTopicRequest = (topic: AdvancedTopic): NewTopicInput => {\n  const { name, numPartitions, replicationFactor, ...configEntries } = topic;\n\n  const config: ConfigEntry[] = [];\n\n  for (const key in configEntries) {\n    if (key) {\n      config.push({\n        key,\n        value: configEntries[key].toString(),\n      });\n    }\n  }\n\n  return {\n    name,\n    settings: {\n      numPartitions: Number(numPartitions),\n      replicationFactor: Number(replicationFactor),\n      config,\n    },\n  };\n};\n"],"sourceRoot":""}