{"version":3,"file":"636.5cf76af1.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Permissions/dialogs/ManagePermissions/ManagePermissions.tsx","webpack://kafka-ui/./src/modules/Permissions/utils.ts","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["import { AclBinding } from '@rhoas/app-services-ui-shared/dist/esm/contexts/modals/kafka-modals';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { convertEnum, usePermissionsService } from '@app/services/acls';\nimport { ConfigContext, useFederated } from '@app/contexts';\nimport {\n  BaseModalProps,\n  ManagePermissionsModalProps,\n  ManagePermissionsProps,\n  usePrincipals,\n  useAuth,\n  useAlert,\n  AlertVariant,\n} from '@rhoas/app-services-ui-shared';\nimport {\n  AclOperationFilter,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\nimport './ManagePermissions.css';\nimport {\n  Account,\n  AddAclType,\n  ManageKafkaPermissions,\n  PrincipalType,\n} from '@rhoas/app-services-ui-components';\nimport { transformResourceType, transformResourceOperation } from '../../utils';\n\nexport const ManagePermissions: React.VFC<\n  ManagePermissionsProps & BaseModalProps\n> = ({\n  hideModal,\n  onSave,\n  kafkaName,\n  selectedAccountId,\n  acls,\n  topicNames,\n  consumerGroupIds,\n  title,\n  variant,\n}) => {\n  return (\n    <ManagePermissionsModal\n      topicNames={topicNames}\n      consumerGroupIds={consumerGroupIds}\n      acls={acls}\n      resourceOperations={undefined}\n      hideModal={hideModal}\n      selectedAccountId={selectedAccountId}\n      onSave={onSave}\n      kafkaName={kafkaName}\n      variant={variant}\n      title={title}\n    />\n  );\n};\n\nexport const ManagePermissionsModal: React.FC<\n  ManagePermissionsModalProps & BaseModalProps\n> = ({ hideModal, kafkaName, acls, topicNames, consumerGroupIds }) => {\n  const { kafka } = useFederated() || {};\n  const auth = useAuth();\n\n  const [selectedAccount, setSelectedAccount] = useState<string | undefined>(\n    undefined\n  );\n  const [existingAcls, setExistingAcls] = useState<AclBinding[]>(\n    (acls || []).filter(\n      (i) =>\n        (selectedAccount &&\n          selectedAccount &&\n          i.principal === `${selectedAccount}`) ||\n        i.principal === '*'\n    )\n  );\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<\n    string | undefined\n  >();\n\n  const aclsForSelectedAccount = useCallback(async () => {\n    setExistingAcls(\n      (acls || []).filter(\n        (i) =>\n          (selectedAccount &&\n            selectedAccount &&\n            i.principal === `${selectedAccount}`) ||\n          i.principal === '*'\n      )\n    );\n  }, [acls, selectedAccount]);\n\n  useEffect(() => {\n    aclsForSelectedAccount();\n  }, [acls, aclsForSelectedAccount, selectedAccount]);\n\n  const principals = usePrincipals();\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n\n  const config = useContext(ConfigContext);\n  const permissionsService = usePermissionsService(config);\n\n  useEffect(() => {\n    const getUsername = async () => {\n      const username = await auth?.getUsername();\n      setCurrentlyLoggedInuser(username);\n    };\n    getUsername();\n  }, [auth]);\n\n  const principal = principals\n    .getAllPrincipals()\n    .filter((p) => p.id !== currentlyLoggedInuser && p.id !== kafka?.owner);\n\n  const accounts: Account[] = principal.map((value) => ({\n    displayName: value.displayName || '',\n    id: value.id || '',\n    principalType: value.principalType || PrincipalType.UserAccount,\n  }));\n\n  const updateExistingAcls = (row: number) => {\n    setExistingAcls((existingAcls || []).filter((_, index) => index != row));\n  };\n\n  const onRemoveAcls = async (row: number) => {\n    await permissionsService\n      .deletePermission({\n        resourceName: existingAcls[row].resourceName,\n        patternType: convertEnum(\n          existingAcls[row].patternType,\n          AclPatternTypeFilter\n        ),\n        permissionType: convertEnum(\n          existingAcls[row].permission,\n          AclPermissionTypeFilter\n        ),\n        resourceType: convertEnum(\n          existingAcls[row].resourceType,\n          AclResourceTypeFilter\n        ),\n        operation: convertEnum(existingAcls[row].operation, AclOperationFilter),\n        principal: `User:${selectedAccount}`,\n      })\n      .then(() => updateExistingAcls(row))\n\n      .catch((error) =>\n        addAlert({\n          variant: AlertVariant.danger,\n          title: error.response.data.reason,\n        })\n      );\n  };\n  const onSaveAcl = async (data: AddAclType[]) => {\n    data.map(async (value) => {\n      switch (value.type) {\n        case 'manage-access': {\n          await permissionsService.addPermission({\n            resourceName: 'kafka-cluster',\n            resourceType: 'CLUSTER',\n            patternType: 'LITERAL',\n            operation: 'ALTER',\n            permission: 'ALLOW',\n            principal: `User:${selectedAccount}`,\n          });\n          break;\n        }\n        case 'manual': {\n          await permissionsService.addPermission({\n            resourceName: value.resourceName ? value.resourceName : '',\n            resourceType: transformResourceType(value.resourceType),\n            patternType: value.resourcePrefix == 'Is' ? 'LITERAL' : 'PREFIXED',\n            operation: transformResourceOperation(value.resourceOperation),\n            permission: value.resourcePermission == 'allow' ? 'ALLOW' : 'DENY',\n            principal: `User:${selectedAccount}`,\n          });\n          break;\n        }\n        case 'produce-topic': {\n          await permissionsService.addPermission({\n            resourceName: value.resourceNameValue || '',\n            resourceType: 'TOPIC',\n            patternType: value.prefixRuleValue == 'Is' ? 'LITERAL' : 'PREFIXED',\n            operation: 'WRITE',\n            permission: 'ALLOW',\n            principal: `User:${selectedAccount}`,\n          });\n          await permissionsService.addPermission({\n            resourceName: value.resourceNameValue || '',\n            resourceType: 'TOPIC',\n            patternType: value.prefixRuleValue == 'Is' ? 'LITERAL' : 'PREFIXED',\n            operation: 'CREATE',\n            permission: 'ALLOW',\n            principal: `User:${selectedAccount}`,\n          });\n          await permissionsService.addPermission({\n            resourceName: value.resourceNameValue || '',\n            resourceType: 'TOPIC',\n            patternType: value.prefixRuleValue == 'Is' ? 'LITERAL' : 'PREFIXED',\n            operation: 'DESCRIBE',\n            permission: 'ALLOW',\n            principal: `User:${selectedAccount}`,\n          });\n          break;\n        }\n        case 'consume-topic': {\n          await permissionsService.addPermission({\n            resourceName: value.topicResourceName || '',\n            resourceType: 'TOPIC',\n            patternType:\n              value.topicResourcePrefixRule == 'Is' ? 'LITERAL' : 'PREFIXED',\n            operation: 'READ',\n            permission: 'ALLOW',\n            principal: `User:${selectedAccount}`,\n          });\n          await permissionsService.addPermission({\n            resourceName: value.topicResourceName || '',\n            resourceType: 'TOPIC',\n            patternType:\n              value.topicResourcePrefixRule == 'Is' ? 'LITERAL' : 'PREFIXED',\n            operation: 'DESCRIBE',\n            permission: 'ALLOW',\n            principal: `User:${selectedAccount}`,\n          });\n          await permissionsService.addPermission({\n            resourceName: value.consumerResourceName || '',\n            resourceType: 'GROUP',\n            patternType:\n              value.consumerResourcePrefixRule == 'Is' ? 'LITERAL' : 'PREFIXED',\n            operation: 'READ',\n            permission: 'ALLOW',\n            principal: `User:${selectedAccount}`,\n          });\n          break;\n        }\n      }\n    });\n    hideModal();\n  };\n  const filterTopics = (filter: string) => {\n    return topicNames.filter((v) => v.includes(filter));\n  };\n  const filterConsumerGroups = (filter: string) => {\n    return consumerGroupIds.filter((v) => v.includes(filter));\n  };\n  return (\n    <ManageKafkaPermissions\n      accounts={accounts}\n      onCancel={hideModal}\n      kafkaName={kafkaName || ''}\n      onSave={onSaveAcl}\n      existingAcls={existingAcls}\n      onRemoveAcls={onRemoveAcls}\n      selectedAccount={selectedAccount}\n      onChangeSelectedAccount={setSelectedAccount}\n      topicNameOptions={filterTopics}\n      consumerGroupNameOptions={filterConsumerGroups}\n    />\n  );\n};\n\nexport default ManagePermissions;\n","import { ResourceOperationValue } from '@rhoas/app-services-ui-components/types/src/Kafka/ManageKafkaPermissions/components/ResourceOperation';\nimport { ResourceTypeValue } from '@rhoas/app-services-ui-components/types/src/Kafka/ManageKafkaPermissions/components/ResourceType';\nimport { AclResourceType } from '@rhoas/kafka-instance-sdk';\nimport { sentenceCase } from 'sentence-case';\n\nexport const displayName = (resourceType: AclResourceType): string => {\n  switch (resourceType) {\n    case AclResourceType.Group:\n      return 'Consumer group';\n\n    case AclResourceType.Topic:\n      return 'Topic';\n\n    case AclResourceType.Cluster:\n      return 'Kafka instance';\n\n    case AclResourceType.TransactionalId:\n      return 'Transactional ID';\n\n    default:\n      return sentenceCase(resourceType);\n  }\n};\n\nexport const transformResourceType = (value: ResourceTypeValue | undefined) => {\n  switch (value) {\n    case 'consumer-group':\n      return AclResourceType.Group;\n    case 'kafka-instance':\n      return AclResourceType.Cluster;\n    case 'topic':\n      return AclResourceType.Topic;\n    default:\n      return AclResourceType.TransactionalId;\n  }\n};\nexport const transformResourceOperation = (\n  value: ResourceOperationValue | undefined\n) => {\n  switch (value) {\n    case 'All':\n      return 'ALL';\n    case 'Alter':\n      return 'ALTER';\n    case 'Alter configs':\n      return 'ALTER_CONFIGS';\n    case 'Create':\n      return 'CREATE';\n    case 'Delete':\n      return 'DELETE';\n    case 'Describe':\n      return 'DESCRIBE';\n    case 'Describe configs':\n      return 'DESCRIBE_CONFIGS';\n    case 'Read':\n      return 'READ';\n    default:\n      return 'WRITE';\n  }\n};\n","import { useCallback, useMemo } from 'react';\nimport { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type EnhancedAclBinding = AclBinding & {\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const usePermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = useCallback(\n    async (\n      filter: AclFilter,\n      size?: number,\n      page?: number\n    ): Promise<EnhancedAclBindingListPage> => {\n      const accessToken = await config?.getToken();\n\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n        filter.resourceType,\n        filter.resourceName,\n        filter.patternType,\n        filter.principal,\n        filter.operation,\n        filter.permissionType,\n        page,\n        size\n      );\n      return enhanceAclBindingListPage(response);\n    },\n    [config]\n  );\n\n  const addPermission = useCallback(\n    async (acl: AclBinding) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.createAcl(acl);\n    },\n    [config]\n  );\n\n  const deletePermission = useCallback(\n    async (acl: AclFilter) => {\n      const accessToken = await config?.getToken();\n      const api = new AclsApi(\n        new Configuration({\n          accessToken,\n          basePath: config?.basePath,\n        })\n      );\n      await api.deleteAcls(\n        acl.resourceType,\n        acl.resourceName,\n        acl.patternType,\n        acl.principal,\n        acl.operation,\n        acl.permissionType\n      );\n    },\n    [config]\n  );\n\n  const getResourceOperations = useCallback(async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return api.getAclResourceOperations().then((response) => response.data);\n  }, [config]);\n\n  return useMemo(() => {\n    return {\n      getPermissions,\n      addPermission,\n      deletePermission,\n      getResourceOperations,\n    } as PermissionsService;\n  }, [getPermissions, addPermission, deletePermission, getResourceOperations]);\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        return {\n          ...item,\n          // Strip out the \"User:\" prefix\n          principal: item.principal.substring(5),\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["ManagePermissions","hideModal","onSave","kafkaName","selectedAccountId","acls","topicNames","consumerGroupIds","title","variant","ManagePermissionsModal","resourceOperations","undefined","kafka","auth","useAuth","selectedAccount","setSelectedAccount","useState","existingAcls","setExistingAcls","filter","i","principal","currentlyLoggedInuser","setCurrentlyLoggedInuser","aclsForSelectedAccount","useCallback","useEffect","principals","usePrincipals","addAlert","useAlert","config","useContext","permissionsService","username","getUsername","accounts","getAllPrincipals","p","id","owner","map","value","displayName","principalType","PrincipalType","ManageKafkaPermissions","onCancel","data","type","addPermission","resourceName","resourceType","patternType","operation","permission","resourcePrefix","resourceOperation","resourcePermission","resourceNameValue","prefixRuleValue","topicResourceName","topicResourcePrefixRule","consumerResourceName","consumerResourcePrefixRule","onRemoveAcls","row","deletePermission","AclPatternTypeFilter","permissionType","AclPermissionTypeFilter","AclResourceTypeFilter","AclOperationFilter","then","_","index","updateExistingAcls","catch","error","AlertVariant","response","reason","onChangeSelectedAccount","topicNameOptions","v","includes","consumerGroupNameOptions","AclResourceType","sentenceCase","transformResourceType","transformResourceOperation","convertEnum","Object","entries","find","toString","usePermissionsService","getPermissions","size","page","accessToken","getToken","api","AclsApi","Configuration","basePath","getAcls","enhanceAclBindingListPage","acl","createAcl","deleteAcls","getResourceOperations","getAclResourceOperations","useMemo","total","items","item","substring","hash","sort","a","b","localeCompare"],"sourceRoot":""}