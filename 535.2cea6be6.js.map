{"version":3,"file":"535.2cea6be6.js","mappings":"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","sources":["webpack://kafka-ui/./node_modules/@patternfly/react-styles/dist/esm/index.js","webpack://kafka-ui/./src/components/MASTable/CustomRowWrapper.tsx","webpack://kafka-ui/./src/components/MASTable/MASTable.tsx","webpack://kafka-ui/./src/components/MASToolbar/MASToolbar.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/Cells.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsToolbar.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState.tsx","webpack://kafka-ui/./src/modules/Permissions/components/PermissionsTable/PermissionsTable.tsx","webpack://kafka-ui/./src/modules/Permissions/pages/PermissionsTable/PermissionsTableView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/MainView/MainView.tsx","webpack://kafka-ui/./src/services/acls.ts"],"sourcesContent":["/** Joins args into a className string\n *\n * @param {any} args list of objects, string, or arrays to reduce\n */\nexport function css(...args) {\n    // Adapted from https://github.com/JedWatson/classnames/blob/master/index.js\n    const classes = [];\n    const hasOwn = {}.hasOwnProperty;\n    args.filter(Boolean).forEach((arg) => {\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n        }\n        else if (Array.isArray(arg) && arg.length) {\n            const inner = css(...arg);\n            if (inner) {\n                classes.push(inner);\n            }\n        }\n        else if (argType === 'object') {\n            for (const key in arg) {\n                if (hasOwn.call(arg, key) && arg[key]) {\n                    classes.push(key);\n                }\n            }\n        }\n    });\n    return classes.join(' ');\n}\n//# sourceMappingURL=index.js.map","import React, { createContext, useContext } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport './CustomRowWrapper.css';\nimport { IRowData } from '@patternfly/react-table';\n\nexport type CustomRowWrapperContextProps = {\n  activeRow?: string;\n  onRowClick?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    rowIndex: number,\n    row: IRowData\n  ) => void;\n  rowDataTestId?: string;\n  loggedInUser?: string;\n};\n\nconst CustomRowWrapperContext = createContext<CustomRowWrapperContextProps>({\n  activeRow: '',\n  onRowClick: () => '',\n  loggedInUser: '',\n});\n\nexport const CustomRowWrapperProvider = CustomRowWrapperContext.Provider;\n\nexport const CustomRowWrapper = (rowWrapperProps): JSX.Element => {\n  const { activeRow, onRowClick, rowDataTestId } = useContext(\n    CustomRowWrapperContext\n  );\n  const { trRef, className, rowProps, row, ...props } = rowWrapperProps || {};\n  const { rowIndex } = rowProps;\n  const { isExpanded, originalData } = row;\n\n  return (\n    <tr\n      data-testid={rowDataTestId}\n      tabIndex={0}\n      ref={trRef}\n      className={css(\n        className,\n        'pf-c-table-row__item',\n        activeRow &&\n          activeRow === originalData?.rowId &&\n          'pf-m-selected pf-m-selectable'\n      )}\n      hidden={isExpanded !== undefined && !isExpanded}\n      onClick={(event: React.ChangeEvent<HTMLInputElement>) =>\n        onRowClick && onRowClick(event, rowIndex, row)\n      }\n      {...props}\n    />\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport {\n  TableHeader,\n  Table as PFTable,\n  TableBody,\n  TableProps as PFTableProps,\n  HeaderProps,\n  TableBodyProps,\n} from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport {\n  CustomRowWrapper,\n  CustomRowWrapperProvider,\n  CustomRowWrapperContextProps,\n} from './CustomRowWrapper';\n\nexport type MASTableProps = CustomRowWrapperContextProps & {\n  tableProps: Omit<PFTableProps, 'children'> & {\n    shouldDefaultCustomRowWrapper?: boolean;\n  };\n  tableHeaderProps?: Omit<HeaderProps, 'children'>;\n  tableBodyProps?: Omit<TableBodyProps, 'children'>;\n  children?: React.ReactNode;\n};\n\nconst MASTable: FunctionComponent<MASTableProps> = ({\n  tableProps,\n  tableHeaderProps,\n  tableBodyProps,\n  children,\n  activeRow,\n  onRowClick,\n  rowDataTestId,\n  loggedInUser,\n}) => {\n  const {\n    cells,\n    rows,\n    actionResolver,\n    onSort,\n    sortBy,\n    'aria-label': ariaLabel,\n    variant,\n    className,\n    shouldDefaultCustomRowWrapper = false,\n    ...restProps\n  } = tableProps;\n\n  /**\n   * Handle CustomRowWrapper\n   */\n  if (shouldDefaultCustomRowWrapper) {\n    restProps['rowWrapper'] = CustomRowWrapper;\n  }\n\n  return (\n    <CustomRowWrapperProvider\n      value={{\n        activeRow,\n        onRowClick,\n        rowDataTestId,\n        loggedInUser,\n      }}\n    >\n      <PFTable\n        className={css(\n          shouldDefaultCustomRowWrapper && 'mas--table-view__table',\n          className\n        )}\n        cells={cells}\n        variant={variant}\n        rows={rows}\n        aria-label={ariaLabel}\n        actionResolver={actionResolver}\n        onSort={onSort}\n        sortBy={sortBy}\n        {...restProps}\n      >\n        <TableHeader {...tableHeaderProps} />\n        <TableBody {...tableBodyProps} />\n        {children}\n      </PFTable>\n    </CustomRowWrapperProvider>\n  );\n};\n\nexport { MASTable };\n","import React from 'react';\nimport {\n  ToolbarContent,\n  Toolbar,\n  ToolbarProps,\n  ToolbarItemProps as PFToolbarItemProps,\n  ToolbarToggleGroup,\n  ToolbarItem,\n  ToolbarToggleGroupProps,\n} from '@patternfly/react-core';\n\nexport type ToolbarItemProps = Omit<PFToolbarItemProps, 'children'> & {\n  item: React.ReactElement;\n};\nexport type MASToolbarProps = {\n  toolbarProps: Omit<ToolbarProps, 'children' | 'ref'>;\n  toggleGroupProps?: Omit<ToolbarToggleGroupProps, 'children'>;\n  toggleGroupItems?: any;\n  toolbarItems?: ToolbarItemProps[];\n};\n\nconst MASToolbar: React.FunctionComponent<MASToolbarProps> = ({\n  toolbarProps,\n  toggleGroupProps,\n  toolbarItems,\n  toggleGroupItems,\n}) => {\n  const {\n    id,\n    clearAllFilters,\n    collapseListedFiltersBreakpoint = 'md',\n    inset,\n    ...restToolbarProps\n  } = toolbarProps;\n\n  return (\n    <>\n      <Toolbar\n        id={id}\n        clearAllFilters={clearAllFilters}\n        inset={inset}\n        collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n        {...restToolbarProps}\n      >\n        <ToolbarContent>\n          {toggleGroupProps && (\n            <ToolbarToggleGroup\n              toggleIcon={toggleGroupProps.toggleIcon}\n              {...toggleGroupProps}\n            >\n              {toggleGroupItems}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarItems?.map((toolbarItem, index) => {\n            const {\n              key = 'mas',\n              variant,\n              className,\n              id,\n              alignment,\n              item,\n              ...restItemProps\n            } = toolbarItem;\n            return (\n              <ToolbarItem\n                key={`${key}-${index}`}\n                variant={variant}\n                className={className}\n                id={id}\n                alignment={alignment}\n                {...restItemProps}\n              >\n                {item}\n              </ToolbarItem>\n            );\n          })}\n        </ToolbarContent>\n      </Toolbar>\n    </>\n  );\n};\n\nexport { MASToolbar };\n","import { ICell } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { AclPatternType, AclPermissionType } from '@rhoas/kafka-instance-sdk';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport { EnhancedAclBinding } from '@app/services/acls';\nimport React from 'react';\nimport { PrincipalType, usePrincipals } from '@bf2/ui-shared';\n\nexport type CellBuilder<T extends EnhancedAclBinding> = (\n  item: T,\n  row: number\n) => ICell | string;\n\nconst AllAccountsPrincipal: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div>\n        {t('permission.table.all_accounts')} <InfoCircleIcon color='grey' />\n      </div>\n      <div className='pf-u-font-size-xs'>\n        {t('permission.table.all_accounts_help')}\n      </div>\n    </>\n  );\n};\n\ntype PrincipalWithTooltipProps = {\n  acl: EnhancedAclBinding;\n};\nconst PrincipalWithTooltip: React.FunctionComponent<PrincipalWithTooltipProps> =\n  ({ acl }) => {\n    const principals = usePrincipals().getAllPrincipals();\n\n    const locatedPrincipals = principals.filter(\n      (p) => p.id === acl.principalDisplay\n    );\n\n    if (locatedPrincipals.length === 1) {\n      if (locatedPrincipals[0].principalType === PrincipalType.ServiceAccount) {\n        return (\n          <Tooltip\n            content={\n              <div>\n                Type: {locatedPrincipals[0].principalType} <br />\n              </div>\n            }\n          >\n            <span tabIndex={0}>\n              {' '}\n              {acl.principalDisplay} <InfoCircleIcon color='grey' />\n            </span>\n          </Tooltip>\n        );\n      } else {\n        return (\n          <Tooltip\n            content={\n              <div>\n                Type: {locatedPrincipals[0].principalType} <br />\n                Name: {locatedPrincipals[0].displayName} <br />\n                Email: {locatedPrincipals[0].emailAddress}\n              </div>\n            }\n          >\n            <span tabIndex={0}>\n              {' '}\n              {acl.principalDisplay} <InfoCircleIcon color='grey' />\n            </span>\n          </Tooltip>\n        );\n      }\n    }\n    return <span> {acl.principalDisplay}</span>;\n  };\n\nexport const principalCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  switch (item.principal) {\n    case 'User:*':\n      return {\n        title: <AllAccountsPrincipal />,\n      };\n      break;\n    default:\n      return {\n        title: <PrincipalWithTooltip acl={item} />,\n      };\n      break;\n  }\n};\n\nexport const permissionCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  return item.permission === AclPermissionType.Deny\n    ? ({\n        title: (\n          <Label color={'red'} variant={'outline'}>\n            {item.permissionDisplay}\n          </Label>\n        ),\n      } as ICell)\n    : '';\n};\n\nexport const operationCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  return {\n    title: <Label color={item.operationColor}>{item.operationDisplay}</Label>,\n  };\n};\n\nexport const resourceCell: CellBuilder<EnhancedAclBinding> = (item) => {\n  return {\n    title: (\n      <>\n        <div>\n          {item.resourceTypeDisplay}{' '}\n          {item.patternType === AclPatternType.Prefixed\n            ? 'name starts with'\n            : 'is'}\n        </div>\n        <div className='pf-u-font-size-lg'>{item.resourceName}</div>\n      </>\n    ),\n  };\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n} from '@patternfly/react-core';\nimport { MASPagination, MASToolbar, ToolbarItemProps } from '@app/components';\n\ntype PermissionsToolbarKebabProps = {\n  onDeleteSelected: () => void;\n  deleteSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbarKebab: React.FunctionComponent<PermissionsToolbarKebabProps> =\n  ({ deleteSelectedEnabled, onDeleteSelected }) => {\n    const { t } = useTranslation();\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n\n    const onToggle = (v) => {\n      setIsOpen(v);\n    };\n\n    const onSelect = () => {\n      setIsOpen((prevState) => !prevState);\n      onFocus();\n    };\n\n    const onFocus = () => {\n      const element = document.getElementById(\n        'permissions-toolbar-kebab-toggle'\n      );\n      element?.focus();\n    };\n\n    const dropdownItems = [\n      <DropdownItem\n        key='delete_selected'\n        onClick={onDeleteSelected}\n        isDisabled={!deleteSelectedEnabled}\n      >\n        {t('permission.table.delete_selected')}\n      </DropdownItem>,\n    ];\n    return (\n      <Dropdown\n        onSelect={onSelect}\n        toggle={\n          <KebabToggle\n            onToggle={onToggle}\n            id='permissions-toolbar-kebab-toggle'\n          />\n        }\n        isOpen={isOpen}\n        isPlain\n        dropdownItems={dropdownItems}\n      />\n    );\n  };\n\nexport type PermissionsToolbarProps = {\n  total: number;\n  page: number;\n  perPage: number;\n  setFilteredValue: (value: string) => void;\n  filteredValue: string;\n  openManagePermissions?: () => void;\n  onDeleteSelected: () => void;\n  deletedSelectedEnabled: boolean;\n};\n\nconst PermissionsToolbar: React.FC<PermissionsToolbarProps> = ({\n  total = 0,\n  page,\n  perPage,\n  setFilteredValue,\n  openManagePermissions,\n  onDeleteSelected,\n  deletedSelectedEnabled,\n}) => {\n  const { t } = useTranslation();\n\n  const onClear = () => {\n    setFilteredValue('');\n  };\n\n  const toggleGroupItems = <></>;\n\n  const toolbarItems: ToolbarItemProps[] = [\n    {\n      item: (\n        <Button\n          id='permissions-toolbar-manage-permissions-button'\n          data-testid='actionManagePermissions'\n          onClick={openManagePermissions}\n        >\n          {t('permission.table.manage_button')}\n        </Button>\n      ),\n    },\n    {\n      item: (\n        <PermissionsToolbarKebab\n          deleteSelectedEnabled={deletedSelectedEnabled}\n          onDeleteSelected={onDeleteSelected}\n        />\n      ),\n    },\n  ];\n\n  if (total > 0) {\n    toolbarItems.push({\n      item: (\n        <MASPagination\n          widgetId='permissions-pagination-options-menu-top'\n          itemCount={total}\n          page={page}\n          perPage={perPage}\n          titles={{\n            paginationTitle: t('common.minimal_pagination'),\n            perPageSuffix: t('common.per_page_suffix'),\n            toFirstPage: t('common.to_first_page'),\n            toPreviousPage: t('common.to_previous_page'),\n            toLastPage: t('common.to_last_page'),\n            toNextPage: t('common.to_next_page'),\n            optionsToggle: t('common.options_toggle'),\n            currPage: t('common.curr_page'),\n          }}\n          isCompact={true}\n        />\n      ),\n      variant: 'pagination',\n      alignment: { default: 'alignRight' },\n    });\n  }\n\n  return (\n    <MASToolbar\n      toolbarProps={{\n        id: 'instance-toolbar',\n        clearAllFilters: onClear,\n        collapseListedFiltersBreakpoint: 'md',\n        inset: { xl: 'insetLg' },\n      }}\n      toggleGroupProps={{ toggleIcon: '', breakpoint: 'md' }}\n      toggleGroupItems={toggleGroupItems}\n      toolbarItems={toolbarItems}\n    />\n  );\n};\n\nexport { PermissionsToolbar };\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { EmptyState, MASEmptyStateVariant } from '@app/components';\n\nexport type PermissionsTableEmptyStateProps = {\n  openManagePermissions?: () => void;\n};\nexport const PermissionsTableEmptyState: React.FunctionComponent<PermissionsTableEmptyStateProps> =\n  ({ openManagePermissions }) => {\n    const { t } = useTranslation();\n    return (\n      <EmptyState\n        emptyStateProps={{\n          variant: MASEmptyStateVariant.NoResult,\n        }}\n        titleProps={{\n          title: t('permission.table.no_results_title'),\n        }}\n        emptyStateBodyProps={{\n          body: t('permission.table.no_results_body'),\n        }}\n        buttonProps={{\n          title: t('permission.table.manage_permissions_button'),\n          onClick: openManagePermissions,\n          'data-testid': 'actionManagePermissions',\n        }}\n      />\n    );\n  };\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PaginationVariant } from '@patternfly/react-core';\nimport {\n  IActionsResolver,\n  ICell,\n  OnSelect,\n  TableVariant,\n} from '@patternfly/react-table';\nimport { MASPagination, MASTable, ModalType, useModal } from '@app/components';\nimport { PermissionsToolbar } from './PermissionsToolbar';\nimport {\n  AclFilter,\n  convertEnum,\n  EnhancedAclBinding,\n  EnhancedAclBindingListPage,\n  PermissionsService,\n} from '@app/services/acls';\nimport { useTimeout } from '@app/hooks';\nimport {\n  operationCell,\n  permissionCell,\n  principalCell,\n  resourceCell,\n} from '@app/modules/Permissions/components/PermissionsTable/Cells';\nimport { PermissionsTableEmptyState } from '@app/modules/Permissions/components/PermissionsTable/PermissionsTableEmptyState';\nimport {\n  AclOperationFilter,\n  AclPatternTypeFilter,\n  AclPermissionTypeFilter,\n  AclResourceTypeFilter,\n} from '@rhoas/kafka-instance-sdk';\n\nexport type PermissionsTableProps = {\n  permissionsService: PermissionsService;\n  kafkaName?: string;\n  topicNames: string[];\n  consumerGroupIds: string[];\n};\n\nconst PermissionsTable: React.FC<PermissionsTableProps> = ({\n  permissionsService,\n  kafkaName,\n  topicNames,\n  consumerGroupIds,\n}) => {\n  type SelectableEnhancedAclBinding = EnhancedAclBinding & {\n    selected: boolean;\n  };\n\n  type SelectableEnhancedAclBindingListPage = Omit<\n    EnhancedAclBindingListPage,\n    'items'\n  > & {\n    items?: SelectableEnhancedAclBinding[];\n  };\n\n  const { t } = useTranslation();\n  const [filteredValue, setFilteredValue] = useState<string>('');\n  const { showModal } = useModal<ModalType.ManagePermissions>() || {};\n  const [aclPage, setAclPage] = useState<\n    SelectableEnhancedAclBindingListPage | undefined\n  >();\n\n  const fetchPermissions = async () => {\n    try {\n      const response = await permissionsService.getPermissions({\n        resourceName: filteredValue !== '' ? filteredValue : undefined,\n      } as AclFilter);\n      setAclPage((prevState) => {\n        return {\n          items: response.items?.map((value) => {\n            const found = prevState?.items?.filter(\n              (p) => p.hash() === value.hash()\n            );\n            const selected =\n              (found?.length !== 0 && found?.every((p) => p.selected)) || false;\n            return {\n              selected,\n              ...value,\n            };\n          }),\n          page: response.page,\n          size: response.size,\n          total: response.total,\n        };\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  useEffect(() => {\n    fetchPermissions();\n  }, []);\n\n  useTimeout(() => fetchPermissions(), 5000);\n\n  const tableColumns = [\n    { title: '' },\n    { title: '' },\n    { title: '' },\n    { title: '' },\n  ] as ICell[];\n\n  const cells = [principalCell, permissionCell, operationCell, resourceCell];\n\n  const onSelect: OnSelect = (event, isSelected, rowIndex) => {\n    if (rowIndex === -1) {\n      setAclPage((prevState) => {\n        if (prevState) {\n          return {\n            items: prevState?.items?.map((p) => {\n              p.selected = isSelected;\n              return p;\n            }),\n            ...prevState,\n          };\n        }\n      });\n    } else {\n      setAclPage((prevState) => {\n        if (prevState) {\n          const items = prevState?.items;\n          if (items !== undefined) {\n            items[rowIndex].selected = isSelected;\n          }\n          return {\n            items,\n            ...prevState,\n          };\n        }\n      });\n    }\n  };\n\n  const openManagePermissions = (selectedAccountId?: string) => {\n    const onSave = async () => {\n      await fetchPermissions();\n    };\n\n    showModal &&\n      showModal(ModalType.ManagePermissions, {\n        selectedAccountId,\n        kafkaName,\n        acls: aclPage?.items || [],\n        topicNames,\n        consumerGroupIds,\n        onSave,\n      });\n  };\n\n  const onDeleteSelected = () => {\n    aclPage?.items\n      ?.filter((item) => item.selected)\n      .forEach((value) => {\n        permissionsService.deletePermission({\n          resourceName: value.resourceName,\n          patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n          permissionType: convertEnum(\n            value.permission,\n            AclPermissionTypeFilter\n          ),\n          resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n          operation: convertEnum(value.operation, AclOperationFilter),\n          principal: value.principal,\n        });\n      });\n  };\n\n  const onDelete = (rowIndex?: number) => {\n    if (rowIndex !== undefined && aclPage?.items !== undefined) {\n      const value = aclPage.items[rowIndex];\n      permissionsService.deletePermission({\n        resourceName: value.resourceName,\n        patternType: convertEnum(value.patternType, AclPatternTypeFilter),\n        permissionType: convertEnum(value.permission, AclPermissionTypeFilter),\n        resourceType: convertEnum(value.resourceType, AclResourceTypeFilter),\n        operation: convertEnum(value.operation, AclOperationFilter),\n        principal: value.principal,\n      });\n    }\n  };\n\n  const actionResolver: IActionsResolver = (_, { rowIndex }) => {\n    const resolver = [\n      {\n        title: t('permission.table.row_kebab.manage'),\n        ['data-testid']: 'permission-table-row-manage',\n        onClick: () => {\n          if (aclPage?.items !== undefined && rowIndex !== undefined) {\n            openManagePermissions(aclPage.items[rowIndex].principalDisplay);\n          }\n        },\n      },\n      {\n        title: t('permission.table.row_kebab.delete'),\n        ['data-testid']: 'permission-table-row-delete',\n        onClick: () => onDelete(rowIndex),\n      },\n    ];\n    return resolver;\n  };\n\n  if (\n    aclPage === undefined ||\n    aclPage.items === undefined ||\n    aclPage.items.length === 0\n  ) {\n    return <PermissionsTableEmptyState />;\n  }\n\n  return (\n    <>\n      <PermissionsToolbar\n        total={aclPage.total || 0}\n        page={aclPage.page || 1}\n        perPage={aclPage.size || 10}\n        openManagePermissions={() => openManagePermissions()}\n        setFilteredValue={setFilteredValue}\n        filteredValue={filteredValue}\n        deletedSelectedEnabled={aclPage.items.some((item) => item.selected)}\n        onDeleteSelected={onDeleteSelected}\n      />\n      <MASTable\n        tableProps={{\n          cells: tableColumns,\n          rows: aclPage.items.map((item, row) => {\n            return {\n              cells: cells.map((f) => f(item, row)),\n              selected: item.selected,\n              originalData: item,\n            };\n          }),\n          'aria-label': t('permission.table.permission_list_table'),\n          shouldDefaultCustomRowWrapper: true,\n          variant: TableVariant.compact,\n          onSelect,\n          actionResolver,\n          canSelectAll: false,\n        }}\n        rowDataTestId={'tablePermissions-row'}\n      />\n      <MASPagination\n        widgetId='permissions-pagination-options-menu-bottom'\n        itemCount={aclPage.total || 0}\n        variant={PaginationVariant.bottom}\n        page={aclPage.page}\n        perPage={aclPage.size}\n        titles={{\n          paginationTitle: t('common.full_pagination'),\n          perPageSuffix: t('common.per_page_suffix'),\n          toFirstPage: t('common.to_first_page'),\n          toPreviousPage: t('common.to_previous_page'),\n          toLastPage: t('common.to_last_page'),\n          toNextPage: t('common.to_next_page'),\n          optionsToggle: t('common.options_toggle'),\n          currPage: t('common.curr_page'),\n        }}\n      />\n    </>\n  );\n};\nexport { PermissionsTable };\n","import React, { useContext, useEffect, useState } from 'react';\nimport { createPermissionsService } from '@app/services/acls';\nimport { PermissionsTable } from '@app/modules/Permissions/components/PermissionsTable';\nimport { ConfigContext } from '@app/contexts';\nimport { getConsumerGroups, getTopics } from '@app/services';\n\nexport type PermissionsTableViewProps = {\n  kafkaName?: string;\n};\nexport const PermissionsTableView: React.FunctionComponent<PermissionsTableViewProps> =\n  ({ kafkaName }) => {\n    const config = useContext(ConfigContext);\n\n    const permissionsService = createPermissionsService(config);\n    const [topicNames, setTopicNames] = useState<string[]>([]);\n    const [consumerGroupIds, setConsumerGroupNames] = useState<string[]>([]);\n\n    useEffect(() => {\n      const fetchTopicNames = async () => {\n        const response = await getTopics(config);\n        const topicNames = response.items?.map((topic) => topic.name || '');\n        setTopicNames(topicNames || []);\n      };\n      fetchTopicNames();\n    }, [config]);\n\n    useEffect(() => {\n      const fetchConsumerGroupNames = async () => {\n        const response = await getConsumerGroups(config);\n        const consumerGroupNames = response.items?.map(\n          (consumerGroup) => consumerGroup.groupId || ''\n        );\n        setConsumerGroupNames(consumerGroupNames || []);\n      };\n      fetchConsumerGroupNames();\n    }, [config]);\n\n    //const permissionsService = createMockPermissionsService();\n\n    return (\n      <PermissionsTable\n        permissionsService={permissionsService}\n        kafkaName={kafkaName}\n        topicNames={topicNames}\n        consumerGroupIds={consumerGroupIds}\n      />\n    );\n  };\n\nexport default PermissionsTableView;\n","import React, { useState, lazy } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  PageSection,\n  PageSectionVariants,\n  Title,\n  Tabs,\n  Level,\n  Tab,\n  TabTitleText,\n  TabContent,\n  Dropdown,\n  DropdownPosition,\n  KebabToggle,\n  DropdownItem,\n} from '@patternfly/react-core';\nimport { useFederated } from '@app/contexts';\nimport { MASLoading } from '@app/components';\nimport '../style.css';\nimport PermissionsTableView from '@app/modules/Permissions/pages/PermissionsTable/PermissionsTableView';\nimport { usePrincipals } from '@bf2/ui-shared';\n\nconst Topics = lazy(() => import('@app/modules/Topics/Topics'));\nconst ConsumerGroups = lazy(\n  () => import('@app/modules/ConsumerGroups/ConsumerGroups')\n);\n\nexport const MainView: React.FC = () => {\n  const { t } = useTranslation();\n  const {\n    kafkaPageLink,\n    kafkaName,\n    handleInstanceDrawer,\n    setIsOpenDeleteInstanceModal,\n    showMetrics,\n    activeTab,\n  } = useFederated() || {};\n\n  const principals = usePrincipals();\n\n  const [activeTabKey, setActiveTabKey] = useState(activeTab || 1);\n  const contentRefConsumerGroups = React.createRef<HTMLElement>();\n  const contentRefTopics = React.createRef<HTMLElement>();\n  const contentRefDashboard = React.createRef<HTMLElement>();\n  const contentRefPermissions = React.createRef<HTMLElement>();\n\n  const handleTabClick = (_event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  const [isOpen, setIsOpen] = useState<boolean>();\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelect = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelectKebabOption = (activeTab: string) => {\n    handleInstanceDrawer && handleInstanceDrawer(true, activeTab);\n  };\n\n  const onDeleteInstance = () => {\n    setIsOpenDeleteInstanceModal && setIsOpenDeleteInstanceModal(true);\n  };\n\n  const dropdownItems = [\n    <DropdownItem\n      key='view-kafka'\n      onClick={() => onSelectKebabOption('details')}\n    >\n      {t('common.view_instance')}\n    </DropdownItem>,\n    <DropdownItem\n      key='connect-kafka'\n      onClick={() => onSelectKebabOption('connection')}\n    >\n      {t('common.view_connection')}\n    </DropdownItem>,\n    <DropdownItem key='delete-kafka' onClick={onDeleteInstance}>\n      {t('common.delete_instance')}\n    </DropdownItem>,\n  ];\n\n  const mainBreadcrumbs = (\n    <Breadcrumb>\n      <BreadcrumbItem to={kafkaPageLink || '#'}>\n        {t('common.kafka_instance')}\n      </BreadcrumbItem>\n      <BreadcrumbItem to='#' isActive>\n        {kafkaName || t('common.kafka_instance_name')}\n      </BreadcrumbItem>\n    </Breadcrumb>\n  );\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        {mainBreadcrumbs}\n      </section>\n\n      <PageSection variant={PageSectionVariants.light}>\n        <Level>\n          <Title headingLevel='h1'>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </Title>\n          <Dropdown\n            onSelect={onSelect}\n            toggle={<KebabToggle onToggle={onToggle} id='toggle-data-plane' />}\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n            position={DropdownPosition.right}\n          />\n        </Level>\n      </PageSection>\n      <React.Suspense fallback={<MASLoading />}>\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n          className='pf-c-page__main-tabs'\n        >\n          <Tabs\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n            data-testid='pageKafka-tabProperties'\n            className='pf-m-page-insets'\n          >\n            <Tab\n              title={<TabTitleText>{t('dashboard.dashboard')}</TabTitleText>}\n              eventKey={1}\n              data-testid='pageKafka-tabDashboard'\n              id='dashboard-tab-section'\n              aria-label={t('dashboard.dashboard')}\n              tabContentRef={contentRefDashboard}\n              tabContentId='kafka-ui-TabcontentDashboard'\n            />\n            <Tab\n              title={<TabTitleText>{t('topic.topics')}</TabTitleText>}\n              eventKey={2}\n              data-testid='pageKafka-tabTopics'\n              id='topics-tab-section'\n              aria-label={t('topic.topics')}\n              tabContentRef={contentRefTopics}\n              tabContentId='kafka-ui-TabcontentTopicsList'\n            />\n            <Tab\n              title={\n                <TabTitleText>\n                  {t('consumerGroup.consumer_groups')}\n                </TabTitleText>\n              }\n              eventKey={3}\n              data-testid='pageKafka-tabConsumers'\n              id='consumer-groups-tab-section'\n              aria-label={t('consumerGroup.consumer_groups')}\n              tabContentRef={contentRefConsumerGroups}\n              tabContentId='kafka-ui-TabcontentConsumersList'\n            />\n            {principals !== undefined ? (\n              <Tab\n                title={<TabTitleText>{t('permission.tab.label')}</TabTitleText>}\n                eventKey={4}\n                data-testid='pageKafka-tabPermissions'\n                id='permissions-tab-section'\n                aria-label={t('permission.tab.label')}\n                tabContentRef={contentRefPermissions}\n                tabContentId='kafka-ui-TabcontentPermissions'\n                // className='kafka-ui-m-full-height'\n              />\n            ) : (\n              <></>\n            )}\n          </Tabs>\n        </PageSection>\n        <PageSection isFilled>\n          <TabContent\n            eventKey={1}\n            ref={contentRefDashboard}\n            id='kafka-ui-TabcontentDashboard'\n            className='kafka-ui-m-full-height'\n            aria-label={t('dashboard.dashboard')}\n            hidden={activeTabKey !== 1}\n          >\n            {showMetrics}\n          </TabContent>\n          <TabContent\n            eventKey={2}\n            ref={contentRefTopics}\n            id='kafka-ui-TabcontentTopicsList'\n            className='kafka-ui-m-full-height'\n            aria-label={t('topic.topics')}\n            hidden={activeTabKey !== 2}\n          >\n            <Topics />\n          </TabContent>\n          <TabContent\n            eventKey={3}\n            ref={contentRefConsumerGroups}\n            id='kafka-ui-TabcontentConsumersList'\n            className='kafka-ui-m-full-height'\n            aria-label={t('consumerGroup.consumer_groups')}\n            hidden={activeTabKey != 3}\n          >\n            <ConsumerGroups consumerGroupByTopic={false} />\n          </TabContent>\n          {principals !== undefined ? (\n            <TabContent\n              eventKey={4}\n              ref={contentRefPermissions}\n              id='kafka-ui-TabcontentPermissions'\n              className='kafka-ui-m-full-height'\n              aria-label={t('permission.tab.label')}\n              hidden\n            >\n              <PermissionsTableView kafkaName={kafkaName} />\n            </TabContent>\n          ) : (\n            <></>\n          )}\n        </PageSection>\n      </React.Suspense>\n    </>\n  );\n};\n","import { AxiosResponse } from 'axios';\nimport {\n  AclBinding,\n  AclBindingListPage,\n  AclOperation,\n  AclOperationFilter,\n  AclPatternType,\n  AclPatternTypeFilter,\n  AclPermissionType,\n  AclPermissionTypeFilter,\n  AclResourceType,\n  AclResourceTypeFilter,\n  AclsApi,\n  Configuration,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { sentenceCase } from 'sentence-case';\nimport objectHash from 'object-hash';\n\nexport type PermissionsService = {\n  getPermissions(\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage>;\n\n  addPermission(acl: AclBinding): Promise<void>;\n  deletePermission(acl: AclFilter): Promise<void>;\n  getResourceOperations(): Promise<{ [key: string]: Array<string> }>;\n};\n\nexport const convertEnum = <T extends { toString: () => string }, F>(\n  p: T,\n  filter: { [name: string]: unknown }\n): F => {\n  const [, v] =\n    Object.entries(filter).find(([, v]) => v === p.toString()) || [];\n  return v as F;\n};\n\nexport type OperationColor =\n  | 'blue'\n  | 'cyan'\n  | 'green'\n  | 'orange'\n  | 'purple'\n  | 'red'\n  | 'grey';\n\nexport type EnhancedAclBinding = AclBinding & {\n  operationColor: OperationColor;\n  operationDisplay: string;\n  resourceTypeDisplay: string;\n  permissionDisplay: string;\n  principalDisplay: string;\n  hash: () => string;\n};\n\nexport type EnhancedAclBindingListPage = Omit<AclBindingListPage, 'items'> & {\n  items?: Array<EnhancedAclBinding>;\n};\n\nexport type AclFilter = {\n  resourceType?: AclResourceTypeFilter;\n  resourceName?: string;\n  patternType?: AclPatternTypeFilter;\n  principal?: string;\n  operation?: AclOperationFilter;\n  permissionType?: AclPermissionTypeFilter;\n};\n\nexport const createPermissionsService = (\n  config: IConfiguration | undefined\n): PermissionsService => {\n  const getPermissions = async (\n    filter: AclFilter,\n    size?: number,\n    page?: number\n  ): Promise<EnhancedAclBindingListPage> => {\n    const accessToken = await config?.getToken();\n\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    const response: AxiosResponse<AclBindingListPage> = await api.getAcls(\n      filter.resourceType,\n      filter.resourceName,\n      filter.patternType,\n      filter.principal,\n      filter.operation,\n      filter.permissionType,\n      page,\n      size\n    );\n    return enhanceAclBindingListPage(response);\n  };\n\n  const addPermission = async (acl: AclBinding) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.createAcl(acl);\n  };\n\n  const deletePermission = async (acl: AclFilter) => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    await api.deleteAcls(\n      acl.resourceType,\n      acl.resourceName,\n      acl.patternType,\n      acl.principal,\n      acl.operation,\n      acl.permissionType\n    );\n  };\n\n  const getResourceOperations = async () => {\n    const accessToken = await config?.getToken();\n    const api = new AclsApi(\n      new Configuration({\n        accessToken,\n        basePath: config?.basePath,\n      })\n    );\n    return await api\n      .getAclResourceOperations()\n      .then((response) => response.data);\n  };\n\n  return {\n    getPermissions,\n    addPermission,\n    deletePermission,\n    getResourceOperations,\n  } as PermissionsService;\n};\n\nconst enhanceAclBindingListPage = (\n  response: AxiosResponse<AclBindingListPage>\n): EnhancedAclBindingListPage => {\n  return {\n    total: response.data.total,\n    size: response.data.size,\n    page: response.data.page,\n    items: response.data.items\n      ?.map((item) => {\n        let operationColor: string | undefined;\n        let resourceTypeDisplay: string | undefined;\n        switch (item.resourceType) {\n          case AclResourceType.Group:\n            operationColor = 'green';\n            resourceTypeDisplay = 'Consumer group';\n            break;\n          case AclResourceType.Topic:\n            operationColor = 'blue';\n            resourceTypeDisplay = 'Topic';\n            break;\n          case AclResourceType.Cluster:\n            resourceTypeDisplay = 'Kafka Instance';\n            operationColor = 'grey';\n            break;\n          case AclResourceType.TransactionalId:\n            resourceTypeDisplay = 'Transactional id';\n            operationColor = 'orange';\n            break;\n          default:\n            operationColor = undefined;\n            resourceTypeDisplay = sentenceCase(item.resourceType);\n            break;\n        }\n        return {\n          operationColor,\n          operationDisplay: sentenceCase(item.operation),\n          resourceTypeDisplay,\n          permissionDisplay: sentenceCase(item.permission),\n          // Strip out the \"User:\" prefix\n          principalDisplay: item.principal.substring(5),\n          ...item,\n          toString: () => {\n            return `${item.principal} ${item.permission} ${item.operation} ${item.patternType} ${item.resourceType} ${item.resourceName}`;\n          },\n          hash: () => {\n            return objectHash(item);\n          },\n        } as EnhancedAclBinding;\n      })\n      .sort((a, b) => {\n        if (a.permission !== b.permission) {\n          if (a.permission === 'DENY') {\n            return -1;\n          } else {\n            return 1;\n          }\n        } else if (a.principal !== b.principal) {\n          return a.principal.localeCompare(b.principal);\n        } else if (a.resourceType !== b.resourceType) {\n          return a.resourceType.localeCompare(b.resourceType);\n        } else if (a.resourceName !== b.resourceName) {\n          return a.resourceName.localeCompare(b.resourceName);\n        } else if (a.operation !== b.operation) {\n          return a.operation.localeCompare(b.operation);\n        } else {\n          return 0;\n        }\n      }),\n  } as EnhancedAclBindingListPage;\n};\n\nexport const getPermissionsTypes = (): AclPermissionType[] => {\n  return Object.values(AclPermissionType);\n};\n\nexport const getOperations = (): AclOperation[] => {\n  return Object.values(AclOperation);\n};\n\nexport const getResourceTypes = (): AclResourceType[] => {\n  return Object.values(AclResourceType);\n};\n\nexport const getPatternTypes = (): AclPatternType[] => {\n  return Object.values(AclPatternType);\n};\n"],"names":["css","args","classes","hasOwn","hasOwnProperty","filter","Boolean","forEach","arg","argType","push","Array","isArray","length","inner","key","call","join","CustomRowWrapperContext","createContext","activeRow","onRowClick","loggedInUser","CustomRowWrapperProvider","Provider","CustomRowWrapper","rowWrapperProps","useContext","rowDataTestId","trRef","className","rowProps","row","props","rowIndex","isExpanded","originalData","tabIndex","ref","rowId","hidden","undefined","onClick","event","MASTable","tableProps","tableHeaderProps","tableBodyProps","children","cells","rows","actionResolver","onSort","sortBy","ariaLabel","variant","shouldDefaultCustomRowWrapper","restProps","value","TableHeader","TableBody","MASToolbar","toolbarProps","toggleGroupProps","toolbarItems","toggleGroupItems","id","clearAllFilters","collapseListedFiltersBreakpoint","inset","restToolbarProps","Toolbar","ToolbarContent","ToolbarToggleGroup","toggleIcon","map","toolbarItem","index","alignment","item","restItemProps","ToolbarItem","AllAccountsPrincipal","t","useTranslation","InfoCircleIcon","color","PrincipalWithTooltip","acl","locatedPrincipals","usePrincipals","getAllPrincipals","p","principalDisplay","principalType","PrincipalType","Tooltip","content","displayName","emailAddress","principalCell","principal","title","permissionCell","permission","AclPermissionType","Label","permissionDisplay","operationCell","operationColor","operationDisplay","resourceCell","resourceTypeDisplay","patternType","AclPatternType","resourceName","PermissionsToolbarKebab","deleteSelectedEnabled","onDeleteSelected","useState","isOpen","setIsOpen","onFocus","element","document","getElementById","focus","dropdownItems","DropdownItem","isDisabled","Dropdown","onSelect","prevState","toggle","KebabToggle","onToggle","v","isPlain","PermissionsToolbar","total","page","perPage","setFilteredValue","openManagePermissions","deletedSelectedEnabled","Button","MASPagination","widgetId","itemCount","titles","paginationTitle","perPageSuffix","toFirstPage","toPreviousPage","toLastPage","toNextPage","optionsToggle","currPage","isCompact","default","xl","breakpoint","PermissionsTableEmptyState","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","buttonProps","PermissionsTable","permissionsService","kafkaName","topicNames","consumerGroupIds","filteredValue","showModal","aclPage","setAclPage","fetchPermissions","getPermissions","items","found","hash","selected","every","size","useEffect","selectedAccountId","acls","onSave","some","deletePermission","AclPatternTypeFilter","permissionType","AclPermissionTypeFilter","resourceType","AclResourceTypeFilter","operation","AclOperationFilter","f","TableVariant","isSelected","_","onDelete","canSelectAll","PaginationVariant","config","setTopicNames","setConsumerGroupNames","response","topic","name","consumerGroupNames","consumerGroup","groupId","Topics","lazy","ConsumerGroups","MainView","kafkaPageLink","handleInstanceDrawer","setIsOpenDeleteInstanceModal","showMetrics","activeTab","principals","activeTabKey","setActiveTabKey","contentRefConsumerGroups","contentRefTopics","contentRefDashboard","contentRefPermissions","onSelectKebabOption","mainBreadcrumbs","Breadcrumb","BreadcrumbItem","to","isActive","PageSection","PageSectionVariants","Level","Title","headingLevel","position","DropdownPosition","fallback","MASLoading","padding","Tabs","activeKey","_event","Tab","TabTitleText","eventKey","tabContentRef","tabContentId","isFilled","TabContent","consumerGroupByTopic","convertEnum","Object","entries","find","toString","createPermissionsService","Promise","getToken","accessToken","AclsApi","Configuration","basePath","getAcls","enhanceAclBindingListPage","addPermission","createAcl","deleteAcls","getResourceOperations","getAclResourceOperations","then","data","AclResourceType","sentenceCase","substring","sort","a","b","localeCompare","getPermissionsTypes","values","getOperations","AclOperation","getResourceTypes","getPatternTypes"],"sourceRoot":""}