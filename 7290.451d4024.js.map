{"version":3,"file":"7290.451d4024.js","mappings":"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","sources":["webpack://kafka-ui/./src/modules/Topics/dialogs/DeleteTopic/DeleteTopic.tsx","webpack://kafka-ui/./src/services/topics.ts","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n  Text,\n  TextInput,\n  TextInputProps,\n} from '@patternfly/react-core';\nimport { deleteTopic } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { isAxiosError } from '@app/utils/axios';\nimport {\n  BaseModalProps,\n  DeleteTopicProps,\n  useAlert,\n} from '@rhoas/app-services-ui-shared';\n\nconst DeleteTopic: React.FC<DeleteTopicProps & BaseModalProps> = ({\n  topicName,\n  onDeleteTopic,\n  refreshTopics,\n  hideModal,\n}) => {\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation(['kafkaTemporaryFixMe']);\n  const [verificationText, setVerificationText] = useState<string>('');\n  const { addAlert } = useAlert() || {\n    addAlert: () => {\n      // No-op\n    },\n  };\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onDelete = async () => {\n    try {\n      if (topicName) {\n        setIsLoading(true);\n        await deleteTopic(topicName, config).then(() => {\n          addAlert({\n            title: t('topic.topic_successfully_deleted', { name: topicName }),\n            variant: AlertVariant.success,\n          });\n          onDeleteTopic && onDeleteTopic();\n          refreshTopics && refreshTopics();\n        });\n      }\n    } catch (err) {\n      setIsLoading(false);\n      let message: string | undefined;\n      if (err && isAxiosError(err)) {\n        message = err.response?.data.error_message;\n      }\n      addAlert({\n        title: message || '',\n        variant: AlertVariant.danger,\n      });\n    }\n    onClose();\n  };\n\n  const handleVerificationTextChange: TextInputProps['onChange'] = (value) => {\n    setVerificationText(value);\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      isOpen={true}\n      aria-label={t('topic.delete_modal_title')}\n      title={t('topic.delete_modal_title')}\n      titleIconVariant='warning'\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={onClose}\n      actions={[\n        <Button\n          variant='danger'\n          onClick={onDelete}\n          key={1}\n          data-testid='modalDeleteTopic-buttonDelete'\n          isDisabled={verificationText.toUpperCase() != 'DELETE'}\n          isLoading={isLoading}\n        >\n          {t('common.delete')}\n        </Button>,\n        <Button variant='link' onClick={onClose} key={2}>\n          {t('common.cancel')}\n        </Button>,\n      ]}\n    >\n      <Text id='modal-message'>\n        {' '}\n        <label\n          htmlFor='instance-name-input'\n          dangerouslySetInnerHTML={{\n            __html: t('common.confirm_delete_modal_text', { name: topicName }),\n          }}\n        />\n      </Text>\n\n      <br />\n      <label htmlFor='delete-text-input'>{t('common.confirm_delete')}</label>\n      <TextInput\n        value={verificationText}\n        id='delete-text-input'\n        name='delete-text-input'\n        type='text'\n        onChange={handleVerificationTextChange}\n        autoFocus={true}\n      />\n    </Modal>\n  );\n};\n\nexport default DeleteTopic;\n","import { AxiosResponse } from 'axios';\nimport {\n  ConfigEntry,\n  TopicsApi,\n  Topic,\n  TopicSettings,\n  TopicsList,\n  TopicOrderKey,\n  SortDirection,\n} from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { IAdvancedTopic } from '@app/modules/Topics/utils';\nimport { KafkaTopic } from '@rhoas/app-services-ui-components/types/src/Kafka/KafkaTopics/types';\n\nexport enum OrderKey {\n  name = 'name',\n  partitions = 'partitions',\n  retentionMs = 'retention.ms',\n  retentionSize = 'retention.bytes',\n}\n\nexport const getTopics = async (\n  config: IConfiguration | undefined,\n  page?: number,\n  perPage?: number,\n  sort?: KafkaTopicsSortableColumn,\n  direction?: SortDirection,\n  filter?: string\n): Promise<{ topics: KafkaTopic[]; count: number }> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<TopicsList> = await api.getTopics(\n    undefined,\n    undefined,\n    perPage,\n    filter,\n    page,\n    direction,\n    sort\n  );\n  const topics = (response.data.items || []).map((t: Topic) => ({\n    topic_name: t.name!,\n    partitions: t.partitions?.length || 0,\n    retention_size:\n      t.config?.find(({ key }) => key === 'retention.bytes')?.value || '',\n    retention_time:\n      t.config?.find(({ key }) => key === 'retention.ms')?.value || '',\n  }));\n  const count = response.data.total;\n  return { count, topics };\n};\n\nexport const getTopicDetail = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<IAdvancedTopic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const { data } = await api.getTopic(topicName);\n\n  return convertTopicResponse(data);\n};\n\nconst convertTopicResponse = (topic: Topic): IAdvancedTopic => {\n  const topicObj: IAdvancedTopic = { name: '', numPartitions: '0' };\n  if (topic && topic.name) topicObj.name = topic.name;\n\n  topic.config?.forEach((config) => {\n    if (config.key && config.value) {\n      const key = config.key as keyof IAdvancedTopic;\n      topicObj[key] = config.value;\n    }\n  });\n\n  topicObj.numPartitions = topic?.partitions?.length.toString() || '0';\n\n  topicObj.replicationFactor =\n    (topic?.partitions && topic?.partitions[0].replicas?.length.toString()) ||\n    '0';\n\n  return topicObj;\n};\n\nexport const updateTopicModel = async (\n  topicName: string,\n  topicSettings: TopicSettings,\n  config: IConfiguration | undefined\n): Promise<number> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<Topic> = await api.updateTopic(\n    topicName,\n    topicSettings\n  );\n  return response.status;\n};\n\nexport const getTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<Topic> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response = await api.getTopic(topicName);\n\n  const replicationFactor = (response.data.partitions || [])\n    .map((p) => p.replicas?.length || 0)\n    .reduce(\n      (previousValue = 0, currentValue = 0) => previousValue + currentValue\n    )\n    .toString();\n\n  const answer = response.data;\n  answer.config = answer.config || ([] as ConfigEntry[]);\n  answer.config.push({\n    key: 'replicationFactor',\n    value: replicationFactor,\n  });\n  return response.data;\n};\n\nexport const deleteTopic = async (\n  topicName: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteTopic(topicName);\n  return;\n};\n\nexport const KafkaTopicsSortableColumns = [\n  ...Object.values(TopicOrderKey),\n] as const;\n\nexport type KafkaTopicsSortableColumn =\n  (typeof KafkaTopicsSortableColumns)[number];\n","import { AxiosError } from 'axios';\n\nexport type ErrorData = {\n  code: number;\n  error_message: string;\n};\n\nexport const isAxiosError = (\n  error: unknown\n): error is AxiosError<ErrorData> => {\n  return (error as AxiosError<ErrorData>) !== undefined;\n};\n"],"names":["topicName","onDeleteTopic","refreshTopics","hideModal","config","useContext","t","useTranslation","verificationText","setVerificationText","useState","addAlert","useAlert","isLoading","setIsLoading","onClose","Modal","variant","ModalVariant","isOpen","title","titleIconVariant","showClose","actions","Button","onClick","then","name","AlertVariant","err","message","response","data","error_message","isDisabled","toUpperCase","Text","id","htmlFor","dangerouslySetInnerHTML","__html","TextInput","value","type","onChange","autoFocus","OrderKey","getTopics","page","perPage","sort","direction","filter","accessToken","getToken","api","TopicsApi","Configuration","basePath","undefined","topics","items","map","topic_name","partitions","length","retention_size","find","key","retention_time","count","total","getTopicDetail","getTopic","convertTopicResponse","topic","topicObj","numPartitions","forEach","toString","replicationFactor","replicas","updateTopicModel","topicSettings","updateTopic","status","p","reduce","previousValue","currentValue","answer","push","deleteTopic","KafkaTopicsSortableColumns","Object","values","TopicOrderKey","isAxiosError","error"],"sourceRoot":""}