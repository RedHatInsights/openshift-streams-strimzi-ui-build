{"version":3,"file":"673.c93f6eb7.bundle.js","mappings":"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","sources":["webpack://kafka-ui/./src/components/MASDrawer/MASDrawer.tsx","webpack://kafka-ui/./src/modules/ConsumerGroups/ConsumerGroups.tsx","webpack://kafka-ui/./src/modules/Topics/components/TopicDetailHead/TopicDetailHead.tsx","webpack://kafka-ui/./src/modules/Topics/components/UpdateTopicView/UpdateTopicView.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicPage.tsx","webpack://kafka-ui/./src/modules/Topics/pages/UpdateTopic/UpdateTopicFederated.tsx","webpack://kafka-ui/./src/services/consumer-groups.ts","webpack://kafka-ui/./src/utils/axios.ts"],"sourcesContent":["import React from 'react';\nimport {\n  Drawer,\n  DrawerProps,\n  DrawerContent,\n  DrawerPanelContent,\n  DrawerHead,\n  DrawerPanelBody,\n  DrawerActions,\n  DrawerCloseButton,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  TitleSizes,\n  DrawerPanelContentProps,\n  TextProps,\n  TitleProps,\n  DrawerContentBody,\n} from '@patternfly/react-core';\nimport { MASLoading } from '@app/components';\nimport './MASDrawer.css';\n\nexport type MASDrawerProps = DrawerProps & {\n  children: React.ReactNode;\n  panelBodyContent?: React.ReactNode;\n  onClose: () => void;\n  drawerData?: any;\n  isLoading?: boolean;\n  drawerPanelContentProps?: Omit<DrawerPanelContentProps, 'children'>;\n  drawerHeaderProps?: {\n    text?: Omit<TextProps, 'children' | 'ref'> & {\n      label: string | undefined;\n    };\n    title?: Omit<TitleProps, 'children'> & {\n      value: string | undefined;\n    };\n  };\n  ['data-ouia-app-id']?: string;\n  notRequiredDrawerContentBackground?: boolean | undefined;\n  inlineAlertMessage?: React.ReactNode;\n};\n\nexport const MASDrawer: React.FC<MASDrawerProps> = ({\n  onClose,\n  isLoading = false,\n  drawerPanelContentProps,\n  drawerHeaderProps,\n  isExpanded,\n  children,\n  panelBodyContent,\n  onExpand,\n  notRequiredDrawerContentBackground,\n  'data-ouia-app-id': dataOuiaAppId,\n  inlineAlertMessage,\n}: MASDrawerProps) => {\n  const { widths, ...restDrawerPanelContentProps } =\n    drawerPanelContentProps || {};\n  const { text, title } = drawerHeaderProps || {};\n\n  const panelContent = (\n    <DrawerPanelContent\n      widths={widths || { default: 'width_50' }}\n      {...restDrawerPanelContentProps}\n    >\n      {isLoading ? (\n        <MASLoading />\n      ) : (\n        <>\n          <DrawerHead>\n            <TextContent>\n              {text?.label && (\n                <Text\n                  component={text?.component || TextVariants.small}\n                  className={\n                    text?.className || 'kafka-ui-mas-drawer__top-label'\n                  }\n                >\n                  {text?.label}\n                </Text>\n              )}\n              {title?.value && (\n                <Title\n                  headingLevel={title?.headingLevel || 'h2'}\n                  size={title?.size || TitleSizes['xl']}\n                  className={title?.className || 'kafka-ui-mas-drawer__title'}\n                >\n                  {title?.value}\n                </Title>\n              )}\n            </TextContent>\n            <DrawerActions>\n              <DrawerCloseButton onClick={onClose} />\n            </DrawerActions>\n          </DrawerHead>\n          <DrawerPanelBody>\n            {inlineAlertMessage}\n            {panelBodyContent}\n          </DrawerPanelBody>\n        </>\n      )}\n    </DrawerPanelContent>\n  );\n\n  return (\n    <Drawer\n      isExpanded={isExpanded}\n      onExpand={onExpand}\n      data-ouia-app-id={dataOuiaAppId}\n    >\n      <DrawerContent\n        panelContent={panelContent}\n        className={\n          notRequiredDrawerContentBackground ? 'pf-m-no-background' : ''\n        }\n      >\n        <DrawerContentBody className='kafka-ui-mas-drawer__drawer-content-body'>\n          {children}\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React, { useContext, useState, useEffect, lazy, Suspense } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useLocation } from 'react-router-dom';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport {\n  EmptyState,\n  MASEmptyStateVariant,\n  MASLoading,\n  MASDrawer,\n} from '@app/components';\nimport { getConsumerGroups } from '@app/services';\nimport { ConfigContext } from '@app/contexts';\nimport { ConsumerGroupList, ConsumerGroup } from '@rhoas/kafka-instance-sdk';\nimport { useTimeout } from '@app/hooks/useTimeOut';\nimport { ISortBy, OnSort, SortByDirection } from '@patternfly/react-table';\n\nconst ConsumerGroupDetail = lazy(\n  () => import('./components/ConsumerGroupDetail/ConsumerGroupDetail')\n);\nconst ConsumerGroupsTable = lazy(\n  () => import('./components/ConsumerGroupsTable/ConsumerGroupsTable')\n);\n\nexport type ConsumerGroupsProps = {\n  consumerGroupByTopic: boolean;\n  topic?: string;\n  rowDataTestId?: string;\n};\n\nconst ConsumerGroups: React.FunctionComponent<ConsumerGroupsProps> = ({\n  consumerGroupByTopic,\n  topic,\n  rowDataTestId,\n}) => {\n  const [offset, setOffset] = useState<number>(0);\n  const [order, setOrder] = useState<SortByDirection>();\n  const [orderKey, setOrderKey] = useState<'name' | undefined>();\n  const [sortBy, setSortBy] = useState<ISortBy>({\n    index: undefined,\n    direction: 'asc',\n  });\n  const [consumerGroups, setConsumerGroups] = useState<ConsumerGroupList>();\n  const [isExpanded, setIsExpanded] = useState<boolean>(false);\n  const [search, setSearch] = useState<string>('');\n  const [consumerGroupDetail, setConsumerGroupDetail] =\n    useState<ConsumerGroup>();\n  const config = useContext(ConfigContext);\n  const { t } = useTranslation();\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = parseInt(searchParams.get('page') || '', 10) || 1;\n  const perPage = parseInt(searchParams.get('perPage') || '', 10) || 10;\n\n  useEffect(() => {\n    setOffset(perPage * (page - 1));\n  }, [page, perPage]);\n\n  const onSort: OnSort = (_event, index, direction) => {\n    setOrder(direction);\n    setOrderKey('name');\n    setSortBy({ index, direction });\n  };\n\n  const fetchConsumerGroups = async () => {\n    const limit = 100;\n    try {\n      await getConsumerGroups(\n        config,\n        offset,\n        limit,\n        perPage,\n        page,\n        topic,\n        search,\n        order,\n        orderKey\n      ).then((response) => {\n        setConsumerGroups(response);\n      });\n    } catch (err) {\n      //addAlert(err.response.data.error_message, AlertVariant.danger);\n    }\n  };\n\n  useEffect(() => {\n    fetchConsumerGroups();\n  }, [search, order]);\n\n  useTimeout(() => fetchConsumerGroups(), 5000);\n\n  const panelBodyContent = (\n    <ConsumerGroupDetail\n      consumerDetail={consumerGroupDetail}\n      consumerGroupByTopic={consumerGroupByTopic}\n    />\n  );\n\n  const onClose = () => {\n    setIsExpanded(false);\n  };\n\n  const onViewConsumerGroup = (consumerGroup) => {\n    setIsExpanded(true);\n    setConsumerGroupDetail(consumerGroup);\n  };\n\n  const renderConsumerTable = () => {\n    if (consumerGroups === undefined) {\n      return (\n        <PageSection\n          className='kafka-ui-m-full-height'\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    } else if (\n      (!consumerGroups?.items?.length || consumerGroups?.items?.length < 1) &&\n      search.length < 1\n    ) {\n      return (\n        <EmptyState\n          emptyStateProps={{\n            variant: MASEmptyStateVariant.NoConsumerGroups,\n          }}\n          titleProps={{\n            title: t('consumerGroup.empty_consumer_title'),\n          }}\n          emptyStateBodyProps={{\n            body: t('consumerGroup.empty_consumer_body'),\n          }}\n        />\n      );\n    } else if (consumerGroups) {\n      return (\n        <ConsumerGroupsTable\n          consumerGroups={consumerGroups?.items?.slice(\n            offset,\n            offset + perPage\n          )}\n          total={consumerGroups?.items?.length || 0}\n          page={page}\n          perPage={perPage}\n          search={search}\n          setSearch={setSearch}\n          rowDataTestId={rowDataTestId}\n          onViewConsumerGroup={onViewConsumerGroup}\n          isDrawerOpen={isExpanded}\n          refreshConsumerGroups={fetchConsumerGroups}\n          consumerGroupByTopic={consumerGroupByTopic}\n          onSort={onSort}\n          sortBy={sortBy}\n        />\n      );\n    }\n    return <></>;\n  };\n\n  return (\n    <Suspense fallback={<MASLoading />}>\n      <MASDrawer\n        isExpanded={isExpanded}\n        onClose={onClose}\n        panelBodyContent={panelBodyContent}\n        drawerHeaderProps={{\n          text: { label: t('consumerGroup.consumer_group_id') },\n          title: { value: consumerGroupDetail?.groupId, headingLevel: 'h1' },\n        }}\n        data-ouia-app-id='dataPlane-consumerGroupDetails'\n      >\n        {renderConsumerTable()}\n      </MASDrawer>\n    </Suspense>\n  );\n};\n\nexport { ConsumerGroups };\nexport default ConsumerGroups;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  TextContent,\n  Text,\n  TextVariants,\n  PageSection,\n  PageSectionVariants,\n} from '@patternfly/react-core';\nimport '../TopicDetailView/TopicDetailView.css';\n\nexport type TopicDetailHeadProps = {\n  topicName: string;\n  kafkaName?: string;\n  kafkaInstanceLink?: string;\n  kafkaPageLink?: string;\n};\n\nexport const TopicDetailHead: React.FC<TopicDetailHeadProps> = ({\n  topicName,\n  kafkaName,\n  kafkaInstanceLink,\n  kafkaPageLink,\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <section className='pf-c-page__main-breadcrumb'>\n        <Breadcrumb>\n          <BreadcrumbItem to={kafkaPageLink || '#'}>\n            {t('common.kafka_instance')}\n          </BreadcrumbItem>\n          <BreadcrumbItem to={kafkaInstanceLink || '#'}>\n            {kafkaName ? kafkaName : t('common.kafka_instance_name')}\n          </BreadcrumbItem>\n          <BreadcrumbItem>{topicName}</BreadcrumbItem>\n        </Breadcrumb>\n      </section>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component={TextVariants.h1}>{topicName}</Text>\n        </TextContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertVariant } from '@patternfly/react-core';\nimport {\n  TopicAdvanceConfig,\n  IAdvancedTopic,\n} from '@app/modules/Topics/components';\nimport { getTopic, updateTopicModel } from '@app/services';\nimport { ConfigEntry, TopicSettings } from '@rhoas/kafka-instance-sdk';\nimport { ConfigContext } from '@app/contexts';\nimport { convertUnits } from '@app/modules/Topics/utils';\nimport { isAxiosError } from '@app/utils/axios';\nimport { useAlert } from '@bf2/ui-shared';\nimport '../CreateTopicWizard/CreateTopicWizard.css';\n\nexport type UpdateTopicViewProps = {\n  topicName: string;\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n  onError?: (errorCode: number, message: string) => void;\n};\nexport const UpdateTopicView: React.FunctionComponent<UpdateTopicViewProps> = ({\n  topicName,\n  onCancelUpdateTopic,\n  onSaveTopic,\n  onError,\n}) => {\n  const { t } = useTranslation();\n  const config = useContext(ConfigContext);\n  const { addAlert } = useAlert();\n  const initialState = {\n    name: topicName,\n    numPartitions: '',\n    'retention.ms': '',\n    'retention.ms.unit': 'milliseconds',\n    'retention.bytes': '',\n    'retention.bytes.unit': 'bytes',\n    'cleanup.policy': '',\n  };\n  const [topicData, setTopicData] = useState<IAdvancedTopic>(initialState);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const fetchTopic = async (topicName) => {\n    try {\n      const topicRes = await getTopic(topicName, config);\n      const configEntries: any = {};\n      topicRes.config?.forEach((configItem) => {\n        configEntries[configItem.key || ''] = configItem.value || '';\n      });\n\n      setTopicData({\n        ...topicData,\n        numPartitions: topicRes?.partitions?.length.toString() || '',\n        'cleanup.policy': configEntries['cleanup.policy'] || 'delete',\n        'retention.bytes': configEntries['retention.bytes'] || '-1',\n        'retention.ms': configEntries['retention.ms'] || '604800000',\n      });\n    } catch (err) {\n      if (isAxiosError(err)) {\n        if (onError) {\n          onError(err.response?.data.code, err.response?.data.error_message);\n        }\n        if (err.response?.status === 404) {\n          // then it's a non-existent topic\n          addAlert({\n            variant: AlertVariant.danger,\n            title: `Topic ${topicName} does not exist`,\n          });\n          onCancelUpdateTopic();\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    fetchTopic(topicName);\n  }, [topicName]);\n\n  const saveTopic = async () => {\n    const { name, ...configEntries } = convertUnits(topicData);\n    const newConfig: ConfigEntry[] = [];\n    setIsLoading(true);\n\n    for (const key in configEntries) {\n      // TODO Remove check when API supports setting the number of partition\n      if (key && key !== 'numPartitions') {\n        newConfig.push({\n          key,\n          value: configEntries[key].toString().toLowerCase(),\n        });\n      }\n    }\n\n    const topicSettings: TopicSettings = {\n      // TODO Re-enable when the API supports setting the number of partition\n      numPartitions: Number(topicData.numPartitions),\n      config: newConfig,\n    };\n\n    try {\n      await updateTopicModel(name, topicSettings, config).then(() => {\n        addAlert({\n          title: t('topic.topic_successfully_updated'),\n          variant: AlertVariant.success,\n        });\n        setIsLoading(false);\n        onSaveTopic();\n      });\n    } catch (err) {\n      if (onError) {\n        onError(err.response.data.code, err.response.data.error_message);\n      }\n      setIsLoading(false);\n      addAlert({\n        title: err.response.data.error_message,\n        variant: AlertVariant.danger,\n      });\n    }\n  };\n\n  return (\n    <>\n      <TopicAdvanceConfig\n        isCreate={false}\n        saveTopic={saveTopic}\n        handleCancel={onCancelUpdateTopic}\n        topicData={topicData}\n        setTopicData={setTopicData}\n        isLoadingSave={isLoading}\n      />\n      <br />\n      <br />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Tabs,\n  Tab,\n  TabTitleText,\n  PageSection,\n  PageSectionVariants,\n  TabContent,\n} from '@patternfly/react-core';\nimport { ConsumerGroups } from '@app/modules/ConsumerGroups';\nimport {\n  UpdateTopicView,\n  TopicDetailHead,\n} from '@app/modules/Topics/components';\nimport { useFederated } from '@app/contexts';\nimport '../style.css';\n\nexport type UpdateTopicPageProps = {\n  onCancelUpdateTopic: () => void;\n  onDeleteTopic: () => void;\n  onSaveTopic: () => void;\n};\n\nexport const UpdateTopicPage: React.FunctionComponent<UpdateTopicPageProps> = ({\n  onCancelUpdateTopic,\n  onDeleteTopic,\n  onSaveTopic,\n}) => {\n  const { t } = useTranslation();\n  const {\n    topicName = '',\n    kafkaName,\n    kafkaPageLink,\n    kafkaInstanceLink,\n    onError,\n    activeTab = 0,\n  } = useFederated();\n  const [activeTabKey, setActiveTabKey] = useState(activeTab);\n\n  const contentRefConsumerGroup = React.createRef<HTMLElement>();\n  const contentRefProperties = React.createRef<HTMLElement>();\n\n  const handleTabClick = (event, tabIndex) => {\n    setActiveTabKey(tabIndex);\n  };\n\n  return (\n    <>\n      <TopicDetailHead\n        topicName={topicName}\n        kafkaName={kafkaName}\n        kafkaPageLink={kafkaPageLink}\n        kafkaInstanceLink={kafkaInstanceLink}\n      />\n      <PageSection\n        variant={PageSectionVariants.light}\n        className='pf-c-page__main-tabs'\n        padding={{ default: 'noPadding' }}\n      >\n        <Tabs\n          onSelect={handleTabClick}\n          activeKey={activeTabKey}\n          isBox={false}\n          className='pf-m-page-insets'\n        >\n          <Tab\n            eventKey={0}\n            title={\n              <TabTitleText>{t('consumerGroup.consumer_groups')}</TabTitleText>\n            }\n            tabContentId='kafka-ui-TabcontentConsumerGroups'\n            tabContentRef={contentRefConsumerGroup}\n          ></Tab>\n          <Tab\n            eventKey={1}\n            title={<TabTitleText>{t('common.properties')}</TabTitleText>}\n            tabContentId='kafka-ui-TabcontentProperties'\n            tabContentRef={contentRefProperties}\n          ></Tab>\n        </Tabs>\n      </PageSection>\n      <PageSection\n        variant={\n          activeTabKey === 1\n            ? PageSectionVariants.light\n            : PageSectionVariants.default\n        }\n      >\n        <TabContent\n          eventKey={0}\n          id='kafka-ui-TabcontentConsumerGroups'\n          ref={contentRefConsumerGroup}\n          className='kafka-ui-m-full-height'\n          aria-label='Consumer groups.'\n          hidden={activeTab !== 0 ? true : false}\n        >\n          <ConsumerGroups topic={topicName} consumerGroupByTopic={true} />\n        </TabContent>\n        <TabContent\n          eventKey={1}\n          id='kafka-ui-TabcontentProperties'\n          ref={contentRefProperties}\n          className='kafka-ui-m-full-height'\n          aria-label='Topic properties'\n          hidden={activeTab !== 1 ? true : false}\n        >\n          <UpdateTopicView\n            topicName={topicName}\n            onCancelUpdateTopic={onCancelUpdateTopic}\n            onDeleteTopic={onDeleteTopic}\n            onSaveTopic={onSaveTopic}\n            onError={onError}\n          />\n        </TabContent>\n      </PageSection>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { BrowserRouter } from 'react-router-dom';\nimport { UpdateTopicPage } from '@app/modules/Topics/pages/UpdateTopic';\nimport {\n  FederatedContext,\n  FederatedProps,\n  ConfigContext,\n  IConfiguration,\n} from '@app/contexts';\nimport kafkai18n from '@app/i18n';\nimport { KafkaActions } from '@app/utils';\nimport { ModalProvider } from '@app/components/KafkaModal';\n\nexport type UpdateTopicFederatedProps = FederatedProps &\n  IConfiguration & {\n    apiBasePath: string;\n  };\n\nconst UpdateTopicFederated: FunctionComponent<UpdateTopicFederatedProps> = ({\n  getToken,\n  apiBasePath,\n  topicName,\n  kafkaName,\n  kafkaPageLink,\n  kafkaInstanceLink,\n  onError,\n  dispatchKafkaAction,\n  onConnectToRoute,\n}) => {\n  const onCancelUpdateTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.DetailsTopic);\n  };\n\n  const onDeleteTopic = () => {\n    onConnectToRoute && onConnectToRoute('');\n  };\n\n  const onSaveTopic = () => {\n    dispatchKafkaAction && dispatchKafkaAction(KafkaActions.DetailsTopic);\n  };\n\n  return (\n    <BrowserRouter>\n      <I18nextProvider i18n={kafkai18n}>\n        <ConfigContext.Provider value={{ basePath: apiBasePath, getToken }}>\n          <FederatedContext.Provider\n            value={{\n              activeTab: 1,\n              topicName,\n              kafkaName,\n              kafkaPageLink,\n              kafkaInstanceLink,\n              onError,\n            }}\n          >\n            <ModalProvider>\n              <UpdateTopicPage\n                onCancelUpdateTopic={onCancelUpdateTopic}\n                onDeleteTopic={onDeleteTopic}\n                onSaveTopic={onSaveTopic}\n              />\n            </ModalProvider>\n          </FederatedContext.Provider>\n        </ConfigContext.Provider>\n      </I18nextProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default UpdateTopicFederated;\n","import { AxiosResponse } from 'axios';\nimport {\n  Configuration,\n  GroupsApi,\n  ConsumerGroupList,\n  ConsumerGroup,\n} from '@rhoas/kafka-instance-sdk';\nimport { IConfiguration } from '@app/contexts';\nimport { SortByDirection } from '@patternfly/react-table';\n\nconst getConsumerGroups = async (\n  config: IConfiguration | undefined,\n  offset?: number,\n  limit?: number,\n  size?: number,\n  page?: number,\n  topic?: string,\n  groupIdFilter?: string,\n  order: SortByDirection = SortByDirection.asc,\n  orderKey?: 'name' | undefined\n): Promise<ConsumerGroupList> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroupList> =\n    await api.getConsumerGroups(\n      offset,\n      limit,\n      size,\n      page,\n      topic,\n      groupIdFilter,\n      order,\n      orderKey\n    );\n  return response.data;\n};\n\nconst deleteConsumerGroup = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<void> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  await api.deleteConsumerGroupById(consumerGroupId);\n  return;\n};\n\nconst getConsumerGroupDetail = async (\n  consumerGroupId: string,\n  config: IConfiguration | undefined\n): Promise<ConsumerGroup> => {\n  const accessToken = await config?.getToken();\n\n  const api = new GroupsApi(\n    new Configuration({\n      accessToken,\n      basePath: config?.basePath,\n    })\n  );\n  const response: AxiosResponse<ConsumerGroup> = await api.getConsumerGroupById(\n    consumerGroupId\n  );\n  return response.data;\n};\n\nexport { getConsumerGroups, deleteConsumerGroup, getConsumerGroupDetail };\n","import { AxiosError } from 'axios';\n\nexport const isAxiosError = (error: Error): error is AxiosError => {\n  return (error as AxiosError) !== undefined;\n};\n"],"names":["MASDrawer","onClose","isLoading","drawerPanelContentProps","drawerHeaderProps","isExpanded","children","panelBodyContent","onExpand","notRequiredDrawerContentBackground","dataOuiaAppId","inlineAlertMessage","widths","restDrawerPanelContentProps","text","title","panelContent","DrawerPanelContent","default","MASLoading","DrawerHead","TextContent","label","Text","component","TextVariants","className","value","Title","headingLevel","size","TitleSizes","DrawerActions","DrawerCloseButton","onClick","DrawerPanelBody","Drawer","DrawerContent","DrawerContentBody","ConsumerGroupDetail","lazy","ConsumerGroupsTable","ConsumerGroups","consumerGroupByTopic","topic","rowDataTestId","useState","offset","setOffset","order","setOrder","orderKey","setOrderKey","index","undefined","direction","sortBy","setSortBy","consumerGroups","setConsumerGroups","setIsExpanded","search","setSearch","consumerGroupDetail","setConsumerGroupDetail","config","useContext","t","useTranslation","location","useLocation","searchParams","URLSearchParams","page","parseInt","get","perPage","useEffect","onSort","_event","fetchConsumerGroups","limit","then","response","consumerDetail","onViewConsumerGroup","consumerGroup","Suspense","fallback","groupId","PageSection","variant","PageSectionVariants","padding","items","length","EmptyState","emptyStateProps","titleProps","emptyStateBodyProps","body","slice","total","isDrawerOpen","refreshConsumerGroups","renderConsumerTable","TopicDetailHead","topicName","kafkaName","kafkaInstanceLink","kafkaPageLink","Breadcrumb","BreadcrumbItem","to","UpdateTopicView","onCancelUpdateTopic","onSaveTopic","onError","addAlert","useAlert","initialState","name","numPartitions","topicData","setTopicData","setIsLoading","topicRes","forEach","configItem","key","partitions","toString","data","code","error_message","status","AlertVariant","fetchTopic","TopicAdvanceConfig","isCreate","saveTopic","configEntries","newConfig","push","toLowerCase","topicSettings","Number","handleCancel","isLoadingSave","UpdateTopicPage","onDeleteTopic","activeTab","activeTabKey","setActiveTabKey","contentRefConsumerGroup","contentRefProperties","Tabs","onSelect","event","tabIndex","activeKey","isBox","Tab","eventKey","TabTitleText","tabContentId","tabContentRef","TabContent","id","ref","hidden","getToken","apiBasePath","dispatchKafkaAction","onConnectToRoute","BrowserRouter","I18nextProvider","i18n","basePath","getConsumerGroups","groupIdFilter","SortByDirection","accessToken","GroupsApi","Configuration","deleteConsumerGroup","consumerGroupId","deleteConsumerGroupById","isAxiosError","error"],"sourceRoot":""}